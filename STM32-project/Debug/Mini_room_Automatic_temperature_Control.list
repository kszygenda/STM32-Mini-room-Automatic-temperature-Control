
Mini_room_Automatic_temperature_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800cc38  0800cc38  0001cc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d15c  0800d15c  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800d15c  0800d15c  0001d15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d164  0800d164  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d164  0800d164  0001d164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d168  0800d168  0001d168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800d16c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000228  0800d394  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800d394  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d6a  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003661  00000000  00000000  0003707e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  0003a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8c  00000000  00000000  0003b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299e2  00000000  00000000  0003c85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191d4  00000000  00000000  0006623e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9ea7  00000000  00000000  0007f412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006254  00000000  00000000  001792bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0017f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0017f59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cc20 	.word	0x0800cc20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800cc20 	.word	0x0800cc20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <software_delay>:
#include <stdint.h>
#include <ctype.h>
//#include "bmp280_defs.h"
//#include "bmp280.h"
static void software_delay(uint32_t tick)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint32_t delay;
	while(tick-->0)
 8001038:	e00c      	b.n	8001054 <software_delay+0x24>
	{
		for(delay=5; delay>0; delay--){
 800103a:	2305      	movs	r3, #5
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e006      	b.n	800104e <software_delay+0x1e>
			asm("nop");
 8001040:	bf00      	nop
			asm("nop");
 8001042:	bf00      	nop
			asm("nop");
 8001044:	bf00      	nop
			asm("nop");
 8001046:	bf00      	nop
		for(delay=5; delay>0; delay--){
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f5      	bne.n	8001040 <software_delay+0x10>
	while(tick-->0)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1ed      	bne.n	800103a <software_delay+0xa>
		}
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LCD_init>:

void LCD_init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
	software_delay(1000000);
 8001072:	4849      	ldr	r0, [pc, #292]	; (8001198 <LCD_init+0x12c>)
 8001074:	f7ff ffdc 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f89d 	bl	80011bc <LCD_send_4bits>
 8001082:	4845      	ldr	r0, [pc, #276]	; (8001198 <LCD_init+0x12c>)
 8001084:	f7ff ffd4 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f895 	bl	80011bc <LCD_send_4bits>
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <LCD_init+0x12c>)
 8001094:	f7ff ffcc 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(400000);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f88d 	bl	80011bc <LCD_send_4bits>
 80010a2:	483e      	ldr	r0, [pc, #248]	; (800119c <LCD_init+0x130>)
 80010a4:	f7ff ffc4 	bl	8001030 <software_delay>
	//Set 4-bit
	LCD_send_4bits(0x02,0,0);	software_delay(400000);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 f885 	bl	80011bc <LCD_send_4bits>
 80010b2:	483a      	ldr	r0, [pc, #232]	; (800119c <LCD_init+0x130>)
 80010b4:	f7ff ffbc 	bl	8001030 <software_delay>

	//Function SET
	LCD_write_command(LCD_FUNCTION_INSTRUCTION | LCD_FUNCTION_DL_4BIT | LCD_FUNCTION_LINE_NUMBER_2 | LCD_FUNCTION_FONT_5x8); software_delay(50000);
 80010b8:	2028      	movs	r0, #40	; 0x28
 80010ba:	f000 f914 	bl	80012e6 <LCD_write_command>
 80010be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010c2:	f7ff ffb5 	bl	8001030 <software_delay>
	//Display on
	LCD_write_command(LCD_DISPLAY_INSTRUCTION | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR_OFF | LCD_DISPLAY_BLINK_OFF);software_delay(100000);
 80010c6:	200c      	movs	r0, #12
 80010c8:	f000 f90d 	bl	80012e6 <LCD_write_command>
 80010cc:	4834      	ldr	r0, [pc, #208]	; (80011a0 <LCD_init+0x134>)
 80010ce:	f7ff ffaf 	bl	8001030 <software_delay>
	//Display clear
	LCD_write_command(LCD_CLEAR_INSTRUCTION);software_delay(100000);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 f907 	bl	80012e6 <LCD_write_command>
 80010d8:	4831      	ldr	r0, [pc, #196]	; (80011a0 <LCD_init+0x134>)
 80010da:	f7ff ffa9 	bl	8001030 <software_delay>

	//Entry mode
	LCD_write_command(LCD_ENTRY_MODE_INSTRUCTION | LCD_ENTRY_MODE_INCREMENT | LCD_ENTRY_MODE_SHIFT_DISPLAY_OFF);software_delay(100000);
 80010de:	2006      	movs	r0, #6
 80010e0:	f000 f901 	bl	80012e6 <LCD_write_command>
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <LCD_init+0x134>)
 80010e6:	f7ff ffa3 	bl	8001030 <software_delay>
	//Init end

	//Return home
	LCD_write_command(LCD_HOME_INSTRUCTION);	software_delay(100000);
 80010ea:	2002      	movs	r0, #2
 80010ec:	f000 f8fb 	bl	80012e6 <LCD_write_command>
 80010f0:	482b      	ldr	r0, [pc, #172]	; (80011a0 <LCD_init+0x134>)
 80010f2:	f7ff ff9d 	bl	8001030 <software_delay>
	uint8_t custom_char1[] = LCD_CUSTOM_CHAR_ARROW_UP_PATERN;
 80010f6:	4a2b      	ldr	r2, [pc, #172]	; (80011a4 <LCD_init+0x138>)
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001100:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char1, 0);
 8001104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f98d 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char2[] = LCD_CUSTOM_CHAR_ARROW_DOWN_PATERN;
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <LCD_init+0x13c>)
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char2, 1);
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f980 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char3[] = LCD_CUSTOM_CHAR_ARROW_OUT_PATERN;
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <LCD_init+0x140>)
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001134:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char3, 2);
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	2102      	movs	r1, #2
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f973 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char4[] = LCD_CUSTOM_CHAR_ARROW_INTO_PATERN;
 8001144:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <LCD_init+0x144>)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char4, 3);
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2103      	movs	r1, #3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f966 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char5[] = LCD_CUSTOM_CHAR_ARROW_ENTER_PATERN;
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <LCD_init+0x148>)
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001168:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char5, 4);
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2104      	movs	r1, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f959 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char6[] = LCD_CUSTOM_CHAR_ARROW_PLUS_MINUS_PATERN;
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <LCD_init+0x14c>)
 800117a:	463b      	mov	r3, r7
 800117c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001180:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char6, 5);
 8001184:	463b      	mov	r3, r7
 8001186:	2105      	movs	r1, #5
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f94e 	bl	800142a <LCD_create_custom_character>



}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	000f4240 	.word	0x000f4240
 800119c:	00061a80 	.word	0x00061a80
 80011a0:	000186a0 	.word	0x000186a0
 80011a4:	0800cc38 	.word	0x0800cc38
 80011a8:	0800cc40 	.word	0x0800cc40
 80011ac:	0800cc48 	.word	0x0800cc48
 80011b0:	0800cc50 	.word	0x0800cc50
 80011b4:	0800cc58 	.word	0x0800cc58
 80011b8:	0800cc60 	.word	0x0800cc60

080011bc <LCD_send_4bits>:


void LCD_send_4bits(uint8_t data_to_send, char RS, char RW)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	460b      	mov	r3, r1
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	4613      	mov	r3, r2
 80011cc:	717b      	strb	r3, [r7, #5]
	LCD_GPIO_SET_VALUE(LCD_GPIO_RS_Pin, RS, LCD_GPIO_RS_Port);
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <LCD_send_4bits+0x24>
 80011d4:	2200      	movs	r2, #0
 80011d6:	2104      	movs	r1, #4
 80011d8:	4834      	ldr	r0, [pc, #208]	; (80012ac <LCD_send_4bits+0xf0>)
 80011da:	f002 fe35 	bl	8003e48 <HAL_GPIO_WritePin>
 80011de:	e004      	b.n	80011ea <LCD_send_4bits+0x2e>
 80011e0:	2201      	movs	r2, #1
 80011e2:	2104      	movs	r1, #4
 80011e4:	4831      	ldr	r0, [pc, #196]	; (80012ac <LCD_send_4bits+0xf0>)
 80011e6:	f002 fe2f 	bl	8003e48 <HAL_GPIO_WritePin>
	//set RW to LOW (GND) by hardware

	if(data_to_send&(0x01<<0)){LCD_DATABIT_ON(4);}else{LCD_DATABIT_OFF(4);}
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <LCD_send_4bits+0x44>
 80011f4:	2201      	movs	r2, #1
 80011f6:	2110      	movs	r1, #16
 80011f8:	482c      	ldr	r0, [pc, #176]	; (80012ac <LCD_send_4bits+0xf0>)
 80011fa:	f002 fe25 	bl	8003e48 <HAL_GPIO_WritePin>
 80011fe:	e004      	b.n	800120a <LCD_send_4bits+0x4e>
 8001200:	2200      	movs	r2, #0
 8001202:	2110      	movs	r1, #16
 8001204:	4829      	ldr	r0, [pc, #164]	; (80012ac <LCD_send_4bits+0xf0>)
 8001206:	f002 fe1f 	bl	8003e48 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<1)){LCD_DATABIT_ON(5);}else{LCD_DATABIT_OFF(5);}
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <LCD_send_4bits+0x64>
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	4824      	ldr	r0, [pc, #144]	; (80012ac <LCD_send_4bits+0xf0>)
 800121a:	f002 fe15 	bl	8003e48 <HAL_GPIO_WritePin>
 800121e:	e004      	b.n	800122a <LCD_send_4bits+0x6e>
 8001220:	2200      	movs	r2, #0
 8001222:	2120      	movs	r1, #32
 8001224:	4821      	ldr	r0, [pc, #132]	; (80012ac <LCD_send_4bits+0xf0>)
 8001226:	f002 fe0f 	bl	8003e48 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<2)){LCD_DATABIT_ON(6);}else{LCD_DATABIT_OFF(6);}
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <LCD_send_4bits+0x84>
 8001234:	2201      	movs	r2, #1
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	481c      	ldr	r0, [pc, #112]	; (80012ac <LCD_send_4bits+0xf0>)
 800123a:	f002 fe05 	bl	8003e48 <HAL_GPIO_WritePin>
 800123e:	e004      	b.n	800124a <LCD_send_4bits+0x8e>
 8001240:	2200      	movs	r2, #0
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	4819      	ldr	r0, [pc, #100]	; (80012ac <LCD_send_4bits+0xf0>)
 8001246:	f002 fdff 	bl	8003e48 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<3)){LCD_DATABIT_ON(7);}else{LCD_DATABIT_OFF(7);}
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <LCD_send_4bits+0xa4>
 8001254:	2201      	movs	r2, #1
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	4814      	ldr	r0, [pc, #80]	; (80012ac <LCD_send_4bits+0xf0>)
 800125a:	f002 fdf5 	bl	8003e48 <HAL_GPIO_WritePin>
 800125e:	e004      	b.n	800126a <LCD_send_4bits+0xae>
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <LCD_send_4bits+0xf0>)
 8001266:	f002 fdef 	bl	8003e48 <HAL_GPIO_WritePin>
	software_delay(100);
 800126a:	2064      	movs	r0, #100	; 0x64
 800126c:	f7ff fee0 	bl	8001030 <software_delay>
	
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8001270:	2201      	movs	r2, #1
 8001272:	2108      	movs	r1, #8
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LCD_send_4bits+0xf0>)
 8001276:	f002 fde7 	bl	8003e48 <HAL_GPIO_WritePin>
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f7ff fed8 	bl	8001030 <software_delay>
	LCD_GPIO_OFF(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8001280:	2200      	movs	r2, #0
 8001282:	2108      	movs	r1, #8
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <LCD_send_4bits+0xf0>)
 8001286:	f002 fddf 	bl	8003e48 <HAL_GPIO_WritePin>
 800128a:	2064      	movs	r0, #100	; 0x64
 800128c:	f7ff fed0 	bl	8001030 <software_delay>
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(1000);
 8001290:	2201      	movs	r2, #1
 8001292:	2108      	movs	r1, #8
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <LCD_send_4bits+0xf0>)
 8001296:	f002 fdd7 	bl	8003e48 <HAL_GPIO_WritePin>
 800129a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129e:	f7ff fec7 	bl	8001030 <software_delay>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <LCD_send_8bits_twice_4bits>:

void LCD_send_8bits_twice_4bits(uint8_t data, char RS, char RW)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	460b      	mov	r3, r1
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	4613      	mov	r3, r2
 80012c0:	717b      	strb	r3, [r7, #5]
	LCD_send_4bits((data>>4), RS, RW);	//high part
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	797a      	ldrb	r2, [r7, #5]
 80012ca:	79b9      	ldrb	r1, [r7, #6]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff75 	bl	80011bc <LCD_send_4bits>
	LCD_send_4bits(data, RS, RW);		//low part
 80012d2:	797a      	ldrb	r2, [r7, #5]
 80012d4:	79b9      	ldrb	r1, [r7, #6]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff6f 	bl	80011bc <LCD_send_4bits>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(command, 0, 0);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffda 	bl	80012b0 <LCD_send_8bits_twice_4bits>
	software_delay(10000);
 80012fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8001300:	f7ff fe96 	bl	8001030 <software_delay>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <LCD_write_data>:

void LCD_write_data(char byte_data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(byte_data, 1, 0);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ffc7 	bl	80012b0 <LCD_send_8bits_twice_4bits>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <LCD_write_char>:

void LCD_write_char(char character)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	if(isprint(character))	LCD_write_data(character);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3301      	adds	r3, #1
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <LCD_write_char+0x2c>)
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <LCD_write_char+0x24>
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffde 	bl	800130c <LCD_write_data>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800cd88 	.word	0x0800cd88

0800135c <LCD_write_text>:



void LCD_write_text(char* pText){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	while(*pText!='\0')
 8001364:	e007      	b.n	8001376 <LCD_write_text+0x1a>
	{
		LCD_write_char(*pText);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffde 	bl	800132c <LCD_write_char>
		pText++;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3301      	adds	r3, #1
 8001374:	607b      	str	r3, [r7, #4]
	while(*pText!='\0')
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f3      	bne.n	8001366 <LCD_write_text+0xa>
	}
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <LCD_goto_xy>:

void LCD_goto_xy(uint8_t line, uint8_t y)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]
	switch(line){
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <LCD_goto_xy+0x1c>
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d003      	beq.n	80013aa <LCD_goto_xy+0x22>
 80013a2:	e005      	b.n	80013b0 <LCD_goto_xy+0x28>
		case 0: line=0x00; break;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	e004      	b.n	80013b4 <LCD_goto_xy+0x2c>
		case 1: line=0x40; break;
 80013aa:	2340      	movs	r3, #64	; 0x40
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e001      	b.n	80013b4 <LCD_goto_xy+0x2c>
		default: line=0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	71fb      	strb	r3, [r7, #7]
	}
	LCD_write_command(LCD_DDRAM_ADDRESS | (line+y));
 80013b4:	79fa      	ldrb	r2, [r7, #7]
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4413      	add	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff8d 	bl	80012e6 <LCD_write_command>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <LCD_goto_line>:

void LCD_goto_line(uint8_t line)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	LCD_goto_xy(line, 0);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ffd0 	bl	8001388 <LCD_goto_xy>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LCD_printf>:
		LCD_write_text(text_buffer);
	}
}

uint8_t LCD_printf(const char * format, ... )
{
 80013f0:	b40f      	push	{r0, r1, r2, r3}
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
	#define LCD_BUFFER_SIZE (LCD_MAXIMUM_LINE_LENGTH+1)
	char text_buffer[LCD_BUFFER_SIZE];
	uint8_t length=0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
	va_list args;
	va_start (args, format);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	603b      	str	r3, [r7, #0]
	length=vsnprintf(text_buffer, LCD_BUFFER_SIZE, format, args);
 8001402:	1d38      	adds	r0, r7, #4
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6a3a      	ldr	r2, [r7, #32]
 8001408:	2111      	movs	r1, #17
 800140a:	f008 fe5f 	bl	800a0cc <vsniprintf>
 800140e:	4603      	mov	r3, r0
 8001410:	75fb      	strb	r3, [r7, #23]
	LCD_write_text(text_buffer);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffa1 	bl	800135c <LCD_write_text>
	va_end (args);
	return length;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr

0800142a <LCD_create_custom_character>:


void LCD_create_custom_character(uint8_t* pPattern, uint8_t position)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	70fb      	strb	r3, [r7, #3]
	LCD_write_command(LCD_CGRAM_ADDRESS | (position*8));
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	b25b      	sxtb	r3, r3
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	b25b      	sxtb	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff4d 	bl	80012e6 <LCD_write_command>
	for (uint8_t i=0; i<8; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e009      	b.n	8001466 <LCD_create_custom_character+0x3c>
		LCD_write_data(pPattern[i]);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff56 	bl	800130c <LCD_write_data>
	for (uint8_t i=0; i<8; i++)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	3301      	adds	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b07      	cmp	r3, #7
 800146a:	d9f2      	bls.n	8001452 <LCD_create_custom_character+0x28>
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fa48 	bl	8001914 <null_ptr_check>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d117      	bne.n	80014c0 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	20d0      	movs	r0, #208	; 0xd0
 8001498:	f000 f818 	bl	80014cc <bmp2_get_regs>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 80014a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b58      	cmp	r3, #88	; 0x58
 80014ae:	d105      	bne.n	80014bc <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fa7a 	bl	80019aa <get_calib_param>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e001      	b.n	80014c0 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 80014bc:	23fc      	movs	r3, #252	; 0xfc
 80014be:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f000 fa19 	bl	8001914 <null_ptr_check>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80014e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11e      	bne.n	800152c <bmp2_get_regs+0x60>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001502:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68dc      	ldr	r4, [r3, #12]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	7bf8      	ldrb	r0, [r7, #15]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	47a0      	blx	r4
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001526:	23fe      	movs	r3, #254	; 0xfe
 8001528:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800152a:	e001      	b.n	8001530 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800152c:	23ff      	movs	r3, #255	; 0xff
 800152e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}

0800153c <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b04      	cmp	r3, #4
 800154e:	d901      	bls.n	8001554 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001550:	2304      	movs	r3, #4
 8001552:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f000 f9dd 	bl	8001914 <null_ptr_check>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001560:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001564:	2b00      	cmp	r3, #0
 8001566:	d150      	bne.n	800160a <bmp2_set_regs+0xce>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d04d      	beq.n	800160a <bmp2_set_regs+0xce>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d04a      	beq.n	800160a <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d043      	beq.n	8001602 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d114      	bne.n	80015b2 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001588:	2300      	movs	r3, #0
 800158a:	77fb      	strb	r3, [r7, #31]
 800158c:	e00d      	b.n	80015aa <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	68f9      	ldr	r1, [r7, #12]
 800159a:	440b      	add	r3, r1
 800159c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	3301      	adds	r3, #1
 80015a8:	77fb      	strb	r3, [r7, #31]
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d8ed      	bhi.n	800158e <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d90b      	bls.n	80015d0 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80015b8:	f107 0114 	add.w	r1, r7, #20
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f9c7 	bl	8001954 <interleave_data>
                temp_len = ((len * 2) - 1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	e001      	b.n	80015d4 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691c      	ldr	r4, [r3, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	7818      	ldrb	r0, [r3, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f107 0114 	add.w	r1, r7, #20
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	47a0      	blx	r4
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80015fa:	23fe      	movs	r3, #254	; 0xfe
 80015fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001600:	e007      	b.n	8001612 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001602:	23fd      	movs	r3, #253	; 0xfd
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001608:	e003      	b.n	8001612 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001610:	e000      	b.n	8001614 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001612:	bf00      	nop
    }

    return rslt;
 8001614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001618:	4618      	mov	r0, r3
 800161a:	372c      	adds	r7, #44	; 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}

08001620 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8001628:	23e0      	movs	r3, #224	; 0xe0
 800162a:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800162c:	23b6      	movs	r3, #182	; 0xb6
 800162e:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001630:	f107 010d 	add.w	r1, r7, #13
 8001634:	f107 000e 	add.w	r0, r7, #14
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f7ff ff7e 	bl	800153c <bmp2_set_regs>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800165a:	2300      	movs	r3, #0
 800165c:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d02d      	beq.n	80016c0 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001664:	f107 010c 	add.w	r1, r7, #12
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2202      	movs	r2, #2
 800166c:	20f4      	movs	r0, #244	; 0xf4
 800166e:	f7ff ff2d 	bl	80014cc <bmp2_get_regs>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d122      	bne.n	80016c4 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	095b      	lsrs	r3, r3, #5
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001688:	7b3b      	ldrb	r3, [r7, #12]
 800168a:	109b      	asrs	r3, r3, #2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001698:	7b7b      	ldrb	r3, [r7, #13]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	b2da      	uxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	109b      	asrs	r3, r3, #2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	715a      	strb	r2, [r3, #5]
 80016be:	e001      	b.n	80016c4 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016c0:	23ff      	movs	r3, #255	; 0xff
 80016c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f9fe 	bl	8001ae0 <conf_sensor>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01b      	beq.n	8001736 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80016fe:	f107 010e 	add.w	r1, r7, #14
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	20f3      	movs	r0, #243	; 0xf3
 8001708:	f7ff fee0 	bl	80014cc <bmp2_get_regs>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d110      	bne.n	800173a <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	10db      	asrs	r3, r3, #3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	705a      	strb	r2, [r3, #1]
 8001734:	e001      	b.n	800173a <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001736:	23ff      	movs	r3, #255	; 0xff
 8001738:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f9c0 	bl	8001ae0 <conf_sensor>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001764:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	2300      	movs	r3, #0
 8001780:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d024      	beq.n	80017dc <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001792:	f107 0110 	add.w	r1, r7, #16
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2206      	movs	r2, #6
 800179a:	20f7      	movs	r0, #247	; 0xf7
 800179c:	f7ff fe96 	bl	80014cc <bmp2_get_regs>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80017a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d119      	bne.n	80017e0 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80017ac:	f107 0208 	add.w	r2, r7, #8
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 faba 	bl	8001d30 <parse_sensor_data>
 80017bc:	4603      	mov	r3, r0
 80017be:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80017c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f80b 	bl	80017ec <bmp2_compensate_data>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]
 80017da:	e001      	b.n	80017e0 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80017dc:	23ff      	movs	r3, #255	; 0xff
 80017de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f88b 	bl	8001914 <null_ptr_check>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d129      	bne.n	800185e <bmp2_compensate_data+0x72>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d026      	beq.n	800185e <bmp2_compensate_data+0x72>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d023      	beq.n	800185e <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3308      	adds	r3, #8
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fabc 	bl	8001db8 <compensate_temperature>
 8001840:	4603      	mov	r3, r0
 8001842:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fba8 	bl	8001fa8 <compensate_pressure>
 8001858:	4603      	mov	r3, r0
 800185a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800185c:	e001      	b.n	8001862 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800185e:	23ff      	movs	r3, #255	; 0xff
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b092      	sub	sp, #72	; 0x48
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <bmp2_compute_meas_time+0x9c>)
 800187e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001882:	461d      	mov	r5, r3
 8001884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <bmp2_compute_meas_time+0xa0>)
 800188e:	f107 0410 	add.w	r4, r7, #16
 8001892:	461d      	mov	r5, r3
 8001894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800189c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f837 	bl	8001914 <null_ptr_check>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80018ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d122      	bne.n	80018fa <bmp2_compute_meas_time+0x8a>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01f      	beq.n	80018fa <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7e1b      	ldrb	r3, [r3, #24]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d111      	bne.n	80018e6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	3348      	adds	r3, #72	; 0x48
 80018ca:	443b      	add	r3, r7
 80018cc:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	789b      	ldrb	r3, [r3, #2]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	3348      	adds	r3, #72	; 0x48
 80018d8:	443b      	add	r3, r7
 80018da:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80018de:	441a      	add	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018e4:	e00c      	b.n	8001900 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	78db      	ldrb	r3, [r3, #3]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3348      	adds	r3, #72	; 0x48
 80018ee:	443b      	add	r3, r7
 80018f0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018f8:	e002      	b.n	8001900 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80018fa:	23ff      	movs	r3, #255	; 0xff
 80018fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001900:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001904:	4618      	mov	r0, r3
 8001906:	3748      	adds	r7, #72	; 0x48
 8001908:	46bd      	mov	sp, r7
 800190a:	bdb0      	pop	{r4, r5, r7, pc}
 800190c:	0800cc6c 	.word	0x0800cc6c
 8001910:	0800cc80 	.word	0x0800cc80

08001914 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <null_ptr_check+0x26>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <null_ptr_check+0x26>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <null_ptr_check+0x26>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800193a:	23ff      	movs	r3, #255	; 0xff
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e001      	b.n	8001944 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e015      	b.n	8001994 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	441a      	add	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	3b01      	subs	r3, #1
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	440b      	add	r3, r1
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	441a      	add	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	440b      	add	r3, r1
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d3e5      	bcc.n	8001968 <interleave_data+0x14>
    }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b08a      	sub	sp, #40	; 0x28
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80019c8:	f107 010c 	add.w	r1, r7, #12
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2219      	movs	r2, #25
 80019d0:	2088      	movs	r0, #136	; 0x88
 80019d2:	f7ff fd7b 	bl	80014cc <bmp2_get_regs>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80019dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d177      	bne.n	8001ad4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7b3b      	ldrb	r3, [r7, #12]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001a0a:	7c7b      	ldrb	r3, [r7, #17]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	7c3b      	ldrb	r3, [r7, #16]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	7cbb      	ldrb	r3, [r7, #18]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001a30:	7d7b      	ldrb	r3, [r7, #21]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	7d3b      	ldrb	r3, [r7, #20]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	7dbb      	ldrb	r3, [r7, #22]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001a54:	7e7b      	ldrb	r3, [r7, #25]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	7e3b      	ldrb	r3, [r7, #24]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001a66:	7efb      	ldrb	r3, [r7, #27]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	7ebb      	ldrb	r3, [r7, #26]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001a78:	7f7b      	ldrb	r3, [r7, #29]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	7f3b      	ldrb	r3, [r7, #28]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	7fbb      	ldrb	r3, [r7, #30]
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001a9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001ac8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001aee:	2300      	movs	r3, #0
 8001af0:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001af2:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001af6:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d074      	beq.n	8001be8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001afe:	f107 0114 	add.w	r1, r7, #20
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	20f4      	movs	r0, #244	; 0xf4
 8001b08:	f7ff fce0 	bl	80014cc <bmp2_get_regs>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d169      	bne.n	8001bec <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fd81 	bl	8001620 <bmp2_soft_reset>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d160      	bne.n	8001bec <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f861 	bl	8001bf8 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001b36:	7d7b      	ldrb	r3, [r7, #21]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	b25a      	sxtb	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	789b      	ldrb	r3, [r3, #2]
 8001b44:	015b      	lsls	r3, r3, #5
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001b50:	7d7b      	ldrb	r3, [r7, #21]
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	f023 031c 	bic.w	r3, r3, #28
 8001b58:	b25a      	sxtb	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	791b      	ldrb	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	f003 031c 	and.w	r3, r3, #28
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001b70:	7d7b      	ldrb	r3, [r7, #21]
 8001b72:	b25b      	sxtb	r3, r3
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	b25a      	sxtb	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001b8e:	f107 0114 	add.w	r1, r7, #20
 8001b92:	f107 0010 	add.w	r0, r7, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f7ff fccf 	bl	800153c <bmp2_set_regs>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d120      	bne.n	8001bec <conf_sensor+0x10c>
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01d      	beq.n	8001bec <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001bb6:	7d3b      	ldrb	r3, [r7, #20]
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001bd2:	f107 0114 	add.w	r1, r7, #20
 8001bd6:	f107 0010 	add.w	r0, r7, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f7ff fcad 	bl	800153c <bmp2_set_regs>
 8001be2:	4603      	mov	r3, r0
 8001be4:	75fb      	strb	r3, [r7, #23]
 8001be6:	e001      	b.n	8001bec <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001be8:	23ff      	movs	r3, #255	; 0xff
 8001bea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	78db      	ldrb	r3, [r3, #3]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	f200 808b 	bhi.w	8001d22 <set_os_mode+0x12a>
 8001c0c:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <set_os_mode+0x1c>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c29 	.word	0x08001c29
 8001c18:	08001c5b 	.word	0x08001c5b
 8001c1c:	08001c8d 	.word	0x08001c8d
 8001c20:	08001cbf 	.word	0x08001cbf
 8001c24:	08001cf1 	.word	0x08001cf1
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	f023 031c 	bic.w	r3, r3, #28
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	701a      	strb	r2, [r3, #0]
            break;
 8001c58:	e064      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	f043 0320 	orr.w	r3, r3, #32
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	f023 031c 	bic.w	r3, r3, #28
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	701a      	strb	r2, [r3, #0]
            break;
 8001c8a:	e04b      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	f023 031c 	bic.w	r3, r3, #28
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	f043 030c 	orr.w	r3, r3, #12
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	701a      	strb	r2, [r3, #0]
            break;
 8001cbc:	e032      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	f043 0320 	orr.w	r3, r3, #32
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	f023 031c 	bic.w	r3, r3, #28
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	701a      	strb	r2, [r3, #0]
            break;
 8001cee:	e019      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	f023 031c 	bic.w	r3, r3, #28
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	f043 0314 	orr.w	r3, r3, #20
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	701a      	strb	r2, [r3, #0]
            break;
 8001d20:	e000      	b.n	8001d24 <set_os_mode+0x12c>
        default:
            break;
 8001d22:	bf00      	nop
    }
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3301      	adds	r3, #1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3302      	adds	r3, #2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3303      	adds	r3, #3
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	031b      	lsls	r3, r3, #12
 8001d6e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3305      	adds	r3, #5
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f000 fae5 	bl	8002370 <st_check_boundaries>
 8001da6:	4603      	mov	r3, r0
 8001da8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001daa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dbc:	b08c      	sub	sp, #48	; 0x30
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbc7 	bl	8000564 <__aeabi_i2d>
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <compensate_temperature+0x1d4>)
 8001ddc:	f7fe fd56 	bl	800088c <__aeabi_ddiv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4614      	mov	r4, r2
 8001de6:	461d      	mov	r5, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	8b9b      	ldrh	r3, [r3, #28]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fba9 	bl	8000544 <__aeabi_ui2d>
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <compensate_temperature+0x1d8>)
 8001df8:	f7fe fd48 	bl	800088c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa60 	bl	80002c8 <__aeabi_dsub>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fba4 	bl	8000564 <__aeabi_i2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fc08 	bl	8000638 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb95 	bl	8000564 <__aeabi_i2d>
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e42:	f7fe fd23 	bl	800088c <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8b9b      	ldrh	r3, [r3, #28]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb76 	bl	8000544 <__aeabi_ui2d>
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <compensate_temperature+0x1dc>)
 8001e5e:	f7fe fd15 	bl	800088c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4620      	mov	r0, r4
 8001e68:	4629      	mov	r1, r5
 8001e6a:	f7fe fa2d 	bl	80002c8 <__aeabi_dsub>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4614      	mov	r4, r2
 8001e74:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb72 	bl	8000564 <__aeabi_i2d>
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e88:	f7fe fd00 	bl	800088c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4690      	mov	r8, r2
 8001e92:	4699      	mov	r9, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8b9b      	ldrh	r3, [r3, #28]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb53 	bl	8000544 <__aeabi_ui2d>
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <compensate_temperature+0x1dc>)
 8001ea4:	f7fe fcf2 	bl	800088c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4640      	mov	r0, r8
 8001eae:	4649      	mov	r1, r9
 8001eb0:	f7fe fa0a 	bl	80002c8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe fbbc 	bl	8000638 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb48 	bl	8000564 <__aeabi_i2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
    var2 =
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe fbac 	bl	8000638 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ef0:	f7fe f9ec 	bl	80002cc <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fe4c 	bl	8000b98 <__aeabi_d2iz>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001f06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f0e:	f7fe f9dd 	bl	80002cc <__adddf3>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <compensate_temperature+0x1e0>)
 8001f20:	f7fe fcb4 	bl	800088c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <compensate_temperature+0x1e4>)
 8001f32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f36:	f7fe fdf1 	bl	8000b1c <__aeabi_dcmplt>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <compensate_temperature+0x1e4>)
 8001f46:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <compensate_temperature+0x1e8>)
 8001f56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f5a:	f7fe fdfd 	bl	8000b58 <__aeabi_dcmpgt>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <compensate_temperature+0x1e8>)
 8001f6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f7a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001f7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f8c:	40d00000 	.word	0x40d00000
 8001f90:	40900000 	.word	0x40900000
 8001f94:	40c00000 	.word	0x40c00000
 8001f98:	40b40000 	.word	0x40b40000
 8001f9c:	c0440000 	.word	0xc0440000
 8001fa0:	40554000 	.word	0x40554000
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe faca 	bl	8000564 <__aeabi_i2d>
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	f7fe fc58 	bl	800088c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4bcb      	ldr	r3, [pc, #812]	; (8002318 <compensate_pressure+0x370>)
 8001fea:	f7fe f96d 	bl	80002c8 <__aeabi_dsub>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ffa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ffe:	f7fe fb1b 	bl	8000638 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe faa7 	bl	8000564 <__aeabi_i2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f7fe fb0b 	bl	8000638 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	4bbb      	ldr	r3, [pc, #748]	; (800231c <compensate_pressure+0x374>)
 8002030:	f7fe fc2c 	bl	800088c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fa8e 	bl	8000564 <__aeabi_i2d>
 8002048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204c:	f7fe faf4 	bl	8000638 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	f7fe f936 	bl	80002cc <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002068:	f7fe f930 	bl	80002cc <__adddf3>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4ba9      	ldr	r3, [pc, #676]	; (8002320 <compensate_pressure+0x378>)
 800207a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800207e:	f7fe fc05 	bl	800088c <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	461d      	mov	r5, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa67 	bl	8000564 <__aeabi_i2d>
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4ba2      	ldr	r3, [pc, #648]	; (8002324 <compensate_pressure+0x37c>)
 800209c:	f7fe facc 	bl	8000638 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe f910 	bl	80002cc <__adddf3>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa52 	bl	8000564 <__aeabi_i2d>
 80020c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c4:	f7fe fab8 	bl	8000638 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	f7fe fab0 	bl	8000638 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b90      	ldr	r3, [pc, #576]	; (8002328 <compensate_pressure+0x380>)
 80020e6:	f7fe fbd1 	bl	800088c <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4614      	mov	r4, r2
 80020f0:	461d      	mov	r5, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa33 	bl	8000564 <__aeabi_i2d>
 80020fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002102:	f7fe fa99 	bl	8000638 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4620      	mov	r0, r4
 800210c:	4629      	mov	r1, r5
 800210e:	f7fe f8dd 	bl	80002cc <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <compensate_pressure+0x380>)
 8002120:	f7fe fbb4 	bl	800088c <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b7a      	ldr	r3, [pc, #488]	; (800231c <compensate_pressure+0x374>)
 8002132:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002136:	f7fe fba9 	bl	800088c <__aeabi_ddiv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b79      	ldr	r3, [pc, #484]	; (800232c <compensate_pressure+0x384>)
 8002148:	f7fe f8c0 	bl	80002cc <__adddf3>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4614      	mov	r4, r2
 8002152:	461d      	mov	r5, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f9f3 	bl	8000544 <__aeabi_ui2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4620      	mov	r0, r4
 8002164:	4629      	mov	r1, r5
 8002166:	f7fe fa67 	bl	8000638 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800217e:	f7fe fccd 	bl	8000b1c <__aeabi_dcmplt>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <compensate_pressure+0x1f8>
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002194:	f7fe fce0 	bl	8000b58 <__aeabi_dcmpgt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80de 	beq.w	800235c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9cd 	bl	8000544 <__aeabi_ui2d>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	f04f 0000 	mov.w	r0, #0
 80021b2:	495f      	ldr	r1, [pc, #380]	; (8002330 <compensate_pressure+0x388>)
 80021b4:	f7fe f888 	bl	80002c8 <__aeabi_dsub>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <compensate_pressure+0x38c>)
 80021c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021ca:	f7fe fb5f 	bl	800088c <__aeabi_ddiv>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021d6:	f7fe f877 	bl	80002c8 <__aeabi_dsub>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	a347      	add	r3, pc, #284	; (adr r3, 8002300 <compensate_pressure+0x358>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fa26 	bl	8000638 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f8:	f7fe fb48 	bl	800088c <__aeabi_ddiv>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f9aa 	bl	8000564 <__aeabi_i2d>
 8002210:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002214:	f7fe fa10 	bl	8000638 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002224:	f7fe fa08 	bl	8000638 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	4b40      	ldr	r3, [pc, #256]	; (8002338 <compensate_pressure+0x390>)
 8002236:	f7fe fb29 	bl	800088c <__aeabi_ddiv>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f98b 	bl	8000564 <__aeabi_i2d>
 800224e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002252:	f7fe f9f1 	bl	8000638 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <compensate_pressure+0x374>)
 8002264:	f7fe fb12 	bl	800088c <__aeabi_ddiv>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002270:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002274:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002278:	f7fe f828 	bl	80002cc <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f96a 	bl	8000564 <__aeabi_i2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fe f818 	bl	80002cc <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <compensate_pressure+0x394>)
 80022aa:	f7fe faef 	bl	800088c <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022b6:	f7fe f809 	bl	80002cc <__adddf3>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 80022c2:	a311      	add	r3, pc, #68	; (adr r3, 8002308 <compensate_pressure+0x360>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022cc:	f7fe fc26 	bl	8000b1c <__aeabi_dcmplt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 80022d6:	a30c      	add	r3, pc, #48	; (adr r3, 8002308 <compensate_pressure+0x360>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 80022e6:	a30a      	add	r3, pc, #40	; (adr r3, 8002310 <compensate_pressure+0x368>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022f0:	f7fe fc32 	bl	8000b58 <__aeabi_dcmpgt>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	e022      	b.n	8002340 <compensate_pressure+0x398>
 80022fa:	bf00      	nop
 80022fc:	f3af 8000 	nop.w
 8002300:	00000000 	.word	0x00000000
 8002304:	40b86a00 	.word	0x40b86a00
 8002308:	00000000 	.word	0x00000000
 800230c:	40dd4c00 	.word	0x40dd4c00
 8002310:	00000000 	.word	0x00000000
 8002314:	40fadb00 	.word	0x40fadb00
 8002318:	40ef4000 	.word	0x40ef4000
 800231c:	40e00000 	.word	0x40e00000
 8002320:	40100000 	.word	0x40100000
 8002324:	40f00000 	.word	0x40f00000
 8002328:	41200000 	.word	0x41200000
 800232c:	3ff00000 	.word	0x3ff00000
 8002330:	41300000 	.word	0x41300000
 8002334:	40b00000 	.word	0x40b00000
 8002338:	41e00000 	.word	0x41e00000
 800233c:	40300000 	.word	0x40300000
 8002340:	d007      	beq.n	8002352 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8002342:	a309      	add	r3, pc, #36	; (adr r3, 8002368 <compensate_pressure+0x3c0>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 800234c:	2304      	movs	r3, #4
 800234e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002358:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 800235c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002360:	4618      	mov	r0, r3
 8002362:	3730      	adds	r7, #48	; 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bdb0      	pop	{r4, r5, r7, pc}
 8002368:	00000000 	.word	0x00000000
 800236c:	40fadb00 	.word	0x40fadb00

08002370 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db03      	blt.n	800238c <st_check_boundaries+0x1c>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <st_check_boundaries+0x88>)
 8002388:	4293      	cmp	r3, r2
 800238a:	dd09      	ble.n	80023a0 <st_check_boundaries+0x30>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db06      	blt.n	80023a0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <st_check_boundaries+0x88>)
 8002396:	4293      	cmp	r3, r2
 8002398:	dc02      	bgt.n	80023a0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 800239a:	23fa      	movs	r3, #250	; 0xfa
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e023      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db03      	blt.n	80023ae <st_check_boundaries+0x3e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <st_check_boundaries+0x88>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	dd09      	ble.n	80023c2 <st_check_boundaries+0x52>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db06      	blt.n	80023c2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <st_check_boundaries+0x88>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	dc02      	bgt.n	80023c2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 80023bc:	23fb      	movs	r3, #251	; 0xfb
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e012      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db03      	blt.n	80023d0 <st_check_boundaries+0x60>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <st_check_boundaries+0x88>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	dd09      	ble.n	80023e4 <st_check_boundaries+0x74>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db03      	blt.n	80023de <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <st_check_boundaries+0x88>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	dd02      	ble.n	80023e4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80023de:	23f9      	movs	r3, #249	; 0xf9
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e001      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	000ffff0 	.word	0x000ffff0

080023fc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff f836 	bl	8001476 <bmp2_init>
 800240a:	4603      	mov	r3, r0
 800240c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f91b 	bl	8001650 <bmp2_get_config>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 800241e:	2303      	movs	r3, #3
 8002420:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8002422:	2300      	movs	r3, #0
 8002424:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8002426:	2303      	movs	r3, #3
 8002428:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f94d 	bl	80016d0 <bmp2_set_config>
 8002436:	4603      	mov	r3, r0
 8002438:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4619      	mov	r1, r3
 8002442:	2003      	movs	r0, #3
 8002444:	f7ff f97f 	bl	8001746 <bmp2_set_power_mode>
 8002448:	4603      	mov	r3, r0
 800244a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 800244c:	f107 0108 	add.w	r1, r7, #8
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fa0a 	bl	8001870 <bmp2_compute_meas_time>
 800245c:	4603      	mov	r3, r0
 800245e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6858      	ldr	r0, [r3, #4]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	891b      	ldrh	r3, [r3, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	4619      	mov	r1, r3
 8002494:	f001 fcd8 	bl	8003e48 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	f107 010f 	add.w	r1, r7, #15
 80024a0:	2305      	movs	r3, #5
 80024a2:	2201      	movs	r2, #1
 80024a4:	f002 fed3 	bl	800524e <HAL_SPI_Transmit>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	2305      	movs	r3, #5
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	f003 f837 	bl	800552a <HAL_SPI_Receive>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	7dbb      	ldrb	r3, [r7, #22]
 80024c2:	4413      	add	r3, r2
 80024c4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6858      	ldr	r0, [r3, #4]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	891b      	ldrh	r3, [r3, #8]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4619      	mov	r1, r3
 80024d2:	f001 fcb9 	bl	8003e48 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80024d6:	7dbb      	ldrb	r3, [r7, #22]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <bmp2_spi_read+0x74>
    iError = -1;
 80024dc:	23ff      	movs	r3, #255	; 0xff
 80024de:	75fb      	strb	r3, [r7, #23]

  return iError;
 80024e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6858      	ldr	r0, [r3, #4]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	891b      	ldrh	r3, [r3, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	f001 fc98 	bl	8003e48 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	f107 010f 	add.w	r1, r7, #15
 8002520:	2305      	movs	r3, #5
 8002522:	2201      	movs	r2, #1
 8002524:	f002 fe93 	bl	800524e <HAL_SPI_Transmit>
 8002528:	4603      	mov	r3, r0
 800252a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	b29a      	uxth	r2, r3
 8002534:	2305      	movs	r3, #5
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	f002 fe89 	bl	800524e <HAL_SPI_Transmit>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	7dbb      	ldrb	r3, [r7, #22]
 8002542:	4413      	add	r3, r2
 8002544:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6858      	ldr	r0, [r3, #4]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	891b      	ldrh	r3, [r3, #8]
 800254e:	2201      	movs	r2, #1
 8002550:	4619      	mov	r1, r3
 8002552:	f001 fc79 	bl	8003e48 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002556:	7dbb      	ldrb	r3, [r7, #22]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <bmp2_spi_write+0x74>
    iError = -1;
 800255c:	23ff      	movs	r3, #255	; 0xff
 800255e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a05      	ldr	r2, [pc, #20]	; (8002590 <bmp2_delay_us+0x24>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	4618      	mov	r0, r3
 8002582:	f001 f8ed 	bl	8003760 <HAL_Delay>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08d      	sub	sp, #52	; 0x34
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 800259c:	23ff      	movs	r3, #255	; 0xff
 800259e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <BMP2_ReadTemperature_degC+0x9c>)
 80025a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	899b      	ldrh	r3, [r3, #12]
 80025b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f896 	bl	80016ee <bmp2_get_status>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f8ce 	bl	8001770 <bmp2_get_sensor_data>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 80025da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 80025e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80025f0:	7f3b      	ldrb	r3, [r7, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <BMP2_ReadTemperature_degC+0x6a>
 80025f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	dcdb      	bgt.n	80025b6 <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685c      	ldr	r4, [r3, #4]
 8002602:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002606:	f7fe fb0f 	bl	8000c28 <__aeabi_d2f>
 800260a:	4603      	mov	r3, r0
 800260c:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002616:	729a      	strb	r2, [r3, #10]

  return temp;
 8002618:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800261c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002620:	eeb0 0a47 	vmov.f32	s0, s14
 8002624:	eef0 0a67 	vmov.f32	s1, s15
 8002628:	3734      	adds	r7, #52	; 0x34
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	7ff80000 	.word	0x7ff80000

08002634 <ARM_PID_Init>:
 * @brief This function Initializes arm_pid controller with given parameters.
 * @param KP Kp gain of PID controller.
 * @param KI Ki gain of PID controller.
 * @param KD Kd gain of PID controller.
 */
void ARM_PID_Init(float32_t KP,float32_t KI,float32_t KD) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	ed87 0a03 	vstr	s0, [r7, #12]
 800263e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002642:	ed87 1a01 	vstr	s2, [r7, #4]
    PID.Kp = KP;
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <ARM_PID_Init+0x34>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6193      	str	r3, [r2, #24]
    PID.Ki = KI;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <ARM_PID_Init+0x34>)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	61d3      	str	r3, [r2, #28]
    PID.Kd = KD;
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <ARM_PID_Init+0x34>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6213      	str	r3, [r2, #32]
    arm_pid_init_f32(&PID, 1);
 8002658:	2101      	movs	r1, #1
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <ARM_PID_Init+0x34>)
 800265c:	f006 f944 	bl	80088e8 <arm_pid_init_f32>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000244 	.word	0x20000244
 800266c:	00000000 	.word	0x00000000

08002670 <Calculate_PID_out>:
 * @brief This function returns value of controller output.
 * @param setpoint Current destined value for closed loop system.
 * @param measured Current measured system output.
 * @return Controller output.
 */
uint32_t Calculate_PID_out(float setpoint, float measured) {
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	ed87 0a01 	vstr	s0, [r7, #4]
 800267a:	edc7 0a00 	vstr	s1, [r7]
//
//    }

//    last_pwm_duty = 0;

    if(measured < setpoint + 0.05) {
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	f7fd ff82 	bl	8000588 <__aeabi_f2d>
 8002684:	4604      	mov	r4, r0
 8002686:	460d      	mov	r5, r1
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7fd ff7d 	bl	8000588 <__aeabi_f2d>
 800268e:	a330      	add	r3, pc, #192	; (adr r3, 8002750 <Calculate_PID_out+0xe0>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fd fe1a 	bl	80002cc <__adddf3>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4620      	mov	r0, r4
 800269e:	4629      	mov	r1, r5
 80026a0:	f7fe fa3c 	bl	8000b1c <__aeabi_dcmplt>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <Calculate_PID_out+0x68>
    	last_pwm_duty = (int)setpoint*0.25;
 80026aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b2:	ee17 0a90 	vmov	r0, s15
 80026b6:	f7fd ff55 	bl	8000564 <__aeabi_i2d>
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <Calculate_PID_out+0xd8>)
 80026c0:	f7fd ffba 	bl	8000638 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe fa8c 	bl	8000be8 <__aeabi_d2uiz>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4a1e      	ldr	r2, [pc, #120]	; (800274c <Calculate_PID_out+0xdc>)
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e02b      	b.n	8002730 <Calculate_PID_out+0xc0>
    }
    else if(measured > setpoint + 0.08) {
 80026d8:	6838      	ldr	r0, [r7, #0]
 80026da:	f7fd ff55 	bl	8000588 <__aeabi_f2d>
 80026de:	4604      	mov	r4, r0
 80026e0:	460d      	mov	r5, r1
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fd ff50 	bl	8000588 <__aeabi_f2d>
 80026e8:	a315      	add	r3, pc, #84	; (adr r3, 8002740 <Calculate_PID_out+0xd0>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd fded 	bl	80002cc <__adddf3>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f7fe fa2d 	bl	8000b58 <__aeabi_dcmpgt>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <Calculate_PID_out+0xc0>
        last_pwm_duty = (int)setpoint*0.08;
 8002704:	edd7 7a01 	vldr	s15, [r7, #4]
 8002708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270c:	ee17 0a90 	vmov	r0, s15
 8002710:	f7fd ff28 	bl	8000564 <__aeabi_i2d>
 8002714:	a30a      	add	r3, pc, #40	; (adr r3, 8002740 <Calculate_PID_out+0xd0>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fd ff8d 	bl	8000638 <__aeabi_dmul>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f7fe fa5f 	bl	8000be8 <__aeabi_d2uiz>
 800272a:	4603      	mov	r3, r0
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <Calculate_PID_out+0xdc>)
 800272e:	6013      	str	r3, [r2, #0]
    }
    return last_pwm_duty;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <Calculate_PID_out+0xdc>)
 8002732:	681b      	ldr	r3, [r3, #0]
//    }
//    if (pwm_duty < setpoint*0.2){
//    	pwm_duty = (int) setpoint*0.17;
//    }// Limit the duty cycle to 0
    return pwm_duty;
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bdb0      	pop	{r4, r5, r7, pc}
 800273c:	f3af 8000 	nop.w
 8002740:	47ae147b 	.word	0x47ae147b
 8002744:	3fb47ae1 	.word	0x3fb47ae1
 8002748:	3fd00000 	.word	0x3fd00000
 800274c:	20000268 	.word	0x20000268
 8002750:	9999999a 	.word	0x9999999a
 8002754:	3fa99999 	.word	0x3fa99999

08002758 <MX_GPIO_Init>:
     PG13   ------> ETH_TXD0
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800276e:	4b9d      	ldr	r3, [pc, #628]	; (80029e4 <MX_GPIO_Init+0x28c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a9c      	ldr	r2, [pc, #624]	; (80029e4 <MX_GPIO_Init+0x28c>)
 8002774:	f043 0310 	orr.w	r3, r3, #16
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b9a      	ldr	r3, [pc, #616]	; (80029e4 <MX_GPIO_Init+0x28c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	4b97      	ldr	r3, [pc, #604]	; (80029e4 <MX_GPIO_Init+0x28c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a96      	ldr	r2, [pc, #600]	; (80029e4 <MX_GPIO_Init+0x28c>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b94      	ldr	r3, [pc, #592]	; (80029e4 <MX_GPIO_Init+0x28c>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800279e:	4b91      	ldr	r3, [pc, #580]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a90      	ldr	r2, [pc, #576]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b8e      	ldr	r3, [pc, #568]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	4b8b      	ldr	r3, [pc, #556]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a8a      	ldr	r2, [pc, #552]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ce:	4b85      	ldr	r3, [pc, #532]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a84      	ldr	r2, [pc, #528]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b82      	ldr	r3, [pc, #520]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e6:	4b7f      	ldr	r3, [pc, #508]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a7e      	ldr	r2, [pc, #504]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <MX_GPIO_Init+0x28c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027fe:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <MX_GPIO_Init+0x28c>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a78      	ldr	r2, [pc, #480]	; (80029e4 <MX_GPIO_Init+0x28c>)
 8002804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <MX_GPIO_Init+0x28c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CS1_GPIO_Port, BMP2_CS1_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	2110      	movs	r1, #16
 800281a:	4873      	ldr	r0, [pc, #460]	; (80029e8 <MX_GPIO_Init+0x290>)
 800281c:	f001 fb14 	bl	8003e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	f244 0181 	movw	r1, #16513	; 0x4081
 8002826:	4871      	ldr	r0, [pc, #452]	; (80029ec <MX_GPIO_Init+0x294>)
 8002828:	f001 fb0e 	bl	8003e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 800282c:	2200      	movs	r2, #0
 800282e:	21fc      	movs	r1, #252	; 0xfc
 8002830:	486f      	ldr	r0, [pc, #444]	; (80029f0 <MX_GPIO_Init+0x298>)
 8002832:	f001 fb09 	bl	8003e48 <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CS1_Pin;
 8002836:	2310      	movs	r3, #16
 8002838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283a:	2301      	movs	r3, #1
 800283c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BMP2_CS1_GPIO_Port, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4866      	ldr	r0, [pc, #408]	; (80029e8 <MX_GPIO_Init+0x290>)
 800284e:	f001 f94f 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002858:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800285c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4862      	ldr	r0, [pc, #392]	; (80029f4 <MX_GPIO_Init+0x29c>)
 800286a:	f001 f941 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800286e:	2332      	movs	r3, #50	; 0x32
 8002870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800287e:	230b      	movs	r3, #11
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	4619      	mov	r1, r3
 8002888:	485a      	ldr	r0, [pc, #360]	; (80029f4 <MX_GPIO_Init+0x29c>)
 800288a:	f001 f931 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800288e:	2386      	movs	r3, #134	; 0x86
 8002890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800289e:	230b      	movs	r3, #11
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4853      	ldr	r0, [pc, #332]	; (80029f8 <MX_GPIO_Init+0x2a0>)
 80028aa:	f001 f921 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80028ae:	2308      	movs	r3, #8
 80028b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028be:	2302      	movs	r3, #2
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	4619      	mov	r1, r3
 80028c8:	484b      	ldr	r0, [pc, #300]	; (80029f8 <MX_GPIO_Init+0x2a0>)
 80028ca:	f001 f911 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80028ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80028d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4619      	mov	r1, r3
 80028e6:	4841      	ldr	r0, [pc, #260]	; (80029ec <MX_GPIO_Init+0x294>)
 80028e8:	f001 f902 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80028ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028fe:	230b      	movs	r3, #11
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	4619      	mov	r1, r3
 8002908:	4838      	ldr	r0, [pc, #224]	; (80029ec <MX_GPIO_Init+0x294>)
 800290a:	f001 f8f1 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 800290e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002920:	2302      	movs	r3, #2
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4831      	ldr	r0, [pc, #196]	; (80029f0 <MX_GPIO_Init+0x298>)
 800292c:	f001 f8e0 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002930:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002942:	230a      	movs	r3, #10
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4619      	mov	r1, r3
 800294c:	482a      	ldr	r0, [pc, #168]	; (80029f8 <MX_GPIO_Init+0x2a0>)
 800294e:	f001 f8cf 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	4824      	ldr	r0, [pc, #144]	; (80029f8 <MX_GPIO_Init+0x2a0>)
 8002968:	f001 f8c2 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 800296c:	23fc      	movs	r3, #252	; 0xfc
 800296e:	61fb      	str	r3, [r7, #28]
                          |LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	2301      	movs	r3, #1
 8002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	481b      	ldr	r0, [pc, #108]	; (80029f0 <MX_GPIO_Init+0x298>)
 8002984:	f001 f8b4 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002988:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800298c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800299a:	230b      	movs	r3, #11
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800299e:	f107 031c 	add.w	r3, r7, #28
 80029a2:	4619      	mov	r1, r3
 80029a4:	4815      	ldr	r0, [pc, #84]	; (80029fc <MX_GPIO_Init+0x2a4>)
 80029a6:	f001 f8a3 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80029aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b0:	2312      	movs	r3, #18
 80029b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029bc:	2304      	movs	r3, #4
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	4619      	mov	r1, r3
 80029c6:	4809      	ldr	r0, [pc, #36]	; (80029ec <MX_GPIO_Init+0x294>)
 80029c8:	f001 f892 	bl	8003af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	2028      	movs	r0, #40	; 0x28
 80029d2:	f000 ffc4 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029d6:	2028      	movs	r0, #40	; 0x28
 80029d8:	f000 ffdd 	bl	8003996 <HAL_NVIC_EnableIRQ>

}
 80029dc:	bf00      	nop
 80029de:	3730      	adds	r7, #48	; 0x30
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40020400 	.word	0x40020400
 80029f0:	40020c00 	.word	0x40020c00
 80029f4:	40020800 	.word	0x40020800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40021800 	.word	0x40021800

08002a00 <set_pwm_power>:
/**
 * @brief This function sets desired width modulation.
 * @param htim, pointer to a timer instance, .
 * @param pwm_power Desired width [%] in PWM Signal.
 */
void set_pwm_power (TIM_HandleTypeDef *htim, uint32_t pwm_power){
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
	if (pwm_power == 0){
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <set_pwm_power+0x18>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 0);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
	}
	uint32_t Counter_period = htim->Init.Period;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60fb      	str	r3, [r7, #12]
	uint32_t pwm_val = (Counter_period*pwm_power)/100.0f;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a2e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002a54 <set_pwm_power+0x54>
 8002a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a3a:	ee17 3a90 	vmov	r3, s15
 8002a3e:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (uint32_t)pwm_val);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	42c80000 	.word	0x42c80000

08002a58 <HAL_TIM_PeriodElapsedCallback>:
// Inside the HAL_TIM_PeriodElapsedCallback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a5c:	b08b      	sub	sp, #44	; 0x2c
 8002a5e:	af06      	add	r7, sp, #24
 8002a60:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a63      	ldr	r2, [pc, #396]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	f040 80be 	bne.w	8002be8 <HAL_TIM_PeriodElapsedCallback+0x190>
    // Read the temperature with a frequency of 4 Hz. 
		temp_read = BMP2_ReadTemperature_degC(&bmp2dev_1);
 8002a6c:	4862      	ldr	r0, [pc, #392]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002a6e:	f7ff fd91 	bl	8002594 <BMP2_ReadTemperature_degC>
 8002a72:	ec53 2b10 	vmov	r2, r3, d0
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7fe f8d5 	bl	8000c28 <__aeabi_d2f>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4a5e      	ldr	r2, [pc, #376]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a82:	6013      	str	r3, [r2, #0]
		temp_read_int = (int)temp_read;
 8002a84:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a8e:	ee17 2a90 	vmov	r2, s15
 8002a92:	4b5b      	ldr	r3, [pc, #364]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a94:	601a      	str	r2, [r3, #0]
		temp_fractional = (int)((temp_read - temp_read_int) * 1000);
 8002a96:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a98:	ed93 7a00 	vldr	s14, [r3]
 8002a9c:	4b58      	ldr	r3, [pc, #352]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aac:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002c04 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8002ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab8:	ee17 2a90 	vmov	r2, s15
 8002abc:	4b52      	ldr	r3, [pc, #328]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002abe:	601a      	str	r2, [r3, #0]
		// Write data to LCD
		LCD_goto_line(0);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fe fc87 	bl	80013d4 <LCD_goto_line>
		LCD_printf("Actual=%d.%03d[C]", temp_read_int, temp_fractional);
 8002ac6:	4b4e      	ldr	r3, [pc, #312]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4f      	ldr	r2, [pc, #316]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	484e      	ldr	r0, [pc, #312]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002ad2:	f7fe fc8d 	bl	80013f0 <LCD_printf>
		// Jakiś smiszny debugging dla odczytywania wartości zadaniej
		// opisać komentarze #TODO @Bartek
		if (dataReceivedFlag == 1){
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d13c      	bne.n	8002b5a <HAL_TIM_PeriodElapsedCallback+0x102>
			dataReceivedFlag = 0;  // Resetuj flagę
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]

			// Konwersja stringa na float
			receivedValue = atof(rxBuffer);
 8002ae6:	484b      	ldr	r0, [pc, #300]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002ae8:	f005 ff1c 	bl	8008924 <atof>
 8002aec:	ec53 2b10 	vmov	r2, r3, d0
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fe f898 	bl	8000c28 <__aeabi_d2f>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002afc:	6013      	str	r3, [r2, #0]
			temp_receivedValue_int = (int)receivedValue;
 8002afe:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b08:	ee17 2a90 	vmov	r2, s15
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b0e:	601a      	str	r2, [r3, #0]
			temp_receivedValue_fractional = (int)((receivedValue - temp_receivedValue_int) * 1000);
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b12:	ed93 7a00 	vldr	s14, [r3]
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b26:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002c04 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8002b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b32:	ee17 2a90 	vmov	r2, s15
 8002b36:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002b38:	601a      	str	r2, [r3, #0]

			// Wyświetl odebraną wiadomość
			LCD_goto_line(1);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f7fe fc4a 	bl	80013d4 <LCD_goto_line>
			LCD_printf("Set:%d.%03d[C]       ",  temp_receivedValue_int, temp_receivedValue_fractional);
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a36      	ldr	r2, [pc, #216]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4836      	ldr	r0, [pc, #216]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002b4c:	f7fe fc50 	bl	80013f0 <LCD_printf>

			// Resetuj rxBuffer
			memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	2100      	movs	r1, #0
 8002b54:	482f      	ldr	r0, [pc, #188]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002b56:	f007 fac7 	bl	800a0e8 <memset>
		}

    // Calculate the PID output
    pwm_duty = Calculate_PID_out(receivedValue, temp_read);
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b62:	ed93 7a00 	vldr	s14, [r3]
 8002b66:	eef0 0a47 	vmov.f32	s1, s14
 8002b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6e:	f7ff fd7f 	bl	8002670 <Calculate_PID_out>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4a2c      	ldr	r2, [pc, #176]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002b76:	6013      	str	r3, [r2, #0]

    set_pwm_power(&htim2, pwm_duty);
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481d      	ldr	r0, [pc, #116]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002b80:	f7ff ff3e 	bl	8002a00 <set_pwm_power>
	int msg_len = sprintf(json_msg, "{\"temperature\": %.2f, \"error\": %.2f, \"pwm_power\": %u, \"destined\": %.2f}\r\n",
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fcfd 	bl	8000588 <__aeabi_f2d>
 8002b8e:	4680      	mov	r8, r0
 8002b90:	4689      	mov	r9, r1
			temp_read,receivedValue-temp_read,pwm_duty,receivedValue);
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b94:	ed93 7a00 	vldr	s14, [r3]
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
	int msg_len = sprintf(json_msg, "{\"temperature\": %.2f, \"error\": %.2f, \"pwm_power\": %u, \"destined\": %.2f}\r\n",
 8002ba2:	ee17 0a90 	vmov	r0, s15
 8002ba6:	f7fd fcef 	bl	8000588 <__aeabi_f2d>
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002bb0:	681e      	ldr	r6, [r3, #0]
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fce6 	bl	8000588 <__aeabi_f2d>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002bc4:	9602      	str	r6, [sp, #8]
 8002bc6:	e9cd 4500 	strd	r4, r5, [sp]
 8002bca:	4642      	mov	r2, r8
 8002bcc:	464b      	mov	r3, r9
 8002bce:	4917      	ldr	r1, [pc, #92]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002bd0:	4817      	ldr	r0, [pc, #92]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002bd2:	f007 f9ed 	bl	8009fb0 <siprintf>
 8002bd6:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart3, (uint8_t*)json_msg, msg_len, 1000);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be0:	4913      	ldr	r1, [pc, #76]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002be2:	4814      	ldr	r0, [pc, #80]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002be4:	f004 fbf2 	bl	80073cc <HAL_UART_Transmit>
	}
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000048c 	.word	0x2000048c
 8002bf8:	20000018 	.word	0x20000018
 8002bfc:	2000027c 	.word	0x2000027c
 8002c00:	2000026c 	.word	0x2000026c
 8002c04:	447a0000 	.word	0x447a0000
 8002c08:	20000270 	.word	0x20000270
 8002c0c:	0800cca0 	.word	0x0800cca0
 8002c10:	20000422 	.word	0x20000422
 8002c14:	20000320 	.word	0x20000320
 8002c18:	20000280 	.word	0x20000280
 8002c1c:	20000274 	.word	0x20000274
 8002c20:	20000278 	.word	0x20000278
 8002c24:	0800ccb4 	.word	0x0800ccb4
 8002c28:	2000031c 	.word	0x2000031c
 8002c2c:	0800cccc 	.word	0x0800cccc
 8002c30:	20000284 	.word	0x20000284
 8002c34:	20000524 	.word	0x20000524

08002c38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)  // Sprawdź, czy przerwanie pochodzi z USART3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <HAL_UART_RxCpltCallback+0x78>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d12d      	bne.n	8002ca6 <HAL_UART_RxCpltCallback+0x6e>
    {
        if (rxBuffer[rxIndex] == '\n')  // Sprawdź, czy odebrano znak końca linii
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_UART_RxCpltCallback+0x80>)
 8002c54:	5c9b      	ldrb	r3, [r3, r2]
 8002c56:	2b0a      	cmp	r3, #10
 8002c58:	d10d      	bne.n	8002c76 <HAL_UART_RxCpltCallback+0x3e>
        {
            dataReceivedFlag = 1;  // Ustaw flagę o odebraniu pełnej wiadomości
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_UART_RxCpltCallback+0x84>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
            rxBuffer[rxIndex] = '\0';  // Zamień znak końca linii na znak końca łańcucha
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_UART_RxCpltCallback+0x80>)
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]
            rxIndex = 0;  // Resetuj indeks bufora
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	e00c      	b.n	8002c90 <HAL_UART_RxCpltCallback+0x58>
        }
        else
        {
            if (++rxIndex >= RX_BUFFER_SIZE)  // Inkrementuj indeks i sprawdź przepełnienie
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8002c82:	4619      	mov	r1, r3
 8002c84:	8011      	strh	r1, [r2, #0]
 8002c86:	2b7f      	cmp	r3, #127	; 0x7f
 8002c88:	d902      	bls.n	8002c90 <HAL_UART_RxCpltCallback+0x58>
            {
                rxIndex = 0;  // Resetuj indeks bufora
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	801a      	strh	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);  // Ponownie włącz przerwanie
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <HAL_UART_RxCpltCallback+0x80>)
 8002c9a:	4413      	add	r3, r2
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4807      	ldr	r0, [pc, #28]	; (8002cc0 <HAL_UART_RxCpltCallback+0x88>)
 8002ca2:	f004 fc16 	bl	80074d2 <HAL_UART_Receive_IT>
    }
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	20000420 	.word	0x20000420
 8002cb8:	20000320 	.word	0x20000320
 8002cbc:	20000422 	.word	0x20000422
 8002cc0:	20000524 	.word	0x20000524

08002cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cc8:	f000 fced 	bl	80036a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ccc:	f000 f84a 	bl	8002d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cd0:	f7ff fd42 	bl	8002758 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002cd4:	f000 fc26 	bl	8003524 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002cd8:	f000 f8b8 	bl	8002e4c <MX_SPI4_Init>
  MX_TIM2_Init();
 8002cdc:	f000 fa84 	bl	80031e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ce0:	f000 fafa 	bl	80032d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicjalizacja komponentów zewnętrznych
  BMP2_Init(&bmp2dev_1);
 8002ce4:	4817      	ldr	r0, [pc, #92]	; (8002d44 <main+0x80>)
 8002ce6:	f7ff fb89 	bl	80023fc <BMP2_Init>
  LCD_init();
 8002cea:	f7fe f9bf 	bl	800106c <LCD_init>
  memset(lastRxBuffer, 0, RX_BUFFER_SIZE);  // Inicjalizacja lastRxBuffer
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4815      	ldr	r0, [pc, #84]	; (8002d48 <main+0x84>)
 8002cf4:	f007 f9f8 	bl	800a0e8 <memset>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);  // Inicjalizacja przerwania odbioru UART
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <main+0x88>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <main+0x8c>)
 8002d02:	4413      	add	r3, r2
 8002d04:	2201      	movs	r2, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	4812      	ldr	r0, [pc, #72]	; (8002d54 <main+0x90>)
 8002d0a:	f004 fbe2 	bl	80074d2 <HAL_UART_Receive_IT>
  //Zmiana priorytetu przerwań, #TODO debugging.
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2105      	movs	r1, #5
 8002d12:	2027      	movs	r0, #39	; 0x27
 8002d14:	f000 fe23 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0); // Przykładowy niższy priorytet
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2106      	movs	r1, #6
 8002d1c:	201c      	movs	r0, #28
 8002d1e:	f000 fe1e 	bl	800395e <HAL_NVIC_SetPriority>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ARM_PID_Init(2.5f,0.0f,53.639f);
 8002d22:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8002d58 <main+0x94>
 8002d26:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8002d5c <main+0x98>
 8002d2a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8002d2e:	f7ff fc81 	bl	8002634 <ARM_PID_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002d32:	480b      	ldr	r0, [pc, #44]	; (8002d60 <main+0x9c>)
 8002d34:	f003 f998 	bl	8006068 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4809      	ldr	r0, [pc, #36]	; (8002d60 <main+0x9c>)
 8002d3c:	f003 fa6e 	bl	800621c <HAL_TIM_PWM_Start>
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <main+0x7c>
 8002d42:	bf00      	nop
 8002d44:	20000018 	.word	0x20000018
 8002d48:	200003a0 	.word	0x200003a0
 8002d4c:	20000420 	.word	0x20000420
 8002d50:	20000320 	.word	0x20000320
 8002d54:	20000524 	.word	0x20000524
 8002d58:	42568e56 	.word	0x42568e56
 8002d5c:	00000000 	.word	0x00000000
 8002d60:	2000048c 	.word	0x2000048c

08002d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b094      	sub	sp, #80	; 0x50
 8002d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d6a:	f107 0320 	add.w	r3, r7, #32
 8002d6e:	2230      	movs	r2, #48	; 0x30
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f007 f9b8 	bl	800a0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d88:	f001 f89c 	bl	8003ec4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <SystemClock_Config+0xd4>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <SystemClock_Config+0xd4>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6413      	str	r3, [r2, #64]	; 0x40
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <SystemClock_Config+0xd4>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <SystemClock_Config+0xd8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <SystemClock_Config+0xd8>)
 8002daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <SystemClock_Config+0xd8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002dc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002dd4:	23d8      	movs	r3, #216	; 0xd8
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de0:	f107 0320 	add.w	r3, r7, #32
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 f8cd 	bl	8003f84 <HAL_RCC_OscConfig>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002df0:	f000 f826 	bl	8002e40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002df4:	f001 f876 	bl	8003ee4 <HAL_PWREx_EnableOverDrive>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002dfe:	f000 f81f 	bl	8002e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e02:	230f      	movs	r3, #15
 8002e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e06:	2302      	movs	r3, #2
 8002e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002e14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	2107      	movs	r1, #7
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fb53 	bl	80044cc <HAL_RCC_ClockConfig>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002e2c:	f000 f808 	bl	8002e40 <Error_Handler>
  }
}
 8002e30:	bf00      	nop
 8002e32:	3750      	adds	r7, #80	; 0x50
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40007000 	.word	0x40007000

08002e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e44:	b672      	cpsid	i
}
 8002e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e48:	e7fe      	b.n	8002e48 <Error_Handler+0x8>
	...

08002e4c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <MX_SPI4_Init+0x78>)
 8002e54:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e5c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e64:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e6a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e6e:	2202      	movs	r2, #2
 8002e70:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e7e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e82:	2210      	movs	r2, #16
 8002e84:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <MX_SPI4_Init+0x74>)
 8002eac:	f002 f924 	bl	80050f8 <HAL_SPI_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002eb6:	f7ff ffc3 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000424 	.word	0x20000424
 8002ec4:	40013400 	.word	0x40013400

08002ec8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_SPI_MspInit+0x7c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d127      	bne.n	8002f3a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_SPI_MspInit+0x80>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_SPI_MspInit+0x80>)
 8002ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_SPI_MspInit+0x80>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_SPI_MspInit+0x80>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_SPI_MspInit+0x80>)
 8002f08:	f043 0310 	orr.w	r3, r3, #16
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_SPI_MspInit+0x80>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCL_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8002f1a:	2364      	movs	r3, #100	; 0x64
 8002f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f26:	2303      	movs	r3, #3
 8002f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <HAL_SPI_MspInit+0x84>)
 8002f36:	f000 fddb 	bl	8003af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3728      	adds	r7, #40	; 0x28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40013400 	.word	0x40013400
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_MspInit+0x44>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_MspInit+0x44>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <HAL_MspInit+0x44>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_MspInit+0x44>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_MspInit+0x44>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_MspInit+0x44>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800

08002f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <NMI_Handler+0x4>

08002f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <HardFault_Handler+0x4>

08002fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <MemManage_Handler+0x4>

08002faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fae:	e7fe      	b.n	8002fae <BusFault_Handler+0x4>

08002fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <UsageFault_Handler+0x4>

08002fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe4:	f000 fb9c 	bl	8003720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}

08002fec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <TIM2_IRQHandler+0x10>)
 8002ff2:	f003 fa0d 	bl	8006410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000048c 	.word	0x2000048c

08003000 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <TIM3_IRQHandler+0x10>)
 8003006:	f003 fa03 	bl	8006410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200004d8 	.word	0x200004d8

08003014 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <USART3_IRQHandler+0x10>)
 800301a:	f004 fa9f 	bl	800755c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000524 	.word	0x20000524

08003028 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800302c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003030:	f000 ff24 	bl	8003e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return 1;
 800303c:	2301      	movs	r3, #1
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <_kill>:

int _kill(int pid, int sig)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003052:	f007 f8ad 	bl	800a1b0 <__errno>
 8003056:	4603      	mov	r3, r0
 8003058:	2216      	movs	r2, #22
 800305a:	601a      	str	r2, [r3, #0]
  return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <_exit>:

void _exit (int status)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003070:	f04f 31ff 	mov.w	r1, #4294967295
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffe7 	bl	8003048 <_kill>
  while (1) {}    /* Make sure we hang here */
 800307a:	e7fe      	b.n	800307a <_exit+0x12>

0800307c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e00a      	b.n	80030a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800308e:	f3af 8000 	nop.w
 8003092:	4601      	mov	r1, r0
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	60ba      	str	r2, [r7, #8]
 800309a:	b2ca      	uxtb	r2, r1
 800309c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	3301      	adds	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	dbf0      	blt.n	800308e <_read+0x12>
  }

  return len;
 80030ac:	687b      	ldr	r3, [r7, #4]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e009      	b.n	80030dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	60ba      	str	r2, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3301      	adds	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	dbf1      	blt.n	80030c8 <_write+0x12>
  }
  return len;
 80030e4:	687b      	ldr	r3, [r7, #4]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <_close>:

int _close(int file)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003116:	605a      	str	r2, [r3, #4]
  return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <_isatty>:

int _isatty(int file)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800312e:	2301      	movs	r3, #1
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <_sbrk+0x5c>)
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <_sbrk+0x60>)
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <_sbrk+0x64>)
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <_sbrk+0x68>)
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <_sbrk+0x64>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	429a      	cmp	r2, r3
 8003186:	d207      	bcs.n	8003198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003188:	f007 f812 	bl	800a1b0 <__errno>
 800318c:	4603      	mov	r3, r0
 800318e:	220c      	movs	r2, #12
 8003190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e009      	b.n	80031ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <_sbrk+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <_sbrk+0x64>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <_sbrk+0x64>)
 80031a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031aa:	68fb      	ldr	r3, [r7, #12]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20050000 	.word	0x20050000
 80031b8:	00000400 	.word	0x00000400
 80031bc:	20000488 	.word	0x20000488
 80031c0:	20000700 	.word	0x20000700

080031c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <SystemInit+0x20>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <SystemInit+0x20>)
 80031d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	; 0x38
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003208:	463b      	mov	r3, r7
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
 8003214:	611a      	str	r2, [r3, #16]
 8003216:	615a      	str	r2, [r3, #20]
 8003218:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800321a:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <MX_TIM2_Init+0xec>)
 800321c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003220:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8003222:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <MX_TIM2_Init+0xec>)
 8003224:	226b      	movs	r2, #107	; 0x6b
 8003226:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003228:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <MX_TIM2_Init+0xec>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800322e:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <MX_TIM2_Init+0xec>)
 8003230:	f241 3287 	movw	r2, #4999	; 0x1387
 8003234:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <MX_TIM2_Init+0xec>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <MX_TIM2_Init+0xec>)
 800323e:	2200      	movs	r2, #0
 8003240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003242:	4824      	ldr	r0, [pc, #144]	; (80032d4 <MX_TIM2_Init+0xec>)
 8003244:	f002 feb8 	bl	8005fb8 <HAL_TIM_Base_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800324e:	f7ff fdf7 	bl	8002e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800325c:	4619      	mov	r1, r3
 800325e:	481d      	ldr	r0, [pc, #116]	; (80032d4 <MX_TIM2_Init+0xec>)
 8003260:	f003 fb0a 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800326a:	f7ff fde9 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800326e:	4819      	ldr	r0, [pc, #100]	; (80032d4 <MX_TIM2_Init+0xec>)
 8003270:	f002 ff72 	bl	8006158 <HAL_TIM_PWM_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800327a:	f7ff fde1 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003286:	f107 031c 	add.w	r3, r7, #28
 800328a:	4619      	mov	r1, r3
 800328c:	4811      	ldr	r0, [pc, #68]	; (80032d4 <MX_TIM2_Init+0xec>)
 800328e:	f003 ffa3 	bl	80071d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003298:	f7ff fdd2 	bl	8002e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800329c:	2360      	movs	r3, #96	; 0x60
 800329e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 80032a0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80032a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032ae:	463b      	mov	r3, r7
 80032b0:	2200      	movs	r2, #0
 80032b2:	4619      	mov	r1, r3
 80032b4:	4807      	ldr	r0, [pc, #28]	; (80032d4 <MX_TIM2_Init+0xec>)
 80032b6:	f003 f9cb 	bl	8006650 <HAL_TIM_PWM_ConfigChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80032c0:	f7ff fdbe 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032c4:	4803      	ldr	r0, [pc, #12]	; (80032d4 <MX_TIM2_Init+0xec>)
 80032c6:	f000 f8f7 	bl	80034b8 <HAL_TIM_MspPostInit>

}
 80032ca:	bf00      	nop
 80032cc:	3738      	adds	r7, #56	; 0x38
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000048c 	.word	0x2000048c

080032d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <MX_TIM3_Init+0x94>)
 80032f8:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <MX_TIM3_Init+0x98>)
 80032fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <MX_TIM3_Init+0x94>)
 80032fe:	226b      	movs	r2, #107	; 0x6b
 8003300:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <MX_TIM3_Init+0x94>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <MX_TIM3_Init+0x94>)
 800330a:	f241 3287 	movw	r2, #4999	; 0x1387
 800330e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <MX_TIM3_Init+0x94>)
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <MX_TIM3_Init+0x94>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800331c:	4813      	ldr	r0, [pc, #76]	; (800336c <MX_TIM3_Init+0x94>)
 800331e:	f002 fe4b 	bl	8005fb8 <HAL_TIM_Base_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003328:	f7ff fd8a 	bl	8002e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800332c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003332:	f107 0310 	add.w	r3, r7, #16
 8003336:	4619      	mov	r1, r3
 8003338:	480c      	ldr	r0, [pc, #48]	; (800336c <MX_TIM3_Init+0x94>)
 800333a:	f003 fa9d 	bl	8006878 <HAL_TIM_ConfigClockSource>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003344:	f7ff fd7c 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4805      	ldr	r0, [pc, #20]	; (800336c <MX_TIM3_Init+0x94>)
 8003356:	f003 ff3f 	bl	80071d8 <HAL_TIMEx_MasterConfigSynchronization>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003360:	f7ff fd6e 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003364:	bf00      	nop
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	200004d8 	.word	0x200004d8
 8003370:	40000400 	.word	0x40000400

08003374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	; 0x30
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d131      	bne.n	80033fa <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003396:	4b43      	ldr	r3, [pc, #268]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a42      	ldr	r2, [pc, #264]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a3c      	ldr	r2, [pc, #240]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ba:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 80033c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033cc:	2302      	movs	r3, #2
 80033ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033d8:	2301      	movs	r3, #1
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033dc:	f107 031c 	add.w	r3, r7, #28
 80033e0:	4619      	mov	r1, r3
 80033e2:	4831      	ldr	r0, [pc, #196]	; (80034a8 <HAL_TIM_Base_MspInit+0x134>)
 80033e4:	f000 fb84 	bl	8003af0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033e8:	2200      	movs	r2, #0
 80033ea:	2100      	movs	r1, #0
 80033ec:	201c      	movs	r0, #28
 80033ee:	f000 fab6 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033f2:	201c      	movs	r0, #28
 80033f4:	f000 facf 	bl	8003996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033f8:	e050      	b.n	800349c <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM3)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <HAL_TIM_Base_MspInit+0x138>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d14b      	bne.n	800349c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003404:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	6413      	str	r3, [r2, #64]	; 0x40
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	4a20      	ldr	r2, [pc, #128]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6313      	str	r3, [r2, #48]	; 0x30
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 800343a:	f043 0304 	orr.w	r3, r3, #4
 800343e:	6313      	str	r3, [r2, #48]	; 0x30
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_TIM_Base_MspInit+0x130>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 800344c:	2340      	movs	r3, #64	; 0x40
 800344e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800345c:	2302      	movs	r3, #2
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8003460:	f107 031c 	add.w	r3, r7, #28
 8003464:	4619      	mov	r1, r3
 8003466:	4812      	ldr	r0, [pc, #72]	; (80034b0 <HAL_TIM_Base_MspInit+0x13c>)
 8003468:	f000 fb42 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_DT_Pin;
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2302      	movs	r3, #2
 8003472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003478:	2300      	movs	r3, #0
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800347c:	2302      	movs	r3, #2
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	4619      	mov	r1, r3
 8003486:	480b      	ldr	r0, [pc, #44]	; (80034b4 <HAL_TIM_Base_MspInit+0x140>)
 8003488:	f000 fb32 	bl	8003af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800348c:	2200      	movs	r2, #0
 800348e:	2100      	movs	r1, #0
 8003490:	201d      	movs	r0, #29
 8003492:	f000 fa64 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003496:	201d      	movs	r0, #29
 8003498:	f000 fa7d 	bl	8003996 <HAL_NVIC_EnableIRQ>
}
 800349c:	bf00      	nop
 800349e:	3730      	adds	r7, #48	; 0x30
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020400 	.word	0x40020400
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40020000 	.word	0x40020000
 80034b4:	40020800 	.word	0x40020800

080034b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d8:	d11b      	bne.n	8003512 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_TIM_MspPostInit+0x64>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	4a0f      	ldr	r2, [pc, #60]	; (800351c <HAL_TIM_MspPostInit+0x64>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_TIM_MspPostInit+0x64>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034f2:	2320      	movs	r3, #32
 80034f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003502:	2301      	movs	r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	4619      	mov	r1, r3
 800350c:	4804      	ldr	r0, [pc, #16]	; (8003520 <HAL_TIM_MspPostInit+0x68>)
 800350e:	f000 faef 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003512:	bf00      	nop
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40020000 	.word	0x40020000

08003524 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <MX_USART3_UART_Init+0x58>)
 800352a:	4a15      	ldr	r2, [pc, #84]	; (8003580 <MX_USART3_UART_Init+0x5c>)
 800352c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <MX_USART3_UART_Init+0x58>)
 8003530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003534:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <MX_USART3_UART_Init+0x58>)
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <MX_USART3_UART_Init+0x58>)
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_USART3_UART_Init+0x58>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <MX_USART3_UART_Init+0x58>)
 800354a:	220c      	movs	r2, #12
 800354c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <MX_USART3_UART_Init+0x58>)
 8003550:	2200      	movs	r2, #0
 8003552:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <MX_USART3_UART_Init+0x58>)
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <MX_USART3_UART_Init+0x58>)
 800355c:	2200      	movs	r2, #0
 800355e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <MX_USART3_UART_Init+0x58>)
 8003562:	2200      	movs	r2, #0
 8003564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <MX_USART3_UART_Init+0x58>)
 8003568:	f003 fee2 	bl	8007330 <HAL_UART_Init>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003572:	f7ff fc65 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000524 	.word	0x20000524
 8003580:	40004800 	.word	0x40004800

08003584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b0aa      	sub	sp, #168	; 0xa8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800359c:	f107 0310 	add.w	r3, r7, #16
 80035a0:	2284      	movs	r2, #132	; 0x84
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f006 fd9f 	bl	800a0e8 <memset>
  if(uartHandle->Instance==USART3)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a26      	ldr	r2, [pc, #152]	; (8003648 <HAL_UART_MspInit+0xc4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d144      	bne.n	800363e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80035ba:	2310      	movs	r3, #16
 80035bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035be:	f107 0310 	add.w	r3, r7, #16
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 f9a8 	bl	8004918 <HAL_RCCEx_PeriphCLKConfig>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80035ce:	f7ff fc37 	bl	8002e40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_UART_MspInit+0xc8>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_UART_MspInit+0xc8>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_UART_MspInit+0xc8>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <HAL_UART_MspInit+0xc8>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <HAL_UART_MspInit+0xc8>)
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_UART_MspInit+0xc8>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800361c:	2307      	movs	r3, #7
 800361e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003622:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003626:	4619      	mov	r1, r3
 8003628:	4809      	ldr	r0, [pc, #36]	; (8003650 <HAL_UART_MspInit+0xcc>)
 800362a:	f000 fa61 	bl	8003af0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	2100      	movs	r1, #0
 8003632:	2027      	movs	r0, #39	; 0x27
 8003634:	f000 f993 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003638:	2027      	movs	r0, #39	; 0x27
 800363a:	f000 f9ac 	bl	8003996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800363e:	bf00      	nop
 8003640:	37a8      	adds	r7, #168	; 0xa8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40004800 	.word	0x40004800
 800364c:	40023800 	.word	0x40023800
 8003650:	40020c00 	.word	0x40020c00

08003654 <Reset_Handler>:
 8003654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800368c <LoopFillZerobss+0x12>
 8003658:	480d      	ldr	r0, [pc, #52]	; (8003690 <LoopFillZerobss+0x16>)
 800365a:	490e      	ldr	r1, [pc, #56]	; (8003694 <LoopFillZerobss+0x1a>)
 800365c:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <LoopFillZerobss+0x1e>)
 800365e:	2300      	movs	r3, #0
 8003660:	e002      	b.n	8003668 <LoopCopyDataInit>

08003662 <CopyDataInit>:
 8003662:	58d4      	ldr	r4, [r2, r3]
 8003664:	50c4      	str	r4, [r0, r3]
 8003666:	3304      	adds	r3, #4

08003668 <LoopCopyDataInit>:
 8003668:	18c4      	adds	r4, r0, r3
 800366a:	428c      	cmp	r4, r1
 800366c:	d3f9      	bcc.n	8003662 <CopyDataInit>
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <LoopFillZerobss+0x22>)
 8003670:	4c0b      	ldr	r4, [pc, #44]	; (80036a0 <LoopFillZerobss+0x26>)
 8003672:	2300      	movs	r3, #0
 8003674:	e001      	b.n	800367a <LoopFillZerobss>

08003676 <FillZerobss>:
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	3204      	adds	r2, #4

0800367a <LoopFillZerobss>:
 800367a:	42a2      	cmp	r2, r4
 800367c:	d3fb      	bcc.n	8003676 <FillZerobss>
 800367e:	f7ff fda1 	bl	80031c4 <SystemInit>
 8003682:	f006 fd9b 	bl	800a1bc <__libc_init_array>
 8003686:	f7ff fb1d 	bl	8002cc4 <main>
 800368a:	4770      	bx	lr
 800368c:	20050000 	.word	0x20050000
 8003690:	20000000 	.word	0x20000000
 8003694:	20000228 	.word	0x20000228
 8003698:	0800d16c 	.word	0x0800d16c
 800369c:	20000228 	.word	0x20000228
 80036a0:	200006fc 	.word	0x200006fc

080036a4 <ADC_IRQHandler>:
 80036a4:	e7fe      	b.n	80036a4 <ADC_IRQHandler>

080036a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036aa:	2003      	movs	r0, #3
 80036ac:	f000 f94c 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036b0:	2000      	movs	r0, #0
 80036b2:	f000 f805 	bl	80036c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b6:	f7ff fc4b 	bl	8002f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_InitTick+0x54>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_InitTick+0x58>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f967 	bl	80039b2 <HAL_SYSTICK_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00e      	b.n	800370c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d80a      	bhi.n	800370a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f4:	2200      	movs	r2, #0
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f000 f92f 	bl	800395e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <HAL_InitTick+0x5c>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000054 	.word	0x20000054
 8003718:	2000005c 	.word	0x2000005c
 800371c:	20000058 	.word	0x20000058

08003720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_IncTick+0x20>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_IncTick+0x24>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_IncTick+0x24>)
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2000005c 	.word	0x2000005c
 8003744:	200005ac 	.word	0x200005ac

08003748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return uwTick;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_GetTick+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	200005ac 	.word	0x200005ac

08003760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff ffee 	bl	8003748 <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d005      	beq.n	8003786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_Delay+0x44>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003786:	bf00      	nop
 8003788:	f7ff ffde 	bl	8003748 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d8f7      	bhi.n	8003788 <HAL_Delay+0x28>
  {
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2000005c 	.word	0x2000005c

080037a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <__NVIC_SetPriorityGrouping+0x40>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c4:	4013      	ands	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x40>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00
 80037ec:	05fa0000 	.word	0x05fa0000

080037f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <__NVIC_GetPriorityGrouping+0x18>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0307 	and.w	r3, r3, #7
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	2b00      	cmp	r3, #0
 800381c:	db0b      	blt.n	8003836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4907      	ldr	r1, [pc, #28]	; (8003844 <__NVIC_EnableIRQ+0x38>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2001      	movs	r0, #1
 800382e:	fa00 f202 	lsl.w	r2, r0, r2
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	; (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003914:	d301      	bcc.n	800391a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003916:	2301      	movs	r3, #1
 8003918:	e00f      	b.n	800393a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <SysTick_Config+0x40>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003922:	210f      	movs	r1, #15
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f7ff ff8e 	bl	8003848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <SysTick_Config+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	4b04      	ldr	r3, [pc, #16]	; (8003944 <SysTick_Config+0x40>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000e010 	.word	0xe000e010

08003948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff29 	bl	80037a8 <__NVIC_SetPriorityGrouping>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff3e 	bl	80037f0 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff8e 	bl	800389c <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5d 	bl	8003848 <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff31 	bl	800380c <__NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffa2 	bl	8003904 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039d8:	f7ff feb6 	bl	8003748 <HAL_GetTick>
 80039dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d008      	beq.n	80039fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e052      	b.n	8003aa2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0216 	bic.w	r2, r2, #22
 8003a0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <HAL_DMA_Abort+0x62>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0208 	bic.w	r2, r2, #8
 8003a3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4c:	e013      	b.n	8003a76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a4e:	f7ff fe7b 	bl	8003748 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d90c      	bls.n	8003a76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e015      	b.n	8003aa2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e4      	bne.n	8003a4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	223f      	movs	r2, #63	; 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d004      	beq.n	8003ac8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e00c      	b.n	8003ae2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2205      	movs	r2, #5
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	e175      	b.n	8003dfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b10:	2201      	movs	r2, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	f040 8164 	bne.w	8003df6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d005      	beq.n	8003b46 <HAL_GPIO_Init+0x56>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d130      	bne.n	8003ba8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	2203      	movs	r2, #3
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 0201 	and.w	r2, r3, #1
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d017      	beq.n	8003be4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d123      	bne.n	8003c38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	08da      	lsrs	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3208      	adds	r2, #8
 8003bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	220f      	movs	r2, #15
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	08da      	lsrs	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3208      	adds	r2, #8
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	2203      	movs	r2, #3
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0203 	and.w	r2, r3, #3
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80be 	beq.w	8003df6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7a:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c84:	6453      	str	r3, [r2, #68]	; 0x44
 8003c86:	4b63      	ldr	r3, [pc, #396]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c92:	4a61      	ldr	r2, [pc, #388]	; (8003e18 <HAL_GPIO_Init+0x328>)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3302      	adds	r3, #2
 8003c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <HAL_GPIO_Init+0x32c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d037      	beq.n	8003d2e <HAL_GPIO_Init+0x23e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a57      	ldr	r2, [pc, #348]	; (8003e20 <HAL_GPIO_Init+0x330>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d031      	beq.n	8003d2a <HAL_GPIO_Init+0x23a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a56      	ldr	r2, [pc, #344]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02b      	beq.n	8003d26 <HAL_GPIO_Init+0x236>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a55      	ldr	r2, [pc, #340]	; (8003e28 <HAL_GPIO_Init+0x338>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d025      	beq.n	8003d22 <HAL_GPIO_Init+0x232>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a54      	ldr	r2, [pc, #336]	; (8003e2c <HAL_GPIO_Init+0x33c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01f      	beq.n	8003d1e <HAL_GPIO_Init+0x22e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a53      	ldr	r2, [pc, #332]	; (8003e30 <HAL_GPIO_Init+0x340>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d019      	beq.n	8003d1a <HAL_GPIO_Init+0x22a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_GPIO_Init+0x344>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_GPIO_Init+0x226>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a51      	ldr	r2, [pc, #324]	; (8003e38 <HAL_GPIO_Init+0x348>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00d      	beq.n	8003d12 <HAL_GPIO_Init+0x222>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a50      	ldr	r2, [pc, #320]	; (8003e3c <HAL_GPIO_Init+0x34c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d007      	beq.n	8003d0e <HAL_GPIO_Init+0x21e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4f      	ldr	r2, [pc, #316]	; (8003e40 <HAL_GPIO_Init+0x350>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_GPIO_Init+0x21a>
 8003d06:	2309      	movs	r3, #9
 8003d08:	e012      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	e010      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	e00e      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d12:	2307      	movs	r3, #7
 8003d14:	e00c      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d16:	2306      	movs	r3, #6
 8003d18:	e00a      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d1a:	2305      	movs	r3, #5
 8003d1c:	e008      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	e006      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d22:	2303      	movs	r3, #3
 8003d24:	e004      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e002      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f002 0203 	and.w	r2, r2, #3
 8003d36:	0092      	lsls	r2, r2, #2
 8003d38:	4093      	lsls	r3, r2
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d40:	4935      	ldr	r1, [pc, #212]	; (8003e18 <HAL_GPIO_Init+0x328>)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d9c:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003da2:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dc6:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	f67f ae86 	bls.w	8003b10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40013800 	.word	0x40013800
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	40020400 	.word	0x40020400
 8003e24:	40020800 	.word	0x40020800
 8003e28:	40020c00 	.word	0x40020c00
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40021400 	.word	0x40021400
 8003e34:	40021800 	.word	0x40021800
 8003e38:	40021c00 	.word	0x40021c00
 8003e3c:	40022000 	.word	0x40022000
 8003e40:	40022400 	.word	0x40022400
 8003e44:	40013c00 	.word	0x40013c00

08003e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]
 8003e54:	4613      	mov	r3, r2
 8003e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e58:	787b      	ldrb	r3, [r7, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e64:	e003      	b.n	8003e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	041a      	lsls	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	619a      	str	r2, [r3, #24]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d006      	beq.n	8003ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f806 	bl	8003eac <HAL_GPIO_EXTI_Callback>
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40013c00 	.word	0x40013c00

08003eac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed2:	6013      	str	r3, [r2, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40007000 	.word	0x40007000

08003ee4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f12:	f7ff fc19 	bl	8003748 <HAL_GetTick>
 8003f16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f18:	e009      	b.n	8003f2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f1a:	f7ff fc15 	bl	8003748 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f28:	d901      	bls.n	8003f2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e022      	b.n	8003f74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3a:	d1ee      	bne.n	8003f1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f48:	f7ff fbfe 	bl	8003748 <HAL_GetTick>
 8003f4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f4e:	e009      	b.n	8003f64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f50:	f7ff fbfa 	bl	8003748 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f5e:	d901      	bls.n	8003f64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e007      	b.n	8003f74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f70:	d1ee      	bne.n	8003f50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40007000 	.word	0x40007000

08003f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e291      	b.n	80044be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8087 	beq.w	80040b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fa8:	4b96      	ldr	r3, [pc, #600]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d00c      	beq.n	8003fce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb4:	4b93      	ldr	r3, [pc, #588]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d112      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x62>
 8003fc0:	4b90      	ldr	r3, [pc, #576]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fce:	4b8d      	ldr	r3, [pc, #564]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d06c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x130>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d168      	bne.n	80040b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e26b      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x7a>
 8003ff0:	4b84      	ldr	r3, [pc, #528]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a83      	ldr	r2, [pc, #524]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e02e      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0x9c>
 8004006:	4b7f      	ldr	r3, [pc, #508]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7e      	ldr	r2, [pc, #504]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800400c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b7c      	ldr	r3, [pc, #496]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7b      	ldr	r2, [pc, #492]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e01d      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0xc0>
 800402a:	4b76      	ldr	r3, [pc, #472]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a75      	ldr	r2, [pc, #468]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b73      	ldr	r3, [pc, #460]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a72      	ldr	r2, [pc, #456]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8004044:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a6e      	ldr	r2, [pc, #440]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6b      	ldr	r2, [pc, #428]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7ff fb70 	bl	8003748 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7ff fb6c 	bl	8003748 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e21f      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b61      	ldr	r3, [pc, #388]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0xe8>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7ff fb5c 	bl	8003748 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7ff fb58 	bl	8003748 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e20b      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	4b57      	ldr	r3, [pc, #348]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x110>
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d069      	beq.n	8004196 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c2:	4b50      	ldr	r3, [pc, #320]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00b      	beq.n	80040e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ce:	4b4d      	ldr	r3, [pc, #308]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d11c      	bne.n	8004114 <HAL_RCC_OscConfig+0x190>
 80040da:	4b4a      	ldr	r3, [pc, #296]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d116      	bne.n	8004114 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_OscConfig+0x17a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e1df      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fe:	4b41      	ldr	r3, [pc, #260]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	493d      	ldr	r1, [pc, #244]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004112:	e040      	b.n	8004196 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d023      	beq.n	8004164 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411c:	4b39      	ldr	r3, [pc, #228]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a38      	ldr	r2, [pc, #224]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7ff fb0e 	bl	8003748 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004130:	f7ff fb0a 	bl	8003748 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1bd      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b30      	ldr	r3, [pc, #192]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4929      	ldr	r1, [pc, #164]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
 8004162:	e018      	b.n	8004196 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004164:	4b27      	ldr	r3, [pc, #156]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a26      	ldr	r2, [pc, #152]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7ff faea 	bl	8003748 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004178:	f7ff fae6 	bl	8003748 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e199      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d038      	beq.n	8004214 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d019      	beq.n	80041de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	4a15      	ldr	r2, [pc, #84]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7ff fac7 	bl	8003748 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041be:	f7ff fac3 	bl	8003748 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e176      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x23a>
 80041dc:	e01a      	b.n	8004214 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7ff faad 	bl	8003748 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f2:	f7ff faa9 	bl	8003748 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d903      	bls.n	8004208 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e15c      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
 8004204:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b91      	ldr	r3, [pc, #580]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ee      	bne.n	80041f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a4 	beq.w	800436a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004222:	4b8b      	ldr	r3, [pc, #556]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10d      	bne.n	800424a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	4b88      	ldr	r3, [pc, #544]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	4a87      	ldr	r2, [pc, #540]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004238:	6413      	str	r3, [r2, #64]	; 0x40
 800423a:	4b85      	ldr	r3, [pc, #532]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004246:	2301      	movs	r3, #1
 8004248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424a:	4b82      	ldr	r3, [pc, #520]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d118      	bne.n	8004288 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004256:	4b7f      	ldr	r3, [pc, #508]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7e      	ldr	r2, [pc, #504]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004262:	f7ff fa71 	bl	8003748 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7ff fa6d 	bl	8003748 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b64      	cmp	r3, #100	; 0x64
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e120      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427c:	4b75      	ldr	r3, [pc, #468]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x31a>
 8004290:	4b6f      	ldr	r3, [pc, #444]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a6e      	ldr	r2, [pc, #440]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
 800429c:	e02d      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x33c>
 80042a6:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a69      	ldr	r2, [pc, #420]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	4b67      	ldr	r3, [pc, #412]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a66      	ldr	r2, [pc, #408]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
 80042be:	e01c      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d10c      	bne.n	80042e2 <HAL_RCC_OscConfig+0x35e>
 80042c8:	4b61      	ldr	r3, [pc, #388]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a60      	ldr	r2, [pc, #384]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042ce:	f043 0304 	orr.w	r3, r3, #4
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	4b5e      	ldr	r3, [pc, #376]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	4a5d      	ldr	r2, [pc, #372]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6713      	str	r3, [r2, #112]	; 0x70
 80042e0:	e00b      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
 80042e2:	4b5b      	ldr	r3, [pc, #364]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a5a      	ldr	r2, [pc, #360]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
 80042ee:	4b58      	ldr	r3, [pc, #352]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	4a57      	ldr	r2, [pc, #348]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d015      	beq.n	800432e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7ff fa21 	bl	8003748 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7ff fa1d 	bl	8003748 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0ce      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ee      	beq.n	800430a <HAL_RCC_OscConfig+0x386>
 800432c:	e014      	b.n	8004358 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7ff fa0b 	bl	8003748 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004334:	e00a      	b.n	800434c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7ff fa07 	bl	8003748 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0b8      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434c:	4b40      	ldr	r3, [pc, #256]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ee      	bne.n	8004336 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435e:	4b3c      	ldr	r3, [pc, #240]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a3b      	ldr	r2, [pc, #236]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80a4 	beq.w	80044bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004374:	4b36      	ldr	r3, [pc, #216]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b08      	cmp	r3, #8
 800437e:	d06b      	beq.n	8004458 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d149      	bne.n	800441c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004388:	4b31      	ldr	r3, [pc, #196]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a30      	ldr	r2, [pc, #192]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 800438e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7ff f9d8 	bl	8003748 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439c:	f7ff f9d4 	bl	8003748 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e087      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	019b      	lsls	r3, r3, #6
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	3b01      	subs	r3, #1
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	4313      	orrs	r3, r2
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80043e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a18      	ldr	r2, [pc, #96]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 80043ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7ff f9a8 	bl	8003748 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fc:	f7ff f9a4 	bl	8003748 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e057      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x478>
 800441a:	e04f      	b.n	80044bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0b      	ldr	r2, [pc, #44]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7ff f98e 	bl	8003748 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7ff f98a 	bl	8003748 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e03d      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b03      	ldr	r3, [pc, #12]	; (8004450 <HAL_RCC_OscConfig+0x4cc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x4ac>
 800444e:	e035      	b.n	80044bc <HAL_RCC_OscConfig+0x538>
 8004450:	40023800 	.word	0x40023800
 8004454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_RCC_OscConfig+0x544>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d028      	beq.n	80044b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d121      	bne.n	80044b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d11a      	bne.n	80044b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800448e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004490:	4293      	cmp	r3, r2
 8004492:	d111      	bne.n	80044b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	3b01      	subs	r3, #1
 80044a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800

080044cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0d0      	b.n	8004686 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e4:	4b6a      	ldr	r3, [pc, #424]	; (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d910      	bls.n	8004514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b67      	ldr	r3, [pc, #412]	; (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 020f 	bic.w	r2, r3, #15
 80044fa:	4965      	ldr	r1, [pc, #404]	; (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	4b63      	ldr	r3, [pc, #396]	; (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0b8      	b.n	8004686 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d020      	beq.n	8004562 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800452c:	4b59      	ldr	r3, [pc, #356]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4a58      	ldr	r2, [pc, #352]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 8004532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004536:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004544:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4a52      	ldr	r2, [pc, #328]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 800454a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800454e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004550:	4b50      	ldr	r3, [pc, #320]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	494d      	ldr	r1, [pc, #308]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d040      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d115      	bne.n	80045ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e07f      	b.n	8004686 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458e:	4b41      	ldr	r3, [pc, #260]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e073      	b.n	8004686 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06b      	b.n	8004686 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ae:	4b39      	ldr	r3, [pc, #228]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f023 0203 	bic.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4936      	ldr	r1, [pc, #216]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c0:	f7ff f8c2 	bl	8003748 <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	e00a      	b.n	80045de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c8:	f7ff f8be 	bl	8003748 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e053      	b.n	8004686 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 020c 	and.w	r2, r3, #12
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d1eb      	bne.n	80045c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d210      	bcs.n	8004620 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 020f 	bic.w	r2, r3, #15
 8004606:	4922      	ldr	r1, [pc, #136]	; (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e032      	b.n	8004686 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4916      	ldr	r1, [pc, #88]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800464a:	4b12      	ldr	r3, [pc, #72]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	490e      	ldr	r1, [pc, #56]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800465e:	f000 f821 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8004662:	4602      	mov	r2, r0
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	490a      	ldr	r1, [pc, #40]	; (8004698 <HAL_RCC_ClockConfig+0x1cc>)
 8004670:	5ccb      	ldrb	r3, [r1, r3]
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <HAL_RCC_ClockConfig+0x1d0>)
 8004678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1d4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff f81e 	bl	80036c0 <HAL_InitTick>

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40023c00 	.word	0x40023c00
 8004694:	40023800 	.word	0x40023800
 8004698:	0800cd18 	.word	0x0800cd18
 800469c:	20000054 	.word	0x20000054
 80046a0:	20000058 	.word	0x20000058

080046a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a8:	b094      	sub	sp, #80	; 0x50
 80046aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	647b      	str	r3, [r7, #68]	; 0x44
 80046b0:	2300      	movs	r3, #0
 80046b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b4:	2300      	movs	r3, #0
 80046b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046bc:	4b79      	ldr	r3, [pc, #484]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 030c 	and.w	r3, r3, #12
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d00d      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x40>
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	f200 80e1 	bhi.w	8004890 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x34>
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d003      	beq.n	80046de <HAL_RCC_GetSysClockFreq+0x3a>
 80046d6:	e0db      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b73      	ldr	r3, [pc, #460]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046dc:	e0db      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046de:	4b73      	ldr	r3, [pc, #460]	; (80048ac <HAL_RCC_GetSysClockFreq+0x208>)
 80046e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e2:	e0d8      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e4:	4b6f      	ldr	r3, [pc, #444]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046ee:	4b6d      	ldr	r3, [pc, #436]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d063      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fa:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	099b      	lsrs	r3, r3, #6
 8004700:	2200      	movs	r2, #0
 8004702:	63bb      	str	r3, [r7, #56]	; 0x38
 8004704:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470c:	633b      	str	r3, [r7, #48]	; 0x30
 800470e:	2300      	movs	r3, #0
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
 8004712:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004716:	4622      	mov	r2, r4
 8004718:	462b      	mov	r3, r5
 800471a:	f04f 0000 	mov.w	r0, #0
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	0159      	lsls	r1, r3, #5
 8004724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004728:	0150      	lsls	r0, r2, #5
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4621      	mov	r1, r4
 8004730:	1a51      	subs	r1, r2, r1
 8004732:	6139      	str	r1, [r7, #16]
 8004734:	4629      	mov	r1, r5
 8004736:	eb63 0301 	sbc.w	r3, r3, r1
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004748:	4659      	mov	r1, fp
 800474a:	018b      	lsls	r3, r1, #6
 800474c:	4651      	mov	r1, sl
 800474e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004752:	4651      	mov	r1, sl
 8004754:	018a      	lsls	r2, r1, #6
 8004756:	4651      	mov	r1, sl
 8004758:	ebb2 0801 	subs.w	r8, r2, r1
 800475c:	4659      	mov	r1, fp
 800475e:	eb63 0901 	sbc.w	r9, r3, r1
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800476e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004776:	4690      	mov	r8, r2
 8004778:	4699      	mov	r9, r3
 800477a:	4623      	mov	r3, r4
 800477c:	eb18 0303 	adds.w	r3, r8, r3
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	462b      	mov	r3, r5
 8004784:	eb49 0303 	adc.w	r3, r9, r3
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004796:	4629      	mov	r1, r5
 8004798:	024b      	lsls	r3, r1, #9
 800479a:	4621      	mov	r1, r4
 800479c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047a0:	4621      	mov	r1, r4
 80047a2:	024a      	lsls	r2, r1, #9
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047aa:	2200      	movs	r2, #0
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047b4:	f7fc fa88 	bl	8000cc8 <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4613      	mov	r3, r2
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	e058      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c2:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	2200      	movs	r2, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	4611      	mov	r1, r2
 80047ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047d2:	623b      	str	r3, [r7, #32]
 80047d4:	2300      	movs	r3, #0
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	f04f 0000 	mov.w	r0, #0
 80047e4:	f04f 0100 	mov.w	r1, #0
 80047e8:	0159      	lsls	r1, r3, #5
 80047ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ee:	0150      	lsls	r0, r2, #5
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4641      	mov	r1, r8
 80047f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80047fa:	4649      	mov	r1, r9
 80047fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800480c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004814:	ebb2 040a 	subs.w	r4, r2, sl
 8004818:	eb63 050b 	sbc.w	r5, r3, fp
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	00eb      	lsls	r3, r5, #3
 8004826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800482a:	00e2      	lsls	r2, r4, #3
 800482c:	4614      	mov	r4, r2
 800482e:	461d      	mov	r5, r3
 8004830:	4643      	mov	r3, r8
 8004832:	18e3      	adds	r3, r4, r3
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	464b      	mov	r3, r9
 8004838:	eb45 0303 	adc.w	r3, r5, r3
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800484a:	4629      	mov	r1, r5
 800484c:	028b      	lsls	r3, r1, #10
 800484e:	4621      	mov	r1, r4
 8004850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004854:	4621      	mov	r1, r4
 8004856:	028a      	lsls	r2, r1, #10
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485e:	2200      	movs	r2, #0
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	61fa      	str	r2, [r7, #28]
 8004864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004868:	f7fc fa2e 	bl	8000cc8 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4613      	mov	r3, r2
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	3301      	adds	r3, #1
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800488e:	e002      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004898:	4618      	mov	r0, r3
 800489a:	3750      	adds	r7, #80	; 0x50
 800489c:	46bd      	mov	sp, r7
 800489e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	00f42400 	.word	0x00f42400
 80048ac:	007a1200 	.word	0x007a1200

080048b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048b6:	681b      	ldr	r3, [r3, #0]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000054 	.word	0x20000054

080048c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048cc:	f7ff fff0 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0a9b      	lsrs	r3, r3, #10
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4903      	ldr	r1, [pc, #12]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40023800 	.word	0x40023800
 80048ec:	0800cd28 	.word	0x0800cd28

080048f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048f4:	f7ff ffdc 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	0b5b      	lsrs	r3, r3, #13
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4903      	ldr	r1, [pc, #12]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40023800 	.word	0x40023800
 8004914:	0800cd28 	.word	0x0800cd28

08004918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004940:	4b69      	ldr	r3, [pc, #420]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a68      	ldr	r2, [pc, #416]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004946:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800494a:	6093      	str	r3, [r2, #8]
 800494c:	4b66      	ldr	r3, [pc, #408]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	4964      	ldr	r1, [pc, #400]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004962:	2301      	movs	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d017      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004972:	4b5d      	ldr	r3, [pc, #372]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	4959      	ldr	r1, [pc, #356]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004990:	d101      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004992:	2301      	movs	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d017      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049ae:	4b4e      	ldr	r3, [pc, #312]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	494a      	ldr	r1, [pc, #296]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049cc:	d101      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049da:	2301      	movs	r3, #1
 80049dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 808b 	beq.w	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049fc:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	4a39      	ldr	r2, [pc, #228]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a06:	6413      	str	r3, [r2, #64]	; 0x40
 8004a08:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a14:	4b35      	ldr	r3, [pc, #212]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a34      	ldr	r2, [pc, #208]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a20:	f7fe fe92 	bl	8003748 <HAL_GetTick>
 8004a24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a28:	f7fe fe8e 	bl	8003748 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e357      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a3a:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a46:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d035      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d02e      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a64:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a8c:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d114      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fe fe56 	bl	8003748 <HAL_GetTick>
 8004a9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa0:	f7fe fe52 	bl	8003748 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e319      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0ee      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ace:	d111      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ade:	400b      	ands	r3, r1
 8004ae0:	4901      	ldr	r1, [pc, #4]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40007000 	.word	0x40007000
 8004af0:	0ffffcff 	.word	0x0ffffcff
 8004af4:	4baa      	ldr	r3, [pc, #680]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4aa9      	ldr	r2, [pc, #676]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004afe:	6093      	str	r3, [r2, #8]
 8004b00:	4ba7      	ldr	r3, [pc, #668]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0c:	49a4      	ldr	r1, [pc, #656]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b1e:	4ba0      	ldr	r3, [pc, #640]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b24:	4a9e      	ldr	r2, [pc, #632]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b2e:	4b9c      	ldr	r3, [pc, #624]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	4999      	ldr	r1, [pc, #612]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b4c:	4b94      	ldr	r3, [pc, #592]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b5a:	4991      	ldr	r1, [pc, #580]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b6e:	4b8c      	ldr	r3, [pc, #560]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b7c:	4988      	ldr	r1, [pc, #544]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b90:	4b83      	ldr	r3, [pc, #524]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9e:	4980      	ldr	r1, [pc, #512]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb2:	4b7b      	ldr	r3, [pc, #492]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc0:	4977      	ldr	r1, [pc, #476]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd4:	4b72      	ldr	r3, [pc, #456]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f023 0203 	bic.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	496f      	ldr	r1, [pc, #444]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bf6:	4b6a      	ldr	r3, [pc, #424]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f023 020c 	bic.w	r2, r3, #12
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	4966      	ldr	r1, [pc, #408]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c18:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	495e      	ldr	r1, [pc, #376]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c3a:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c48:	4955      	ldr	r1, [pc, #340]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c5c:	4b50      	ldr	r3, [pc, #320]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	494d      	ldr	r1, [pc, #308]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c7e:	4b48      	ldr	r3, [pc, #288]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	4944      	ldr	r1, [pc, #272]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ca0:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	493c      	ldr	r1, [pc, #240]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cc2:	4b37      	ldr	r3, [pc, #220]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	4933      	ldr	r1, [pc, #204]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ce4:	4b2e      	ldr	r3, [pc, #184]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf2:	492b      	ldr	r1, [pc, #172]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d011      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d06:	4b26      	ldr	r3, [pc, #152]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d14:	4922      	ldr	r1, [pc, #136]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d24:	d101      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d46:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d54:	4912      	ldr	r1, [pc, #72]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d78:	4909      	ldr	r1, [pc, #36]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d006      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 80d9 	beq.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d94:	4b02      	ldr	r3, [pc, #8]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a01      	ldr	r2, [pc, #4]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d9e:	e001      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004da0:	40023800 	.word	0x40023800
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fe fccf 	bl	8003748 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dae:	f7fe fccb 	bl	8003748 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b64      	cmp	r3, #100	; 0x64
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e194      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dc0:	4b6c      	ldr	r3, [pc, #432]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d021      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11d      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004de0:	4b64      	ldr	r3, [pc, #400]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dee:	4b61      	ldr	r3, [pc, #388]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df4:	0e1b      	lsrs	r3, r3, #24
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	019a      	lsls	r2, r3, #6
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	431a      	orrs	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	071b      	lsls	r3, r3, #28
 8004e14:	4957      	ldr	r1, [pc, #348]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02e      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e46:	d129      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e48:	4b4a      	ldr	r3, [pc, #296]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4e:	0c1b      	lsrs	r3, r3, #16
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e56:	4b47      	ldr	r3, [pc, #284]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5c:	0f1b      	lsrs	r3, r3, #28
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	019a      	lsls	r2, r3, #6
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	071b      	lsls	r3, r3, #28
 8004e7c:	493d      	ldr	r1, [pc, #244]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e84:	4b3b      	ldr	r3, [pc, #236]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8a:	f023 021f 	bic.w	r2, r3, #31
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4937      	ldr	r1, [pc, #220]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01d      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ea8:	4b32      	ldr	r3, [pc, #200]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eae:	0e1b      	lsrs	r3, r3, #24
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	0f1b      	lsrs	r3, r3, #28
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	019a      	lsls	r2, r3, #6
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	061b      	lsls	r3, r3, #24
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	071b      	lsls	r3, r3, #28
 8004edc:	4925      	ldr	r1, [pc, #148]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d011      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	019a      	lsls	r2, r3, #6
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	061b      	lsls	r3, r3, #24
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	071b      	lsls	r3, r3, #28
 8004f0c:	4919      	ldr	r1, [pc, #100]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f20:	f7fe fc12 	bl	8003748 <HAL_GetTick>
 8004f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f28:	f7fe fc0e 	bl	8003748 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0d7      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	f040 80cd 	bne.w	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5a:	f7fe fbf5 	bl	8003748 <HAL_GetTick>
 8004f5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f62:	f7fe fbf1 	bl	8003748 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b64      	cmp	r3, #100	; 0x64
 8004f6e:	d903      	bls.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e0ba      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f78:	4b5e      	ldr	r3, [pc, #376]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f84:	d0ed      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02e      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d12a      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fae:	4b51      	ldr	r3, [pc, #324]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fbc:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	0f1b      	lsrs	r3, r3, #28
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	019a      	lsls	r2, r3, #6
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	071b      	lsls	r3, r3, #28
 8004fe2:	4944      	ldr	r1, [pc, #272]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fea:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	493d      	ldr	r1, [pc, #244]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d022      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005018:	d11d      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800501a:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	0e1b      	lsrs	r3, r3, #24
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005028:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	0f1b      	lsrs	r3, r3, #28
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	019a      	lsls	r2, r3, #6
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	041b      	lsls	r3, r3, #16
 8005042:	431a      	orrs	r2, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	431a      	orrs	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	071b      	lsls	r3, r3, #28
 800504e:	4929      	ldr	r1, [pc, #164]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d028      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005070:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	019a      	lsls	r2, r3, #6
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	431a      	orrs	r2, r3
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	071b      	lsls	r3, r3, #28
 8005096:	4917      	ldr	r1, [pc, #92]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800509e:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	4911      	ldr	r1, [pc, #68]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050b4:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c0:	f7fe fb42 	bl	8003748 <HAL_GetTick>
 80050c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050c8:	f7fe fb3e 	bl	8003748 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	; 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e007      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e6:	d1ef      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023800 	.word	0x40023800

080050f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e09d      	b.n	8005246 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d108      	bne.n	8005124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511a:	d009      	beq.n	8005130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	61da      	str	r2, [r3, #28]
 8005122:	e005      	b.n	8005130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fd febc 	bl	8002ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005166:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005170:	d902      	bls.n	8005178 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e002      	b.n	800517e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800517c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005186:	d007      	beq.n	8005198 <HAL_SPI_Init+0xa0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005190:	d002      	beq.n	8005198 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	ea42 0103 	orr.w	r1, r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	f003 0204 	and.w	r2, r3, #4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005214:	ea42 0103 	orr.w	r1, r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005234:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b088      	sub	sp, #32
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_SPI_Transmit+0x22>
 800526c:	2302      	movs	r3, #2
 800526e:	e158      	b.n	8005522 <HAL_SPI_Transmit+0x2d4>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005278:	f7fe fa66 	bl	8003748 <HAL_GetTick>
 800527c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800528e:	2302      	movs	r3, #2
 8005290:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005292:	e13d      	b.n	8005510 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_Transmit+0x52>
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d102      	bne.n	80052a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052a4:	e134      	b.n	8005510 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2203      	movs	r2, #3
 80052aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f0:	d10f      	bne.n	8005312 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005310:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d007      	beq.n	8005330 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800532e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005338:	d94b      	bls.n	80053d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_SPI_Transmit+0xfa>
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d13e      	bne.n	80053c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	881a      	ldrh	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800536c:	e02b      	b.n	80053c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d112      	bne.n	80053a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	881a      	ldrh	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	1c9a      	adds	r2, r3, #2
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053a0:	e011      	b.n	80053c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a2:	f7fe f9d1 	bl	8003748 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d803      	bhi.n	80053ba <HAL_SPI_Transmit+0x16c>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d102      	bne.n	80053c0 <HAL_SPI_Transmit+0x172>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053c4:	e0a4      	b.n	8005510 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ce      	bne.n	800536e <HAL_SPI_Transmit+0x120>
 80053d0:	e07c      	b.n	80054cc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Transmit+0x192>
 80053da:	8afb      	ldrh	r3, [r7, #22]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d170      	bne.n	80054c2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d912      	bls.n	8005410 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	881a      	ldrh	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	1c9a      	adds	r2, r3, #2
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b02      	subs	r3, #2
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800540e:	e058      	b.n	80054c2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	7812      	ldrb	r2, [r2, #0]
 800541c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005436:	e044      	b.n	80054c2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d12b      	bne.n	800549e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d912      	bls.n	8005476 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	881a      	ldrh	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	1c9a      	adds	r2, r3, #2
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b02      	subs	r3, #2
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005474:	e025      	b.n	80054c2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	330c      	adds	r3, #12
 8005480:	7812      	ldrb	r2, [r2, #0]
 8005482:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800549c:	e011      	b.n	80054c2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800549e:	f7fe f953 	bl	8003748 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d803      	bhi.n	80054b6 <HAL_SPI_Transmit+0x268>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d102      	bne.n	80054bc <HAL_SPI_Transmit+0x26e>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054c0:	e026      	b.n	8005510 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1b5      	bne.n	8005438 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fd07 	bl	8005ee4 <SPI_EndRxTxTransaction>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e000      	b.n	8005510 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800550e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005520:	7ffb      	ldrb	r3, [r7, #31]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b088      	sub	sp, #32
 800552e:	af02      	add	r7, sp, #8
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005546:	d112      	bne.n	800556e <HAL_SPI_Receive+0x44>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10e      	bne.n	800556e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2204      	movs	r2, #4
 8005554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4613      	mov	r3, r2
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f910 	bl	800578a <HAL_SPI_TransmitReceive>
 800556a:	4603      	mov	r3, r0
 800556c:	e109      	b.n	8005782 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_SPI_Receive+0x52>
 8005578:	2302      	movs	r3, #2
 800557a:	e102      	b.n	8005782 <HAL_SPI_Receive+0x258>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005584:	f7fe f8e0 	bl	8003748 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d002      	beq.n	800559c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005596:	2302      	movs	r3, #2
 8005598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800559a:	e0e9      	b.n	8005770 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Receive+0x7e>
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055ac:	e0e0      	b.n	8005770 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2204      	movs	r2, #4
 80055b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	88fa      	ldrh	r2, [r7, #6]
 80055c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055f8:	d908      	bls.n	800560c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	e007      	b.n	800561c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005624:	d10f      	bne.n	8005646 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005644:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d007      	beq.n	8005664 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005662:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800566c:	d867      	bhi.n	800573e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800566e:	e030      	b.n	80056d2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d117      	bne.n	80056ae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f103 020c 	add.w	r2, r3, #12
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056ac:	e011      	b.n	80056d2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ae:	f7fe f84b 	bl	8003748 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d803      	bhi.n	80056c6 <HAL_SPI_Receive+0x19c>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Receive+0x1a2>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056d0:	e04e      	b.n	8005770 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1c8      	bne.n	8005670 <HAL_SPI_Receive+0x146>
 80056de:	e034      	b.n	800574a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d115      	bne.n	800571a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	b292      	uxth	r2, r2
 80056fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	1c9a      	adds	r2, r3, #2
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005718:	e011      	b.n	800573e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571a:	f7fe f815 	bl	8003748 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d803      	bhi.n	8005732 <HAL_SPI_Receive+0x208>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d102      	bne.n	8005738 <HAL_SPI_Receive+0x20e>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800573c:	e018      	b.n	8005770 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1ca      	bne.n	80056e0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fb4c 	bl	8005dec <SPI_EndRxTransaction>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	75fb      	strb	r3, [r7, #23]
 800576c:	e000      	b.n	8005770 <HAL_SPI_Receive+0x246>
  }

error :
 800576e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b08a      	sub	sp, #40	; 0x28
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005798:	2301      	movs	r3, #1
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x26>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e1fb      	b.n	8005ba8 <HAL_SPI_TransmitReceive+0x41e>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b8:	f7fd ffc6 	bl	8003748 <HAL_GetTick>
 80057bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057cc:	887b      	ldrh	r3, [r7, #2]
 80057ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057d0:	887b      	ldrh	r3, [r7, #2]
 80057d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057d4:	7efb      	ldrb	r3, [r7, #27]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d00e      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0x6e>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e0:	d106      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x66>
 80057ea:	7efb      	ldrb	r3, [r7, #27]
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d003      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80057f6:	e1cd      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_SPI_TransmitReceive+0x80>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_TransmitReceive+0x80>
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d103      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005810:	e1c0      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b04      	cmp	r3, #4
 800581c:	d003      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2205      	movs	r2, #5
 8005822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	887a      	ldrh	r2, [r7, #2]
 8005836:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	887a      	ldrh	r2, [r7, #2]
 800583e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	887a      	ldrh	r2, [r7, #2]
 800584c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	887a      	ldrh	r2, [r7, #2]
 8005852:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005868:	d802      	bhi.n	8005870 <HAL_SPI_TransmitReceive+0xe6>
 800586a:	8a3b      	ldrh	r3, [r7, #16]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d908      	bls.n	8005882 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800587e:	605a      	str	r2, [r3, #4]
 8005880:	e007      	b.n	8005892 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d007      	beq.n	80058b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058b8:	d97c      	bls.n	80059b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x13e>
 80058c2:	8a7b      	ldrh	r3, [r7, #18]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d169      	bne.n	800599c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	881a      	ldrh	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ec:	e056      	b.n	800599c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d11b      	bne.n	8005934 <HAL_SPI_TransmitReceive+0x1aa>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d016      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x1aa>
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	2b01      	cmp	r3, #1
 800590a:	d113      	bne.n	8005934 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d11c      	bne.n	800597c <HAL_SPI_TransmitReceive+0x1f2>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	b292      	uxth	r2, r2
 800595a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	1c9a      	adds	r2, r3, #2
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005978:	2301      	movs	r3, #1
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800597c:	f7fd fee4 	bl	8003748 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005988:	429a      	cmp	r2, r3
 800598a:	d807      	bhi.n	800599c <HAL_SPI_TransmitReceive+0x212>
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	d003      	beq.n	800599c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800599a:	e0fb      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1a3      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x164>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d19d      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x164>
 80059b2:	e0df      	b.n	8005b74 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x23a>
 80059bc:	8a7b      	ldrh	r3, [r7, #18]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	f040 80cb 	bne.w	8005b5a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d912      	bls.n	80059f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	1c9a      	adds	r2, r3, #2
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b02      	subs	r3, #2
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f2:	e0b2      	b.n	8005b5a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1a:	e09e      	b.n	8005b5a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d134      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x30a>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d02f      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x30a>
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d12c      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d912      	bls.n	8005a6a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b02      	subs	r3, #2
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a68:	e012      	b.n	8005a90 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	7812      	ldrb	r2, [r2, #0]
 8005a76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d148      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x3aa>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d042      	beq.n	8005b34 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d923      	bls.n	8005b02 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	b292      	uxth	r2, r2
 8005ac6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b02      	subs	r3, #2
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d81f      	bhi.n	8005b30 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005afe:	605a      	str	r2, [r3, #4]
 8005b00:	e016      	b.n	8005b30 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f103 020c 	add.w	r2, r3, #12
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	7812      	ldrb	r2, [r2, #0]
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b30:	2301      	movs	r3, #1
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b34:	f7fd fe08 	bl	8003748 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d803      	bhi.n	8005b4c <HAL_SPI_TransmitReceive+0x3c2>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d102      	bne.n	8005b52 <HAL_SPI_TransmitReceive+0x3c8>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b58:	e01c      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f47f af5b 	bne.w	8005a1c <HAL_SPI_TransmitReceive+0x292>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f47f af54 	bne.w	8005a1c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f9b3 	bl	8005ee4 <SPI_EndRxTxTransaction>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d006      	beq.n	8005b92 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	661a      	str	r2, [r3, #96]	; 0x60
 8005b90:	e000      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bc0:	f7fd fdc2 	bl	8003748 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	4413      	add	r3, r2
 8005bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bd0:	f7fd fdba 	bl	8003748 <HAL_GetTick>
 8005bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bd6:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	015b      	lsls	r3, r3, #5
 8005bdc:	0d1b      	lsrs	r3, r3, #20
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005be6:	e054      	b.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	d050      	beq.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bf0:	f7fd fdaa 	bl	8003748 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d902      	bls.n	8005c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d13d      	bne.n	8005c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1e:	d111      	bne.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c28:	d004      	beq.n	8005c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c32:	d107      	bne.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4c:	d10f      	bne.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e017      	b.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d19b      	bne.n	8005be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000054 	.word	0x20000054

08005cc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005cd2:	f7fd fd39 	bl	8003748 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	4413      	add	r3, r2
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005ce2:	f7fd fd31 	bl	8003748 <HAL_GetTick>
 8005ce6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005cf0:	4b3d      	ldr	r3, [pc, #244]	; (8005de8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	00da      	lsls	r2, r3, #3
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	0d1b      	lsrs	r3, r3, #20
 8005d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d08:	e060      	b.n	8005dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d10:	d107      	bne.n	8005d22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d050      	beq.n	8005dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d2a:	f7fd fd0d 	bl	8003748 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d902      	bls.n	8005d40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d13d      	bne.n	8005dbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d58:	d111      	bne.n	8005d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	d004      	beq.n	8005d6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6c:	d107      	bne.n	8005d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d86:	d10f      	bne.n	8005da8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005da6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e010      	b.n	8005dde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d196      	bne.n	8005d0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000054 	.word	0x20000054

08005dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e00:	d111      	bne.n	8005e26 <SPI_EndRxTransaction+0x3a>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0a:	d004      	beq.n	8005e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e14:	d107      	bne.n	8005e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e2e:	d112      	bne.n	8005e56 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2200      	movs	r2, #0
 8005e38:	2180      	movs	r1, #128	; 0x80
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff feb8 	bl	8005bb0 <SPI_WaitFlagStateUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d021      	beq.n	8005e8a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	f043 0220 	orr.w	r2, r3, #32
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e03d      	b.n	8005ed2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e56:	4b21      	ldr	r3, [pc, #132]	; (8005edc <SPI_EndRxTransaction+0xf0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <SPI_EndRxTransaction+0xf4>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	0d5b      	lsrs	r3, r3, #21
 8005e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
 8005e6a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b80      	cmp	r3, #128	; 0x80
 8005e84:	d0f2      	beq.n	8005e6c <SPI_EndRxTransaction+0x80>
 8005e86:	e000      	b.n	8005e8a <SPI_EndRxTransaction+0x9e>
        break;
 8005e88:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e92:	d11d      	bne.n	8005ed0 <SPI_EndRxTransaction+0xe4>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9c:	d004      	beq.n	8005ea8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea6:	d113      	bne.n	8005ed0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff ff03 	bl	8005cc0 <SPI_WaitFifoStateUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e000      	b.n	8005ed2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000054 	.word	0x20000054
 8005ee0:	165e9f81 	.word	0x165e9f81

08005ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff fedf 	bl	8005cc0 <SPI_WaitFifoStateUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0c:	f043 0220 	orr.w	r2, r3, #32
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e046      	b.n	8005fa6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <SPI_EndRxTxTransaction+0xcc>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <SPI_EndRxTxTransaction+0xd0>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	0d5b      	lsrs	r3, r3, #21
 8005f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f28:	fb02 f303 	mul.w	r3, r2, r3
 8005f2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f36:	d112      	bne.n	8005f5e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff fe34 	bl	8005bb0 <SPI_WaitFlagStateUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e023      	b.n	8005fa6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f74:	2b80      	cmp	r3, #128	; 0x80
 8005f76:	d0f2      	beq.n	8005f5e <SPI_EndRxTxTransaction+0x7a>
 8005f78:	e000      	b.n	8005f7c <SPI_EndRxTxTransaction+0x98>
        break;
 8005f7a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff fe99 	bl	8005cc0 <SPI_WaitFifoStateUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	f043 0220 	orr.w	r2, r3, #32
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e000      	b.n	8005fa6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000054 	.word	0x20000054
 8005fb4:	165e9f81 	.word	0x165e9f81

08005fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e049      	b.n	800605e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fd f9c8 	bl	8003374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f000 fd30 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e054      	b.n	800612a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0201 	orr.w	r2, r2, #1
 8006096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a26      	ldr	r2, [pc, #152]	; (8006138 <HAL_TIM_Base_Start_IT+0xd0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d022      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060aa:	d01d      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a22      	ldr	r2, [pc, #136]	; (800613c <HAL_TIM_Base_Start_IT+0xd4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d018      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <HAL_TIM_Base_Start_IT+0xd8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d013      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <HAL_TIM_Base_Start_IT+0xdc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00e      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <HAL_TIM_Base_Start_IT+0xe0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d009      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1c      	ldr	r2, [pc, #112]	; (800614c <HAL_TIM_Base_Start_IT+0xe4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <HAL_TIM_Base_Start_IT+0xe8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d115      	bne.n	8006114 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_TIM_Base_Start_IT+0xec>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b06      	cmp	r3, #6
 80060f8:	d015      	beq.n	8006126 <HAL_TIM_Base_Start_IT+0xbe>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d011      	beq.n	8006126 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006112:	e008      	b.n	8006126 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e000      	b.n	8006128 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40010400 	.word	0x40010400
 800614c:	40014000 	.word	0x40014000
 8006150:	40001800 	.word	0x40001800
 8006154:	00010007 	.word	0x00010007

08006158 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e049      	b.n	80061fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f841 	bl	8006206 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f000 fc60 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d109      	bne.n	8006240 <HAL_TIM_PWM_Start+0x24>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	e03c      	b.n	80062ba <HAL_TIM_PWM_Start+0x9e>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b04      	cmp	r3, #4
 8006244:	d109      	bne.n	800625a <HAL_TIM_PWM_Start+0x3e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	bf14      	ite	ne
 8006252:	2301      	movne	r3, #1
 8006254:	2300      	moveq	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	e02f      	b.n	80062ba <HAL_TIM_PWM_Start+0x9e>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b08      	cmp	r3, #8
 800625e:	d109      	bne.n	8006274 <HAL_TIM_PWM_Start+0x58>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	e022      	b.n	80062ba <HAL_TIM_PWM_Start+0x9e>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b0c      	cmp	r3, #12
 8006278:	d109      	bne.n	800628e <HAL_TIM_PWM_Start+0x72>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	bf14      	ite	ne
 8006286:	2301      	movne	r3, #1
 8006288:	2300      	moveq	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	e015      	b.n	80062ba <HAL_TIM_PWM_Start+0x9e>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b10      	cmp	r3, #16
 8006292:	d109      	bne.n	80062a8 <HAL_TIM_PWM_Start+0x8c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	bf14      	ite	ne
 80062a0:	2301      	movne	r3, #1
 80062a2:	2300      	moveq	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	e008      	b.n	80062ba <HAL_TIM_PWM_Start+0x9e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	bf14      	ite	ne
 80062b4:	2301      	movne	r3, #1
 80062b6:	2300      	moveq	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e092      	b.n	80063e8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <HAL_TIM_PWM_Start+0xb6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d0:	e023      	b.n	800631a <HAL_TIM_PWM_Start+0xfe>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d104      	bne.n	80062e2 <HAL_TIM_PWM_Start+0xc6>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e0:	e01b      	b.n	800631a <HAL_TIM_PWM_Start+0xfe>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_PWM_Start+0xd6>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062f0:	e013      	b.n	800631a <HAL_TIM_PWM_Start+0xfe>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Start+0xe6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006300:	e00b      	b.n	800631a <HAL_TIM_PWM_Start+0xfe>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b10      	cmp	r3, #16
 8006306:	d104      	bne.n	8006312 <HAL_TIM_PWM_Start+0xf6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006310:	e003      	b.n	800631a <HAL_TIM_PWM_Start+0xfe>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 ff32 	bl	800718c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a30      	ldr	r2, [pc, #192]	; (80063f0 <HAL_TIM_PWM_Start+0x1d4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_TIM_PWM_Start+0x120>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2f      	ldr	r2, [pc, #188]	; (80063f4 <HAL_TIM_PWM_Start+0x1d8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d101      	bne.n	8006340 <HAL_TIM_PWM_Start+0x124>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_TIM_PWM_Start+0x126>
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <HAL_TIM_PWM_Start+0x1d4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d022      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x18a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d01d      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x18a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a22      	ldr	r2, [pc, #136]	; (80063f8 <HAL_TIM_PWM_Start+0x1dc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d018      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x18a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a20      	ldr	r2, [pc, #128]	; (80063fc <HAL_TIM_PWM_Start+0x1e0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d013      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x18a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <HAL_TIM_PWM_Start+0x1e4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x18a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <HAL_TIM_PWM_Start+0x1d8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x18a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <HAL_TIM_PWM_Start+0x1e8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x18a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a19      	ldr	r2, [pc, #100]	; (8006408 <HAL_TIM_PWM_Start+0x1ec>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d115      	bne.n	80063d2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	4b17      	ldr	r3, [pc, #92]	; (800640c <HAL_TIM_PWM_Start+0x1f0>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b06      	cmp	r3, #6
 80063b6:	d015      	beq.n	80063e4 <HAL_TIM_PWM_Start+0x1c8>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d011      	beq.n	80063e4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d0:	e008      	b.n	80063e4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	e000      	b.n	80063e6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40010400 	.word	0x40010400
 80063f8:	40000400 	.word	0x40000400
 80063fc:	40000800 	.word	0x40000800
 8006400:	40000c00 	.word	0x40000c00
 8006404:	40014000 	.word	0x40014000
 8006408:	40001800 	.word	0x40001800
 800640c:	00010007 	.word	0x00010007

08006410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b02      	cmp	r3, #2
 8006424:	d122      	bne.n	800646c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b02      	cmp	r3, #2
 8006432:	d11b      	bne.n	800646c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0202 	mvn.w	r2, #2
 800643c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fae4 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fad6 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fae7 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b04      	cmp	r3, #4
 8006478:	d122      	bne.n	80064c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b04      	cmp	r3, #4
 8006486:	d11b      	bne.n	80064c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0204 	mvn.w	r2, #4
 8006490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 faba 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 faac 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fabd 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d122      	bne.n	8006514 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d11b      	bne.n	8006514 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0208 	mvn.w	r2, #8
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2204      	movs	r2, #4
 80064ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa90 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa82 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fa93 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b10      	cmp	r3, #16
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	2b10      	cmp	r3, #16
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0210 	mvn.w	r2, #16
 8006538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2208      	movs	r2, #8
 800653e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa66 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa58 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa69 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b01      	cmp	r3, #1
 8006574:	d10e      	bne.n	8006594 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b01      	cmp	r3, #1
 8006582:	d107      	bne.n	8006594 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0201 	mvn.w	r2, #1
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fc fa62 	bl	8002a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659e:	2b80      	cmp	r3, #128	; 0x80
 80065a0:	d10e      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ac:	2b80      	cmp	r3, #128	; 0x80
 80065ae:	d107      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fea4 	bl	8007308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ce:	d10e      	bne.n	80065ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065da:	2b80      	cmp	r3, #128	; 0x80
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fe97 	bl	800731c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d10e      	bne.n	800661a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d107      	bne.n	800661a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fa17 	bl	8006a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b20      	cmp	r3, #32
 8006626:	d10e      	bne.n	8006646 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b20      	cmp	r3, #32
 8006634:	d107      	bne.n	8006646 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f06f 0220 	mvn.w	r2, #32
 800663e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fe57 	bl	80072f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800666a:	2302      	movs	r3, #2
 800666c:	e0ff      	b.n	800686e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b14      	cmp	r3, #20
 800667a:	f200 80f0 	bhi.w	800685e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066d9 	.word	0x080066d9
 8006688:	0800685f 	.word	0x0800685f
 800668c:	0800685f 	.word	0x0800685f
 8006690:	0800685f 	.word	0x0800685f
 8006694:	08006719 	.word	0x08006719
 8006698:	0800685f 	.word	0x0800685f
 800669c:	0800685f 	.word	0x0800685f
 80066a0:	0800685f 	.word	0x0800685f
 80066a4:	0800675b 	.word	0x0800675b
 80066a8:	0800685f 	.word	0x0800685f
 80066ac:	0800685f 	.word	0x0800685f
 80066b0:	0800685f 	.word	0x0800685f
 80066b4:	0800679b 	.word	0x0800679b
 80066b8:	0800685f 	.word	0x0800685f
 80066bc:	0800685f 	.word	0x0800685f
 80066c0:	0800685f 	.word	0x0800685f
 80066c4:	080067dd 	.word	0x080067dd
 80066c8:	0800685f 	.word	0x0800685f
 80066cc:	0800685f 	.word	0x0800685f
 80066d0:	0800685f 	.word	0x0800685f
 80066d4:	0800681d 	.word	0x0800681d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fa5c 	bl	8006b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0208 	orr.w	r2, r2, #8
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0204 	bic.w	r2, r2, #4
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	619a      	str	r2, [r3, #24]
      break;
 8006716:	e0a5      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 faae 	bl	8006c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	619a      	str	r2, [r3, #24]
      break;
 8006758:	e084      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fb05 	bl	8006d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0208 	orr.w	r2, r2, #8
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0204 	bic.w	r2, r2, #4
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	61da      	str	r2, [r3, #28]
      break;
 8006798:	e064      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fb5b 	bl	8006e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69d9      	ldr	r1, [r3, #28]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	021a      	lsls	r2, r3, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	61da      	str	r2, [r3, #28]
      break;
 80067da:	e043      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fb92 	bl	8006f0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0208 	orr.w	r2, r2, #8
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0204 	bic.w	r2, r2, #4
 8006806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800681a:	e023      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fbc4 	bl	8006fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006836:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800685c:	e002      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
      break;
 8006862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop

08006878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIM_ConfigClockSource+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e0b4      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x186>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	4b56      	ldr	r3, [pc, #344]	; (8006a08 <HAL_TIM_ConfigClockSource+0x190>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068cc:	d03e      	beq.n	800694c <HAL_TIM_ConfigClockSource+0xd4>
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	f200 8087 	bhi.w	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	f000 8086 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x172>
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d87f      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b70      	cmp	r3, #112	; 0x70
 80068e6:	d01a      	beq.n	800691e <HAL_TIM_ConfigClockSource+0xa6>
 80068e8:	2b70      	cmp	r3, #112	; 0x70
 80068ea:	d87b      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b60      	cmp	r3, #96	; 0x60
 80068ee:	d050      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x11a>
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d877      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b50      	cmp	r3, #80	; 0x50
 80068f6:	d03c      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0xfa>
 80068f8:	2b50      	cmp	r3, #80	; 0x50
 80068fa:	d873      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d058      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x13a>
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d86f      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006904:	2b30      	cmp	r3, #48	; 0x30
 8006906:	d064      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006908:	2b30      	cmp	r3, #48	; 0x30
 800690a:	d86b      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 800690c:	2b20      	cmp	r3, #32
 800690e:	d060      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006910:	2b20      	cmp	r3, #32
 8006912:	d867      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d05c      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006918:	2b10      	cmp	r3, #16
 800691a:	d05a      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 800691c:	e062      	b.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800692e:	f000 fc0d 	bl	800714c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	609a      	str	r2, [r3, #8]
      break;
 800694a:	e04f      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800695c:	f000 fbf6 	bl	800714c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800696e:	609a      	str	r2, [r3, #8]
      break;
 8006970:	e03c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800697e:	461a      	mov	r2, r3
 8006980:	f000 fb6a 	bl	8007058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2150      	movs	r1, #80	; 0x50
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fbc3 	bl	8007116 <TIM_ITRx_SetConfig>
      break;
 8006990:	e02c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800699e:	461a      	mov	r2, r3
 80069a0:	f000 fb89 	bl	80070b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2160      	movs	r1, #96	; 0x60
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fbb3 	bl	8007116 <TIM_ITRx_SetConfig>
      break;
 80069b0:	e01c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069be:	461a      	mov	r2, r3
 80069c0:	f000 fb4a 	bl	8007058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2140      	movs	r1, #64	; 0x40
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fba3 	bl	8007116 <TIM_ITRx_SetConfig>
      break;
 80069d0:	e00c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4619      	mov	r1, r3
 80069dc:	4610      	mov	r0, r2
 80069de:	f000 fb9a 	bl	8007116 <TIM_ITRx_SetConfig>
      break;
 80069e2:	e003      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
      break;
 80069e8:	e000      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	fffeff88 	.word	0xfffeff88

08006a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a40      	ldr	r2, [pc, #256]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d00f      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a3d      	ldr	r2, [pc, #244]	; (8006b74 <TIM_Base_SetConfig+0x118>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a3c      	ldr	r2, [pc, #240]	; (8006b78 <TIM_Base_SetConfig+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a3b      	ldr	r2, [pc, #236]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a3a      	ldr	r2, [pc, #232]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d108      	bne.n	8006aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2f      	ldr	r2, [pc, #188]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d02b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abc:	d027      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2c      	ldr	r2, [pc, #176]	; (8006b74 <TIM_Base_SetConfig+0x118>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d023      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <TIM_Base_SetConfig+0x11c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01f      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a29      	ldr	r2, [pc, #164]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d017      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a28      	ldr	r2, [pc, #160]	; (8006b84 <TIM_Base_SetConfig+0x128>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a27      	ldr	r2, [pc, #156]	; (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00f      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a26      	ldr	r2, [pc, #152]	; (8006b8c <TIM_Base_SetConfig+0x130>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00b      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a25      	ldr	r2, [pc, #148]	; (8006b90 <TIM_Base_SetConfig+0x134>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d007      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a24      	ldr	r2, [pc, #144]	; (8006b94 <TIM_Base_SetConfig+0x138>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a23      	ldr	r2, [pc, #140]	; (8006b98 <TIM_Base_SetConfig+0x13c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d108      	bne.n	8006b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a0c      	ldr	r2, [pc, #48]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d103      	bne.n	8006b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	615a      	str	r2, [r3, #20]
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40010400 	.word	0x40010400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800
 8006b90:	40001800 	.word	0x40001800
 8006b94:	40001c00 	.word	0x40001c00
 8006b98:	40002000 	.word	0x40002000

08006b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4b2b      	ldr	r3, [pc, #172]	; (8006c74 <TIM_OC1_SetConfig+0xd8>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 0302 	bic.w	r3, r3, #2
 8006be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a21      	ldr	r2, [pc, #132]	; (8006c78 <TIM_OC1_SetConfig+0xdc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_OC1_SetConfig+0x64>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a20      	ldr	r2, [pc, #128]	; (8006c7c <TIM_OC1_SetConfig+0xe0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d10c      	bne.n	8006c1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0308 	bic.w	r3, r3, #8
 8006c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f023 0304 	bic.w	r3, r3, #4
 8006c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a16      	ldr	r2, [pc, #88]	; (8006c78 <TIM_OC1_SetConfig+0xdc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_OC1_SetConfig+0x8e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <TIM_OC1_SetConfig+0xe0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d111      	bne.n	8006c4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	621a      	str	r2, [r3, #32]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	fffeff8f 	.word	0xfffeff8f
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40010400 	.word	0x40010400

08006c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f023 0210 	bic.w	r2, r3, #16
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <TIM_OC2_SetConfig+0xe4>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 0320 	bic.w	r3, r3, #32
 8006cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a23      	ldr	r2, [pc, #140]	; (8006d68 <TIM_OC2_SetConfig+0xe8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_OC2_SetConfig+0x68>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a22      	ldr	r2, [pc, #136]	; (8006d6c <TIM_OC2_SetConfig+0xec>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d10d      	bne.n	8006d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <TIM_OC2_SetConfig+0xe8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_OC2_SetConfig+0x94>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <TIM_OC2_SetConfig+0xec>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d113      	bne.n	8006d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	feff8fff 	.word	0xfeff8fff
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40010400 	.word	0x40010400

08006d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4b2d      	ldr	r3, [pc, #180]	; (8006e50 <TIM_OC3_SetConfig+0xe0>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0303 	bic.w	r3, r3, #3
 8006da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <TIM_OC3_SetConfig+0xe4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d003      	beq.n	8006dd6 <TIM_OC3_SetConfig+0x66>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <TIM_OC3_SetConfig+0xe8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d10d      	bne.n	8006df2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a17      	ldr	r2, [pc, #92]	; (8006e54 <TIM_OC3_SetConfig+0xe4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d003      	beq.n	8006e02 <TIM_OC3_SetConfig+0x92>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <TIM_OC3_SetConfig+0xe8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d113      	bne.n	8006e2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	621a      	str	r2, [r3, #32]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	fffeff8f 	.word	0xfffeff8f
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40010400 	.word	0x40010400

08006e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	4b1e      	ldr	r3, [pc, #120]	; (8006f00 <TIM_OC4_SetConfig+0xa4>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	031b      	lsls	r3, r3, #12
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a13      	ldr	r2, [pc, #76]	; (8006f04 <TIM_OC4_SetConfig+0xa8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_OC4_SetConfig+0x68>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a12      	ldr	r2, [pc, #72]	; (8006f08 <TIM_OC4_SetConfig+0xac>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d109      	bne.n	8006ed8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	019b      	lsls	r3, r3, #6
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	feff8fff 	.word	0xfeff8fff
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40010400 	.word	0x40010400

08006f0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4b1b      	ldr	r3, [pc, #108]	; (8006fa4 <TIM_OC5_SetConfig+0x98>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <TIM_OC5_SetConfig+0x9c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d003      	beq.n	8006f6a <TIM_OC5_SetConfig+0x5e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a11      	ldr	r2, [pc, #68]	; (8006fac <TIM_OC5_SetConfig+0xa0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d109      	bne.n	8006f7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	621a      	str	r2, [r3, #32]
}
 8006f98:	bf00      	nop
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	fffeff8f 	.word	0xfffeff8f
 8006fa8:	40010000 	.word	0x40010000
 8006fac:	40010400 	.word	0x40010400

08006fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4b1c      	ldr	r3, [pc, #112]	; (800704c <TIM_OC6_SetConfig+0x9c>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	051b      	lsls	r3, r3, #20
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a13      	ldr	r2, [pc, #76]	; (8007050 <TIM_OC6_SetConfig+0xa0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC6_SetConfig+0x60>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a12      	ldr	r2, [pc, #72]	; (8007054 <TIM_OC6_SetConfig+0xa4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d109      	bne.n	8007024 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	029b      	lsls	r3, r3, #10
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	feff8fff 	.word	0xfeff8fff
 8007050:	40010000 	.word	0x40010000
 8007054:	40010400 	.word	0x40010400

08007058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f023 0201 	bic.w	r2, r3, #1
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f023 030a 	bic.w	r3, r3, #10
 8007094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b087      	sub	sp, #28
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f023 0210 	bic.w	r2, r3, #16
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	031b      	lsls	r3, r3, #12
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	bf00      	nop
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	f043 0307 	orr.w	r3, r3, #7
 8007138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	609a      	str	r2, [r3, #8]
}
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	021a      	lsls	r2, r3, #8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	431a      	orrs	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4313      	orrs	r3, r2
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	609a      	str	r2, [r3, #8]
}
 8007180:	bf00      	nop
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	2201      	movs	r2, #1
 80071a0:	fa02 f303 	lsl.w	r3, r2, r3
 80071a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a1a      	ldr	r2, [r3, #32]
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	43db      	mvns	r3, r3
 80071ae:	401a      	ands	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a1a      	ldr	r2, [r3, #32]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	fa01 f303 	lsl.w	r3, r1, r3
 80071c4:	431a      	orrs	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e06d      	b.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a30      	ldr	r2, [pc, #192]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2f      	ldr	r2, [pc, #188]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d108      	bne.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800722a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a20      	ldr	r2, [pc, #128]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d022      	beq.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007262:	d01d      	beq.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d018      	beq.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d013      	beq.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1a      	ldr	r2, [pc, #104]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00e      	beq.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a15      	ldr	r2, [pc, #84]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d009      	beq.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a16      	ldr	r2, [pc, #88]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d004      	beq.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d10c      	bne.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40010000 	.word	0x40010000
 80072dc:	40010400 	.word	0x40010400
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40014000 	.word	0x40014000
 80072f0:	40001800 	.word	0x40001800

080072f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e040      	b.n	80073c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fc f916 	bl	8003584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2224      	movs	r2, #36	; 0x24
 800735c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0201 	bic.w	r2, r2, #1
 800736c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fbe6 	bl	8007b40 <UART_SetConfig>
 8007374:	4603      	mov	r3, r0
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e022      	b.n	80073c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fe3e 	bl	8008008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800739a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0201 	orr.w	r2, r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fec5 	bl	800814c <UART_CheckIdleState>
 80073c2:	4603      	mov	r3, r0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	; 0x28
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d171      	bne.n	80074c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <HAL_UART_Transmit+0x24>
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e06a      	b.n	80074ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2221      	movs	r2, #33	; 0x21
 8007400:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007402:	f7fc f9a1 	bl	8003748 <HAL_GetTick>
 8007406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007420:	d108      	bne.n	8007434 <HAL_UART_Transmit+0x68>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	e003      	b.n	800743c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007438:	2300      	movs	r3, #0
 800743a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800743c:	e02c      	b.n	8007498 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2200      	movs	r2, #0
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 feb6 	bl	80081ba <UART_WaitOnFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e038      	b.n	80074ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800746c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	3302      	adds	r3, #2
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	e007      	b.n	8007486 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	3301      	adds	r3, #1
 8007484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	b29a      	uxth	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800749e:	b29b      	uxth	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1cc      	bne.n	800743e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2200      	movs	r2, #0
 80074ac:	2140      	movs	r1, #64	; 0x40
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fe83 	bl	80081ba <UART_WaitOnFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e005      	b.n	80074ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e000      	b.n	80074ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80074c8:	2302      	movs	r3, #2
  }
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b08a      	sub	sp, #40	; 0x28
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	4613      	mov	r3, r2
 80074de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d132      	bne.n	8007550 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HAL_UART_Receive_IT+0x24>
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e02b      	b.n	8007552 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d018      	beq.n	8007540 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	613b      	str	r3, [r7, #16]
   return(result);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	623b      	str	r3, [r7, #32]
 800752e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	69f9      	ldr	r1, [r7, #28]
 8007532:	6a3a      	ldr	r2, [r7, #32]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	61bb      	str	r3, [r7, #24]
   return(result);
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	461a      	mov	r2, r3
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fefe 	bl	8008348 <UART_Start_Receive_IT>
 800754c:	4603      	mov	r3, r0
 800754e:	e000      	b.n	8007552 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
  }
}
 8007552:	4618      	mov	r0, r3
 8007554:	3728      	adds	r7, #40	; 0x28
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b0ba      	sub	sp, #232	; 0xe8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007586:	f640 030f 	movw	r3, #2063	; 0x80f
 800758a:	4013      	ands	r3, r2
 800758c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d115      	bne.n	80075c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00f      	beq.n	80075c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d009      	beq.n	80075c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8297 	beq.w	8007ae8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
      }
      return;
 80075c2:	e291      	b.n	8007ae8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 8117 	beq.w	80077fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075de:	4b85      	ldr	r3, [pc, #532]	; (80077f4 <HAL_UART_IRQHandler+0x298>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 810a 	beq.w	80077fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d011      	beq.n	8007618 <HAL_UART_IRQHandler+0xbc>
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2201      	movs	r2, #1
 8007606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800760e:	f043 0201 	orr.w	r2, r3, #1
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d011      	beq.n	8007648 <HAL_UART_IRQHandler+0xec>
 8007624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2202      	movs	r2, #2
 8007636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763e:	f043 0204 	orr.w	r2, r3, #4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d011      	beq.n	8007678 <HAL_UART_IRQHandler+0x11c>
 8007654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2204      	movs	r2, #4
 8007666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800766e:	f043 0202 	orr.w	r2, r3, #2
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d017      	beq.n	80076b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007694:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2208      	movs	r2, #8
 80076a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076aa:	f043 0208 	orr.w	r2, r3, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d012      	beq.n	80076e6 <HAL_UART_IRQHandler+0x18a>
 80076c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00c      	beq.n	80076e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076dc:	f043 0220 	orr.w	r2, r3, #32
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 81fd 	beq.w	8007aec <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d005      	beq.n	800773e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007736:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800773a:	2b00      	cmp	r3, #0
 800773c:	d04f      	beq.n	80077de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fec8 	bl	80084d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	d141      	bne.n	80077d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800776c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3308      	adds	r3, #8
 800777a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800777e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800778a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1d9      	bne.n	8007752 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d013      	beq.n	80077ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077aa:	4a13      	ldr	r2, [pc, #76]	; (80077f8 <HAL_UART_IRQHandler+0x29c>)
 80077ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fc f979 	bl	8003aaa <HAL_DMA_Abort_IT>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d017      	beq.n	80077ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	e00f      	b.n	80077ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f9a0 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	e00b      	b.n	80077ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f99c 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077dc:	e007      	b.n	80077ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f998 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80077ec:	e17e      	b.n	8007aec <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ee:	bf00      	nop
    return;
 80077f0:	e17c      	b.n	8007aec <HAL_UART_IRQHandler+0x590>
 80077f2:	bf00      	nop
 80077f4:	04000120 	.word	0x04000120
 80077f8:	0800859d 	.word	0x0800859d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007800:	2b01      	cmp	r3, #1
 8007802:	f040 814c 	bne.w	8007a9e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780a:	f003 0310 	and.w	r3, r3, #16
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8145 	beq.w	8007a9e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 813e 	beq.w	8007a9e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2210      	movs	r2, #16
 8007828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b40      	cmp	r3, #64	; 0x40
 8007836:	f040 80b6 	bne.w	80079a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007846:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8150 	beq.w	8007af0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800785a:	429a      	cmp	r2, r3
 800785c:	f080 8148 	bcs.w	8007af0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007866:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007874:	f000 8086 	beq.w	8007984 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800788c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1da      	bne.n	8007878 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e1      	bne.n	80078c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3308      	adds	r3, #8
 8007904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800790e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e3      	bne.n	80078fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007954:	f023 0310 	bic.w	r3, r3, #16
 8007958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007966:	65bb      	str	r3, [r7, #88]	; 0x58
 8007968:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800796c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e4      	bne.n	8007944 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797e:	4618      	mov	r0, r3
 8007980:	f7fc f823 	bl	80039ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007996:	b29b      	uxth	r3, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8c2 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079a4:	e0a4      	b.n	8007af0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8096 	beq.w	8007af4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80079c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8091 	beq.w	8007af4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079f4:	647b      	str	r3, [r7, #68]	; 0x44
 80079f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e4      	bne.n	80079d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	623b      	str	r3, [r7, #32]
   return(result);
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3308      	adds	r3, #8
 8007a28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e3      	bne.n	8007a08 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f023 0310 	bic.w	r3, r3, #16
 8007a68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a76:	61fb      	str	r3, [r7, #28]
 8007a78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	69b9      	ldr	r1, [r7, #24]
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	617b      	str	r3, [r7, #20]
   return(result);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e4      	bne.n	8007a54 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f846 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a9c:	e02a      	b.n	8007af4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00e      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d008      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01c      	beq.n	8007af8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
    }
    return;
 8007ac6:	e017      	b.n	8007af8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d012      	beq.n	8007afa <HAL_UART_IRQHandler+0x59e>
 8007ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00c      	beq.n	8007afa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fd71 	bl	80085c8 <UART_EndTransmit_IT>
    return;
 8007ae6:	e008      	b.n	8007afa <HAL_UART_IRQHandler+0x59e>
      return;
 8007ae8:	bf00      	nop
 8007aea:	e006      	b.n	8007afa <HAL_UART_IRQHandler+0x59e>
    return;
 8007aec:	bf00      	nop
 8007aee:	e004      	b.n	8007afa <HAL_UART_IRQHandler+0x59e>
      return;
 8007af0:	bf00      	nop
 8007af2:	e002      	b.n	8007afa <HAL_UART_IRQHandler+0x59e>
      return;
 8007af4:	bf00      	nop
 8007af6:	e000      	b.n	8007afa <HAL_UART_IRQHandler+0x59e>
    return;
 8007af8:	bf00      	nop
  }

}
 8007afa:	37e8      	adds	r7, #232	; 0xe8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4ba6      	ldr	r3, [pc, #664]	; (8007e04 <UART_SetConfig+0x2c4>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	6979      	ldr	r1, [r7, #20]
 8007b74:	430b      	orrs	r3, r1
 8007b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a94      	ldr	r2, [pc, #592]	; (8007e08 <UART_SetConfig+0x2c8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d120      	bne.n	8007bfe <UART_SetConfig+0xbe>
 8007bbc:	4b93      	ldr	r3, [pc, #588]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d816      	bhi.n	8007bf8 <UART_SetConfig+0xb8>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <UART_SetConfig+0x90>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be1 	.word	0x08007be1
 8007bd4:	08007bed 	.word	0x08007bed
 8007bd8:	08007be7 	.word	0x08007be7
 8007bdc:	08007bf3 	.word	0x08007bf3
 8007be0:	2301      	movs	r3, #1
 8007be2:	77fb      	strb	r3, [r7, #31]
 8007be4:	e150      	b.n	8007e88 <UART_SetConfig+0x348>
 8007be6:	2302      	movs	r3, #2
 8007be8:	77fb      	strb	r3, [r7, #31]
 8007bea:	e14d      	b.n	8007e88 <UART_SetConfig+0x348>
 8007bec:	2304      	movs	r3, #4
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e14a      	b.n	8007e88 <UART_SetConfig+0x348>
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	77fb      	strb	r3, [r7, #31]
 8007bf6:	e147      	b.n	8007e88 <UART_SetConfig+0x348>
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e144      	b.n	8007e88 <UART_SetConfig+0x348>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a83      	ldr	r2, [pc, #524]	; (8007e10 <UART_SetConfig+0x2d0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d132      	bne.n	8007c6e <UART_SetConfig+0x12e>
 8007c08:	4b80      	ldr	r3, [pc, #512]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0e:	f003 030c 	and.w	r3, r3, #12
 8007c12:	2b0c      	cmp	r3, #12
 8007c14:	d828      	bhi.n	8007c68 <UART_SetConfig+0x128>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <UART_SetConfig+0xdc>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c51 	.word	0x08007c51
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c69 	.word	0x08007c69
 8007c28:	08007c69 	.word	0x08007c69
 8007c2c:	08007c5d 	.word	0x08007c5d
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c69 	.word	0x08007c69
 8007c38:	08007c69 	.word	0x08007c69
 8007c3c:	08007c57 	.word	0x08007c57
 8007c40:	08007c69 	.word	0x08007c69
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c69 	.word	0x08007c69
 8007c4c:	08007c63 	.word	0x08007c63
 8007c50:	2300      	movs	r3, #0
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e118      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c56:	2302      	movs	r3, #2
 8007c58:	77fb      	strb	r3, [r7, #31]
 8007c5a:	e115      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	77fb      	strb	r3, [r7, #31]
 8007c60:	e112      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c62:	2308      	movs	r3, #8
 8007c64:	77fb      	strb	r3, [r7, #31]
 8007c66:	e10f      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	77fb      	strb	r3, [r7, #31]
 8007c6c:	e10c      	b.n	8007e88 <UART_SetConfig+0x348>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a68      	ldr	r2, [pc, #416]	; (8007e14 <UART_SetConfig+0x2d4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d120      	bne.n	8007cba <UART_SetConfig+0x17a>
 8007c78:	4b64      	ldr	r3, [pc, #400]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c82:	2b30      	cmp	r3, #48	; 0x30
 8007c84:	d013      	beq.n	8007cae <UART_SetConfig+0x16e>
 8007c86:	2b30      	cmp	r3, #48	; 0x30
 8007c88:	d814      	bhi.n	8007cb4 <UART_SetConfig+0x174>
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d009      	beq.n	8007ca2 <UART_SetConfig+0x162>
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d810      	bhi.n	8007cb4 <UART_SetConfig+0x174>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <UART_SetConfig+0x15c>
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	d006      	beq.n	8007ca8 <UART_SetConfig+0x168>
 8007c9a:	e00b      	b.n	8007cb4 <UART_SetConfig+0x174>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	77fb      	strb	r3, [r7, #31]
 8007ca0:	e0f2      	b.n	8007e88 <UART_SetConfig+0x348>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	77fb      	strb	r3, [r7, #31]
 8007ca6:	e0ef      	b.n	8007e88 <UART_SetConfig+0x348>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e0ec      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cae:	2308      	movs	r3, #8
 8007cb0:	77fb      	strb	r3, [r7, #31]
 8007cb2:	e0e9      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	e0e6      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a56      	ldr	r2, [pc, #344]	; (8007e18 <UART_SetConfig+0x2d8>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d120      	bne.n	8007d06 <UART_SetConfig+0x1c6>
 8007cc4:	4b51      	ldr	r3, [pc, #324]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cce:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd0:	d013      	beq.n	8007cfa <UART_SetConfig+0x1ba>
 8007cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd4:	d814      	bhi.n	8007d00 <UART_SetConfig+0x1c0>
 8007cd6:	2b80      	cmp	r3, #128	; 0x80
 8007cd8:	d009      	beq.n	8007cee <UART_SetConfig+0x1ae>
 8007cda:	2b80      	cmp	r3, #128	; 0x80
 8007cdc:	d810      	bhi.n	8007d00 <UART_SetConfig+0x1c0>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <UART_SetConfig+0x1a8>
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d006      	beq.n	8007cf4 <UART_SetConfig+0x1b4>
 8007ce6:	e00b      	b.n	8007d00 <UART_SetConfig+0x1c0>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e0cc      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e0c9      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e0c6      	b.n	8007e88 <UART_SetConfig+0x348>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e0c3      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d00:	2310      	movs	r3, #16
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e0c0      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a44      	ldr	r2, [pc, #272]	; (8007e1c <UART_SetConfig+0x2dc>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d125      	bne.n	8007d5c <UART_SetConfig+0x21c>
 8007d10:	4b3e      	ldr	r3, [pc, #248]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d1e:	d017      	beq.n	8007d50 <UART_SetConfig+0x210>
 8007d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d24:	d817      	bhi.n	8007d56 <UART_SetConfig+0x216>
 8007d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d2a:	d00b      	beq.n	8007d44 <UART_SetConfig+0x204>
 8007d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d30:	d811      	bhi.n	8007d56 <UART_SetConfig+0x216>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <UART_SetConfig+0x1fe>
 8007d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3a:	d006      	beq.n	8007d4a <UART_SetConfig+0x20a>
 8007d3c:	e00b      	b.n	8007d56 <UART_SetConfig+0x216>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	77fb      	strb	r3, [r7, #31]
 8007d42:	e0a1      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d44:	2302      	movs	r3, #2
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e09e      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	77fb      	strb	r3, [r7, #31]
 8007d4e:	e09b      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d50:	2308      	movs	r3, #8
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e098      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d56:	2310      	movs	r3, #16
 8007d58:	77fb      	strb	r3, [r7, #31]
 8007d5a:	e095      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a2f      	ldr	r2, [pc, #188]	; (8007e20 <UART_SetConfig+0x2e0>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d125      	bne.n	8007db2 <UART_SetConfig+0x272>
 8007d66:	4b29      	ldr	r3, [pc, #164]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d74:	d017      	beq.n	8007da6 <UART_SetConfig+0x266>
 8007d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d7a:	d817      	bhi.n	8007dac <UART_SetConfig+0x26c>
 8007d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d80:	d00b      	beq.n	8007d9a <UART_SetConfig+0x25a>
 8007d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d86:	d811      	bhi.n	8007dac <UART_SetConfig+0x26c>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <UART_SetConfig+0x254>
 8007d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d90:	d006      	beq.n	8007da0 <UART_SetConfig+0x260>
 8007d92:	e00b      	b.n	8007dac <UART_SetConfig+0x26c>
 8007d94:	2301      	movs	r3, #1
 8007d96:	77fb      	strb	r3, [r7, #31]
 8007d98:	e076      	b.n	8007e88 <UART_SetConfig+0x348>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	77fb      	strb	r3, [r7, #31]
 8007d9e:	e073      	b.n	8007e88 <UART_SetConfig+0x348>
 8007da0:	2304      	movs	r3, #4
 8007da2:	77fb      	strb	r3, [r7, #31]
 8007da4:	e070      	b.n	8007e88 <UART_SetConfig+0x348>
 8007da6:	2308      	movs	r3, #8
 8007da8:	77fb      	strb	r3, [r7, #31]
 8007daa:	e06d      	b.n	8007e88 <UART_SetConfig+0x348>
 8007dac:	2310      	movs	r3, #16
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e06a      	b.n	8007e88 <UART_SetConfig+0x348>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a1b      	ldr	r2, [pc, #108]	; (8007e24 <UART_SetConfig+0x2e4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d138      	bne.n	8007e2e <UART_SetConfig+0x2ee>
 8007dbc:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007dc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dca:	d017      	beq.n	8007dfc <UART_SetConfig+0x2bc>
 8007dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dd0:	d82a      	bhi.n	8007e28 <UART_SetConfig+0x2e8>
 8007dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd6:	d00b      	beq.n	8007df0 <UART_SetConfig+0x2b0>
 8007dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ddc:	d824      	bhi.n	8007e28 <UART_SetConfig+0x2e8>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <UART_SetConfig+0x2aa>
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de6:	d006      	beq.n	8007df6 <UART_SetConfig+0x2b6>
 8007de8:	e01e      	b.n	8007e28 <UART_SetConfig+0x2e8>
 8007dea:	2300      	movs	r3, #0
 8007dec:	77fb      	strb	r3, [r7, #31]
 8007dee:	e04b      	b.n	8007e88 <UART_SetConfig+0x348>
 8007df0:	2302      	movs	r3, #2
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e048      	b.n	8007e88 <UART_SetConfig+0x348>
 8007df6:	2304      	movs	r3, #4
 8007df8:	77fb      	strb	r3, [r7, #31]
 8007dfa:	e045      	b.n	8007e88 <UART_SetConfig+0x348>
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e042      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e02:	bf00      	nop
 8007e04:	efff69f3 	.word	0xefff69f3
 8007e08:	40011000 	.word	0x40011000
 8007e0c:	40023800 	.word	0x40023800
 8007e10:	40004400 	.word	0x40004400
 8007e14:	40004800 	.word	0x40004800
 8007e18:	40004c00 	.word	0x40004c00
 8007e1c:	40005000 	.word	0x40005000
 8007e20:	40011400 	.word	0x40011400
 8007e24:	40007800 	.word	0x40007800
 8007e28:	2310      	movs	r3, #16
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e02c      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a72      	ldr	r2, [pc, #456]	; (8007ffc <UART_SetConfig+0x4bc>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d125      	bne.n	8007e84 <UART_SetConfig+0x344>
 8007e38:	4b71      	ldr	r3, [pc, #452]	; (8008000 <UART_SetConfig+0x4c0>)
 8007e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e46:	d017      	beq.n	8007e78 <UART_SetConfig+0x338>
 8007e48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e4c:	d817      	bhi.n	8007e7e <UART_SetConfig+0x33e>
 8007e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e52:	d00b      	beq.n	8007e6c <UART_SetConfig+0x32c>
 8007e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e58:	d811      	bhi.n	8007e7e <UART_SetConfig+0x33e>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <UART_SetConfig+0x326>
 8007e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e62:	d006      	beq.n	8007e72 <UART_SetConfig+0x332>
 8007e64:	e00b      	b.n	8007e7e <UART_SetConfig+0x33e>
 8007e66:	2300      	movs	r3, #0
 8007e68:	77fb      	strb	r3, [r7, #31]
 8007e6a:	e00d      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	77fb      	strb	r3, [r7, #31]
 8007e70:	e00a      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e72:	2304      	movs	r3, #4
 8007e74:	77fb      	strb	r3, [r7, #31]
 8007e76:	e007      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e78:	2308      	movs	r3, #8
 8007e7a:	77fb      	strb	r3, [r7, #31]
 8007e7c:	e004      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e7e:	2310      	movs	r3, #16
 8007e80:	77fb      	strb	r3, [r7, #31]
 8007e82:	e001      	b.n	8007e88 <UART_SetConfig+0x348>
 8007e84:	2310      	movs	r3, #16
 8007e86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e90:	d15b      	bne.n	8007f4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e92:	7ffb      	ldrb	r3, [r7, #31]
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d828      	bhi.n	8007eea <UART_SetConfig+0x3aa>
 8007e98:	a201      	add	r2, pc, #4	; (adr r2, 8007ea0 <UART_SetConfig+0x360>)
 8007e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9e:	bf00      	nop
 8007ea0:	08007ec5 	.word	0x08007ec5
 8007ea4:	08007ecd 	.word	0x08007ecd
 8007ea8:	08007ed5 	.word	0x08007ed5
 8007eac:	08007eeb 	.word	0x08007eeb
 8007eb0:	08007edb 	.word	0x08007edb
 8007eb4:	08007eeb 	.word	0x08007eeb
 8007eb8:	08007eeb 	.word	0x08007eeb
 8007ebc:	08007eeb 	.word	0x08007eeb
 8007ec0:	08007ee3 	.word	0x08007ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ec4:	f7fc fd00 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 8007ec8:	61b8      	str	r0, [r7, #24]
        break;
 8007eca:	e013      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ecc:	f7fc fd10 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8007ed0:	61b8      	str	r0, [r7, #24]
        break;
 8007ed2:	e00f      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed4:	4b4b      	ldr	r3, [pc, #300]	; (8008004 <UART_SetConfig+0x4c4>)
 8007ed6:	61bb      	str	r3, [r7, #24]
        break;
 8007ed8:	e00c      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eda:	f7fc fbe3 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8007ede:	61b8      	str	r0, [r7, #24]
        break;
 8007ee0:	e008      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee6:	61bb      	str	r3, [r7, #24]
        break;
 8007ee8:	e004      	b.n	8007ef4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d074      	beq.n	8007fe4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	005a      	lsls	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b0f      	cmp	r3, #15
 8007f14:	d916      	bls.n	8007f44 <UART_SetConfig+0x404>
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1c:	d212      	bcs.n	8007f44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f023 030f 	bic.w	r3, r3, #15
 8007f26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	89fa      	ldrh	r2, [r7, #14]
 8007f40:	60da      	str	r2, [r3, #12]
 8007f42:	e04f      	b.n	8007fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	77bb      	strb	r3, [r7, #30]
 8007f48:	e04c      	b.n	8007fe4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f4a:	7ffb      	ldrb	r3, [r7, #31]
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d828      	bhi.n	8007fa2 <UART_SetConfig+0x462>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x418>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	08007fa3 	.word	0x08007fa3
 8007f68:	08007f93 	.word	0x08007f93
 8007f6c:	08007fa3 	.word	0x08007fa3
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fa3 	.word	0x08007fa3
 8007f78:	08007f9b 	.word	0x08007f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7c:	f7fc fca4 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 8007f80:	61b8      	str	r0, [r7, #24]
        break;
 8007f82:	e013      	b.n	8007fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f84:	f7fc fcb4 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8007f88:	61b8      	str	r0, [r7, #24]
        break;
 8007f8a:	e00f      	b.n	8007fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8c:	4b1d      	ldr	r3, [pc, #116]	; (8008004 <UART_SetConfig+0x4c4>)
 8007f8e:	61bb      	str	r3, [r7, #24]
        break;
 8007f90:	e00c      	b.n	8007fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f92:	f7fc fb87 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8007f96:	61b8      	str	r0, [r7, #24]
        break;
 8007f98:	e008      	b.n	8007fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9e:	61bb      	str	r3, [r7, #24]
        break;
 8007fa0:	e004      	b.n	8007fac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8007faa:	bf00      	nop
    }

    if (pclk != 0U)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d018      	beq.n	8007fe4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	085a      	lsrs	r2, r3, #1
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	441a      	add	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b0f      	cmp	r3, #15
 8007fca:	d909      	bls.n	8007fe0 <UART_SetConfig+0x4a0>
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd2:	d205      	bcs.n	8007fe0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60da      	str	r2, [r3, #12]
 8007fde:	e001      	b.n	8007fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3720      	adds	r7, #32
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40007c00 	.word	0x40007c00
 8008000:	40023800 	.word	0x40023800
 8008004:	00f42400 	.word	0x00f42400

08008008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	430a      	orrs	r2, r1
 80080da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01a      	beq.n	800811e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008106:	d10a      	bne.n	800811e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	605a      	str	r2, [r3, #4]
  }
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af02      	add	r7, sp, #8
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800815c:	f7fb faf4 	bl	8003748 <HAL_GetTick>
 8008160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	2b08      	cmp	r3, #8
 800816e:	d10e      	bne.n	800818e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f81b 	bl	80081ba <UART_WaitOnFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e011      	b.n	80081b2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b09c      	sub	sp, #112	; 0x70
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	603b      	str	r3, [r7, #0]
 80081c6:	4613      	mov	r3, r2
 80081c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ca:	e0a7      	b.n	800831c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	f000 80a3 	beq.w	800831c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d6:	f7fb fab7 	bl	8003748 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d302      	bcc.n	80081ec <UART_WaitOnFlagUntilTimeout+0x32>
 80081e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d13f      	bne.n	800826c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008200:	667b      	str	r3, [r7, #100]	; 0x64
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800820c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e6      	bne.n	80081ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	f023 0301 	bic.w	r3, r3, #1
 8008234:	663b      	str	r3, [r7, #96]	; 0x60
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800823e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008240:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800824c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e5      	bne.n	800821e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2220      	movs	r2, #32
 8008256:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2220      	movs	r2, #32
 800825c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e068      	b.n	800833e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	d050      	beq.n	800831c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008288:	d148      	bne.n	800831c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008292:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b2:	637b      	str	r3, [r7, #52]	; 0x34
 80082b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e6      	bne.n	8008294 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	613b      	str	r3, [r7, #16]
   return(result);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082e6:	623a      	str	r2, [r7, #32]
 80082e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	69f9      	ldr	r1, [r7, #28]
 80082ec:	6a3a      	ldr	r2, [r7, #32]
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e5      	bne.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2220      	movs	r2, #32
 8008304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e010      	b.n	800833e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4013      	ands	r3, r2
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	429a      	cmp	r2, r3
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	461a      	mov	r2, r3
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	429a      	cmp	r2, r3
 8008338:	f43f af48 	beq.w	80081cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3770      	adds	r7, #112	; 0x70
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008348:	b480      	push	{r7}
 800834a:	b097      	sub	sp, #92	; 0x5c
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	88fa      	ldrh	r2, [r7, #6]
 8008360:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837a:	d10e      	bne.n	800839a <UART_Start_Receive_IT+0x52>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <UART_Start_Receive_IT+0x48>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f240 12ff 	movw	r2, #511	; 0x1ff
 800838a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800838e:	e02d      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	22ff      	movs	r2, #255	; 0xff
 8008394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008398:	e028      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10d      	bne.n	80083be <UART_Start_Receive_IT+0x76>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d104      	bne.n	80083b4 <UART_Start_Receive_IT+0x6c>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	22ff      	movs	r2, #255	; 0xff
 80083ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083b2:	e01b      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	227f      	movs	r2, #127	; 0x7f
 80083b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083bc:	e016      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c6:	d10d      	bne.n	80083e4 <UART_Start_Receive_IT+0x9c>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d104      	bne.n	80083da <UART_Start_Receive_IT+0x92>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	227f      	movs	r2, #127	; 0x7f
 80083d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083d8:	e008      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	223f      	movs	r2, #63	; 0x3f
 80083de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083e2:	e003      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2222      	movs	r2, #34	; 0x22
 80083f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3308      	adds	r3, #8
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	657b      	str	r3, [r7, #84]	; 0x54
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3308      	adds	r3, #8
 800841a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800841c:	64ba      	str	r2, [r7, #72]	; 0x48
 800841e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800842a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e5      	bne.n	80083fc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008438:	d107      	bne.n	800844a <UART_Start_Receive_IT+0x102>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d103      	bne.n	800844a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4a21      	ldr	r2, [pc, #132]	; (80084cc <UART_Start_Receive_IT+0x184>)
 8008446:	669a      	str	r2, [r3, #104]	; 0x68
 8008448:	e002      	b.n	8008450 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4a20      	ldr	r2, [pc, #128]	; (80084d0 <UART_Start_Receive_IT+0x188>)
 800844e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d019      	beq.n	800848c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800846c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
 8008478:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800847c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e6      	bne.n	8008458 <UART_Start_Receive_IT+0x110>
 800848a:	e018      	b.n	80084be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	613b      	str	r3, [r7, #16]
   return(result);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f043 0320 	orr.w	r3, r3, #32
 80084a0:	653b      	str	r3, [r7, #80]	; 0x50
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084aa:	623b      	str	r3, [r7, #32]
 80084ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	69f9      	ldr	r1, [r7, #28]
 80084b0:	6a3a      	ldr	r2, [r7, #32]
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e6      	bne.n	800848c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	375c      	adds	r7, #92	; 0x5c
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	08008783 	.word	0x08008783
 80084d0:	0800861d 	.word	0x0800861d

080084d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b095      	sub	sp, #84	; 0x54
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084fa:	643b      	str	r3, [r7, #64]	; 0x40
 80084fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e6      	bne.n	80084dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	61fb      	str	r3, [r7, #28]
   return(result);
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	f023 0301 	bic.w	r3, r3, #1
 8008524:	64bb      	str	r3, [r7, #72]	; 0x48
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800852e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e5      	bne.n	800850e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008546:	2b01      	cmp	r3, #1
 8008548:	d118      	bne.n	800857c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	60bb      	str	r3, [r7, #8]
   return(result);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	647b      	str	r3, [r7, #68]	; 0x44
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6979      	ldr	r1, [r7, #20]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	613b      	str	r3, [r7, #16]
   return(result);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e6      	bne.n	800854a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008590:	bf00      	nop
 8008592:	3754      	adds	r7, #84	; 0x54
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f7ff faaa 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e4:	61fb      	str	r3, [r7, #28]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	61bb      	str	r3, [r7, #24]
 80085f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6979      	ldr	r1, [r7, #20]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	613b      	str	r3, [r7, #16]
   return(result);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e6      	bne.n	80085d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff fa76 	bl	8007b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008614:	bf00      	nop
 8008616:	3720      	adds	r7, #32
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b096      	sub	sp, #88	; 0x58
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800862a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008634:	2b22      	cmp	r3, #34	; 0x22
 8008636:	f040 8098 	bne.w	800876a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008644:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008648:	b2d9      	uxtb	r1, r3
 800864a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800864e:	b2da      	uxtb	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008654:	400a      	ands	r2, r1
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800866a:	b29b      	uxth	r3, r3
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d17b      	bne.n	800877a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008696:	653b      	str	r3, [r7, #80]	; 0x50
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a0:	647b      	str	r3, [r7, #68]	; 0x44
 80086a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e6      	bne.n	8008682 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3308      	adds	r3, #8
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	623b      	str	r3, [r7, #32]
   return(result);
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	f023 0301 	bic.w	r3, r3, #1
 80086ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3308      	adds	r3, #8
 80086d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086d4:	633a      	str	r2, [r7, #48]	; 0x30
 80086d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e5      	bne.n	80086b4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2220      	movs	r2, #32
 80086ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008700:	2b01      	cmp	r3, #1
 8008702:	d12e      	bne.n	8008762 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	60fb      	str	r3, [r7, #12]
   return(result);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0310 	bic.w	r3, r3, #16
 800871e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008728:	61fb      	str	r3, [r7, #28]
 800872a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872c:	69b9      	ldr	r1, [r7, #24]
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	e841 2300 	strex	r3, r2, [r1]
 8008734:	617b      	str	r3, [r7, #20]
   return(result);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e6      	bne.n	800870a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2b10      	cmp	r3, #16
 8008748:	d103      	bne.n	8008752 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2210      	movs	r2, #16
 8008750:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff f9e4 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008760:	e00b      	b.n	800877a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7fa fa68 	bl	8002c38 <HAL_UART_RxCpltCallback>
}
 8008768:	e007      	b.n	800877a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	699a      	ldr	r2, [r3, #24]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0208 	orr.w	r2, r2, #8
 8008778:	619a      	str	r2, [r3, #24]
}
 800877a:	bf00      	nop
 800877c:	3758      	adds	r7, #88	; 0x58
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b096      	sub	sp, #88	; 0x58
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008790:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800879a:	2b22      	cmp	r3, #34	; 0x22
 800879c:	f040 8098 	bne.w	80088d0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ae:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80087b0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80087b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087b8:	4013      	ands	r3, r2
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c4:	1c9a      	adds	r2, r3, #2
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d17b      	bne.n	80088e0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008806:	643b      	str	r3, [r7, #64]	; 0x40
 8008808:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800880c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e6      	bne.n	80087e8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3308      	adds	r3, #8
 8008820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	61fb      	str	r3, [r7, #28]
   return(result);
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	64bb      	str	r3, [r7, #72]	; 0x48
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3308      	adds	r3, #8
 8008838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800883a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800883c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1e5      	bne.n	800881a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2220      	movs	r2, #32
 8008852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008866:	2b01      	cmp	r3, #1
 8008868:	d12e      	bne.n	80088c8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	e853 3f00 	ldrex	r3, [r3]
 800887c:	60bb      	str	r3, [r7, #8]
   return(result);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f023 0310 	bic.w	r3, r3, #16
 8008884:	647b      	str	r3, [r7, #68]	; 0x44
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888e:	61bb      	str	r3, [r7, #24]
 8008890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6979      	ldr	r1, [r7, #20]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	613b      	str	r3, [r7, #16]
   return(result);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e6      	bne.n	8008870 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f003 0310 	and.w	r3, r3, #16
 80088ac:	2b10      	cmp	r3, #16
 80088ae:	d103      	bne.n	80088b8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2210      	movs	r2, #16
 80088b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff f931 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088c6:	e00b      	b.n	80088e0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7fa f9b5 	bl	8002c38 <HAL_UART_RxCpltCallback>
}
 80088ce:	e007      	b.n	80088e0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0208 	orr.w	r2, r2, #8
 80088de:	619a      	str	r2, [r3, #24]
}
 80088e0:	bf00      	nop
 80088e2:	3758      	adds	r7, #88	; 0x58
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <arm_pid_init_f32>:
 80088e8:	ed90 7a08 	vldr	s14, [r0, #32]
 80088ec:	edd0 7a06 	vldr	s15, [r0, #24]
 80088f0:	ed90 6a07 	vldr	s12, [r0, #28]
 80088f4:	eef1 6a67 	vneg.f32	s13, s15
 80088f8:	ed80 7a02 	vstr	s14, [r0, #8]
 80088fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008900:	ee37 6a07 	vadd.f32	s12, s14, s14
 8008904:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008908:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800890c:	edc0 7a00 	vstr	s15, [r0]
 8008910:	ed80 7a01 	vstr	s14, [r0, #4]
 8008914:	b901      	cbnz	r1, 8008918 <arm_pid_init_f32+0x30>
 8008916:	4770      	bx	lr
 8008918:	2300      	movs	r3, #0
 800891a:	60c3      	str	r3, [r0, #12]
 800891c:	6103      	str	r3, [r0, #16]
 800891e:	6143      	str	r3, [r0, #20]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop

08008924 <atof>:
 8008924:	2100      	movs	r1, #0
 8008926:	f000 be0f 	b.w	8009548 <strtod>

0800892a <sulp>:
 800892a:	b570      	push	{r4, r5, r6, lr}
 800892c:	4604      	mov	r4, r0
 800892e:	460d      	mov	r5, r1
 8008930:	ec45 4b10 	vmov	d0, r4, r5
 8008934:	4616      	mov	r6, r2
 8008936:	f003 facf 	bl	800bed8 <__ulp>
 800893a:	ec51 0b10 	vmov	r0, r1, d0
 800893e:	b17e      	cbz	r6, 8008960 <sulp+0x36>
 8008940:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008944:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008948:	2b00      	cmp	r3, #0
 800894a:	dd09      	ble.n	8008960 <sulp+0x36>
 800894c:	051b      	lsls	r3, r3, #20
 800894e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008952:	2400      	movs	r4, #0
 8008954:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008958:	4622      	mov	r2, r4
 800895a:	462b      	mov	r3, r5
 800895c:	f7f7 fe6c 	bl	8000638 <__aeabi_dmul>
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	0000      	movs	r0, r0
 8008964:	0000      	movs	r0, r0
	...

08008968 <_strtod_l>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	ed2d 8b02 	vpush	{d8}
 8008970:	b09b      	sub	sp, #108	; 0x6c
 8008972:	4604      	mov	r4, r0
 8008974:	9213      	str	r2, [sp, #76]	; 0x4c
 8008976:	2200      	movs	r2, #0
 8008978:	9216      	str	r2, [sp, #88]	; 0x58
 800897a:	460d      	mov	r5, r1
 800897c:	f04f 0800 	mov.w	r8, #0
 8008980:	f04f 0900 	mov.w	r9, #0
 8008984:	460a      	mov	r2, r1
 8008986:	9215      	str	r2, [sp, #84]	; 0x54
 8008988:	7811      	ldrb	r1, [r2, #0]
 800898a:	292b      	cmp	r1, #43	; 0x2b
 800898c:	d04c      	beq.n	8008a28 <_strtod_l+0xc0>
 800898e:	d83a      	bhi.n	8008a06 <_strtod_l+0x9e>
 8008990:	290d      	cmp	r1, #13
 8008992:	d834      	bhi.n	80089fe <_strtod_l+0x96>
 8008994:	2908      	cmp	r1, #8
 8008996:	d834      	bhi.n	8008a02 <_strtod_l+0x9a>
 8008998:	2900      	cmp	r1, #0
 800899a:	d03d      	beq.n	8008a18 <_strtod_l+0xb0>
 800899c:	2200      	movs	r2, #0
 800899e:	920a      	str	r2, [sp, #40]	; 0x28
 80089a0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80089a2:	7832      	ldrb	r2, [r6, #0]
 80089a4:	2a30      	cmp	r2, #48	; 0x30
 80089a6:	f040 80b4 	bne.w	8008b12 <_strtod_l+0x1aa>
 80089aa:	7872      	ldrb	r2, [r6, #1]
 80089ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80089b0:	2a58      	cmp	r2, #88	; 0x58
 80089b2:	d170      	bne.n	8008a96 <_strtod_l+0x12e>
 80089b4:	9302      	str	r3, [sp, #8]
 80089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	ab16      	add	r3, sp, #88	; 0x58
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	4a8e      	ldr	r2, [pc, #568]	; (8008bf8 <_strtod_l+0x290>)
 80089c0:	ab17      	add	r3, sp, #92	; 0x5c
 80089c2:	a915      	add	r1, sp, #84	; 0x54
 80089c4:	4620      	mov	r0, r4
 80089c6:	f002 fb65 	bl	800b094 <__gethex>
 80089ca:	f010 070f 	ands.w	r7, r0, #15
 80089ce:	4605      	mov	r5, r0
 80089d0:	d005      	beq.n	80089de <_strtod_l+0x76>
 80089d2:	2f06      	cmp	r7, #6
 80089d4:	d12a      	bne.n	8008a2c <_strtod_l+0xc4>
 80089d6:	3601      	adds	r6, #1
 80089d8:	2300      	movs	r3, #0
 80089da:	9615      	str	r6, [sp, #84]	; 0x54
 80089dc:	930a      	str	r3, [sp, #40]	; 0x28
 80089de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f040 857f 	bne.w	80094e4 <_strtod_l+0xb7c>
 80089e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e8:	b1db      	cbz	r3, 8008a22 <_strtod_l+0xba>
 80089ea:	4642      	mov	r2, r8
 80089ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089f0:	ec43 2b10 	vmov	d0, r2, r3
 80089f4:	b01b      	add	sp, #108	; 0x6c
 80089f6:	ecbd 8b02 	vpop	{d8}
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fe:	2920      	cmp	r1, #32
 8008a00:	d1cc      	bne.n	800899c <_strtod_l+0x34>
 8008a02:	3201      	adds	r2, #1
 8008a04:	e7bf      	b.n	8008986 <_strtod_l+0x1e>
 8008a06:	292d      	cmp	r1, #45	; 0x2d
 8008a08:	d1c8      	bne.n	800899c <_strtod_l+0x34>
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	910a      	str	r1, [sp, #40]	; 0x28
 8008a0e:	1c51      	adds	r1, r2, #1
 8008a10:	9115      	str	r1, [sp, #84]	; 0x54
 8008a12:	7852      	ldrb	r2, [r2, #1]
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	d1c3      	bne.n	80089a0 <_strtod_l+0x38>
 8008a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a1a:	9515      	str	r5, [sp, #84]	; 0x54
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 855f 	bne.w	80094e0 <_strtod_l+0xb78>
 8008a22:	4642      	mov	r2, r8
 8008a24:	464b      	mov	r3, r9
 8008a26:	e7e3      	b.n	80089f0 <_strtod_l+0x88>
 8008a28:	2100      	movs	r1, #0
 8008a2a:	e7ef      	b.n	8008a0c <_strtod_l+0xa4>
 8008a2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a2e:	b13a      	cbz	r2, 8008a40 <_strtod_l+0xd8>
 8008a30:	2135      	movs	r1, #53	; 0x35
 8008a32:	a818      	add	r0, sp, #96	; 0x60
 8008a34:	f003 fb4d 	bl	800c0d2 <__copybits>
 8008a38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f002 ff20 	bl	800b880 <_Bfree>
 8008a40:	3f01      	subs	r7, #1
 8008a42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a44:	2f04      	cmp	r7, #4
 8008a46:	d806      	bhi.n	8008a56 <_strtod_l+0xee>
 8008a48:	e8df f007 	tbb	[pc, r7]
 8008a4c:	201d0314 	.word	0x201d0314
 8008a50:	14          	.byte	0x14
 8008a51:	00          	.byte	0x00
 8008a52:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008a56:	05e9      	lsls	r1, r5, #23
 8008a58:	bf48      	it	mi
 8008a5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008a5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a62:	0d1b      	lsrs	r3, r3, #20
 8008a64:	051b      	lsls	r3, r3, #20
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1b9      	bne.n	80089de <_strtod_l+0x76>
 8008a6a:	f001 fba1 	bl	800a1b0 <__errno>
 8008a6e:	2322      	movs	r3, #34	; 0x22
 8008a70:	6003      	str	r3, [r0, #0]
 8008a72:	e7b4      	b.n	80089de <_strtod_l+0x76>
 8008a74:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008a78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a84:	e7e7      	b.n	8008a56 <_strtod_l+0xee>
 8008a86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008c00 <_strtod_l+0x298>
 8008a8a:	e7e4      	b.n	8008a56 <_strtod_l+0xee>
 8008a8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a90:	f04f 38ff 	mov.w	r8, #4294967295
 8008a94:	e7df      	b.n	8008a56 <_strtod_l+0xee>
 8008a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	9215      	str	r2, [sp, #84]	; 0x54
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	2b30      	cmp	r3, #48	; 0x30
 8008aa0:	d0f9      	beq.n	8008a96 <_strtod_l+0x12e>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d09b      	beq.n	80089de <_strtod_l+0x76>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f04f 0a00 	mov.w	sl, #0
 8008aac:	9304      	str	r3, [sp, #16]
 8008aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ab2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008ab6:	46d3      	mov	fp, sl
 8008ab8:	220a      	movs	r2, #10
 8008aba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008abc:	7806      	ldrb	r6, [r0, #0]
 8008abe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008ac2:	b2d9      	uxtb	r1, r3
 8008ac4:	2909      	cmp	r1, #9
 8008ac6:	d926      	bls.n	8008b16 <_strtod_l+0x1ae>
 8008ac8:	494c      	ldr	r1, [pc, #304]	; (8008bfc <_strtod_l+0x294>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	f001 fb14 	bl	800a0f8 <strncmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d030      	beq.n	8008b36 <_strtod_l+0x1ce>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	9005      	str	r0, [sp, #20]
 8008ada:	465e      	mov	r6, fp
 8008adc:	4603      	mov	r3, r0
 8008ade:	2a65      	cmp	r2, #101	; 0x65
 8008ae0:	d001      	beq.n	8008ae6 <_strtod_l+0x17e>
 8008ae2:	2a45      	cmp	r2, #69	; 0x45
 8008ae4:	d113      	bne.n	8008b0e <_strtod_l+0x1a6>
 8008ae6:	b91e      	cbnz	r6, 8008af0 <_strtod_l+0x188>
 8008ae8:	9a04      	ldr	r2, [sp, #16]
 8008aea:	4302      	orrs	r2, r0
 8008aec:	d094      	beq.n	8008a18 <_strtod_l+0xb0>
 8008aee:	2600      	movs	r6, #0
 8008af0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008af2:	1c6a      	adds	r2, r5, #1
 8008af4:	9215      	str	r2, [sp, #84]	; 0x54
 8008af6:	786a      	ldrb	r2, [r5, #1]
 8008af8:	2a2b      	cmp	r2, #43	; 0x2b
 8008afa:	d074      	beq.n	8008be6 <_strtod_l+0x27e>
 8008afc:	2a2d      	cmp	r2, #45	; 0x2d
 8008afe:	d078      	beq.n	8008bf2 <_strtod_l+0x28a>
 8008b00:	f04f 0c00 	mov.w	ip, #0
 8008b04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b08:	2909      	cmp	r1, #9
 8008b0a:	d97f      	bls.n	8008c0c <_strtod_l+0x2a4>
 8008b0c:	9515      	str	r5, [sp, #84]	; 0x54
 8008b0e:	2700      	movs	r7, #0
 8008b10:	e09e      	b.n	8008c50 <_strtod_l+0x2e8>
 8008b12:	2300      	movs	r3, #0
 8008b14:	e7c8      	b.n	8008aa8 <_strtod_l+0x140>
 8008b16:	f1bb 0f08 	cmp.w	fp, #8
 8008b1a:	bfd8      	it	le
 8008b1c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008b1e:	f100 0001 	add.w	r0, r0, #1
 8008b22:	bfda      	itte	le
 8008b24:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b28:	9309      	strle	r3, [sp, #36]	; 0x24
 8008b2a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008b2e:	f10b 0b01 	add.w	fp, fp, #1
 8008b32:	9015      	str	r0, [sp, #84]	; 0x54
 8008b34:	e7c1      	b.n	8008aba <_strtod_l+0x152>
 8008b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	9215      	str	r2, [sp, #84]	; 0x54
 8008b3c:	785a      	ldrb	r2, [r3, #1]
 8008b3e:	f1bb 0f00 	cmp.w	fp, #0
 8008b42:	d037      	beq.n	8008bb4 <_strtod_l+0x24c>
 8008b44:	9005      	str	r0, [sp, #20]
 8008b46:	465e      	mov	r6, fp
 8008b48:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d912      	bls.n	8008b76 <_strtod_l+0x20e>
 8008b50:	2301      	movs	r3, #1
 8008b52:	e7c4      	b.n	8008ade <_strtod_l+0x176>
 8008b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	9215      	str	r2, [sp, #84]	; 0x54
 8008b5a:	785a      	ldrb	r2, [r3, #1]
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	2a30      	cmp	r2, #48	; 0x30
 8008b60:	d0f8      	beq.n	8008b54 <_strtod_l+0x1ec>
 8008b62:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b66:	2b08      	cmp	r3, #8
 8008b68:	f200 84c1 	bhi.w	80094ee <_strtod_l+0xb86>
 8008b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b6e:	9005      	str	r0, [sp, #20]
 8008b70:	2000      	movs	r0, #0
 8008b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b74:	4606      	mov	r6, r0
 8008b76:	3a30      	subs	r2, #48	; 0x30
 8008b78:	f100 0301 	add.w	r3, r0, #1
 8008b7c:	d014      	beq.n	8008ba8 <_strtod_l+0x240>
 8008b7e:	9905      	ldr	r1, [sp, #20]
 8008b80:	4419      	add	r1, r3
 8008b82:	9105      	str	r1, [sp, #20]
 8008b84:	4633      	mov	r3, r6
 8008b86:	eb00 0c06 	add.w	ip, r0, r6
 8008b8a:	210a      	movs	r1, #10
 8008b8c:	4563      	cmp	r3, ip
 8008b8e:	d113      	bne.n	8008bb8 <_strtod_l+0x250>
 8008b90:	1833      	adds	r3, r6, r0
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	f106 0601 	add.w	r6, r6, #1
 8008b98:	4406      	add	r6, r0
 8008b9a:	dc1a      	bgt.n	8008bd2 <_strtod_l+0x26a>
 8008b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b9e:	230a      	movs	r3, #10
 8008ba0:	fb03 2301 	mla	r3, r3, r1, r2
 8008ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008baa:	1c51      	adds	r1, r2, #1
 8008bac:	9115      	str	r1, [sp, #84]	; 0x54
 8008bae:	7852      	ldrb	r2, [r2, #1]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	e7c9      	b.n	8008b48 <_strtod_l+0x1e0>
 8008bb4:	4658      	mov	r0, fp
 8008bb6:	e7d2      	b.n	8008b5e <_strtod_l+0x1f6>
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	f103 0301 	add.w	r3, r3, #1
 8008bbe:	dc03      	bgt.n	8008bc8 <_strtod_l+0x260>
 8008bc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008bc2:	434f      	muls	r7, r1
 8008bc4:	9709      	str	r7, [sp, #36]	; 0x24
 8008bc6:	e7e1      	b.n	8008b8c <_strtod_l+0x224>
 8008bc8:	2b10      	cmp	r3, #16
 8008bca:	bfd8      	it	le
 8008bcc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008bd0:	e7dc      	b.n	8008b8c <_strtod_l+0x224>
 8008bd2:	2e10      	cmp	r6, #16
 8008bd4:	bfdc      	itt	le
 8008bd6:	230a      	movle	r3, #10
 8008bd8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008bdc:	e7e3      	b.n	8008ba6 <_strtod_l+0x23e>
 8008bde:	2300      	movs	r3, #0
 8008be0:	9305      	str	r3, [sp, #20]
 8008be2:	2301      	movs	r3, #1
 8008be4:	e780      	b.n	8008ae8 <_strtod_l+0x180>
 8008be6:	f04f 0c00 	mov.w	ip, #0
 8008bea:	1caa      	adds	r2, r5, #2
 8008bec:	9215      	str	r2, [sp, #84]	; 0x54
 8008bee:	78aa      	ldrb	r2, [r5, #2]
 8008bf0:	e788      	b.n	8008b04 <_strtod_l+0x19c>
 8008bf2:	f04f 0c01 	mov.w	ip, #1
 8008bf6:	e7f8      	b.n	8008bea <_strtod_l+0x282>
 8008bf8:	0800cd34 	.word	0x0800cd34
 8008bfc:	0800cd30 	.word	0x0800cd30
 8008c00:	7ff00000 	.word	0x7ff00000
 8008c04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c06:	1c51      	adds	r1, r2, #1
 8008c08:	9115      	str	r1, [sp, #84]	; 0x54
 8008c0a:	7852      	ldrb	r2, [r2, #1]
 8008c0c:	2a30      	cmp	r2, #48	; 0x30
 8008c0e:	d0f9      	beq.n	8008c04 <_strtod_l+0x29c>
 8008c10:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c14:	2908      	cmp	r1, #8
 8008c16:	f63f af7a 	bhi.w	8008b0e <_strtod_l+0x1a6>
 8008c1a:	3a30      	subs	r2, #48	; 0x30
 8008c1c:	9208      	str	r2, [sp, #32]
 8008c1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c20:	920c      	str	r2, [sp, #48]	; 0x30
 8008c22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c24:	1c57      	adds	r7, r2, #1
 8008c26:	9715      	str	r7, [sp, #84]	; 0x54
 8008c28:	7852      	ldrb	r2, [r2, #1]
 8008c2a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c2e:	f1be 0f09 	cmp.w	lr, #9
 8008c32:	d938      	bls.n	8008ca6 <_strtod_l+0x33e>
 8008c34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c36:	1a7f      	subs	r7, r7, r1
 8008c38:	2f08      	cmp	r7, #8
 8008c3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c3e:	dc03      	bgt.n	8008c48 <_strtod_l+0x2e0>
 8008c40:	9908      	ldr	r1, [sp, #32]
 8008c42:	428f      	cmp	r7, r1
 8008c44:	bfa8      	it	ge
 8008c46:	460f      	movge	r7, r1
 8008c48:	f1bc 0f00 	cmp.w	ip, #0
 8008c4c:	d000      	beq.n	8008c50 <_strtod_l+0x2e8>
 8008c4e:	427f      	negs	r7, r7
 8008c50:	2e00      	cmp	r6, #0
 8008c52:	d14f      	bne.n	8008cf4 <_strtod_l+0x38c>
 8008c54:	9904      	ldr	r1, [sp, #16]
 8008c56:	4301      	orrs	r1, r0
 8008c58:	f47f aec1 	bne.w	80089de <_strtod_l+0x76>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f47f aedb 	bne.w	8008a18 <_strtod_l+0xb0>
 8008c62:	2a69      	cmp	r2, #105	; 0x69
 8008c64:	d029      	beq.n	8008cba <_strtod_l+0x352>
 8008c66:	dc26      	bgt.n	8008cb6 <_strtod_l+0x34e>
 8008c68:	2a49      	cmp	r2, #73	; 0x49
 8008c6a:	d026      	beq.n	8008cba <_strtod_l+0x352>
 8008c6c:	2a4e      	cmp	r2, #78	; 0x4e
 8008c6e:	f47f aed3 	bne.w	8008a18 <_strtod_l+0xb0>
 8008c72:	499b      	ldr	r1, [pc, #620]	; (8008ee0 <_strtod_l+0x578>)
 8008c74:	a815      	add	r0, sp, #84	; 0x54
 8008c76:	f002 fc4d 	bl	800b514 <__match>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f43f aecc 	beq.w	8008a18 <_strtod_l+0xb0>
 8008c80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b28      	cmp	r3, #40	; 0x28
 8008c86:	d12f      	bne.n	8008ce8 <_strtod_l+0x380>
 8008c88:	4996      	ldr	r1, [pc, #600]	; (8008ee4 <_strtod_l+0x57c>)
 8008c8a:	aa18      	add	r2, sp, #96	; 0x60
 8008c8c:	a815      	add	r0, sp, #84	; 0x54
 8008c8e:	f002 fc55 	bl	800b53c <__hexnan>
 8008c92:	2805      	cmp	r0, #5
 8008c94:	d128      	bne.n	8008ce8 <_strtod_l+0x380>
 8008c96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008ca0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008ca4:	e69b      	b.n	80089de <_strtod_l+0x76>
 8008ca6:	9f08      	ldr	r7, [sp, #32]
 8008ca8:	210a      	movs	r1, #10
 8008caa:	fb01 2107 	mla	r1, r1, r7, r2
 8008cae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008cb2:	9208      	str	r2, [sp, #32]
 8008cb4:	e7b5      	b.n	8008c22 <_strtod_l+0x2ba>
 8008cb6:	2a6e      	cmp	r2, #110	; 0x6e
 8008cb8:	e7d9      	b.n	8008c6e <_strtod_l+0x306>
 8008cba:	498b      	ldr	r1, [pc, #556]	; (8008ee8 <_strtod_l+0x580>)
 8008cbc:	a815      	add	r0, sp, #84	; 0x54
 8008cbe:	f002 fc29 	bl	800b514 <__match>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f43f aea8 	beq.w	8008a18 <_strtod_l+0xb0>
 8008cc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cca:	4988      	ldr	r1, [pc, #544]	; (8008eec <_strtod_l+0x584>)
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	a815      	add	r0, sp, #84	; 0x54
 8008cd0:	9315      	str	r3, [sp, #84]	; 0x54
 8008cd2:	f002 fc1f 	bl	800b514 <__match>
 8008cd6:	b910      	cbnz	r0, 8008cde <_strtod_l+0x376>
 8008cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cda:	3301      	adds	r3, #1
 8008cdc:	9315      	str	r3, [sp, #84]	; 0x54
 8008cde:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008efc <_strtod_l+0x594>
 8008ce2:	f04f 0800 	mov.w	r8, #0
 8008ce6:	e67a      	b.n	80089de <_strtod_l+0x76>
 8008ce8:	4881      	ldr	r0, [pc, #516]	; (8008ef0 <_strtod_l+0x588>)
 8008cea:	f001 fa9d 	bl	800a228 <nan>
 8008cee:	ec59 8b10 	vmov	r8, r9, d0
 8008cf2:	e674      	b.n	80089de <_strtod_l+0x76>
 8008cf4:	9b05      	ldr	r3, [sp, #20]
 8008cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cf8:	1afb      	subs	r3, r7, r3
 8008cfa:	f1bb 0f00 	cmp.w	fp, #0
 8008cfe:	bf08      	it	eq
 8008d00:	46b3      	moveq	fp, r6
 8008d02:	2e10      	cmp	r6, #16
 8008d04:	9308      	str	r3, [sp, #32]
 8008d06:	4635      	mov	r5, r6
 8008d08:	bfa8      	it	ge
 8008d0a:	2510      	movge	r5, #16
 8008d0c:	f7f7 fc1a 	bl	8000544 <__aeabi_ui2d>
 8008d10:	2e09      	cmp	r6, #9
 8008d12:	4680      	mov	r8, r0
 8008d14:	4689      	mov	r9, r1
 8008d16:	dd13      	ble.n	8008d40 <_strtod_l+0x3d8>
 8008d18:	4b76      	ldr	r3, [pc, #472]	; (8008ef4 <_strtod_l+0x58c>)
 8008d1a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d22:	f7f7 fc89 	bl	8000638 <__aeabi_dmul>
 8008d26:	4680      	mov	r8, r0
 8008d28:	4650      	mov	r0, sl
 8008d2a:	4689      	mov	r9, r1
 8008d2c:	f7f7 fc0a 	bl	8000544 <__aeabi_ui2d>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4640      	mov	r0, r8
 8008d36:	4649      	mov	r1, r9
 8008d38:	f7f7 fac8 	bl	80002cc <__adddf3>
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	4689      	mov	r9, r1
 8008d40:	2e0f      	cmp	r6, #15
 8008d42:	dc38      	bgt.n	8008db6 <_strtod_l+0x44e>
 8008d44:	9b08      	ldr	r3, [sp, #32]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f43f ae49 	beq.w	80089de <_strtod_l+0x76>
 8008d4c:	dd24      	ble.n	8008d98 <_strtod_l+0x430>
 8008d4e:	2b16      	cmp	r3, #22
 8008d50:	dc0b      	bgt.n	8008d6a <_strtod_l+0x402>
 8008d52:	4968      	ldr	r1, [pc, #416]	; (8008ef4 <_strtod_l+0x58c>)
 8008d54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d5c:	4642      	mov	r2, r8
 8008d5e:	464b      	mov	r3, r9
 8008d60:	f7f7 fc6a 	bl	8000638 <__aeabi_dmul>
 8008d64:	4680      	mov	r8, r0
 8008d66:	4689      	mov	r9, r1
 8008d68:	e639      	b.n	80089de <_strtod_l+0x76>
 8008d6a:	9a08      	ldr	r2, [sp, #32]
 8008d6c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008d70:	4293      	cmp	r3, r2
 8008d72:	db20      	blt.n	8008db6 <_strtod_l+0x44e>
 8008d74:	4c5f      	ldr	r4, [pc, #380]	; (8008ef4 <_strtod_l+0x58c>)
 8008d76:	f1c6 060f 	rsb	r6, r6, #15
 8008d7a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008d7e:	4642      	mov	r2, r8
 8008d80:	464b      	mov	r3, r9
 8008d82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d86:	f7f7 fc57 	bl	8000638 <__aeabi_dmul>
 8008d8a:	9b08      	ldr	r3, [sp, #32]
 8008d8c:	1b9e      	subs	r6, r3, r6
 8008d8e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008d92:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d96:	e7e3      	b.n	8008d60 <_strtod_l+0x3f8>
 8008d98:	9b08      	ldr	r3, [sp, #32]
 8008d9a:	3316      	adds	r3, #22
 8008d9c:	db0b      	blt.n	8008db6 <_strtod_l+0x44e>
 8008d9e:	9b05      	ldr	r3, [sp, #20]
 8008da0:	1bdf      	subs	r7, r3, r7
 8008da2:	4b54      	ldr	r3, [pc, #336]	; (8008ef4 <_strtod_l+0x58c>)
 8008da4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dac:	4640      	mov	r0, r8
 8008dae:	4649      	mov	r1, r9
 8008db0:	f7f7 fd6c 	bl	800088c <__aeabi_ddiv>
 8008db4:	e7d6      	b.n	8008d64 <_strtod_l+0x3fc>
 8008db6:	9b08      	ldr	r3, [sp, #32]
 8008db8:	1b75      	subs	r5, r6, r5
 8008dba:	441d      	add	r5, r3
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	dd70      	ble.n	8008ea2 <_strtod_l+0x53a>
 8008dc0:	f015 030f 	ands.w	r3, r5, #15
 8008dc4:	d00a      	beq.n	8008ddc <_strtod_l+0x474>
 8008dc6:	494b      	ldr	r1, [pc, #300]	; (8008ef4 <_strtod_l+0x58c>)
 8008dc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dcc:	4642      	mov	r2, r8
 8008dce:	464b      	mov	r3, r9
 8008dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd4:	f7f7 fc30 	bl	8000638 <__aeabi_dmul>
 8008dd8:	4680      	mov	r8, r0
 8008dda:	4689      	mov	r9, r1
 8008ddc:	f035 050f 	bics.w	r5, r5, #15
 8008de0:	d04d      	beq.n	8008e7e <_strtod_l+0x516>
 8008de2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008de6:	dd22      	ble.n	8008e2e <_strtod_l+0x4c6>
 8008de8:	2500      	movs	r5, #0
 8008dea:	46ab      	mov	fp, r5
 8008dec:	9509      	str	r5, [sp, #36]	; 0x24
 8008dee:	9505      	str	r5, [sp, #20]
 8008df0:	2322      	movs	r3, #34	; 0x22
 8008df2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008efc <_strtod_l+0x594>
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	f04f 0800 	mov.w	r8, #0
 8008dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f43f aded 	beq.w	80089de <_strtod_l+0x76>
 8008e04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e06:	4620      	mov	r0, r4
 8008e08:	f002 fd3a 	bl	800b880 <_Bfree>
 8008e0c:	9905      	ldr	r1, [sp, #20]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f002 fd36 	bl	800b880 <_Bfree>
 8008e14:	4659      	mov	r1, fp
 8008e16:	4620      	mov	r0, r4
 8008e18:	f002 fd32 	bl	800b880 <_Bfree>
 8008e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f002 fd2e 	bl	800b880 <_Bfree>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4620      	mov	r0, r4
 8008e28:	f002 fd2a 	bl	800b880 <_Bfree>
 8008e2c:	e5d7      	b.n	80089de <_strtod_l+0x76>
 8008e2e:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <_strtod_l+0x590>)
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	2300      	movs	r3, #0
 8008e34:	112d      	asrs	r5, r5, #4
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	469a      	mov	sl, r3
 8008e3c:	2d01      	cmp	r5, #1
 8008e3e:	dc21      	bgt.n	8008e84 <_strtod_l+0x51c>
 8008e40:	b10b      	cbz	r3, 8008e46 <_strtod_l+0x4de>
 8008e42:	4680      	mov	r8, r0
 8008e44:	4689      	mov	r9, r1
 8008e46:	492c      	ldr	r1, [pc, #176]	; (8008ef8 <_strtod_l+0x590>)
 8008e48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e4c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e50:	4642      	mov	r2, r8
 8008e52:	464b      	mov	r3, r9
 8008e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e58:	f7f7 fbee 	bl	8000638 <__aeabi_dmul>
 8008e5c:	4b27      	ldr	r3, [pc, #156]	; (8008efc <_strtod_l+0x594>)
 8008e5e:	460a      	mov	r2, r1
 8008e60:	400b      	ands	r3, r1
 8008e62:	4927      	ldr	r1, [pc, #156]	; (8008f00 <_strtod_l+0x598>)
 8008e64:	428b      	cmp	r3, r1
 8008e66:	4680      	mov	r8, r0
 8008e68:	d8be      	bhi.n	8008de8 <_strtod_l+0x480>
 8008e6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e6e:	428b      	cmp	r3, r1
 8008e70:	bf86      	itte	hi
 8008e72:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008f04 <_strtod_l+0x59c>
 8008e76:	f04f 38ff 	movhi.w	r8, #4294967295
 8008e7a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	e07b      	b.n	8008f7c <_strtod_l+0x614>
 8008e84:	07ea      	lsls	r2, r5, #31
 8008e86:	d505      	bpl.n	8008e94 <_strtod_l+0x52c>
 8008e88:	9b04      	ldr	r3, [sp, #16]
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	f7f7 fbd3 	bl	8000638 <__aeabi_dmul>
 8008e92:	2301      	movs	r3, #1
 8008e94:	9a04      	ldr	r2, [sp, #16]
 8008e96:	3208      	adds	r2, #8
 8008e98:	f10a 0a01 	add.w	sl, sl, #1
 8008e9c:	106d      	asrs	r5, r5, #1
 8008e9e:	9204      	str	r2, [sp, #16]
 8008ea0:	e7cc      	b.n	8008e3c <_strtod_l+0x4d4>
 8008ea2:	d0ec      	beq.n	8008e7e <_strtod_l+0x516>
 8008ea4:	426d      	negs	r5, r5
 8008ea6:	f015 020f 	ands.w	r2, r5, #15
 8008eaa:	d00a      	beq.n	8008ec2 <_strtod_l+0x55a>
 8008eac:	4b11      	ldr	r3, [pc, #68]	; (8008ef4 <_strtod_l+0x58c>)
 8008eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 fce7 	bl	800088c <__aeabi_ddiv>
 8008ebe:	4680      	mov	r8, r0
 8008ec0:	4689      	mov	r9, r1
 8008ec2:	112d      	asrs	r5, r5, #4
 8008ec4:	d0db      	beq.n	8008e7e <_strtod_l+0x516>
 8008ec6:	2d1f      	cmp	r5, #31
 8008ec8:	dd1e      	ble.n	8008f08 <_strtod_l+0x5a0>
 8008eca:	2500      	movs	r5, #0
 8008ecc:	46ab      	mov	fp, r5
 8008ece:	9509      	str	r5, [sp, #36]	; 0x24
 8008ed0:	9505      	str	r5, [sp, #20]
 8008ed2:	2322      	movs	r3, #34	; 0x22
 8008ed4:	f04f 0800 	mov.w	r8, #0
 8008ed8:	f04f 0900 	mov.w	r9, #0
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	e78d      	b.n	8008dfc <_strtod_l+0x494>
 8008ee0:	0800ce96 	.word	0x0800ce96
 8008ee4:	0800cd48 	.word	0x0800cd48
 8008ee8:	0800ce8e 	.word	0x0800ce8e
 8008eec:	0800cec8 	.word	0x0800cec8
 8008ef0:	0800d158 	.word	0x0800d158
 8008ef4:	0800d038 	.word	0x0800d038
 8008ef8:	0800d010 	.word	0x0800d010
 8008efc:	7ff00000 	.word	0x7ff00000
 8008f00:	7ca00000 	.word	0x7ca00000
 8008f04:	7fefffff 	.word	0x7fefffff
 8008f08:	f015 0310 	ands.w	r3, r5, #16
 8008f0c:	bf18      	it	ne
 8008f0e:	236a      	movne	r3, #106	; 0x6a
 8008f10:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80092b4 <_strtod_l+0x94c>
 8008f14:	9304      	str	r3, [sp, #16]
 8008f16:	4640      	mov	r0, r8
 8008f18:	4649      	mov	r1, r9
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	07ea      	lsls	r2, r5, #31
 8008f1e:	d504      	bpl.n	8008f2a <_strtod_l+0x5c2>
 8008f20:	e9da 2300 	ldrd	r2, r3, [sl]
 8008f24:	f7f7 fb88 	bl	8000638 <__aeabi_dmul>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	106d      	asrs	r5, r5, #1
 8008f2c:	f10a 0a08 	add.w	sl, sl, #8
 8008f30:	d1f4      	bne.n	8008f1c <_strtod_l+0x5b4>
 8008f32:	b10b      	cbz	r3, 8008f38 <_strtod_l+0x5d0>
 8008f34:	4680      	mov	r8, r0
 8008f36:	4689      	mov	r9, r1
 8008f38:	9b04      	ldr	r3, [sp, #16]
 8008f3a:	b1bb      	cbz	r3, 8008f6c <_strtod_l+0x604>
 8008f3c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f40:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	4649      	mov	r1, r9
 8008f48:	dd10      	ble.n	8008f6c <_strtod_l+0x604>
 8008f4a:	2b1f      	cmp	r3, #31
 8008f4c:	f340 811e 	ble.w	800918c <_strtod_l+0x824>
 8008f50:	2b34      	cmp	r3, #52	; 0x34
 8008f52:	bfde      	ittt	le
 8008f54:	f04f 33ff 	movle.w	r3, #4294967295
 8008f58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f5c:	4093      	lslle	r3, r2
 8008f5e:	f04f 0800 	mov.w	r8, #0
 8008f62:	bfcc      	ite	gt
 8008f64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008f68:	ea03 0901 	andle.w	r9, r3, r1
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	f7f7 fdc8 	bl	8000b08 <__aeabi_dcmpeq>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d1a6      	bne.n	8008eca <_strtod_l+0x562>
 8008f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f82:	4633      	mov	r3, r6
 8008f84:	465a      	mov	r2, fp
 8008f86:	4620      	mov	r0, r4
 8008f88:	f002 fce2 	bl	800b950 <__s2b>
 8008f8c:	9009      	str	r0, [sp, #36]	; 0x24
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f43f af2a 	beq.w	8008de8 <_strtod_l+0x480>
 8008f94:	9a08      	ldr	r2, [sp, #32]
 8008f96:	9b05      	ldr	r3, [sp, #20]
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	eba3 0307 	sub.w	r3, r3, r7
 8008f9e:	bfa8      	it	ge
 8008fa0:	2300      	movge	r3, #0
 8008fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa4:	2500      	movs	r5, #0
 8008fa6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008faa:	9312      	str	r3, [sp, #72]	; 0x48
 8008fac:	46ab      	mov	fp, r5
 8008fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	6859      	ldr	r1, [r3, #4]
 8008fb4:	f002 fc24 	bl	800b800 <_Balloc>
 8008fb8:	9005      	str	r0, [sp, #20]
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f43f af18 	beq.w	8008df0 <_strtod_l+0x488>
 8008fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc2:	691a      	ldr	r2, [r3, #16]
 8008fc4:	3202      	adds	r2, #2
 8008fc6:	f103 010c 	add.w	r1, r3, #12
 8008fca:	0092      	lsls	r2, r2, #2
 8008fcc:	300c      	adds	r0, #12
 8008fce:	f001 f91c 	bl	800a20a <memcpy>
 8008fd2:	ec49 8b10 	vmov	d0, r8, r9
 8008fd6:	aa18      	add	r2, sp, #96	; 0x60
 8008fd8:	a917      	add	r1, sp, #92	; 0x5c
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f002 ffec 	bl	800bfb8 <__d2b>
 8008fe0:	ec49 8b18 	vmov	d8, r8, r9
 8008fe4:	9016      	str	r0, [sp, #88]	; 0x58
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f43f af02 	beq.w	8008df0 <_strtod_l+0x488>
 8008fec:	2101      	movs	r1, #1
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f002 fd46 	bl	800ba80 <__i2b>
 8008ff4:	4683      	mov	fp, r0
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f43f aefa 	beq.w	8008df0 <_strtod_l+0x488>
 8008ffc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008ffe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009000:	2e00      	cmp	r6, #0
 8009002:	bfab      	itete	ge
 8009004:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009006:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009008:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800900a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800900e:	bfac      	ite	ge
 8009010:	eb06 0a03 	addge.w	sl, r6, r3
 8009014:	1b9f      	sublt	r7, r3, r6
 8009016:	9b04      	ldr	r3, [sp, #16]
 8009018:	1af6      	subs	r6, r6, r3
 800901a:	4416      	add	r6, r2
 800901c:	4ba0      	ldr	r3, [pc, #640]	; (80092a0 <_strtod_l+0x938>)
 800901e:	3e01      	subs	r6, #1
 8009020:	429e      	cmp	r6, r3
 8009022:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009026:	f280 80c4 	bge.w	80091b2 <_strtod_l+0x84a>
 800902a:	1b9b      	subs	r3, r3, r6
 800902c:	2b1f      	cmp	r3, #31
 800902e:	eba2 0203 	sub.w	r2, r2, r3
 8009032:	f04f 0101 	mov.w	r1, #1
 8009036:	f300 80b0 	bgt.w	800919a <_strtod_l+0x832>
 800903a:	fa01 f303 	lsl.w	r3, r1, r3
 800903e:	930e      	str	r3, [sp, #56]	; 0x38
 8009040:	2300      	movs	r3, #0
 8009042:	930d      	str	r3, [sp, #52]	; 0x34
 8009044:	eb0a 0602 	add.w	r6, sl, r2
 8009048:	9b04      	ldr	r3, [sp, #16]
 800904a:	45b2      	cmp	sl, r6
 800904c:	4417      	add	r7, r2
 800904e:	441f      	add	r7, r3
 8009050:	4653      	mov	r3, sl
 8009052:	bfa8      	it	ge
 8009054:	4633      	movge	r3, r6
 8009056:	42bb      	cmp	r3, r7
 8009058:	bfa8      	it	ge
 800905a:	463b      	movge	r3, r7
 800905c:	2b00      	cmp	r3, #0
 800905e:	bfc2      	ittt	gt
 8009060:	1af6      	subgt	r6, r6, r3
 8009062:	1aff      	subgt	r7, r7, r3
 8009064:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800906a:	2b00      	cmp	r3, #0
 800906c:	dd17      	ble.n	800909e <_strtod_l+0x736>
 800906e:	4659      	mov	r1, fp
 8009070:	461a      	mov	r2, r3
 8009072:	4620      	mov	r0, r4
 8009074:	f002 fdc4 	bl	800bc00 <__pow5mult>
 8009078:	4683      	mov	fp, r0
 800907a:	2800      	cmp	r0, #0
 800907c:	f43f aeb8 	beq.w	8008df0 <_strtod_l+0x488>
 8009080:	4601      	mov	r1, r0
 8009082:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009084:	4620      	mov	r0, r4
 8009086:	f002 fd11 	bl	800baac <__multiply>
 800908a:	900b      	str	r0, [sp, #44]	; 0x2c
 800908c:	2800      	cmp	r0, #0
 800908e:	f43f aeaf 	beq.w	8008df0 <_strtod_l+0x488>
 8009092:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009094:	4620      	mov	r0, r4
 8009096:	f002 fbf3 	bl	800b880 <_Bfree>
 800909a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800909c:	9316      	str	r3, [sp, #88]	; 0x58
 800909e:	2e00      	cmp	r6, #0
 80090a0:	f300 808c 	bgt.w	80091bc <_strtod_l+0x854>
 80090a4:	9b08      	ldr	r3, [sp, #32]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	dd08      	ble.n	80090bc <_strtod_l+0x754>
 80090aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090ac:	9905      	ldr	r1, [sp, #20]
 80090ae:	4620      	mov	r0, r4
 80090b0:	f002 fda6 	bl	800bc00 <__pow5mult>
 80090b4:	9005      	str	r0, [sp, #20]
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f43f ae9a 	beq.w	8008df0 <_strtod_l+0x488>
 80090bc:	2f00      	cmp	r7, #0
 80090be:	dd08      	ble.n	80090d2 <_strtod_l+0x76a>
 80090c0:	9905      	ldr	r1, [sp, #20]
 80090c2:	463a      	mov	r2, r7
 80090c4:	4620      	mov	r0, r4
 80090c6:	f002 fdf5 	bl	800bcb4 <__lshift>
 80090ca:	9005      	str	r0, [sp, #20]
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f43f ae8f 	beq.w	8008df0 <_strtod_l+0x488>
 80090d2:	f1ba 0f00 	cmp.w	sl, #0
 80090d6:	dd08      	ble.n	80090ea <_strtod_l+0x782>
 80090d8:	4659      	mov	r1, fp
 80090da:	4652      	mov	r2, sl
 80090dc:	4620      	mov	r0, r4
 80090de:	f002 fde9 	bl	800bcb4 <__lshift>
 80090e2:	4683      	mov	fp, r0
 80090e4:	2800      	cmp	r0, #0
 80090e6:	f43f ae83 	beq.w	8008df0 <_strtod_l+0x488>
 80090ea:	9a05      	ldr	r2, [sp, #20]
 80090ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090ee:	4620      	mov	r0, r4
 80090f0:	f002 fe68 	bl	800bdc4 <__mdiff>
 80090f4:	4605      	mov	r5, r0
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f43f ae7a 	beq.w	8008df0 <_strtod_l+0x488>
 80090fc:	68c3      	ldr	r3, [r0, #12]
 80090fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009100:	2300      	movs	r3, #0
 8009102:	60c3      	str	r3, [r0, #12]
 8009104:	4659      	mov	r1, fp
 8009106:	f002 fe41 	bl	800bd8c <__mcmp>
 800910a:	2800      	cmp	r0, #0
 800910c:	da60      	bge.n	80091d0 <_strtod_l+0x868>
 800910e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009110:	ea53 0308 	orrs.w	r3, r3, r8
 8009114:	f040 8084 	bne.w	8009220 <_strtod_l+0x8b8>
 8009118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800911c:	2b00      	cmp	r3, #0
 800911e:	d17f      	bne.n	8009220 <_strtod_l+0x8b8>
 8009120:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009124:	0d1b      	lsrs	r3, r3, #20
 8009126:	051b      	lsls	r3, r3, #20
 8009128:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800912c:	d978      	bls.n	8009220 <_strtod_l+0x8b8>
 800912e:	696b      	ldr	r3, [r5, #20]
 8009130:	b913      	cbnz	r3, 8009138 <_strtod_l+0x7d0>
 8009132:	692b      	ldr	r3, [r5, #16]
 8009134:	2b01      	cmp	r3, #1
 8009136:	dd73      	ble.n	8009220 <_strtod_l+0x8b8>
 8009138:	4629      	mov	r1, r5
 800913a:	2201      	movs	r2, #1
 800913c:	4620      	mov	r0, r4
 800913e:	f002 fdb9 	bl	800bcb4 <__lshift>
 8009142:	4659      	mov	r1, fp
 8009144:	4605      	mov	r5, r0
 8009146:	f002 fe21 	bl	800bd8c <__mcmp>
 800914a:	2800      	cmp	r0, #0
 800914c:	dd68      	ble.n	8009220 <_strtod_l+0x8b8>
 800914e:	9904      	ldr	r1, [sp, #16]
 8009150:	4a54      	ldr	r2, [pc, #336]	; (80092a4 <_strtod_l+0x93c>)
 8009152:	464b      	mov	r3, r9
 8009154:	2900      	cmp	r1, #0
 8009156:	f000 8084 	beq.w	8009262 <_strtod_l+0x8fa>
 800915a:	ea02 0109 	and.w	r1, r2, r9
 800915e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009162:	dc7e      	bgt.n	8009262 <_strtod_l+0x8fa>
 8009164:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009168:	f77f aeb3 	ble.w	8008ed2 <_strtod_l+0x56a>
 800916c:	4b4e      	ldr	r3, [pc, #312]	; (80092a8 <_strtod_l+0x940>)
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	2200      	movs	r2, #0
 8009174:	f7f7 fa60 	bl	8000638 <__aeabi_dmul>
 8009178:	4b4a      	ldr	r3, [pc, #296]	; (80092a4 <_strtod_l+0x93c>)
 800917a:	400b      	ands	r3, r1
 800917c:	4680      	mov	r8, r0
 800917e:	4689      	mov	r9, r1
 8009180:	2b00      	cmp	r3, #0
 8009182:	f47f ae3f 	bne.w	8008e04 <_strtod_l+0x49c>
 8009186:	2322      	movs	r3, #34	; 0x22
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	e63b      	b.n	8008e04 <_strtod_l+0x49c>
 800918c:	f04f 32ff 	mov.w	r2, #4294967295
 8009190:	fa02 f303 	lsl.w	r3, r2, r3
 8009194:	ea03 0808 	and.w	r8, r3, r8
 8009198:	e6e8      	b.n	8008f6c <_strtod_l+0x604>
 800919a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800919e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80091a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80091a6:	36e2      	adds	r6, #226	; 0xe2
 80091a8:	fa01 f306 	lsl.w	r3, r1, r6
 80091ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80091b0:	e748      	b.n	8009044 <_strtod_l+0x6dc>
 80091b2:	2100      	movs	r1, #0
 80091b4:	2301      	movs	r3, #1
 80091b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80091ba:	e743      	b.n	8009044 <_strtod_l+0x6dc>
 80091bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80091be:	4632      	mov	r2, r6
 80091c0:	4620      	mov	r0, r4
 80091c2:	f002 fd77 	bl	800bcb4 <__lshift>
 80091c6:	9016      	str	r0, [sp, #88]	; 0x58
 80091c8:	2800      	cmp	r0, #0
 80091ca:	f47f af6b 	bne.w	80090a4 <_strtod_l+0x73c>
 80091ce:	e60f      	b.n	8008df0 <_strtod_l+0x488>
 80091d0:	46ca      	mov	sl, r9
 80091d2:	d171      	bne.n	80092b8 <_strtod_l+0x950>
 80091d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091da:	b352      	cbz	r2, 8009232 <_strtod_l+0x8ca>
 80091dc:	4a33      	ldr	r2, [pc, #204]	; (80092ac <_strtod_l+0x944>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d12a      	bne.n	8009238 <_strtod_l+0x8d0>
 80091e2:	9b04      	ldr	r3, [sp, #16]
 80091e4:	4641      	mov	r1, r8
 80091e6:	b1fb      	cbz	r3, 8009228 <_strtod_l+0x8c0>
 80091e8:	4b2e      	ldr	r3, [pc, #184]	; (80092a4 <_strtod_l+0x93c>)
 80091ea:	ea09 0303 	and.w	r3, r9, r3
 80091ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80091f2:	f04f 32ff 	mov.w	r2, #4294967295
 80091f6:	d81a      	bhi.n	800922e <_strtod_l+0x8c6>
 80091f8:	0d1b      	lsrs	r3, r3, #20
 80091fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009202:	4299      	cmp	r1, r3
 8009204:	d118      	bne.n	8009238 <_strtod_l+0x8d0>
 8009206:	4b2a      	ldr	r3, [pc, #168]	; (80092b0 <_strtod_l+0x948>)
 8009208:	459a      	cmp	sl, r3
 800920a:	d102      	bne.n	8009212 <_strtod_l+0x8aa>
 800920c:	3101      	adds	r1, #1
 800920e:	f43f adef 	beq.w	8008df0 <_strtod_l+0x488>
 8009212:	4b24      	ldr	r3, [pc, #144]	; (80092a4 <_strtod_l+0x93c>)
 8009214:	ea0a 0303 	and.w	r3, sl, r3
 8009218:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800921c:	f04f 0800 	mov.w	r8, #0
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1a2      	bne.n	800916c <_strtod_l+0x804>
 8009226:	e5ed      	b.n	8008e04 <_strtod_l+0x49c>
 8009228:	f04f 33ff 	mov.w	r3, #4294967295
 800922c:	e7e9      	b.n	8009202 <_strtod_l+0x89a>
 800922e:	4613      	mov	r3, r2
 8009230:	e7e7      	b.n	8009202 <_strtod_l+0x89a>
 8009232:	ea53 0308 	orrs.w	r3, r3, r8
 8009236:	d08a      	beq.n	800914e <_strtod_l+0x7e6>
 8009238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800923a:	b1e3      	cbz	r3, 8009276 <_strtod_l+0x90e>
 800923c:	ea13 0f0a 	tst.w	r3, sl
 8009240:	d0ee      	beq.n	8009220 <_strtod_l+0x8b8>
 8009242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009244:	9a04      	ldr	r2, [sp, #16]
 8009246:	4640      	mov	r0, r8
 8009248:	4649      	mov	r1, r9
 800924a:	b1c3      	cbz	r3, 800927e <_strtod_l+0x916>
 800924c:	f7ff fb6d 	bl	800892a <sulp>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	ec51 0b18 	vmov	r0, r1, d8
 8009258:	f7f7 f838 	bl	80002cc <__adddf3>
 800925c:	4680      	mov	r8, r0
 800925e:	4689      	mov	r9, r1
 8009260:	e7de      	b.n	8009220 <_strtod_l+0x8b8>
 8009262:	4013      	ands	r3, r2
 8009264:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009268:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800926c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009270:	f04f 38ff 	mov.w	r8, #4294967295
 8009274:	e7d4      	b.n	8009220 <_strtod_l+0x8b8>
 8009276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009278:	ea13 0f08 	tst.w	r3, r8
 800927c:	e7e0      	b.n	8009240 <_strtod_l+0x8d8>
 800927e:	f7ff fb54 	bl	800892a <sulp>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	ec51 0b18 	vmov	r0, r1, d8
 800928a:	f7f7 f81d 	bl	80002c8 <__aeabi_dsub>
 800928e:	2200      	movs	r2, #0
 8009290:	2300      	movs	r3, #0
 8009292:	4680      	mov	r8, r0
 8009294:	4689      	mov	r9, r1
 8009296:	f7f7 fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800929a:	2800      	cmp	r0, #0
 800929c:	d0c0      	beq.n	8009220 <_strtod_l+0x8b8>
 800929e:	e618      	b.n	8008ed2 <_strtod_l+0x56a>
 80092a0:	fffffc02 	.word	0xfffffc02
 80092a4:	7ff00000 	.word	0x7ff00000
 80092a8:	39500000 	.word	0x39500000
 80092ac:	000fffff 	.word	0x000fffff
 80092b0:	7fefffff 	.word	0x7fefffff
 80092b4:	0800cd60 	.word	0x0800cd60
 80092b8:	4659      	mov	r1, fp
 80092ba:	4628      	mov	r0, r5
 80092bc:	f002 fed6 	bl	800c06c <__ratio>
 80092c0:	ec57 6b10 	vmov	r6, r7, d0
 80092c4:	ee10 0a10 	vmov	r0, s0
 80092c8:	2200      	movs	r2, #0
 80092ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092ce:	4639      	mov	r1, r7
 80092d0:	f7f7 fc2e 	bl	8000b30 <__aeabi_dcmple>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d071      	beq.n	80093bc <_strtod_l+0xa54>
 80092d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d17c      	bne.n	80093d8 <_strtod_l+0xa70>
 80092de:	f1b8 0f00 	cmp.w	r8, #0
 80092e2:	d15a      	bne.n	800939a <_strtod_l+0xa32>
 80092e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d15d      	bne.n	80093a8 <_strtod_l+0xa40>
 80092ec:	4b90      	ldr	r3, [pc, #576]	; (8009530 <_strtod_l+0xbc8>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	4630      	mov	r0, r6
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f7 fc12 	bl	8000b1c <__aeabi_dcmplt>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d15c      	bne.n	80093b6 <_strtod_l+0xa4e>
 80092fc:	4630      	mov	r0, r6
 80092fe:	4639      	mov	r1, r7
 8009300:	4b8c      	ldr	r3, [pc, #560]	; (8009534 <_strtod_l+0xbcc>)
 8009302:	2200      	movs	r2, #0
 8009304:	f7f7 f998 	bl	8000638 <__aeabi_dmul>
 8009308:	4606      	mov	r6, r0
 800930a:	460f      	mov	r7, r1
 800930c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009310:	9606      	str	r6, [sp, #24]
 8009312:	9307      	str	r3, [sp, #28]
 8009314:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009318:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800931c:	4b86      	ldr	r3, [pc, #536]	; (8009538 <_strtod_l+0xbd0>)
 800931e:	ea0a 0303 	and.w	r3, sl, r3
 8009322:	930d      	str	r3, [sp, #52]	; 0x34
 8009324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009326:	4b85      	ldr	r3, [pc, #532]	; (800953c <_strtod_l+0xbd4>)
 8009328:	429a      	cmp	r2, r3
 800932a:	f040 8090 	bne.w	800944e <_strtod_l+0xae6>
 800932e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009332:	ec49 8b10 	vmov	d0, r8, r9
 8009336:	f002 fdcf 	bl	800bed8 <__ulp>
 800933a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800933e:	ec51 0b10 	vmov	r0, r1, d0
 8009342:	f7f7 f979 	bl	8000638 <__aeabi_dmul>
 8009346:	4642      	mov	r2, r8
 8009348:	464b      	mov	r3, r9
 800934a:	f7f6 ffbf 	bl	80002cc <__adddf3>
 800934e:	460b      	mov	r3, r1
 8009350:	4979      	ldr	r1, [pc, #484]	; (8009538 <_strtod_l+0xbd0>)
 8009352:	4a7b      	ldr	r2, [pc, #492]	; (8009540 <_strtod_l+0xbd8>)
 8009354:	4019      	ands	r1, r3
 8009356:	4291      	cmp	r1, r2
 8009358:	4680      	mov	r8, r0
 800935a:	d944      	bls.n	80093e6 <_strtod_l+0xa7e>
 800935c:	ee18 2a90 	vmov	r2, s17
 8009360:	4b78      	ldr	r3, [pc, #480]	; (8009544 <_strtod_l+0xbdc>)
 8009362:	429a      	cmp	r2, r3
 8009364:	d104      	bne.n	8009370 <_strtod_l+0xa08>
 8009366:	ee18 3a10 	vmov	r3, s16
 800936a:	3301      	adds	r3, #1
 800936c:	f43f ad40 	beq.w	8008df0 <_strtod_l+0x488>
 8009370:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009544 <_strtod_l+0xbdc>
 8009374:	f04f 38ff 	mov.w	r8, #4294967295
 8009378:	9916      	ldr	r1, [sp, #88]	; 0x58
 800937a:	4620      	mov	r0, r4
 800937c:	f002 fa80 	bl	800b880 <_Bfree>
 8009380:	9905      	ldr	r1, [sp, #20]
 8009382:	4620      	mov	r0, r4
 8009384:	f002 fa7c 	bl	800b880 <_Bfree>
 8009388:	4659      	mov	r1, fp
 800938a:	4620      	mov	r0, r4
 800938c:	f002 fa78 	bl	800b880 <_Bfree>
 8009390:	4629      	mov	r1, r5
 8009392:	4620      	mov	r0, r4
 8009394:	f002 fa74 	bl	800b880 <_Bfree>
 8009398:	e609      	b.n	8008fae <_strtod_l+0x646>
 800939a:	f1b8 0f01 	cmp.w	r8, #1
 800939e:	d103      	bne.n	80093a8 <_strtod_l+0xa40>
 80093a0:	f1b9 0f00 	cmp.w	r9, #0
 80093a4:	f43f ad95 	beq.w	8008ed2 <_strtod_l+0x56a>
 80093a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009500 <_strtod_l+0xb98>
 80093ac:	4f60      	ldr	r7, [pc, #384]	; (8009530 <_strtod_l+0xbc8>)
 80093ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093b2:	2600      	movs	r6, #0
 80093b4:	e7ae      	b.n	8009314 <_strtod_l+0x9ac>
 80093b6:	4f5f      	ldr	r7, [pc, #380]	; (8009534 <_strtod_l+0xbcc>)
 80093b8:	2600      	movs	r6, #0
 80093ba:	e7a7      	b.n	800930c <_strtod_l+0x9a4>
 80093bc:	4b5d      	ldr	r3, [pc, #372]	; (8009534 <_strtod_l+0xbcc>)
 80093be:	4630      	mov	r0, r6
 80093c0:	4639      	mov	r1, r7
 80093c2:	2200      	movs	r2, #0
 80093c4:	f7f7 f938 	bl	8000638 <__aeabi_dmul>
 80093c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ca:	4606      	mov	r6, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d09c      	beq.n	800930c <_strtod_l+0x9a4>
 80093d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093d6:	e79d      	b.n	8009314 <_strtod_l+0x9ac>
 80093d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009508 <_strtod_l+0xba0>
 80093dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093e0:	ec57 6b17 	vmov	r6, r7, d7
 80093e4:	e796      	b.n	8009314 <_strtod_l+0x9ac>
 80093e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	46ca      	mov	sl, r9
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1c2      	bne.n	8009378 <_strtod_l+0xa10>
 80093f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093f8:	0d1b      	lsrs	r3, r3, #20
 80093fa:	051b      	lsls	r3, r3, #20
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d1bb      	bne.n	8009378 <_strtod_l+0xa10>
 8009400:	4630      	mov	r0, r6
 8009402:	4639      	mov	r1, r7
 8009404:	f7f7 fc78 	bl	8000cf8 <__aeabi_d2lz>
 8009408:	f7f7 f8e8 	bl	80005dc <__aeabi_l2d>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f6 ff58 	bl	80002c8 <__aeabi_dsub>
 8009418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800941a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800941e:	ea43 0308 	orr.w	r3, r3, r8
 8009422:	4313      	orrs	r3, r2
 8009424:	4606      	mov	r6, r0
 8009426:	460f      	mov	r7, r1
 8009428:	d054      	beq.n	80094d4 <_strtod_l+0xb6c>
 800942a:	a339      	add	r3, pc, #228	; (adr r3, 8009510 <_strtod_l+0xba8>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f7f7 fb74 	bl	8000b1c <__aeabi_dcmplt>
 8009434:	2800      	cmp	r0, #0
 8009436:	f47f ace5 	bne.w	8008e04 <_strtod_l+0x49c>
 800943a:	a337      	add	r3, pc, #220	; (adr r3, 8009518 <_strtod_l+0xbb0>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	4630      	mov	r0, r6
 8009442:	4639      	mov	r1, r7
 8009444:	f7f7 fb88 	bl	8000b58 <__aeabi_dcmpgt>
 8009448:	2800      	cmp	r0, #0
 800944a:	d095      	beq.n	8009378 <_strtod_l+0xa10>
 800944c:	e4da      	b.n	8008e04 <_strtod_l+0x49c>
 800944e:	9b04      	ldr	r3, [sp, #16]
 8009450:	b333      	cbz	r3, 80094a0 <_strtod_l+0xb38>
 8009452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009454:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009458:	d822      	bhi.n	80094a0 <_strtod_l+0xb38>
 800945a:	a331      	add	r3, pc, #196	; (adr r3, 8009520 <_strtod_l+0xbb8>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 fb64 	bl	8000b30 <__aeabi_dcmple>
 8009468:	b1a0      	cbz	r0, 8009494 <_strtod_l+0xb2c>
 800946a:	4639      	mov	r1, r7
 800946c:	4630      	mov	r0, r6
 800946e:	f7f7 fbbb 	bl	8000be8 <__aeabi_d2uiz>
 8009472:	2801      	cmp	r0, #1
 8009474:	bf38      	it	cc
 8009476:	2001      	movcc	r0, #1
 8009478:	f7f7 f864 	bl	8000544 <__aeabi_ui2d>
 800947c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800947e:	4606      	mov	r6, r0
 8009480:	460f      	mov	r7, r1
 8009482:	bb23      	cbnz	r3, 80094ce <_strtod_l+0xb66>
 8009484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009488:	9010      	str	r0, [sp, #64]	; 0x40
 800948a:	9311      	str	r3, [sp, #68]	; 0x44
 800948c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009490:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009498:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	930f      	str	r3, [sp, #60]	; 0x3c
 80094a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80094a4:	eeb0 0a48 	vmov.f32	s0, s16
 80094a8:	eef0 0a68 	vmov.f32	s1, s17
 80094ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80094b0:	f002 fd12 	bl	800bed8 <__ulp>
 80094b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80094b8:	ec53 2b10 	vmov	r2, r3, d0
 80094bc:	f7f7 f8bc 	bl	8000638 <__aeabi_dmul>
 80094c0:	ec53 2b18 	vmov	r2, r3, d8
 80094c4:	f7f6 ff02 	bl	80002cc <__adddf3>
 80094c8:	4680      	mov	r8, r0
 80094ca:	4689      	mov	r9, r1
 80094cc:	e78d      	b.n	80093ea <_strtod_l+0xa82>
 80094ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80094d2:	e7db      	b.n	800948c <_strtod_l+0xb24>
 80094d4:	a314      	add	r3, pc, #80	; (adr r3, 8009528 <_strtod_l+0xbc0>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	f7f7 fb1f 	bl	8000b1c <__aeabi_dcmplt>
 80094de:	e7b3      	b.n	8009448 <_strtod_l+0xae0>
 80094e0:	2300      	movs	r3, #0
 80094e2:	930a      	str	r3, [sp, #40]	; 0x28
 80094e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	f7ff ba7c 	b.w	80089e6 <_strtod_l+0x7e>
 80094ee:	2a65      	cmp	r2, #101	; 0x65
 80094f0:	f43f ab75 	beq.w	8008bde <_strtod_l+0x276>
 80094f4:	2a45      	cmp	r2, #69	; 0x45
 80094f6:	f43f ab72 	beq.w	8008bde <_strtod_l+0x276>
 80094fa:	2301      	movs	r3, #1
 80094fc:	f7ff bbaa 	b.w	8008c54 <_strtod_l+0x2ec>
 8009500:	00000000 	.word	0x00000000
 8009504:	bff00000 	.word	0xbff00000
 8009508:	00000000 	.word	0x00000000
 800950c:	3ff00000 	.word	0x3ff00000
 8009510:	94a03595 	.word	0x94a03595
 8009514:	3fdfffff 	.word	0x3fdfffff
 8009518:	35afe535 	.word	0x35afe535
 800951c:	3fe00000 	.word	0x3fe00000
 8009520:	ffc00000 	.word	0xffc00000
 8009524:	41dfffff 	.word	0x41dfffff
 8009528:	94a03595 	.word	0x94a03595
 800952c:	3fcfffff 	.word	0x3fcfffff
 8009530:	3ff00000 	.word	0x3ff00000
 8009534:	3fe00000 	.word	0x3fe00000
 8009538:	7ff00000 	.word	0x7ff00000
 800953c:	7fe00000 	.word	0x7fe00000
 8009540:	7c9fffff 	.word	0x7c9fffff
 8009544:	7fefffff 	.word	0x7fefffff

08009548 <strtod>:
 8009548:	460a      	mov	r2, r1
 800954a:	4601      	mov	r1, r0
 800954c:	4802      	ldr	r0, [pc, #8]	; (8009558 <strtod+0x10>)
 800954e:	4b03      	ldr	r3, [pc, #12]	; (800955c <strtod+0x14>)
 8009550:	6800      	ldr	r0, [r0, #0]
 8009552:	f7ff ba09 	b.w	8008968 <_strtod_l>
 8009556:	bf00      	nop
 8009558:	20000224 	.word	0x20000224
 800955c:	2000006c 	.word	0x2000006c

08009560 <__cvt>:
 8009560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	ec55 4b10 	vmov	r4, r5, d0
 8009568:	2d00      	cmp	r5, #0
 800956a:	460e      	mov	r6, r1
 800956c:	4619      	mov	r1, r3
 800956e:	462b      	mov	r3, r5
 8009570:	bfbb      	ittet	lt
 8009572:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009576:	461d      	movlt	r5, r3
 8009578:	2300      	movge	r3, #0
 800957a:	232d      	movlt	r3, #45	; 0x2d
 800957c:	700b      	strb	r3, [r1, #0]
 800957e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009580:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009584:	4691      	mov	r9, r2
 8009586:	f023 0820 	bic.w	r8, r3, #32
 800958a:	bfbc      	itt	lt
 800958c:	4622      	movlt	r2, r4
 800958e:	4614      	movlt	r4, r2
 8009590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009594:	d005      	beq.n	80095a2 <__cvt+0x42>
 8009596:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800959a:	d100      	bne.n	800959e <__cvt+0x3e>
 800959c:	3601      	adds	r6, #1
 800959e:	2102      	movs	r1, #2
 80095a0:	e000      	b.n	80095a4 <__cvt+0x44>
 80095a2:	2103      	movs	r1, #3
 80095a4:	ab03      	add	r3, sp, #12
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	ab02      	add	r3, sp, #8
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	ec45 4b10 	vmov	d0, r4, r5
 80095b0:	4653      	mov	r3, sl
 80095b2:	4632      	mov	r2, r6
 80095b4:	f000 fec8 	bl	800a348 <_dtoa_r>
 80095b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095bc:	4607      	mov	r7, r0
 80095be:	d102      	bne.n	80095c6 <__cvt+0x66>
 80095c0:	f019 0f01 	tst.w	r9, #1
 80095c4:	d022      	beq.n	800960c <__cvt+0xac>
 80095c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095ca:	eb07 0906 	add.w	r9, r7, r6
 80095ce:	d110      	bne.n	80095f2 <__cvt+0x92>
 80095d0:	783b      	ldrb	r3, [r7, #0]
 80095d2:	2b30      	cmp	r3, #48	; 0x30
 80095d4:	d10a      	bne.n	80095ec <__cvt+0x8c>
 80095d6:	2200      	movs	r2, #0
 80095d8:	2300      	movs	r3, #0
 80095da:	4620      	mov	r0, r4
 80095dc:	4629      	mov	r1, r5
 80095de:	f7f7 fa93 	bl	8000b08 <__aeabi_dcmpeq>
 80095e2:	b918      	cbnz	r0, 80095ec <__cvt+0x8c>
 80095e4:	f1c6 0601 	rsb	r6, r6, #1
 80095e8:	f8ca 6000 	str.w	r6, [sl]
 80095ec:	f8da 3000 	ldr.w	r3, [sl]
 80095f0:	4499      	add	r9, r3
 80095f2:	2200      	movs	r2, #0
 80095f4:	2300      	movs	r3, #0
 80095f6:	4620      	mov	r0, r4
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7f7 fa85 	bl	8000b08 <__aeabi_dcmpeq>
 80095fe:	b108      	cbz	r0, 8009604 <__cvt+0xa4>
 8009600:	f8cd 900c 	str.w	r9, [sp, #12]
 8009604:	2230      	movs	r2, #48	; 0x30
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	454b      	cmp	r3, r9
 800960a:	d307      	bcc.n	800961c <__cvt+0xbc>
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009610:	1bdb      	subs	r3, r3, r7
 8009612:	4638      	mov	r0, r7
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	b004      	add	sp, #16
 8009618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961c:	1c59      	adds	r1, r3, #1
 800961e:	9103      	str	r1, [sp, #12]
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	e7f0      	b.n	8009606 <__cvt+0xa6>

08009624 <__exponent>:
 8009624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009626:	4603      	mov	r3, r0
 8009628:	2900      	cmp	r1, #0
 800962a:	bfb8      	it	lt
 800962c:	4249      	neglt	r1, r1
 800962e:	f803 2b02 	strb.w	r2, [r3], #2
 8009632:	bfb4      	ite	lt
 8009634:	222d      	movlt	r2, #45	; 0x2d
 8009636:	222b      	movge	r2, #43	; 0x2b
 8009638:	2909      	cmp	r1, #9
 800963a:	7042      	strb	r2, [r0, #1]
 800963c:	dd2a      	ble.n	8009694 <__exponent+0x70>
 800963e:	f10d 0207 	add.w	r2, sp, #7
 8009642:	4617      	mov	r7, r2
 8009644:	260a      	movs	r6, #10
 8009646:	4694      	mov	ip, r2
 8009648:	fb91 f5f6 	sdiv	r5, r1, r6
 800964c:	fb06 1415 	mls	r4, r6, r5, r1
 8009650:	3430      	adds	r4, #48	; 0x30
 8009652:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009656:	460c      	mov	r4, r1
 8009658:	2c63      	cmp	r4, #99	; 0x63
 800965a:	f102 32ff 	add.w	r2, r2, #4294967295
 800965e:	4629      	mov	r1, r5
 8009660:	dcf1      	bgt.n	8009646 <__exponent+0x22>
 8009662:	3130      	adds	r1, #48	; 0x30
 8009664:	f1ac 0402 	sub.w	r4, ip, #2
 8009668:	f802 1c01 	strb.w	r1, [r2, #-1]
 800966c:	1c41      	adds	r1, r0, #1
 800966e:	4622      	mov	r2, r4
 8009670:	42ba      	cmp	r2, r7
 8009672:	d30a      	bcc.n	800968a <__exponent+0x66>
 8009674:	f10d 0209 	add.w	r2, sp, #9
 8009678:	eba2 020c 	sub.w	r2, r2, ip
 800967c:	42bc      	cmp	r4, r7
 800967e:	bf88      	it	hi
 8009680:	2200      	movhi	r2, #0
 8009682:	4413      	add	r3, r2
 8009684:	1a18      	subs	r0, r3, r0
 8009686:	b003      	add	sp, #12
 8009688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800968e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009692:	e7ed      	b.n	8009670 <__exponent+0x4c>
 8009694:	2330      	movs	r3, #48	; 0x30
 8009696:	3130      	adds	r1, #48	; 0x30
 8009698:	7083      	strb	r3, [r0, #2]
 800969a:	70c1      	strb	r1, [r0, #3]
 800969c:	1d03      	adds	r3, r0, #4
 800969e:	e7f1      	b.n	8009684 <__exponent+0x60>

080096a0 <_printf_float>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	ed2d 8b02 	vpush	{d8}
 80096a8:	b08d      	sub	sp, #52	; 0x34
 80096aa:	460c      	mov	r4, r1
 80096ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096b0:	4616      	mov	r6, r2
 80096b2:	461f      	mov	r7, r3
 80096b4:	4605      	mov	r5, r0
 80096b6:	f000 fd31 	bl	800a11c <_localeconv_r>
 80096ba:	f8d0 a000 	ldr.w	sl, [r0]
 80096be:	4650      	mov	r0, sl
 80096c0:	f7f6 fdf6 	bl	80002b0 <strlen>
 80096c4:	2300      	movs	r3, #0
 80096c6:	930a      	str	r3, [sp, #40]	; 0x28
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	9305      	str	r3, [sp, #20]
 80096cc:	f8d8 3000 	ldr.w	r3, [r8]
 80096d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096d4:	3307      	adds	r3, #7
 80096d6:	f023 0307 	bic.w	r3, r3, #7
 80096da:	f103 0208 	add.w	r2, r3, #8
 80096de:	f8c8 2000 	str.w	r2, [r8]
 80096e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096ea:	9307      	str	r3, [sp, #28]
 80096ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80096f0:	ee08 0a10 	vmov	s16, r0
 80096f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80096f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096fc:	4b9e      	ldr	r3, [pc, #632]	; (8009978 <_printf_float+0x2d8>)
 80096fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009702:	f7f7 fa33 	bl	8000b6c <__aeabi_dcmpun>
 8009706:	bb88      	cbnz	r0, 800976c <_printf_float+0xcc>
 8009708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800970c:	4b9a      	ldr	r3, [pc, #616]	; (8009978 <_printf_float+0x2d8>)
 800970e:	f04f 32ff 	mov.w	r2, #4294967295
 8009712:	f7f7 fa0d 	bl	8000b30 <__aeabi_dcmple>
 8009716:	bb48      	cbnz	r0, 800976c <_printf_float+0xcc>
 8009718:	2200      	movs	r2, #0
 800971a:	2300      	movs	r3, #0
 800971c:	4640      	mov	r0, r8
 800971e:	4649      	mov	r1, r9
 8009720:	f7f7 f9fc 	bl	8000b1c <__aeabi_dcmplt>
 8009724:	b110      	cbz	r0, 800972c <_printf_float+0x8c>
 8009726:	232d      	movs	r3, #45	; 0x2d
 8009728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800972c:	4a93      	ldr	r2, [pc, #588]	; (800997c <_printf_float+0x2dc>)
 800972e:	4b94      	ldr	r3, [pc, #592]	; (8009980 <_printf_float+0x2e0>)
 8009730:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009734:	bf94      	ite	ls
 8009736:	4690      	movls	r8, r2
 8009738:	4698      	movhi	r8, r3
 800973a:	2303      	movs	r3, #3
 800973c:	6123      	str	r3, [r4, #16]
 800973e:	9b05      	ldr	r3, [sp, #20]
 8009740:	f023 0304 	bic.w	r3, r3, #4
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	f04f 0900 	mov.w	r9, #0
 800974a:	9700      	str	r7, [sp, #0]
 800974c:	4633      	mov	r3, r6
 800974e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009750:	4621      	mov	r1, r4
 8009752:	4628      	mov	r0, r5
 8009754:	f000 f9da 	bl	8009b0c <_printf_common>
 8009758:	3001      	adds	r0, #1
 800975a:	f040 8090 	bne.w	800987e <_printf_float+0x1de>
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	b00d      	add	sp, #52	; 0x34
 8009764:	ecbd 8b02 	vpop	{d8}
 8009768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976c:	4642      	mov	r2, r8
 800976e:	464b      	mov	r3, r9
 8009770:	4640      	mov	r0, r8
 8009772:	4649      	mov	r1, r9
 8009774:	f7f7 f9fa 	bl	8000b6c <__aeabi_dcmpun>
 8009778:	b140      	cbz	r0, 800978c <_printf_float+0xec>
 800977a:	464b      	mov	r3, r9
 800977c:	2b00      	cmp	r3, #0
 800977e:	bfbc      	itt	lt
 8009780:	232d      	movlt	r3, #45	; 0x2d
 8009782:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009786:	4a7f      	ldr	r2, [pc, #508]	; (8009984 <_printf_float+0x2e4>)
 8009788:	4b7f      	ldr	r3, [pc, #508]	; (8009988 <_printf_float+0x2e8>)
 800978a:	e7d1      	b.n	8009730 <_printf_float+0x90>
 800978c:	6863      	ldr	r3, [r4, #4]
 800978e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009792:	9206      	str	r2, [sp, #24]
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	d13f      	bne.n	8009818 <_printf_float+0x178>
 8009798:	2306      	movs	r3, #6
 800979a:	6063      	str	r3, [r4, #4]
 800979c:	9b05      	ldr	r3, [sp, #20]
 800979e:	6861      	ldr	r1, [r4, #4]
 80097a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097a4:	2300      	movs	r3, #0
 80097a6:	9303      	str	r3, [sp, #12]
 80097a8:	ab0a      	add	r3, sp, #40	; 0x28
 80097aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097ae:	ab09      	add	r3, sp, #36	; 0x24
 80097b0:	ec49 8b10 	vmov	d0, r8, r9
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	6022      	str	r2, [r4, #0]
 80097b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097bc:	4628      	mov	r0, r5
 80097be:	f7ff fecf 	bl	8009560 <__cvt>
 80097c2:	9b06      	ldr	r3, [sp, #24]
 80097c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097c6:	2b47      	cmp	r3, #71	; 0x47
 80097c8:	4680      	mov	r8, r0
 80097ca:	d108      	bne.n	80097de <_printf_float+0x13e>
 80097cc:	1cc8      	adds	r0, r1, #3
 80097ce:	db02      	blt.n	80097d6 <_printf_float+0x136>
 80097d0:	6863      	ldr	r3, [r4, #4]
 80097d2:	4299      	cmp	r1, r3
 80097d4:	dd41      	ble.n	800985a <_printf_float+0x1ba>
 80097d6:	f1ab 0302 	sub.w	r3, fp, #2
 80097da:	fa5f fb83 	uxtb.w	fp, r3
 80097de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097e2:	d820      	bhi.n	8009826 <_printf_float+0x186>
 80097e4:	3901      	subs	r1, #1
 80097e6:	465a      	mov	r2, fp
 80097e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097ec:	9109      	str	r1, [sp, #36]	; 0x24
 80097ee:	f7ff ff19 	bl	8009624 <__exponent>
 80097f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097f4:	1813      	adds	r3, r2, r0
 80097f6:	2a01      	cmp	r2, #1
 80097f8:	4681      	mov	r9, r0
 80097fa:	6123      	str	r3, [r4, #16]
 80097fc:	dc02      	bgt.n	8009804 <_printf_float+0x164>
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	07d2      	lsls	r2, r2, #31
 8009802:	d501      	bpl.n	8009808 <_printf_float+0x168>
 8009804:	3301      	adds	r3, #1
 8009806:	6123      	str	r3, [r4, #16]
 8009808:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800980c:	2b00      	cmp	r3, #0
 800980e:	d09c      	beq.n	800974a <_printf_float+0xaa>
 8009810:	232d      	movs	r3, #45	; 0x2d
 8009812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009816:	e798      	b.n	800974a <_printf_float+0xaa>
 8009818:	9a06      	ldr	r2, [sp, #24]
 800981a:	2a47      	cmp	r2, #71	; 0x47
 800981c:	d1be      	bne.n	800979c <_printf_float+0xfc>
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1bc      	bne.n	800979c <_printf_float+0xfc>
 8009822:	2301      	movs	r3, #1
 8009824:	e7b9      	b.n	800979a <_printf_float+0xfa>
 8009826:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800982a:	d118      	bne.n	800985e <_printf_float+0x1be>
 800982c:	2900      	cmp	r1, #0
 800982e:	6863      	ldr	r3, [r4, #4]
 8009830:	dd0b      	ble.n	800984a <_printf_float+0x1aa>
 8009832:	6121      	str	r1, [r4, #16]
 8009834:	b913      	cbnz	r3, 800983c <_printf_float+0x19c>
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	07d0      	lsls	r0, r2, #31
 800983a:	d502      	bpl.n	8009842 <_printf_float+0x1a2>
 800983c:	3301      	adds	r3, #1
 800983e:	440b      	add	r3, r1
 8009840:	6123      	str	r3, [r4, #16]
 8009842:	65a1      	str	r1, [r4, #88]	; 0x58
 8009844:	f04f 0900 	mov.w	r9, #0
 8009848:	e7de      	b.n	8009808 <_printf_float+0x168>
 800984a:	b913      	cbnz	r3, 8009852 <_printf_float+0x1b2>
 800984c:	6822      	ldr	r2, [r4, #0]
 800984e:	07d2      	lsls	r2, r2, #31
 8009850:	d501      	bpl.n	8009856 <_printf_float+0x1b6>
 8009852:	3302      	adds	r3, #2
 8009854:	e7f4      	b.n	8009840 <_printf_float+0x1a0>
 8009856:	2301      	movs	r3, #1
 8009858:	e7f2      	b.n	8009840 <_printf_float+0x1a0>
 800985a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800985e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009860:	4299      	cmp	r1, r3
 8009862:	db05      	blt.n	8009870 <_printf_float+0x1d0>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	6121      	str	r1, [r4, #16]
 8009868:	07d8      	lsls	r0, r3, #31
 800986a:	d5ea      	bpl.n	8009842 <_printf_float+0x1a2>
 800986c:	1c4b      	adds	r3, r1, #1
 800986e:	e7e7      	b.n	8009840 <_printf_float+0x1a0>
 8009870:	2900      	cmp	r1, #0
 8009872:	bfd4      	ite	le
 8009874:	f1c1 0202 	rsble	r2, r1, #2
 8009878:	2201      	movgt	r2, #1
 800987a:	4413      	add	r3, r2
 800987c:	e7e0      	b.n	8009840 <_printf_float+0x1a0>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	055a      	lsls	r2, r3, #21
 8009882:	d407      	bmi.n	8009894 <_printf_float+0x1f4>
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	4642      	mov	r2, r8
 8009888:	4631      	mov	r1, r6
 800988a:	4628      	mov	r0, r5
 800988c:	47b8      	blx	r7
 800988e:	3001      	adds	r0, #1
 8009890:	d12c      	bne.n	80098ec <_printf_float+0x24c>
 8009892:	e764      	b.n	800975e <_printf_float+0xbe>
 8009894:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009898:	f240 80e0 	bls.w	8009a5c <_printf_float+0x3bc>
 800989c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098a0:	2200      	movs	r2, #0
 80098a2:	2300      	movs	r3, #0
 80098a4:	f7f7 f930 	bl	8000b08 <__aeabi_dcmpeq>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d034      	beq.n	8009916 <_printf_float+0x276>
 80098ac:	4a37      	ldr	r2, [pc, #220]	; (800998c <_printf_float+0x2ec>)
 80098ae:	2301      	movs	r3, #1
 80098b0:	4631      	mov	r1, r6
 80098b2:	4628      	mov	r0, r5
 80098b4:	47b8      	blx	r7
 80098b6:	3001      	adds	r0, #1
 80098b8:	f43f af51 	beq.w	800975e <_printf_float+0xbe>
 80098bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098c0:	429a      	cmp	r2, r3
 80098c2:	db02      	blt.n	80098ca <_printf_float+0x22a>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	07d8      	lsls	r0, r3, #31
 80098c8:	d510      	bpl.n	80098ec <_printf_float+0x24c>
 80098ca:	ee18 3a10 	vmov	r3, s16
 80098ce:	4652      	mov	r2, sl
 80098d0:	4631      	mov	r1, r6
 80098d2:	4628      	mov	r0, r5
 80098d4:	47b8      	blx	r7
 80098d6:	3001      	adds	r0, #1
 80098d8:	f43f af41 	beq.w	800975e <_printf_float+0xbe>
 80098dc:	f04f 0800 	mov.w	r8, #0
 80098e0:	f104 091a 	add.w	r9, r4, #26
 80098e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e6:	3b01      	subs	r3, #1
 80098e8:	4543      	cmp	r3, r8
 80098ea:	dc09      	bgt.n	8009900 <_printf_float+0x260>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	079b      	lsls	r3, r3, #30
 80098f0:	f100 8107 	bmi.w	8009b02 <_printf_float+0x462>
 80098f4:	68e0      	ldr	r0, [r4, #12]
 80098f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098f8:	4298      	cmp	r0, r3
 80098fa:	bfb8      	it	lt
 80098fc:	4618      	movlt	r0, r3
 80098fe:	e730      	b.n	8009762 <_printf_float+0xc2>
 8009900:	2301      	movs	r3, #1
 8009902:	464a      	mov	r2, r9
 8009904:	4631      	mov	r1, r6
 8009906:	4628      	mov	r0, r5
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	f43f af27 	beq.w	800975e <_printf_float+0xbe>
 8009910:	f108 0801 	add.w	r8, r8, #1
 8009914:	e7e6      	b.n	80098e4 <_printf_float+0x244>
 8009916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	dc39      	bgt.n	8009990 <_printf_float+0x2f0>
 800991c:	4a1b      	ldr	r2, [pc, #108]	; (800998c <_printf_float+0x2ec>)
 800991e:	2301      	movs	r3, #1
 8009920:	4631      	mov	r1, r6
 8009922:	4628      	mov	r0, r5
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	f43f af19 	beq.w	800975e <_printf_float+0xbe>
 800992c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009930:	4313      	orrs	r3, r2
 8009932:	d102      	bne.n	800993a <_printf_float+0x29a>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	07d9      	lsls	r1, r3, #31
 8009938:	d5d8      	bpl.n	80098ec <_printf_float+0x24c>
 800993a:	ee18 3a10 	vmov	r3, s16
 800993e:	4652      	mov	r2, sl
 8009940:	4631      	mov	r1, r6
 8009942:	4628      	mov	r0, r5
 8009944:	47b8      	blx	r7
 8009946:	3001      	adds	r0, #1
 8009948:	f43f af09 	beq.w	800975e <_printf_float+0xbe>
 800994c:	f04f 0900 	mov.w	r9, #0
 8009950:	f104 0a1a 	add.w	sl, r4, #26
 8009954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009956:	425b      	negs	r3, r3
 8009958:	454b      	cmp	r3, r9
 800995a:	dc01      	bgt.n	8009960 <_printf_float+0x2c0>
 800995c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800995e:	e792      	b.n	8009886 <_printf_float+0x1e6>
 8009960:	2301      	movs	r3, #1
 8009962:	4652      	mov	r2, sl
 8009964:	4631      	mov	r1, r6
 8009966:	4628      	mov	r0, r5
 8009968:	47b8      	blx	r7
 800996a:	3001      	adds	r0, #1
 800996c:	f43f aef7 	beq.w	800975e <_printf_float+0xbe>
 8009970:	f109 0901 	add.w	r9, r9, #1
 8009974:	e7ee      	b.n	8009954 <_printf_float+0x2b4>
 8009976:	bf00      	nop
 8009978:	7fefffff 	.word	0x7fefffff
 800997c:	0800ce89 	.word	0x0800ce89
 8009980:	0800ce8d 	.word	0x0800ce8d
 8009984:	0800ce91 	.word	0x0800ce91
 8009988:	0800ce95 	.word	0x0800ce95
 800998c:	0800ce99 	.word	0x0800ce99
 8009990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009992:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009994:	429a      	cmp	r2, r3
 8009996:	bfa8      	it	ge
 8009998:	461a      	movge	r2, r3
 800999a:	2a00      	cmp	r2, #0
 800999c:	4691      	mov	r9, r2
 800999e:	dc37      	bgt.n	8009a10 <_printf_float+0x370>
 80099a0:	f04f 0b00 	mov.w	fp, #0
 80099a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099a8:	f104 021a 	add.w	r2, r4, #26
 80099ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099ae:	9305      	str	r3, [sp, #20]
 80099b0:	eba3 0309 	sub.w	r3, r3, r9
 80099b4:	455b      	cmp	r3, fp
 80099b6:	dc33      	bgt.n	8009a20 <_printf_float+0x380>
 80099b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099bc:	429a      	cmp	r2, r3
 80099be:	db3b      	blt.n	8009a38 <_printf_float+0x398>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	07da      	lsls	r2, r3, #31
 80099c4:	d438      	bmi.n	8009a38 <_printf_float+0x398>
 80099c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80099ca:	eba2 0903 	sub.w	r9, r2, r3
 80099ce:	9b05      	ldr	r3, [sp, #20]
 80099d0:	1ad2      	subs	r2, r2, r3
 80099d2:	4591      	cmp	r9, r2
 80099d4:	bfa8      	it	ge
 80099d6:	4691      	movge	r9, r2
 80099d8:	f1b9 0f00 	cmp.w	r9, #0
 80099dc:	dc35      	bgt.n	8009a4a <_printf_float+0x3aa>
 80099de:	f04f 0800 	mov.w	r8, #0
 80099e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099e6:	f104 0a1a 	add.w	sl, r4, #26
 80099ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099ee:	1a9b      	subs	r3, r3, r2
 80099f0:	eba3 0309 	sub.w	r3, r3, r9
 80099f4:	4543      	cmp	r3, r8
 80099f6:	f77f af79 	ble.w	80098ec <_printf_float+0x24c>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4652      	mov	r2, sl
 80099fe:	4631      	mov	r1, r6
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b8      	blx	r7
 8009a04:	3001      	adds	r0, #1
 8009a06:	f43f aeaa 	beq.w	800975e <_printf_float+0xbe>
 8009a0a:	f108 0801 	add.w	r8, r8, #1
 8009a0e:	e7ec      	b.n	80099ea <_printf_float+0x34a>
 8009a10:	4613      	mov	r3, r2
 8009a12:	4631      	mov	r1, r6
 8009a14:	4642      	mov	r2, r8
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	d1c0      	bne.n	80099a0 <_printf_float+0x300>
 8009a1e:	e69e      	b.n	800975e <_printf_float+0xbe>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4631      	mov	r1, r6
 8009a24:	4628      	mov	r0, r5
 8009a26:	9205      	str	r2, [sp, #20]
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f43f ae97 	beq.w	800975e <_printf_float+0xbe>
 8009a30:	9a05      	ldr	r2, [sp, #20]
 8009a32:	f10b 0b01 	add.w	fp, fp, #1
 8009a36:	e7b9      	b.n	80099ac <_printf_float+0x30c>
 8009a38:	ee18 3a10 	vmov	r3, s16
 8009a3c:	4652      	mov	r2, sl
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4628      	mov	r0, r5
 8009a42:	47b8      	blx	r7
 8009a44:	3001      	adds	r0, #1
 8009a46:	d1be      	bne.n	80099c6 <_printf_float+0x326>
 8009a48:	e689      	b.n	800975e <_printf_float+0xbe>
 8009a4a:	9a05      	ldr	r2, [sp, #20]
 8009a4c:	464b      	mov	r3, r9
 8009a4e:	4442      	add	r2, r8
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	d1c1      	bne.n	80099de <_printf_float+0x33e>
 8009a5a:	e680      	b.n	800975e <_printf_float+0xbe>
 8009a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a5e:	2a01      	cmp	r2, #1
 8009a60:	dc01      	bgt.n	8009a66 <_printf_float+0x3c6>
 8009a62:	07db      	lsls	r3, r3, #31
 8009a64:	d53a      	bpl.n	8009adc <_printf_float+0x43c>
 8009a66:	2301      	movs	r3, #1
 8009a68:	4642      	mov	r2, r8
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	47b8      	blx	r7
 8009a70:	3001      	adds	r0, #1
 8009a72:	f43f ae74 	beq.w	800975e <_printf_float+0xbe>
 8009a76:	ee18 3a10 	vmov	r3, s16
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b8      	blx	r7
 8009a82:	3001      	adds	r0, #1
 8009a84:	f43f ae6b 	beq.w	800975e <_printf_float+0xbe>
 8009a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009a94:	f7f7 f838 	bl	8000b08 <__aeabi_dcmpeq>
 8009a98:	b9d8      	cbnz	r0, 8009ad2 <_printf_float+0x432>
 8009a9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a9e:	f108 0201 	add.w	r2, r8, #1
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	47b8      	blx	r7
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d10e      	bne.n	8009aca <_printf_float+0x42a>
 8009aac:	e657      	b.n	800975e <_printf_float+0xbe>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	4652      	mov	r2, sl
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	47b8      	blx	r7
 8009ab8:	3001      	adds	r0, #1
 8009aba:	f43f ae50 	beq.w	800975e <_printf_float+0xbe>
 8009abe:	f108 0801 	add.w	r8, r8, #1
 8009ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	4543      	cmp	r3, r8
 8009ac8:	dcf1      	bgt.n	8009aae <_printf_float+0x40e>
 8009aca:	464b      	mov	r3, r9
 8009acc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ad0:	e6da      	b.n	8009888 <_printf_float+0x1e8>
 8009ad2:	f04f 0800 	mov.w	r8, #0
 8009ad6:	f104 0a1a 	add.w	sl, r4, #26
 8009ada:	e7f2      	b.n	8009ac2 <_printf_float+0x422>
 8009adc:	2301      	movs	r3, #1
 8009ade:	4642      	mov	r2, r8
 8009ae0:	e7df      	b.n	8009aa2 <_printf_float+0x402>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	464a      	mov	r2, r9
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4628      	mov	r0, r5
 8009aea:	47b8      	blx	r7
 8009aec:	3001      	adds	r0, #1
 8009aee:	f43f ae36 	beq.w	800975e <_printf_float+0xbe>
 8009af2:	f108 0801 	add.w	r8, r8, #1
 8009af6:	68e3      	ldr	r3, [r4, #12]
 8009af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009afa:	1a5b      	subs	r3, r3, r1
 8009afc:	4543      	cmp	r3, r8
 8009afe:	dcf0      	bgt.n	8009ae2 <_printf_float+0x442>
 8009b00:	e6f8      	b.n	80098f4 <_printf_float+0x254>
 8009b02:	f04f 0800 	mov.w	r8, #0
 8009b06:	f104 0919 	add.w	r9, r4, #25
 8009b0a:	e7f4      	b.n	8009af6 <_printf_float+0x456>

08009b0c <_printf_common>:
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	4616      	mov	r6, r2
 8009b12:	4699      	mov	r9, r3
 8009b14:	688a      	ldr	r2, [r1, #8]
 8009b16:	690b      	ldr	r3, [r1, #16]
 8009b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	bfb8      	it	lt
 8009b20:	4613      	movlt	r3, r2
 8009b22:	6033      	str	r3, [r6, #0]
 8009b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b28:	4607      	mov	r7, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	b10a      	cbz	r2, 8009b32 <_printf_common+0x26>
 8009b2e:	3301      	adds	r3, #1
 8009b30:	6033      	str	r3, [r6, #0]
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	0699      	lsls	r1, r3, #26
 8009b36:	bf42      	ittt	mi
 8009b38:	6833      	ldrmi	r3, [r6, #0]
 8009b3a:	3302      	addmi	r3, #2
 8009b3c:	6033      	strmi	r3, [r6, #0]
 8009b3e:	6825      	ldr	r5, [r4, #0]
 8009b40:	f015 0506 	ands.w	r5, r5, #6
 8009b44:	d106      	bne.n	8009b54 <_printf_common+0x48>
 8009b46:	f104 0a19 	add.w	sl, r4, #25
 8009b4a:	68e3      	ldr	r3, [r4, #12]
 8009b4c:	6832      	ldr	r2, [r6, #0]
 8009b4e:	1a9b      	subs	r3, r3, r2
 8009b50:	42ab      	cmp	r3, r5
 8009b52:	dc26      	bgt.n	8009ba2 <_printf_common+0x96>
 8009b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b58:	1e13      	subs	r3, r2, #0
 8009b5a:	6822      	ldr	r2, [r4, #0]
 8009b5c:	bf18      	it	ne
 8009b5e:	2301      	movne	r3, #1
 8009b60:	0692      	lsls	r2, r2, #26
 8009b62:	d42b      	bmi.n	8009bbc <_printf_common+0xb0>
 8009b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b68:	4649      	mov	r1, r9
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	47c0      	blx	r8
 8009b6e:	3001      	adds	r0, #1
 8009b70:	d01e      	beq.n	8009bb0 <_printf_common+0xa4>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	6922      	ldr	r2, [r4, #16]
 8009b76:	f003 0306 	and.w	r3, r3, #6
 8009b7a:	2b04      	cmp	r3, #4
 8009b7c:	bf02      	ittt	eq
 8009b7e:	68e5      	ldreq	r5, [r4, #12]
 8009b80:	6833      	ldreq	r3, [r6, #0]
 8009b82:	1aed      	subeq	r5, r5, r3
 8009b84:	68a3      	ldr	r3, [r4, #8]
 8009b86:	bf0c      	ite	eq
 8009b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b8c:	2500      	movne	r5, #0
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	bfc4      	itt	gt
 8009b92:	1a9b      	subgt	r3, r3, r2
 8009b94:	18ed      	addgt	r5, r5, r3
 8009b96:	2600      	movs	r6, #0
 8009b98:	341a      	adds	r4, #26
 8009b9a:	42b5      	cmp	r5, r6
 8009b9c:	d11a      	bne.n	8009bd4 <_printf_common+0xc8>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	e008      	b.n	8009bb4 <_printf_common+0xa8>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4652      	mov	r2, sl
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	4638      	mov	r0, r7
 8009baa:	47c0      	blx	r8
 8009bac:	3001      	adds	r0, #1
 8009bae:	d103      	bne.n	8009bb8 <_printf_common+0xac>
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb8:	3501      	adds	r5, #1
 8009bba:	e7c6      	b.n	8009b4a <_printf_common+0x3e>
 8009bbc:	18e1      	adds	r1, r4, r3
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	2030      	movs	r0, #48	; 0x30
 8009bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bc6:	4422      	add	r2, r4
 8009bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	e7c7      	b.n	8009b64 <_printf_common+0x58>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	4649      	mov	r1, r9
 8009bda:	4638      	mov	r0, r7
 8009bdc:	47c0      	blx	r8
 8009bde:	3001      	adds	r0, #1
 8009be0:	d0e6      	beq.n	8009bb0 <_printf_common+0xa4>
 8009be2:	3601      	adds	r6, #1
 8009be4:	e7d9      	b.n	8009b9a <_printf_common+0x8e>
	...

08009be8 <_printf_i>:
 8009be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	7e0f      	ldrb	r7, [r1, #24]
 8009bee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bf0:	2f78      	cmp	r7, #120	; 0x78
 8009bf2:	4691      	mov	r9, r2
 8009bf4:	4680      	mov	r8, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	469a      	mov	sl, r3
 8009bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bfe:	d807      	bhi.n	8009c10 <_printf_i+0x28>
 8009c00:	2f62      	cmp	r7, #98	; 0x62
 8009c02:	d80a      	bhi.n	8009c1a <_printf_i+0x32>
 8009c04:	2f00      	cmp	r7, #0
 8009c06:	f000 80d4 	beq.w	8009db2 <_printf_i+0x1ca>
 8009c0a:	2f58      	cmp	r7, #88	; 0x58
 8009c0c:	f000 80c0 	beq.w	8009d90 <_printf_i+0x1a8>
 8009c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c18:	e03a      	b.n	8009c90 <_printf_i+0xa8>
 8009c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c1e:	2b15      	cmp	r3, #21
 8009c20:	d8f6      	bhi.n	8009c10 <_printf_i+0x28>
 8009c22:	a101      	add	r1, pc, #4	; (adr r1, 8009c28 <_printf_i+0x40>)
 8009c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c28:	08009c81 	.word	0x08009c81
 8009c2c:	08009c95 	.word	0x08009c95
 8009c30:	08009c11 	.word	0x08009c11
 8009c34:	08009c11 	.word	0x08009c11
 8009c38:	08009c11 	.word	0x08009c11
 8009c3c:	08009c11 	.word	0x08009c11
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009c11 	.word	0x08009c11
 8009c48:	08009c11 	.word	0x08009c11
 8009c4c:	08009c11 	.word	0x08009c11
 8009c50:	08009c11 	.word	0x08009c11
 8009c54:	08009d99 	.word	0x08009d99
 8009c58:	08009cc1 	.word	0x08009cc1
 8009c5c:	08009d53 	.word	0x08009d53
 8009c60:	08009c11 	.word	0x08009c11
 8009c64:	08009c11 	.word	0x08009c11
 8009c68:	08009dbb 	.word	0x08009dbb
 8009c6c:	08009c11 	.word	0x08009c11
 8009c70:	08009cc1 	.word	0x08009cc1
 8009c74:	08009c11 	.word	0x08009c11
 8009c78:	08009c11 	.word	0x08009c11
 8009c7c:	08009d5b 	.word	0x08009d5b
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	1d1a      	adds	r2, r3, #4
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	602a      	str	r2, [r5, #0]
 8009c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c90:	2301      	movs	r3, #1
 8009c92:	e09f      	b.n	8009dd4 <_printf_i+0x1ec>
 8009c94:	6820      	ldr	r0, [r4, #0]
 8009c96:	682b      	ldr	r3, [r5, #0]
 8009c98:	0607      	lsls	r7, r0, #24
 8009c9a:	f103 0104 	add.w	r1, r3, #4
 8009c9e:	6029      	str	r1, [r5, #0]
 8009ca0:	d501      	bpl.n	8009ca6 <_printf_i+0xbe>
 8009ca2:	681e      	ldr	r6, [r3, #0]
 8009ca4:	e003      	b.n	8009cae <_printf_i+0xc6>
 8009ca6:	0646      	lsls	r6, r0, #25
 8009ca8:	d5fb      	bpl.n	8009ca2 <_printf_i+0xba>
 8009caa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	da03      	bge.n	8009cba <_printf_i+0xd2>
 8009cb2:	232d      	movs	r3, #45	; 0x2d
 8009cb4:	4276      	negs	r6, r6
 8009cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cba:	485a      	ldr	r0, [pc, #360]	; (8009e24 <_printf_i+0x23c>)
 8009cbc:	230a      	movs	r3, #10
 8009cbe:	e012      	b.n	8009ce6 <_printf_i+0xfe>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	6820      	ldr	r0, [r4, #0]
 8009cc4:	1d19      	adds	r1, r3, #4
 8009cc6:	6029      	str	r1, [r5, #0]
 8009cc8:	0605      	lsls	r5, r0, #24
 8009cca:	d501      	bpl.n	8009cd0 <_printf_i+0xe8>
 8009ccc:	681e      	ldr	r6, [r3, #0]
 8009cce:	e002      	b.n	8009cd6 <_printf_i+0xee>
 8009cd0:	0641      	lsls	r1, r0, #25
 8009cd2:	d5fb      	bpl.n	8009ccc <_printf_i+0xe4>
 8009cd4:	881e      	ldrh	r6, [r3, #0]
 8009cd6:	4853      	ldr	r0, [pc, #332]	; (8009e24 <_printf_i+0x23c>)
 8009cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8009cda:	bf0c      	ite	eq
 8009cdc:	2308      	moveq	r3, #8
 8009cde:	230a      	movne	r3, #10
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ce6:	6865      	ldr	r5, [r4, #4]
 8009ce8:	60a5      	str	r5, [r4, #8]
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	bfa2      	ittt	ge
 8009cee:	6821      	ldrge	r1, [r4, #0]
 8009cf0:	f021 0104 	bicge.w	r1, r1, #4
 8009cf4:	6021      	strge	r1, [r4, #0]
 8009cf6:	b90e      	cbnz	r6, 8009cfc <_printf_i+0x114>
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	d04b      	beq.n	8009d94 <_printf_i+0x1ac>
 8009cfc:	4615      	mov	r5, r2
 8009cfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d02:	fb03 6711 	mls	r7, r3, r1, r6
 8009d06:	5dc7      	ldrb	r7, [r0, r7]
 8009d08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d0c:	4637      	mov	r7, r6
 8009d0e:	42bb      	cmp	r3, r7
 8009d10:	460e      	mov	r6, r1
 8009d12:	d9f4      	bls.n	8009cfe <_printf_i+0x116>
 8009d14:	2b08      	cmp	r3, #8
 8009d16:	d10b      	bne.n	8009d30 <_printf_i+0x148>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	07de      	lsls	r6, r3, #31
 8009d1c:	d508      	bpl.n	8009d30 <_printf_i+0x148>
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	6861      	ldr	r1, [r4, #4]
 8009d22:	4299      	cmp	r1, r3
 8009d24:	bfde      	ittt	le
 8009d26:	2330      	movle	r3, #48	; 0x30
 8009d28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d30:	1b52      	subs	r2, r2, r5
 8009d32:	6122      	str	r2, [r4, #16]
 8009d34:	f8cd a000 	str.w	sl, [sp]
 8009d38:	464b      	mov	r3, r9
 8009d3a:	aa03      	add	r2, sp, #12
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f7ff fee4 	bl	8009b0c <_printf_common>
 8009d44:	3001      	adds	r0, #1
 8009d46:	d14a      	bne.n	8009dde <_printf_i+0x1f6>
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	b004      	add	sp, #16
 8009d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	f043 0320 	orr.w	r3, r3, #32
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	4833      	ldr	r0, [pc, #204]	; (8009e28 <_printf_i+0x240>)
 8009d5c:	2778      	movs	r7, #120	; 0x78
 8009d5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	6829      	ldr	r1, [r5, #0]
 8009d66:	061f      	lsls	r7, r3, #24
 8009d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d6c:	d402      	bmi.n	8009d74 <_printf_i+0x18c>
 8009d6e:	065f      	lsls	r7, r3, #25
 8009d70:	bf48      	it	mi
 8009d72:	b2b6      	uxthmi	r6, r6
 8009d74:	07df      	lsls	r7, r3, #31
 8009d76:	bf48      	it	mi
 8009d78:	f043 0320 	orrmi.w	r3, r3, #32
 8009d7c:	6029      	str	r1, [r5, #0]
 8009d7e:	bf48      	it	mi
 8009d80:	6023      	strmi	r3, [r4, #0]
 8009d82:	b91e      	cbnz	r6, 8009d8c <_printf_i+0x1a4>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	f023 0320 	bic.w	r3, r3, #32
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	e7a7      	b.n	8009ce0 <_printf_i+0xf8>
 8009d90:	4824      	ldr	r0, [pc, #144]	; (8009e24 <_printf_i+0x23c>)
 8009d92:	e7e4      	b.n	8009d5e <_printf_i+0x176>
 8009d94:	4615      	mov	r5, r2
 8009d96:	e7bd      	b.n	8009d14 <_printf_i+0x12c>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	6826      	ldr	r6, [r4, #0]
 8009d9c:	6961      	ldr	r1, [r4, #20]
 8009d9e:	1d18      	adds	r0, r3, #4
 8009da0:	6028      	str	r0, [r5, #0]
 8009da2:	0635      	lsls	r5, r6, #24
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	d501      	bpl.n	8009dac <_printf_i+0x1c4>
 8009da8:	6019      	str	r1, [r3, #0]
 8009daa:	e002      	b.n	8009db2 <_printf_i+0x1ca>
 8009dac:	0670      	lsls	r0, r6, #25
 8009dae:	d5fb      	bpl.n	8009da8 <_printf_i+0x1c0>
 8009db0:	8019      	strh	r1, [r3, #0]
 8009db2:	2300      	movs	r3, #0
 8009db4:	6123      	str	r3, [r4, #16]
 8009db6:	4615      	mov	r5, r2
 8009db8:	e7bc      	b.n	8009d34 <_printf_i+0x14c>
 8009dba:	682b      	ldr	r3, [r5, #0]
 8009dbc:	1d1a      	adds	r2, r3, #4
 8009dbe:	602a      	str	r2, [r5, #0]
 8009dc0:	681d      	ldr	r5, [r3, #0]
 8009dc2:	6862      	ldr	r2, [r4, #4]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7f6 fa22 	bl	8000210 <memchr>
 8009dcc:	b108      	cbz	r0, 8009dd2 <_printf_i+0x1ea>
 8009dce:	1b40      	subs	r0, r0, r5
 8009dd0:	6060      	str	r0, [r4, #4]
 8009dd2:	6863      	ldr	r3, [r4, #4]
 8009dd4:	6123      	str	r3, [r4, #16]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ddc:	e7aa      	b.n	8009d34 <_printf_i+0x14c>
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	462a      	mov	r2, r5
 8009de2:	4649      	mov	r1, r9
 8009de4:	4640      	mov	r0, r8
 8009de6:	47d0      	blx	sl
 8009de8:	3001      	adds	r0, #1
 8009dea:	d0ad      	beq.n	8009d48 <_printf_i+0x160>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	079b      	lsls	r3, r3, #30
 8009df0:	d413      	bmi.n	8009e1a <_printf_i+0x232>
 8009df2:	68e0      	ldr	r0, [r4, #12]
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	4298      	cmp	r0, r3
 8009df8:	bfb8      	it	lt
 8009dfa:	4618      	movlt	r0, r3
 8009dfc:	e7a6      	b.n	8009d4c <_printf_i+0x164>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4632      	mov	r2, r6
 8009e02:	4649      	mov	r1, r9
 8009e04:	4640      	mov	r0, r8
 8009e06:	47d0      	blx	sl
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d09d      	beq.n	8009d48 <_printf_i+0x160>
 8009e0c:	3501      	adds	r5, #1
 8009e0e:	68e3      	ldr	r3, [r4, #12]
 8009e10:	9903      	ldr	r1, [sp, #12]
 8009e12:	1a5b      	subs	r3, r3, r1
 8009e14:	42ab      	cmp	r3, r5
 8009e16:	dcf2      	bgt.n	8009dfe <_printf_i+0x216>
 8009e18:	e7eb      	b.n	8009df2 <_printf_i+0x20a>
 8009e1a:	2500      	movs	r5, #0
 8009e1c:	f104 0619 	add.w	r6, r4, #25
 8009e20:	e7f5      	b.n	8009e0e <_printf_i+0x226>
 8009e22:	bf00      	nop
 8009e24:	0800ce9b 	.word	0x0800ce9b
 8009e28:	0800ceac 	.word	0x0800ceac

08009e2c <std>:
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	4604      	mov	r4, r0
 8009e32:	e9c0 3300 	strd	r3, r3, [r0]
 8009e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e3a:	6083      	str	r3, [r0, #8]
 8009e3c:	8181      	strh	r1, [r0, #12]
 8009e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e40:	81c2      	strh	r2, [r0, #14]
 8009e42:	6183      	str	r3, [r0, #24]
 8009e44:	4619      	mov	r1, r3
 8009e46:	2208      	movs	r2, #8
 8009e48:	305c      	adds	r0, #92	; 0x5c
 8009e4a:	f000 f94d 	bl	800a0e8 <memset>
 8009e4e:	4b0d      	ldr	r3, [pc, #52]	; (8009e84 <std+0x58>)
 8009e50:	6263      	str	r3, [r4, #36]	; 0x24
 8009e52:	4b0d      	ldr	r3, [pc, #52]	; (8009e88 <std+0x5c>)
 8009e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e56:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <std+0x60>)
 8009e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e5a:	4b0d      	ldr	r3, [pc, #52]	; (8009e90 <std+0x64>)
 8009e5c:	6323      	str	r3, [r4, #48]	; 0x30
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <std+0x68>)
 8009e60:	6224      	str	r4, [r4, #32]
 8009e62:	429c      	cmp	r4, r3
 8009e64:	d006      	beq.n	8009e74 <std+0x48>
 8009e66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009e6a:	4294      	cmp	r4, r2
 8009e6c:	d002      	beq.n	8009e74 <std+0x48>
 8009e6e:	33d0      	adds	r3, #208	; 0xd0
 8009e70:	429c      	cmp	r4, r3
 8009e72:	d105      	bne.n	8009e80 <std+0x54>
 8009e74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e7c:	f000 b9c2 	b.w	800a204 <__retarget_lock_init_recursive>
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	bf00      	nop
 8009e84:	08009ff1 	.word	0x08009ff1
 8009e88:	0800a013 	.word	0x0800a013
 8009e8c:	0800a04b 	.word	0x0800a04b
 8009e90:	0800a06f 	.word	0x0800a06f
 8009e94:	200005b0 	.word	0x200005b0

08009e98 <stdio_exit_handler>:
 8009e98:	4a02      	ldr	r2, [pc, #8]	; (8009ea4 <stdio_exit_handler+0xc>)
 8009e9a:	4903      	ldr	r1, [pc, #12]	; (8009ea8 <stdio_exit_handler+0x10>)
 8009e9c:	4803      	ldr	r0, [pc, #12]	; (8009eac <stdio_exit_handler+0x14>)
 8009e9e:	f000 b869 	b.w	8009f74 <_fwalk_sglue>
 8009ea2:	bf00      	nop
 8009ea4:	20000060 	.word	0x20000060
 8009ea8:	0800c531 	.word	0x0800c531
 8009eac:	200001d8 	.word	0x200001d8

08009eb0 <cleanup_stdio>:
 8009eb0:	6841      	ldr	r1, [r0, #4]
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <cleanup_stdio+0x34>)
 8009eb4:	4299      	cmp	r1, r3
 8009eb6:	b510      	push	{r4, lr}
 8009eb8:	4604      	mov	r4, r0
 8009eba:	d001      	beq.n	8009ec0 <cleanup_stdio+0x10>
 8009ebc:	f002 fb38 	bl	800c530 <_fflush_r>
 8009ec0:	68a1      	ldr	r1, [r4, #8]
 8009ec2:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <cleanup_stdio+0x38>)
 8009ec4:	4299      	cmp	r1, r3
 8009ec6:	d002      	beq.n	8009ece <cleanup_stdio+0x1e>
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f002 fb31 	bl	800c530 <_fflush_r>
 8009ece:	68e1      	ldr	r1, [r4, #12]
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <cleanup_stdio+0x3c>)
 8009ed2:	4299      	cmp	r1, r3
 8009ed4:	d004      	beq.n	8009ee0 <cleanup_stdio+0x30>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009edc:	f002 bb28 	b.w	800c530 <_fflush_r>
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	bf00      	nop
 8009ee4:	200005b0 	.word	0x200005b0
 8009ee8:	20000618 	.word	0x20000618
 8009eec:	20000680 	.word	0x20000680

08009ef0 <global_stdio_init.part.0>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <global_stdio_init.part.0+0x30>)
 8009ef4:	4c0b      	ldr	r4, [pc, #44]	; (8009f24 <global_stdio_init.part.0+0x34>)
 8009ef6:	4a0c      	ldr	r2, [pc, #48]	; (8009f28 <global_stdio_init.part.0+0x38>)
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	4620      	mov	r0, r4
 8009efc:	2200      	movs	r2, #0
 8009efe:	2104      	movs	r1, #4
 8009f00:	f7ff ff94 	bl	8009e2c <std>
 8009f04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f08:	2201      	movs	r2, #1
 8009f0a:	2109      	movs	r1, #9
 8009f0c:	f7ff ff8e 	bl	8009e2c <std>
 8009f10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009f14:	2202      	movs	r2, #2
 8009f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f1a:	2112      	movs	r1, #18
 8009f1c:	f7ff bf86 	b.w	8009e2c <std>
 8009f20:	200006e8 	.word	0x200006e8
 8009f24:	200005b0 	.word	0x200005b0
 8009f28:	08009e99 	.word	0x08009e99

08009f2c <__sfp_lock_acquire>:
 8009f2c:	4801      	ldr	r0, [pc, #4]	; (8009f34 <__sfp_lock_acquire+0x8>)
 8009f2e:	f000 b96a 	b.w	800a206 <__retarget_lock_acquire_recursive>
 8009f32:	bf00      	nop
 8009f34:	200006f1 	.word	0x200006f1

08009f38 <__sfp_lock_release>:
 8009f38:	4801      	ldr	r0, [pc, #4]	; (8009f40 <__sfp_lock_release+0x8>)
 8009f3a:	f000 b965 	b.w	800a208 <__retarget_lock_release_recursive>
 8009f3e:	bf00      	nop
 8009f40:	200006f1 	.word	0x200006f1

08009f44 <__sinit>:
 8009f44:	b510      	push	{r4, lr}
 8009f46:	4604      	mov	r4, r0
 8009f48:	f7ff fff0 	bl	8009f2c <__sfp_lock_acquire>
 8009f4c:	6a23      	ldr	r3, [r4, #32]
 8009f4e:	b11b      	cbz	r3, 8009f58 <__sinit+0x14>
 8009f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f54:	f7ff bff0 	b.w	8009f38 <__sfp_lock_release>
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <__sinit+0x28>)
 8009f5a:	6223      	str	r3, [r4, #32]
 8009f5c:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <__sinit+0x2c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1f5      	bne.n	8009f50 <__sinit+0xc>
 8009f64:	f7ff ffc4 	bl	8009ef0 <global_stdio_init.part.0>
 8009f68:	e7f2      	b.n	8009f50 <__sinit+0xc>
 8009f6a:	bf00      	nop
 8009f6c:	08009eb1 	.word	0x08009eb1
 8009f70:	200006e8 	.word	0x200006e8

08009f74 <_fwalk_sglue>:
 8009f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f78:	4607      	mov	r7, r0
 8009f7a:	4688      	mov	r8, r1
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	2600      	movs	r6, #0
 8009f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f84:	f1b9 0901 	subs.w	r9, r9, #1
 8009f88:	d505      	bpl.n	8009f96 <_fwalk_sglue+0x22>
 8009f8a:	6824      	ldr	r4, [r4, #0]
 8009f8c:	2c00      	cmp	r4, #0
 8009f8e:	d1f7      	bne.n	8009f80 <_fwalk_sglue+0xc>
 8009f90:	4630      	mov	r0, r6
 8009f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f96:	89ab      	ldrh	r3, [r5, #12]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d907      	bls.n	8009fac <_fwalk_sglue+0x38>
 8009f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	d003      	beq.n	8009fac <_fwalk_sglue+0x38>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c0      	blx	r8
 8009faa:	4306      	orrs	r6, r0
 8009fac:	3568      	adds	r5, #104	; 0x68
 8009fae:	e7e9      	b.n	8009f84 <_fwalk_sglue+0x10>

08009fb0 <siprintf>:
 8009fb0:	b40e      	push	{r1, r2, r3}
 8009fb2:	b500      	push	{lr}
 8009fb4:	b09c      	sub	sp, #112	; 0x70
 8009fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8009fb8:	9002      	str	r0, [sp, #8]
 8009fba:	9006      	str	r0, [sp, #24]
 8009fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fc0:	4809      	ldr	r0, [pc, #36]	; (8009fe8 <siprintf+0x38>)
 8009fc2:	9107      	str	r1, [sp, #28]
 8009fc4:	9104      	str	r1, [sp, #16]
 8009fc6:	4909      	ldr	r1, [pc, #36]	; (8009fec <siprintf+0x3c>)
 8009fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fcc:	9105      	str	r1, [sp, #20]
 8009fce:	6800      	ldr	r0, [r0, #0]
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	a902      	add	r1, sp, #8
 8009fd4:	f002 f928 	bl	800c228 <_svfiprintf_r>
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	b01c      	add	sp, #112	; 0x70
 8009fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe4:	b003      	add	sp, #12
 8009fe6:	4770      	bx	lr
 8009fe8:	20000224 	.word	0x20000224
 8009fec:	ffff0208 	.word	0xffff0208

08009ff0 <__sread>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	f000 f8b6 	bl	800a168 <_read_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	bfab      	itete	ge
 800a000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a002:	89a3      	ldrhlt	r3, [r4, #12]
 800a004:	181b      	addge	r3, r3, r0
 800a006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a00a:	bfac      	ite	ge
 800a00c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a00e:	81a3      	strhlt	r3, [r4, #12]
 800a010:	bd10      	pop	{r4, pc}

0800a012 <__swrite>:
 800a012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a016:	461f      	mov	r7, r3
 800a018:	898b      	ldrh	r3, [r1, #12]
 800a01a:	05db      	lsls	r3, r3, #23
 800a01c:	4605      	mov	r5, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	4616      	mov	r6, r2
 800a022:	d505      	bpl.n	800a030 <__swrite+0x1e>
 800a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a028:	2302      	movs	r3, #2
 800a02a:	2200      	movs	r2, #0
 800a02c:	f000 f88a 	bl	800a144 <_lseek_r>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	f000 b8a1 	b.w	800a18c <_write_r>

0800a04a <__sseek>:
 800a04a:	b510      	push	{r4, lr}
 800a04c:	460c      	mov	r4, r1
 800a04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a052:	f000 f877 	bl	800a144 <_lseek_r>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	bf15      	itete	ne
 800a05c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a05e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a066:	81a3      	strheq	r3, [r4, #12]
 800a068:	bf18      	it	ne
 800a06a:	81a3      	strhne	r3, [r4, #12]
 800a06c:	bd10      	pop	{r4, pc}

0800a06e <__sclose>:
 800a06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a072:	f000 b857 	b.w	800a124 <_close_r>

0800a076 <_vsniprintf_r>:
 800a076:	b530      	push	{r4, r5, lr}
 800a078:	4614      	mov	r4, r2
 800a07a:	2c00      	cmp	r4, #0
 800a07c:	b09b      	sub	sp, #108	; 0x6c
 800a07e:	4605      	mov	r5, r0
 800a080:	461a      	mov	r2, r3
 800a082:	da05      	bge.n	800a090 <_vsniprintf_r+0x1a>
 800a084:	238b      	movs	r3, #139	; 0x8b
 800a086:	6003      	str	r3, [r0, #0]
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	b01b      	add	sp, #108	; 0x6c
 800a08e:	bd30      	pop	{r4, r5, pc}
 800a090:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a094:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a098:	bf14      	ite	ne
 800a09a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a09e:	4623      	moveq	r3, r4
 800a0a0:	9302      	str	r3, [sp, #8]
 800a0a2:	9305      	str	r3, [sp, #20]
 800a0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0a8:	9100      	str	r1, [sp, #0]
 800a0aa:	9104      	str	r1, [sp, #16]
 800a0ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a0b0:	4669      	mov	r1, sp
 800a0b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a0b4:	f002 f8b8 	bl	800c228 <_svfiprintf_r>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	bfbc      	itt	lt
 800a0bc:	238b      	movlt	r3, #139	; 0x8b
 800a0be:	602b      	strlt	r3, [r5, #0]
 800a0c0:	2c00      	cmp	r4, #0
 800a0c2:	d0e3      	beq.n	800a08c <_vsniprintf_r+0x16>
 800a0c4:	9b00      	ldr	r3, [sp, #0]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
 800a0ca:	e7df      	b.n	800a08c <_vsniprintf_r+0x16>

0800a0cc <vsniprintf>:
 800a0cc:	b507      	push	{r0, r1, r2, lr}
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	4601      	mov	r1, r0
 800a0d6:	4803      	ldr	r0, [pc, #12]	; (800a0e4 <vsniprintf+0x18>)
 800a0d8:	6800      	ldr	r0, [r0, #0]
 800a0da:	f7ff ffcc 	bl	800a076 <_vsniprintf_r>
 800a0de:	b003      	add	sp, #12
 800a0e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0e4:	20000224 	.word	0x20000224

0800a0e8 <memset>:
 800a0e8:	4402      	add	r2, r0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d100      	bne.n	800a0f2 <memset+0xa>
 800a0f0:	4770      	bx	lr
 800a0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0f6:	e7f9      	b.n	800a0ec <memset+0x4>

0800a0f8 <strncmp>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	b16a      	cbz	r2, 800a118 <strncmp+0x20>
 800a0fc:	3901      	subs	r1, #1
 800a0fe:	1884      	adds	r4, r0, r2
 800a100:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a104:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a108:	429a      	cmp	r2, r3
 800a10a:	d103      	bne.n	800a114 <strncmp+0x1c>
 800a10c:	42a0      	cmp	r0, r4
 800a10e:	d001      	beq.n	800a114 <strncmp+0x1c>
 800a110:	2a00      	cmp	r2, #0
 800a112:	d1f5      	bne.n	800a100 <strncmp+0x8>
 800a114:	1ad0      	subs	r0, r2, r3
 800a116:	bd10      	pop	{r4, pc}
 800a118:	4610      	mov	r0, r2
 800a11a:	e7fc      	b.n	800a116 <strncmp+0x1e>

0800a11c <_localeconv_r>:
 800a11c:	4800      	ldr	r0, [pc, #0]	; (800a120 <_localeconv_r+0x4>)
 800a11e:	4770      	bx	lr
 800a120:	2000015c 	.word	0x2000015c

0800a124 <_close_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4d06      	ldr	r5, [pc, #24]	; (800a140 <_close_r+0x1c>)
 800a128:	2300      	movs	r3, #0
 800a12a:	4604      	mov	r4, r0
 800a12c:	4608      	mov	r0, r1
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	f7f8 ffdd 	bl	80030ee <_close>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_close_r+0x1a>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_close_r+0x1a>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	200006ec 	.word	0x200006ec

0800a144 <_lseek_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d07      	ldr	r5, [pc, #28]	; (800a164 <_lseek_r+0x20>)
 800a148:	4604      	mov	r4, r0
 800a14a:	4608      	mov	r0, r1
 800a14c:	4611      	mov	r1, r2
 800a14e:	2200      	movs	r2, #0
 800a150:	602a      	str	r2, [r5, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	f7f8 fff2 	bl	800313c <_lseek>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d102      	bne.n	800a162 <_lseek_r+0x1e>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	b103      	cbz	r3, 800a162 <_lseek_r+0x1e>
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	200006ec 	.word	0x200006ec

0800a168 <_read_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4d07      	ldr	r5, [pc, #28]	; (800a188 <_read_r+0x20>)
 800a16c:	4604      	mov	r4, r0
 800a16e:	4608      	mov	r0, r1
 800a170:	4611      	mov	r1, r2
 800a172:	2200      	movs	r2, #0
 800a174:	602a      	str	r2, [r5, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	f7f8 ff80 	bl	800307c <_read>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_read_r+0x1e>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	b103      	cbz	r3, 800a186 <_read_r+0x1e>
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	200006ec 	.word	0x200006ec

0800a18c <_write_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	4d07      	ldr	r5, [pc, #28]	; (800a1ac <_write_r+0x20>)
 800a190:	4604      	mov	r4, r0
 800a192:	4608      	mov	r0, r1
 800a194:	4611      	mov	r1, r2
 800a196:	2200      	movs	r2, #0
 800a198:	602a      	str	r2, [r5, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	f7f8 ff8b 	bl	80030b6 <_write>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_write_r+0x1e>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_write_r+0x1e>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	200006ec 	.word	0x200006ec

0800a1b0 <__errno>:
 800a1b0:	4b01      	ldr	r3, [pc, #4]	; (800a1b8 <__errno+0x8>)
 800a1b2:	6818      	ldr	r0, [r3, #0]
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	20000224 	.word	0x20000224

0800a1bc <__libc_init_array>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	4d0d      	ldr	r5, [pc, #52]	; (800a1f4 <__libc_init_array+0x38>)
 800a1c0:	4c0d      	ldr	r4, [pc, #52]	; (800a1f8 <__libc_init_array+0x3c>)
 800a1c2:	1b64      	subs	r4, r4, r5
 800a1c4:	10a4      	asrs	r4, r4, #2
 800a1c6:	2600      	movs	r6, #0
 800a1c8:	42a6      	cmp	r6, r4
 800a1ca:	d109      	bne.n	800a1e0 <__libc_init_array+0x24>
 800a1cc:	4d0b      	ldr	r5, [pc, #44]	; (800a1fc <__libc_init_array+0x40>)
 800a1ce:	4c0c      	ldr	r4, [pc, #48]	; (800a200 <__libc_init_array+0x44>)
 800a1d0:	f002 fd26 	bl	800cc20 <_init>
 800a1d4:	1b64      	subs	r4, r4, r5
 800a1d6:	10a4      	asrs	r4, r4, #2
 800a1d8:	2600      	movs	r6, #0
 800a1da:	42a6      	cmp	r6, r4
 800a1dc:	d105      	bne.n	800a1ea <__libc_init_array+0x2e>
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e4:	4798      	blx	r3
 800a1e6:	3601      	adds	r6, #1
 800a1e8:	e7ee      	b.n	800a1c8 <__libc_init_array+0xc>
 800a1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ee:	4798      	blx	r3
 800a1f0:	3601      	adds	r6, #1
 800a1f2:	e7f2      	b.n	800a1da <__libc_init_array+0x1e>
 800a1f4:	0800d164 	.word	0x0800d164
 800a1f8:	0800d164 	.word	0x0800d164
 800a1fc:	0800d164 	.word	0x0800d164
 800a200:	0800d168 	.word	0x0800d168

0800a204 <__retarget_lock_init_recursive>:
 800a204:	4770      	bx	lr

0800a206 <__retarget_lock_acquire_recursive>:
 800a206:	4770      	bx	lr

0800a208 <__retarget_lock_release_recursive>:
 800a208:	4770      	bx	lr

0800a20a <memcpy>:
 800a20a:	440a      	add	r2, r1
 800a20c:	4291      	cmp	r1, r2
 800a20e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a212:	d100      	bne.n	800a216 <memcpy+0xc>
 800a214:	4770      	bx	lr
 800a216:	b510      	push	{r4, lr}
 800a218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a21c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a220:	4291      	cmp	r1, r2
 800a222:	d1f9      	bne.n	800a218 <memcpy+0xe>
 800a224:	bd10      	pop	{r4, pc}
	...

0800a228 <nan>:
 800a228:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a230 <nan+0x8>
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	00000000 	.word	0x00000000
 800a234:	7ff80000 	.word	0x7ff80000

0800a238 <quorem>:
 800a238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	6903      	ldr	r3, [r0, #16]
 800a23e:	690c      	ldr	r4, [r1, #16]
 800a240:	42a3      	cmp	r3, r4
 800a242:	4607      	mov	r7, r0
 800a244:	db7e      	blt.n	800a344 <quorem+0x10c>
 800a246:	3c01      	subs	r4, #1
 800a248:	f101 0814 	add.w	r8, r1, #20
 800a24c:	f100 0514 	add.w	r5, r0, #20
 800a250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a25a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a25e:	3301      	adds	r3, #1
 800a260:	429a      	cmp	r2, r3
 800a262:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a266:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a26a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a26e:	d331      	bcc.n	800a2d4 <quorem+0x9c>
 800a270:	f04f 0e00 	mov.w	lr, #0
 800a274:	4640      	mov	r0, r8
 800a276:	46ac      	mov	ip, r5
 800a278:	46f2      	mov	sl, lr
 800a27a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a27e:	b293      	uxth	r3, r2
 800a280:	fb06 e303 	mla	r3, r6, r3, lr
 800a284:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a288:	0c1a      	lsrs	r2, r3, #16
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	ebaa 0303 	sub.w	r3, sl, r3
 800a290:	f8dc a000 	ldr.w	sl, [ip]
 800a294:	fa13 f38a 	uxtah	r3, r3, sl
 800a298:	fb06 220e 	mla	r2, r6, lr, r2
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	9b00      	ldr	r3, [sp, #0]
 800a2a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2a4:	b292      	uxth	r2, r2
 800a2a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a2aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2ae:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2b2:	4581      	cmp	r9, r0
 800a2b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2b8:	f84c 3b04 	str.w	r3, [ip], #4
 800a2bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2c0:	d2db      	bcs.n	800a27a <quorem+0x42>
 800a2c2:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2c6:	b92b      	cbnz	r3, 800a2d4 <quorem+0x9c>
 800a2c8:	9b01      	ldr	r3, [sp, #4]
 800a2ca:	3b04      	subs	r3, #4
 800a2cc:	429d      	cmp	r5, r3
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	d32c      	bcc.n	800a32c <quorem+0xf4>
 800a2d2:	613c      	str	r4, [r7, #16]
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f001 fd59 	bl	800bd8c <__mcmp>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	db22      	blt.n	800a324 <quorem+0xec>
 800a2de:	3601      	adds	r6, #1
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2e8:	f8d1 c000 	ldr.w	ip, [r1]
 800a2ec:	b293      	uxth	r3, r2
 800a2ee:	1ac3      	subs	r3, r0, r3
 800a2f0:	0c12      	lsrs	r2, r2, #16
 800a2f2:	fa13 f38c 	uxtah	r3, r3, ip
 800a2f6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a2fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a304:	45c1      	cmp	r9, r8
 800a306:	f841 3b04 	str.w	r3, [r1], #4
 800a30a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a30e:	d2e9      	bcs.n	800a2e4 <quorem+0xac>
 800a310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a318:	b922      	cbnz	r2, 800a324 <quorem+0xec>
 800a31a:	3b04      	subs	r3, #4
 800a31c:	429d      	cmp	r5, r3
 800a31e:	461a      	mov	r2, r3
 800a320:	d30a      	bcc.n	800a338 <quorem+0x100>
 800a322:	613c      	str	r4, [r7, #16]
 800a324:	4630      	mov	r0, r6
 800a326:	b003      	add	sp, #12
 800a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32c:	6812      	ldr	r2, [r2, #0]
 800a32e:	3b04      	subs	r3, #4
 800a330:	2a00      	cmp	r2, #0
 800a332:	d1ce      	bne.n	800a2d2 <quorem+0x9a>
 800a334:	3c01      	subs	r4, #1
 800a336:	e7c9      	b.n	800a2cc <quorem+0x94>
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	3b04      	subs	r3, #4
 800a33c:	2a00      	cmp	r2, #0
 800a33e:	d1f0      	bne.n	800a322 <quorem+0xea>
 800a340:	3c01      	subs	r4, #1
 800a342:	e7eb      	b.n	800a31c <quorem+0xe4>
 800a344:	2000      	movs	r0, #0
 800a346:	e7ee      	b.n	800a326 <quorem+0xee>

0800a348 <_dtoa_r>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	ed2d 8b04 	vpush	{d8-d9}
 800a350:	69c5      	ldr	r5, [r0, #28]
 800a352:	b093      	sub	sp, #76	; 0x4c
 800a354:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a358:	ec57 6b10 	vmov	r6, r7, d0
 800a35c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a360:	9107      	str	r1, [sp, #28]
 800a362:	4604      	mov	r4, r0
 800a364:	920a      	str	r2, [sp, #40]	; 0x28
 800a366:	930d      	str	r3, [sp, #52]	; 0x34
 800a368:	b975      	cbnz	r5, 800a388 <_dtoa_r+0x40>
 800a36a:	2010      	movs	r0, #16
 800a36c:	f001 f982 	bl	800b674 <malloc>
 800a370:	4602      	mov	r2, r0
 800a372:	61e0      	str	r0, [r4, #28]
 800a374:	b920      	cbnz	r0, 800a380 <_dtoa_r+0x38>
 800a376:	4bae      	ldr	r3, [pc, #696]	; (800a630 <_dtoa_r+0x2e8>)
 800a378:	21ef      	movs	r1, #239	; 0xef
 800a37a:	48ae      	ldr	r0, [pc, #696]	; (800a634 <_dtoa_r+0x2ec>)
 800a37c:	f002 f92a 	bl	800c5d4 <__assert_func>
 800a380:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a384:	6005      	str	r5, [r0, #0]
 800a386:	60c5      	str	r5, [r0, #12]
 800a388:	69e3      	ldr	r3, [r4, #28]
 800a38a:	6819      	ldr	r1, [r3, #0]
 800a38c:	b151      	cbz	r1, 800a3a4 <_dtoa_r+0x5c>
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	604a      	str	r2, [r1, #4]
 800a392:	2301      	movs	r3, #1
 800a394:	4093      	lsls	r3, r2
 800a396:	608b      	str	r3, [r1, #8]
 800a398:	4620      	mov	r0, r4
 800a39a:	f001 fa71 	bl	800b880 <_Bfree>
 800a39e:	69e3      	ldr	r3, [r4, #28]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	1e3b      	subs	r3, r7, #0
 800a3a6:	bfbb      	ittet	lt
 800a3a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a3ac:	9303      	strlt	r3, [sp, #12]
 800a3ae:	2300      	movge	r3, #0
 800a3b0:	2201      	movlt	r2, #1
 800a3b2:	bfac      	ite	ge
 800a3b4:	f8c8 3000 	strge.w	r3, [r8]
 800a3b8:	f8c8 2000 	strlt.w	r2, [r8]
 800a3bc:	4b9e      	ldr	r3, [pc, #632]	; (800a638 <_dtoa_r+0x2f0>)
 800a3be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a3c2:	ea33 0308 	bics.w	r3, r3, r8
 800a3c6:	d11b      	bne.n	800a400 <_dtoa_r+0xb8>
 800a3c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a3d4:	4333      	orrs	r3, r6
 800a3d6:	f000 8593 	beq.w	800af00 <_dtoa_r+0xbb8>
 800a3da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3dc:	b963      	cbnz	r3, 800a3f8 <_dtoa_r+0xb0>
 800a3de:	4b97      	ldr	r3, [pc, #604]	; (800a63c <_dtoa_r+0x2f4>)
 800a3e0:	e027      	b.n	800a432 <_dtoa_r+0xea>
 800a3e2:	4b97      	ldr	r3, [pc, #604]	; (800a640 <_dtoa_r+0x2f8>)
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	9800      	ldr	r0, [sp, #0]
 800a3ee:	b013      	add	sp, #76	; 0x4c
 800a3f0:	ecbd 8b04 	vpop	{d8-d9}
 800a3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f8:	4b90      	ldr	r3, [pc, #576]	; (800a63c <_dtoa_r+0x2f4>)
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	3303      	adds	r3, #3
 800a3fe:	e7f3      	b.n	800a3e8 <_dtoa_r+0xa0>
 800a400:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a404:	2200      	movs	r2, #0
 800a406:	ec51 0b17 	vmov	r0, r1, d7
 800a40a:	eeb0 8a47 	vmov.f32	s16, s14
 800a40e:	eef0 8a67 	vmov.f32	s17, s15
 800a412:	2300      	movs	r3, #0
 800a414:	f7f6 fb78 	bl	8000b08 <__aeabi_dcmpeq>
 800a418:	4681      	mov	r9, r0
 800a41a:	b160      	cbz	r0, 800a436 <_dtoa_r+0xee>
 800a41c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a41e:	2301      	movs	r3, #1
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 8568 	beq.w	800aefa <_dtoa_r+0xbb2>
 800a42a:	4b86      	ldr	r3, [pc, #536]	; (800a644 <_dtoa_r+0x2fc>)
 800a42c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	3b01      	subs	r3, #1
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	e7da      	b.n	800a3ec <_dtoa_r+0xa4>
 800a436:	aa10      	add	r2, sp, #64	; 0x40
 800a438:	a911      	add	r1, sp, #68	; 0x44
 800a43a:	4620      	mov	r0, r4
 800a43c:	eeb0 0a48 	vmov.f32	s0, s16
 800a440:	eef0 0a68 	vmov.f32	s1, s17
 800a444:	f001 fdb8 	bl	800bfb8 <__d2b>
 800a448:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a44c:	4682      	mov	sl, r0
 800a44e:	2d00      	cmp	r5, #0
 800a450:	d07f      	beq.n	800a552 <_dtoa_r+0x20a>
 800a452:	ee18 3a90 	vmov	r3, s17
 800a456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a45a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a45e:	ec51 0b18 	vmov	r0, r1, d8
 800a462:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a46a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a46e:	4619      	mov	r1, r3
 800a470:	2200      	movs	r2, #0
 800a472:	4b75      	ldr	r3, [pc, #468]	; (800a648 <_dtoa_r+0x300>)
 800a474:	f7f5 ff28 	bl	80002c8 <__aeabi_dsub>
 800a478:	a367      	add	r3, pc, #412	; (adr r3, 800a618 <_dtoa_r+0x2d0>)
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f7f6 f8db 	bl	8000638 <__aeabi_dmul>
 800a482:	a367      	add	r3, pc, #412	; (adr r3, 800a620 <_dtoa_r+0x2d8>)
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f7f5 ff20 	bl	80002cc <__adddf3>
 800a48c:	4606      	mov	r6, r0
 800a48e:	4628      	mov	r0, r5
 800a490:	460f      	mov	r7, r1
 800a492:	f7f6 f867 	bl	8000564 <__aeabi_i2d>
 800a496:	a364      	add	r3, pc, #400	; (adr r3, 800a628 <_dtoa_r+0x2e0>)
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	f7f6 f8cc 	bl	8000638 <__aeabi_dmul>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	f7f5 ff10 	bl	80002cc <__adddf3>
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	460f      	mov	r7, r1
 800a4b0:	f7f6 fb72 	bl	8000b98 <__aeabi_d2iz>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	4683      	mov	fp, r0
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	4639      	mov	r1, r7
 800a4be:	f7f6 fb2d 	bl	8000b1c <__aeabi_dcmplt>
 800a4c2:	b148      	cbz	r0, 800a4d8 <_dtoa_r+0x190>
 800a4c4:	4658      	mov	r0, fp
 800a4c6:	f7f6 f84d 	bl	8000564 <__aeabi_i2d>
 800a4ca:	4632      	mov	r2, r6
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	f7f6 fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 800a4d2:	b908      	cbnz	r0, 800a4d8 <_dtoa_r+0x190>
 800a4d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4d8:	f1bb 0f16 	cmp.w	fp, #22
 800a4dc:	d857      	bhi.n	800a58e <_dtoa_r+0x246>
 800a4de:	4b5b      	ldr	r3, [pc, #364]	; (800a64c <_dtoa_r+0x304>)
 800a4e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	ec51 0b18 	vmov	r0, r1, d8
 800a4ec:	f7f6 fb16 	bl	8000b1c <__aeabi_dcmplt>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d04e      	beq.n	800a592 <_dtoa_r+0x24a>
 800a4f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	930c      	str	r3, [sp, #48]	; 0x30
 800a4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4fe:	1b5b      	subs	r3, r3, r5
 800a500:	1e5a      	subs	r2, r3, #1
 800a502:	bf45      	ittet	mi
 800a504:	f1c3 0301 	rsbmi	r3, r3, #1
 800a508:	9305      	strmi	r3, [sp, #20]
 800a50a:	2300      	movpl	r3, #0
 800a50c:	2300      	movmi	r3, #0
 800a50e:	9206      	str	r2, [sp, #24]
 800a510:	bf54      	ite	pl
 800a512:	9305      	strpl	r3, [sp, #20]
 800a514:	9306      	strmi	r3, [sp, #24]
 800a516:	f1bb 0f00 	cmp.w	fp, #0
 800a51a:	db3c      	blt.n	800a596 <_dtoa_r+0x24e>
 800a51c:	9b06      	ldr	r3, [sp, #24]
 800a51e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a522:	445b      	add	r3, fp
 800a524:	9306      	str	r3, [sp, #24]
 800a526:	2300      	movs	r3, #0
 800a528:	9308      	str	r3, [sp, #32]
 800a52a:	9b07      	ldr	r3, [sp, #28]
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	d868      	bhi.n	800a602 <_dtoa_r+0x2ba>
 800a530:	2b05      	cmp	r3, #5
 800a532:	bfc4      	itt	gt
 800a534:	3b04      	subgt	r3, #4
 800a536:	9307      	strgt	r3, [sp, #28]
 800a538:	9b07      	ldr	r3, [sp, #28]
 800a53a:	f1a3 0302 	sub.w	r3, r3, #2
 800a53e:	bfcc      	ite	gt
 800a540:	2500      	movgt	r5, #0
 800a542:	2501      	movle	r5, #1
 800a544:	2b03      	cmp	r3, #3
 800a546:	f200 8085 	bhi.w	800a654 <_dtoa_r+0x30c>
 800a54a:	e8df f003 	tbb	[pc, r3]
 800a54e:	3b2e      	.short	0x3b2e
 800a550:	5839      	.short	0x5839
 800a552:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a556:	441d      	add	r5, r3
 800a558:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	bfc1      	itttt	gt
 800a560:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a564:	fa08 f803 	lslgt.w	r8, r8, r3
 800a568:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a56c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a570:	bfd6      	itet	le
 800a572:	f1c3 0320 	rsble	r3, r3, #32
 800a576:	ea48 0003 	orrgt.w	r0, r8, r3
 800a57a:	fa06 f003 	lslle.w	r0, r6, r3
 800a57e:	f7f5 ffe1 	bl	8000544 <__aeabi_ui2d>
 800a582:	2201      	movs	r2, #1
 800a584:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a588:	3d01      	subs	r5, #1
 800a58a:	920e      	str	r2, [sp, #56]	; 0x38
 800a58c:	e76f      	b.n	800a46e <_dtoa_r+0x126>
 800a58e:	2301      	movs	r3, #1
 800a590:	e7b3      	b.n	800a4fa <_dtoa_r+0x1b2>
 800a592:	900c      	str	r0, [sp, #48]	; 0x30
 800a594:	e7b2      	b.n	800a4fc <_dtoa_r+0x1b4>
 800a596:	9b05      	ldr	r3, [sp, #20]
 800a598:	eba3 030b 	sub.w	r3, r3, fp
 800a59c:	9305      	str	r3, [sp, #20]
 800a59e:	f1cb 0300 	rsb	r3, fp, #0
 800a5a2:	9308      	str	r3, [sp, #32]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5a8:	e7bf      	b.n	800a52a <_dtoa_r+0x1e2>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dc52      	bgt.n	800a65a <_dtoa_r+0x312>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a5be:	e00b      	b.n	800a5d8 <_dtoa_r+0x290>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e7f3      	b.n	800a5ac <_dtoa_r+0x264>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ca:	445b      	add	r3, fp
 800a5cc:	9301      	str	r3, [sp, #4]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	9304      	str	r3, [sp, #16]
 800a5d4:	bfb8      	it	lt
 800a5d6:	2301      	movlt	r3, #1
 800a5d8:	69e0      	ldr	r0, [r4, #28]
 800a5da:	2100      	movs	r1, #0
 800a5dc:	2204      	movs	r2, #4
 800a5de:	f102 0614 	add.w	r6, r2, #20
 800a5e2:	429e      	cmp	r6, r3
 800a5e4:	d93d      	bls.n	800a662 <_dtoa_r+0x31a>
 800a5e6:	6041      	str	r1, [r0, #4]
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f001 f909 	bl	800b800 <_Balloc>
 800a5ee:	9000      	str	r0, [sp, #0]
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d139      	bne.n	800a668 <_dtoa_r+0x320>
 800a5f4:	4b16      	ldr	r3, [pc, #88]	; (800a650 <_dtoa_r+0x308>)
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	f240 11af 	movw	r1, #431	; 0x1af
 800a5fc:	e6bd      	b.n	800a37a <_dtoa_r+0x32>
 800a5fe:	2301      	movs	r3, #1
 800a600:	e7e1      	b.n	800a5c6 <_dtoa_r+0x27e>
 800a602:	2501      	movs	r5, #1
 800a604:	2300      	movs	r3, #0
 800a606:	9307      	str	r3, [sp, #28]
 800a608:	9509      	str	r5, [sp, #36]	; 0x24
 800a60a:	f04f 33ff 	mov.w	r3, #4294967295
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	9304      	str	r3, [sp, #16]
 800a612:	2200      	movs	r2, #0
 800a614:	2312      	movs	r3, #18
 800a616:	e7d1      	b.n	800a5bc <_dtoa_r+0x274>
 800a618:	636f4361 	.word	0x636f4361
 800a61c:	3fd287a7 	.word	0x3fd287a7
 800a620:	8b60c8b3 	.word	0x8b60c8b3
 800a624:	3fc68a28 	.word	0x3fc68a28
 800a628:	509f79fb 	.word	0x509f79fb
 800a62c:	3fd34413 	.word	0x3fd34413
 800a630:	0800ced2 	.word	0x0800ced2
 800a634:	0800cee9 	.word	0x0800cee9
 800a638:	7ff00000 	.word	0x7ff00000
 800a63c:	0800cece 	.word	0x0800cece
 800a640:	0800cec5 	.word	0x0800cec5
 800a644:	0800ce9a 	.word	0x0800ce9a
 800a648:	3ff80000 	.word	0x3ff80000
 800a64c:	0800d038 	.word	0x0800d038
 800a650:	0800cf41 	.word	0x0800cf41
 800a654:	2301      	movs	r3, #1
 800a656:	9309      	str	r3, [sp, #36]	; 0x24
 800a658:	e7d7      	b.n	800a60a <_dtoa_r+0x2c2>
 800a65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	e7ba      	b.n	800a5d8 <_dtoa_r+0x290>
 800a662:	3101      	adds	r1, #1
 800a664:	0052      	lsls	r2, r2, #1
 800a666:	e7ba      	b.n	800a5de <_dtoa_r+0x296>
 800a668:	69e3      	ldr	r3, [r4, #28]
 800a66a:	9a00      	ldr	r2, [sp, #0]
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	2b0e      	cmp	r3, #14
 800a672:	f200 80a8 	bhi.w	800a7c6 <_dtoa_r+0x47e>
 800a676:	2d00      	cmp	r5, #0
 800a678:	f000 80a5 	beq.w	800a7c6 <_dtoa_r+0x47e>
 800a67c:	f1bb 0f00 	cmp.w	fp, #0
 800a680:	dd38      	ble.n	800a6f4 <_dtoa_r+0x3ac>
 800a682:	4bc0      	ldr	r3, [pc, #768]	; (800a984 <_dtoa_r+0x63c>)
 800a684:	f00b 020f 	and.w	r2, fp, #15
 800a688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a68c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a690:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a694:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a698:	d019      	beq.n	800a6ce <_dtoa_r+0x386>
 800a69a:	4bbb      	ldr	r3, [pc, #748]	; (800a988 <_dtoa_r+0x640>)
 800a69c:	ec51 0b18 	vmov	r0, r1, d8
 800a6a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6a4:	f7f6 f8f2 	bl	800088c <__aeabi_ddiv>
 800a6a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ac:	f008 080f 	and.w	r8, r8, #15
 800a6b0:	2503      	movs	r5, #3
 800a6b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a988 <_dtoa_r+0x640>
 800a6b6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ba:	d10a      	bne.n	800a6d2 <_dtoa_r+0x38a>
 800a6bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	463b      	mov	r3, r7
 800a6c4:	f7f6 f8e2 	bl	800088c <__aeabi_ddiv>
 800a6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6cc:	e02b      	b.n	800a726 <_dtoa_r+0x3de>
 800a6ce:	2502      	movs	r5, #2
 800a6d0:	e7ef      	b.n	800a6b2 <_dtoa_r+0x36a>
 800a6d2:	f018 0f01 	tst.w	r8, #1
 800a6d6:	d008      	beq.n	800a6ea <_dtoa_r+0x3a2>
 800a6d8:	4630      	mov	r0, r6
 800a6da:	4639      	mov	r1, r7
 800a6dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a6e0:	f7f5 ffaa 	bl	8000638 <__aeabi_dmul>
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	460f      	mov	r7, r1
 800a6ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a6ee:	f109 0908 	add.w	r9, r9, #8
 800a6f2:	e7e0      	b.n	800a6b6 <_dtoa_r+0x36e>
 800a6f4:	f000 809f 	beq.w	800a836 <_dtoa_r+0x4ee>
 800a6f8:	f1cb 0600 	rsb	r6, fp, #0
 800a6fc:	4ba1      	ldr	r3, [pc, #644]	; (800a984 <_dtoa_r+0x63c>)
 800a6fe:	4fa2      	ldr	r7, [pc, #648]	; (800a988 <_dtoa_r+0x640>)
 800a700:	f006 020f 	and.w	r2, r6, #15
 800a704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	ec51 0b18 	vmov	r0, r1, d8
 800a710:	f7f5 ff92 	bl	8000638 <__aeabi_dmul>
 800a714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a718:	1136      	asrs	r6, r6, #4
 800a71a:	2300      	movs	r3, #0
 800a71c:	2502      	movs	r5, #2
 800a71e:	2e00      	cmp	r6, #0
 800a720:	d17e      	bne.n	800a820 <_dtoa_r+0x4d8>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1d0      	bne.n	800a6c8 <_dtoa_r+0x380>
 800a726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a728:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 8084 	beq.w	800a83a <_dtoa_r+0x4f2>
 800a732:	4b96      	ldr	r3, [pc, #600]	; (800a98c <_dtoa_r+0x644>)
 800a734:	2200      	movs	r2, #0
 800a736:	4640      	mov	r0, r8
 800a738:	4649      	mov	r1, r9
 800a73a:	f7f6 f9ef 	bl	8000b1c <__aeabi_dcmplt>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d07b      	beq.n	800a83a <_dtoa_r+0x4f2>
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d078      	beq.n	800a83a <_dtoa_r+0x4f2>
 800a748:	9b01      	ldr	r3, [sp, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	dd39      	ble.n	800a7c2 <_dtoa_r+0x47a>
 800a74e:	4b90      	ldr	r3, [pc, #576]	; (800a990 <_dtoa_r+0x648>)
 800a750:	2200      	movs	r2, #0
 800a752:	4640      	mov	r0, r8
 800a754:	4649      	mov	r1, r9
 800a756:	f7f5 ff6f 	bl	8000638 <__aeabi_dmul>
 800a75a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a75e:	9e01      	ldr	r6, [sp, #4]
 800a760:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a764:	3501      	adds	r5, #1
 800a766:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a76a:	4628      	mov	r0, r5
 800a76c:	f7f5 fefa 	bl	8000564 <__aeabi_i2d>
 800a770:	4642      	mov	r2, r8
 800a772:	464b      	mov	r3, r9
 800a774:	f7f5 ff60 	bl	8000638 <__aeabi_dmul>
 800a778:	4b86      	ldr	r3, [pc, #536]	; (800a994 <_dtoa_r+0x64c>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	f7f5 fda6 	bl	80002cc <__adddf3>
 800a780:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a788:	9303      	str	r3, [sp, #12]
 800a78a:	2e00      	cmp	r6, #0
 800a78c:	d158      	bne.n	800a840 <_dtoa_r+0x4f8>
 800a78e:	4b82      	ldr	r3, [pc, #520]	; (800a998 <_dtoa_r+0x650>)
 800a790:	2200      	movs	r2, #0
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f5 fd97 	bl	80002c8 <__aeabi_dsub>
 800a79a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a79e:	4680      	mov	r8, r0
 800a7a0:	4689      	mov	r9, r1
 800a7a2:	f7f6 f9d9 	bl	8000b58 <__aeabi_dcmpgt>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f040 8296 	bne.w	800acd8 <_dtoa_r+0x990>
 800a7ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	f7f6 f9b0 	bl	8000b1c <__aeabi_dcmplt>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f040 8289 	bne.w	800acd4 <_dtoa_r+0x98c>
 800a7c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a7c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f2c0 814e 	blt.w	800aa6a <_dtoa_r+0x722>
 800a7ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a7d2:	f300 814a 	bgt.w	800aa6a <_dtoa_r+0x722>
 800a7d6:	4b6b      	ldr	r3, [pc, #428]	; (800a984 <_dtoa_r+0x63c>)
 800a7d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a7dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f280 80dc 	bge.w	800a9a0 <_dtoa_r+0x658>
 800a7e8:	9b04      	ldr	r3, [sp, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f300 80d8 	bgt.w	800a9a0 <_dtoa_r+0x658>
 800a7f0:	f040 826f 	bne.w	800acd2 <_dtoa_r+0x98a>
 800a7f4:	4b68      	ldr	r3, [pc, #416]	; (800a998 <_dtoa_r+0x650>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	f7f5 ff1c 	bl	8000638 <__aeabi_dmul>
 800a800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a804:	f7f6 f99e 	bl	8000b44 <__aeabi_dcmpge>
 800a808:	9e04      	ldr	r6, [sp, #16]
 800a80a:	4637      	mov	r7, r6
 800a80c:	2800      	cmp	r0, #0
 800a80e:	f040 8245 	bne.w	800ac9c <_dtoa_r+0x954>
 800a812:	9d00      	ldr	r5, [sp, #0]
 800a814:	2331      	movs	r3, #49	; 0x31
 800a816:	f805 3b01 	strb.w	r3, [r5], #1
 800a81a:	f10b 0b01 	add.w	fp, fp, #1
 800a81e:	e241      	b.n	800aca4 <_dtoa_r+0x95c>
 800a820:	07f2      	lsls	r2, r6, #31
 800a822:	d505      	bpl.n	800a830 <_dtoa_r+0x4e8>
 800a824:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a828:	f7f5 ff06 	bl	8000638 <__aeabi_dmul>
 800a82c:	3501      	adds	r5, #1
 800a82e:	2301      	movs	r3, #1
 800a830:	1076      	asrs	r6, r6, #1
 800a832:	3708      	adds	r7, #8
 800a834:	e773      	b.n	800a71e <_dtoa_r+0x3d6>
 800a836:	2502      	movs	r5, #2
 800a838:	e775      	b.n	800a726 <_dtoa_r+0x3de>
 800a83a:	9e04      	ldr	r6, [sp, #16]
 800a83c:	465f      	mov	r7, fp
 800a83e:	e792      	b.n	800a766 <_dtoa_r+0x41e>
 800a840:	9900      	ldr	r1, [sp, #0]
 800a842:	4b50      	ldr	r3, [pc, #320]	; (800a984 <_dtoa_r+0x63c>)
 800a844:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a848:	4431      	add	r1, r6
 800a84a:	9102      	str	r1, [sp, #8]
 800a84c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a84e:	eeb0 9a47 	vmov.f32	s18, s14
 800a852:	eef0 9a67 	vmov.f32	s19, s15
 800a856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a85a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a85e:	2900      	cmp	r1, #0
 800a860:	d044      	beq.n	800a8ec <_dtoa_r+0x5a4>
 800a862:	494e      	ldr	r1, [pc, #312]	; (800a99c <_dtoa_r+0x654>)
 800a864:	2000      	movs	r0, #0
 800a866:	f7f6 f811 	bl	800088c <__aeabi_ddiv>
 800a86a:	ec53 2b19 	vmov	r2, r3, d9
 800a86e:	f7f5 fd2b 	bl	80002c8 <__aeabi_dsub>
 800a872:	9d00      	ldr	r5, [sp, #0]
 800a874:	ec41 0b19 	vmov	d9, r0, r1
 800a878:	4649      	mov	r1, r9
 800a87a:	4640      	mov	r0, r8
 800a87c:	f7f6 f98c 	bl	8000b98 <__aeabi_d2iz>
 800a880:	4606      	mov	r6, r0
 800a882:	f7f5 fe6f 	bl	8000564 <__aeabi_i2d>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4640      	mov	r0, r8
 800a88c:	4649      	mov	r1, r9
 800a88e:	f7f5 fd1b 	bl	80002c8 <__aeabi_dsub>
 800a892:	3630      	adds	r6, #48	; 0x30
 800a894:	f805 6b01 	strb.w	r6, [r5], #1
 800a898:	ec53 2b19 	vmov	r2, r3, d9
 800a89c:	4680      	mov	r8, r0
 800a89e:	4689      	mov	r9, r1
 800a8a0:	f7f6 f93c 	bl	8000b1c <__aeabi_dcmplt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d164      	bne.n	800a972 <_dtoa_r+0x62a>
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	4937      	ldr	r1, [pc, #220]	; (800a98c <_dtoa_r+0x644>)
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	f7f5 fd0a 	bl	80002c8 <__aeabi_dsub>
 800a8b4:	ec53 2b19 	vmov	r2, r3, d9
 800a8b8:	f7f6 f930 	bl	8000b1c <__aeabi_dcmplt>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f040 80b6 	bne.w	800aa2e <_dtoa_r+0x6e6>
 800a8c2:	9b02      	ldr	r3, [sp, #8]
 800a8c4:	429d      	cmp	r5, r3
 800a8c6:	f43f af7c 	beq.w	800a7c2 <_dtoa_r+0x47a>
 800a8ca:	4b31      	ldr	r3, [pc, #196]	; (800a990 <_dtoa_r+0x648>)
 800a8cc:	ec51 0b19 	vmov	r0, r1, d9
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f7f5 feb1 	bl	8000638 <__aeabi_dmul>
 800a8d6:	4b2e      	ldr	r3, [pc, #184]	; (800a990 <_dtoa_r+0x648>)
 800a8d8:	ec41 0b19 	vmov	d9, r0, r1
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4640      	mov	r0, r8
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	f7f5 fea9 	bl	8000638 <__aeabi_dmul>
 800a8e6:	4680      	mov	r8, r0
 800a8e8:	4689      	mov	r9, r1
 800a8ea:	e7c5      	b.n	800a878 <_dtoa_r+0x530>
 800a8ec:	ec51 0b17 	vmov	r0, r1, d7
 800a8f0:	f7f5 fea2 	bl	8000638 <__aeabi_dmul>
 800a8f4:	9b02      	ldr	r3, [sp, #8]
 800a8f6:	9d00      	ldr	r5, [sp, #0]
 800a8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8fa:	ec41 0b19 	vmov	d9, r0, r1
 800a8fe:	4649      	mov	r1, r9
 800a900:	4640      	mov	r0, r8
 800a902:	f7f6 f949 	bl	8000b98 <__aeabi_d2iz>
 800a906:	4606      	mov	r6, r0
 800a908:	f7f5 fe2c 	bl	8000564 <__aeabi_i2d>
 800a90c:	3630      	adds	r6, #48	; 0x30
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	4640      	mov	r0, r8
 800a914:	4649      	mov	r1, r9
 800a916:	f7f5 fcd7 	bl	80002c8 <__aeabi_dsub>
 800a91a:	f805 6b01 	strb.w	r6, [r5], #1
 800a91e:	9b02      	ldr	r3, [sp, #8]
 800a920:	429d      	cmp	r5, r3
 800a922:	4680      	mov	r8, r0
 800a924:	4689      	mov	r9, r1
 800a926:	f04f 0200 	mov.w	r2, #0
 800a92a:	d124      	bne.n	800a976 <_dtoa_r+0x62e>
 800a92c:	4b1b      	ldr	r3, [pc, #108]	; (800a99c <_dtoa_r+0x654>)
 800a92e:	ec51 0b19 	vmov	r0, r1, d9
 800a932:	f7f5 fccb 	bl	80002cc <__adddf3>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4640      	mov	r0, r8
 800a93c:	4649      	mov	r1, r9
 800a93e:	f7f6 f90b 	bl	8000b58 <__aeabi_dcmpgt>
 800a942:	2800      	cmp	r0, #0
 800a944:	d173      	bne.n	800aa2e <_dtoa_r+0x6e6>
 800a946:	ec53 2b19 	vmov	r2, r3, d9
 800a94a:	4914      	ldr	r1, [pc, #80]	; (800a99c <_dtoa_r+0x654>)
 800a94c:	2000      	movs	r0, #0
 800a94e:	f7f5 fcbb 	bl	80002c8 <__aeabi_dsub>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4640      	mov	r0, r8
 800a958:	4649      	mov	r1, r9
 800a95a:	f7f6 f8df 	bl	8000b1c <__aeabi_dcmplt>
 800a95e:	2800      	cmp	r0, #0
 800a960:	f43f af2f 	beq.w	800a7c2 <_dtoa_r+0x47a>
 800a964:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a966:	1e6b      	subs	r3, r5, #1
 800a968:	930f      	str	r3, [sp, #60]	; 0x3c
 800a96a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a96e:	2b30      	cmp	r3, #48	; 0x30
 800a970:	d0f8      	beq.n	800a964 <_dtoa_r+0x61c>
 800a972:	46bb      	mov	fp, r7
 800a974:	e04a      	b.n	800aa0c <_dtoa_r+0x6c4>
 800a976:	4b06      	ldr	r3, [pc, #24]	; (800a990 <_dtoa_r+0x648>)
 800a978:	f7f5 fe5e 	bl	8000638 <__aeabi_dmul>
 800a97c:	4680      	mov	r8, r0
 800a97e:	4689      	mov	r9, r1
 800a980:	e7bd      	b.n	800a8fe <_dtoa_r+0x5b6>
 800a982:	bf00      	nop
 800a984:	0800d038 	.word	0x0800d038
 800a988:	0800d010 	.word	0x0800d010
 800a98c:	3ff00000 	.word	0x3ff00000
 800a990:	40240000 	.word	0x40240000
 800a994:	401c0000 	.word	0x401c0000
 800a998:	40140000 	.word	0x40140000
 800a99c:	3fe00000 	.word	0x3fe00000
 800a9a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a9a4:	9d00      	ldr	r5, [sp, #0]
 800a9a6:	4642      	mov	r2, r8
 800a9a8:	464b      	mov	r3, r9
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	f7f5 ff6d 	bl	800088c <__aeabi_ddiv>
 800a9b2:	f7f6 f8f1 	bl	8000b98 <__aeabi_d2iz>
 800a9b6:	9001      	str	r0, [sp, #4]
 800a9b8:	f7f5 fdd4 	bl	8000564 <__aeabi_i2d>
 800a9bc:	4642      	mov	r2, r8
 800a9be:	464b      	mov	r3, r9
 800a9c0:	f7f5 fe3a 	bl	8000638 <__aeabi_dmul>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	f7f5 fc7c 	bl	80002c8 <__aeabi_dsub>
 800a9d0:	9e01      	ldr	r6, [sp, #4]
 800a9d2:	9f04      	ldr	r7, [sp, #16]
 800a9d4:	3630      	adds	r6, #48	; 0x30
 800a9d6:	f805 6b01 	strb.w	r6, [r5], #1
 800a9da:	9e00      	ldr	r6, [sp, #0]
 800a9dc:	1bae      	subs	r6, r5, r6
 800a9de:	42b7      	cmp	r7, r6
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	d134      	bne.n	800aa50 <_dtoa_r+0x708>
 800a9e6:	f7f5 fc71 	bl	80002cc <__adddf3>
 800a9ea:	4642      	mov	r2, r8
 800a9ec:	464b      	mov	r3, r9
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	f7f6 f8b1 	bl	8000b58 <__aeabi_dcmpgt>
 800a9f6:	b9c8      	cbnz	r0, 800aa2c <_dtoa_r+0x6e4>
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f6 f882 	bl	8000b08 <__aeabi_dcmpeq>
 800aa04:	b110      	cbz	r0, 800aa0c <_dtoa_r+0x6c4>
 800aa06:	9b01      	ldr	r3, [sp, #4]
 800aa08:	07db      	lsls	r3, r3, #31
 800aa0a:	d40f      	bmi.n	800aa2c <_dtoa_r+0x6e4>
 800aa0c:	4651      	mov	r1, sl
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 ff36 	bl	800b880 <_Bfree>
 800aa14:	2300      	movs	r3, #0
 800aa16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa18:	702b      	strb	r3, [r5, #0]
 800aa1a:	f10b 0301 	add.w	r3, fp, #1
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f43f ace2 	beq.w	800a3ec <_dtoa_r+0xa4>
 800aa28:	601d      	str	r5, [r3, #0]
 800aa2a:	e4df      	b.n	800a3ec <_dtoa_r+0xa4>
 800aa2c:	465f      	mov	r7, fp
 800aa2e:	462b      	mov	r3, r5
 800aa30:	461d      	mov	r5, r3
 800aa32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa36:	2a39      	cmp	r2, #57	; 0x39
 800aa38:	d106      	bne.n	800aa48 <_dtoa_r+0x700>
 800aa3a:	9a00      	ldr	r2, [sp, #0]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d1f7      	bne.n	800aa30 <_dtoa_r+0x6e8>
 800aa40:	9900      	ldr	r1, [sp, #0]
 800aa42:	2230      	movs	r2, #48	; 0x30
 800aa44:	3701      	adds	r7, #1
 800aa46:	700a      	strb	r2, [r1, #0]
 800aa48:	781a      	ldrb	r2, [r3, #0]
 800aa4a:	3201      	adds	r2, #1
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	e790      	b.n	800a972 <_dtoa_r+0x62a>
 800aa50:	4ba3      	ldr	r3, [pc, #652]	; (800ace0 <_dtoa_r+0x998>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	f7f5 fdf0 	bl	8000638 <__aeabi_dmul>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	f7f6 f852 	bl	8000b08 <__aeabi_dcmpeq>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d09e      	beq.n	800a9a6 <_dtoa_r+0x65e>
 800aa68:	e7d0      	b.n	800aa0c <_dtoa_r+0x6c4>
 800aa6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	f000 80ca 	beq.w	800ac06 <_dtoa_r+0x8be>
 800aa72:	9a07      	ldr	r2, [sp, #28]
 800aa74:	2a01      	cmp	r2, #1
 800aa76:	f300 80ad 	bgt.w	800abd4 <_dtoa_r+0x88c>
 800aa7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	f000 80a5 	beq.w	800abcc <_dtoa_r+0x884>
 800aa82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa86:	9e08      	ldr	r6, [sp, #32]
 800aa88:	9d05      	ldr	r5, [sp, #20]
 800aa8a:	9a05      	ldr	r2, [sp, #20]
 800aa8c:	441a      	add	r2, r3
 800aa8e:	9205      	str	r2, [sp, #20]
 800aa90:	9a06      	ldr	r2, [sp, #24]
 800aa92:	2101      	movs	r1, #1
 800aa94:	441a      	add	r2, r3
 800aa96:	4620      	mov	r0, r4
 800aa98:	9206      	str	r2, [sp, #24]
 800aa9a:	f000 fff1 	bl	800ba80 <__i2b>
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	b165      	cbz	r5, 800aabc <_dtoa_r+0x774>
 800aaa2:	9b06      	ldr	r3, [sp, #24]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	dd09      	ble.n	800aabc <_dtoa_r+0x774>
 800aaa8:	42ab      	cmp	r3, r5
 800aaaa:	9a05      	ldr	r2, [sp, #20]
 800aaac:	bfa8      	it	ge
 800aaae:	462b      	movge	r3, r5
 800aab0:	1ad2      	subs	r2, r2, r3
 800aab2:	9205      	str	r2, [sp, #20]
 800aab4:	9a06      	ldr	r2, [sp, #24]
 800aab6:	1aed      	subs	r5, r5, r3
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	9306      	str	r3, [sp, #24]
 800aabc:	9b08      	ldr	r3, [sp, #32]
 800aabe:	b1f3      	cbz	r3, 800aafe <_dtoa_r+0x7b6>
 800aac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 80a3 	beq.w	800ac0e <_dtoa_r+0x8c6>
 800aac8:	2e00      	cmp	r6, #0
 800aaca:	dd10      	ble.n	800aaee <_dtoa_r+0x7a6>
 800aacc:	4639      	mov	r1, r7
 800aace:	4632      	mov	r2, r6
 800aad0:	4620      	mov	r0, r4
 800aad2:	f001 f895 	bl	800bc00 <__pow5mult>
 800aad6:	4652      	mov	r2, sl
 800aad8:	4601      	mov	r1, r0
 800aada:	4607      	mov	r7, r0
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 ffe5 	bl	800baac <__multiply>
 800aae2:	4651      	mov	r1, sl
 800aae4:	4680      	mov	r8, r0
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 feca 	bl	800b880 <_Bfree>
 800aaec:	46c2      	mov	sl, r8
 800aaee:	9b08      	ldr	r3, [sp, #32]
 800aaf0:	1b9a      	subs	r2, r3, r6
 800aaf2:	d004      	beq.n	800aafe <_dtoa_r+0x7b6>
 800aaf4:	4651      	mov	r1, sl
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f001 f882 	bl	800bc00 <__pow5mult>
 800aafc:	4682      	mov	sl, r0
 800aafe:	2101      	movs	r1, #1
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 ffbd 	bl	800ba80 <__i2b>
 800ab06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	f340 8081 	ble.w	800ac12 <_dtoa_r+0x8ca>
 800ab10:	461a      	mov	r2, r3
 800ab12:	4601      	mov	r1, r0
 800ab14:	4620      	mov	r0, r4
 800ab16:	f001 f873 	bl	800bc00 <__pow5mult>
 800ab1a:	9b07      	ldr	r3, [sp, #28]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	4606      	mov	r6, r0
 800ab20:	dd7a      	ble.n	800ac18 <_dtoa_r+0x8d0>
 800ab22:	f04f 0800 	mov.w	r8, #0
 800ab26:	6933      	ldr	r3, [r6, #16]
 800ab28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab2c:	6918      	ldr	r0, [r3, #16]
 800ab2e:	f000 ff59 	bl	800b9e4 <__hi0bits>
 800ab32:	f1c0 0020 	rsb	r0, r0, #32
 800ab36:	9b06      	ldr	r3, [sp, #24]
 800ab38:	4418      	add	r0, r3
 800ab3a:	f010 001f 	ands.w	r0, r0, #31
 800ab3e:	f000 8094 	beq.w	800ac6a <_dtoa_r+0x922>
 800ab42:	f1c0 0320 	rsb	r3, r0, #32
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	f340 8085 	ble.w	800ac56 <_dtoa_r+0x90e>
 800ab4c:	9b05      	ldr	r3, [sp, #20]
 800ab4e:	f1c0 001c 	rsb	r0, r0, #28
 800ab52:	4403      	add	r3, r0
 800ab54:	9305      	str	r3, [sp, #20]
 800ab56:	9b06      	ldr	r3, [sp, #24]
 800ab58:	4403      	add	r3, r0
 800ab5a:	4405      	add	r5, r0
 800ab5c:	9306      	str	r3, [sp, #24]
 800ab5e:	9b05      	ldr	r3, [sp, #20]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	dd05      	ble.n	800ab70 <_dtoa_r+0x828>
 800ab64:	4651      	mov	r1, sl
 800ab66:	461a      	mov	r2, r3
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f001 f8a3 	bl	800bcb4 <__lshift>
 800ab6e:	4682      	mov	sl, r0
 800ab70:	9b06      	ldr	r3, [sp, #24]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dd05      	ble.n	800ab82 <_dtoa_r+0x83a>
 800ab76:	4631      	mov	r1, r6
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f001 f89a 	bl	800bcb4 <__lshift>
 800ab80:	4606      	mov	r6, r0
 800ab82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d072      	beq.n	800ac6e <_dtoa_r+0x926>
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4650      	mov	r0, sl
 800ab8c:	f001 f8fe 	bl	800bd8c <__mcmp>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	da6c      	bge.n	800ac6e <_dtoa_r+0x926>
 800ab94:	2300      	movs	r3, #0
 800ab96:	4651      	mov	r1, sl
 800ab98:	220a      	movs	r2, #10
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 fe92 	bl	800b8c4 <__multadd>
 800aba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aba6:	4682      	mov	sl, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 81b0 	beq.w	800af0e <_dtoa_r+0xbc6>
 800abae:	2300      	movs	r3, #0
 800abb0:	4639      	mov	r1, r7
 800abb2:	220a      	movs	r2, #10
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fe85 	bl	800b8c4 <__multadd>
 800abba:	9b01      	ldr	r3, [sp, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	4607      	mov	r7, r0
 800abc0:	f300 8096 	bgt.w	800acf0 <_dtoa_r+0x9a8>
 800abc4:	9b07      	ldr	r3, [sp, #28]
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	dc59      	bgt.n	800ac7e <_dtoa_r+0x936>
 800abca:	e091      	b.n	800acf0 <_dtoa_r+0x9a8>
 800abcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abd2:	e758      	b.n	800aa86 <_dtoa_r+0x73e>
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	1e5e      	subs	r6, r3, #1
 800abd8:	9b08      	ldr	r3, [sp, #32]
 800abda:	42b3      	cmp	r3, r6
 800abdc:	bfbf      	itttt	lt
 800abde:	9b08      	ldrlt	r3, [sp, #32]
 800abe0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800abe2:	9608      	strlt	r6, [sp, #32]
 800abe4:	1af3      	sublt	r3, r6, r3
 800abe6:	bfb4      	ite	lt
 800abe8:	18d2      	addlt	r2, r2, r3
 800abea:	1b9e      	subge	r6, r3, r6
 800abec:	9b04      	ldr	r3, [sp, #16]
 800abee:	bfbc      	itt	lt
 800abf0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800abf2:	2600      	movlt	r6, #0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bfb7      	itett	lt
 800abf8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800abfc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ac00:	1a9d      	sublt	r5, r3, r2
 800ac02:	2300      	movlt	r3, #0
 800ac04:	e741      	b.n	800aa8a <_dtoa_r+0x742>
 800ac06:	9e08      	ldr	r6, [sp, #32]
 800ac08:	9d05      	ldr	r5, [sp, #20]
 800ac0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac0c:	e748      	b.n	800aaa0 <_dtoa_r+0x758>
 800ac0e:	9a08      	ldr	r2, [sp, #32]
 800ac10:	e770      	b.n	800aaf4 <_dtoa_r+0x7ac>
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	dc19      	bgt.n	800ac4c <_dtoa_r+0x904>
 800ac18:	9b02      	ldr	r3, [sp, #8]
 800ac1a:	b9bb      	cbnz	r3, 800ac4c <_dtoa_r+0x904>
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac22:	b99b      	cbnz	r3, 800ac4c <_dtoa_r+0x904>
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac2a:	0d1b      	lsrs	r3, r3, #20
 800ac2c:	051b      	lsls	r3, r3, #20
 800ac2e:	b183      	cbz	r3, 800ac52 <_dtoa_r+0x90a>
 800ac30:	9b05      	ldr	r3, [sp, #20]
 800ac32:	3301      	adds	r3, #1
 800ac34:	9305      	str	r3, [sp, #20]
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	9306      	str	r3, [sp, #24]
 800ac3c:	f04f 0801 	mov.w	r8, #1
 800ac40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f47f af6f 	bne.w	800ab26 <_dtoa_r+0x7de>
 800ac48:	2001      	movs	r0, #1
 800ac4a:	e774      	b.n	800ab36 <_dtoa_r+0x7ee>
 800ac4c:	f04f 0800 	mov.w	r8, #0
 800ac50:	e7f6      	b.n	800ac40 <_dtoa_r+0x8f8>
 800ac52:	4698      	mov	r8, r3
 800ac54:	e7f4      	b.n	800ac40 <_dtoa_r+0x8f8>
 800ac56:	d082      	beq.n	800ab5e <_dtoa_r+0x816>
 800ac58:	9a05      	ldr	r2, [sp, #20]
 800ac5a:	331c      	adds	r3, #28
 800ac5c:	441a      	add	r2, r3
 800ac5e:	9205      	str	r2, [sp, #20]
 800ac60:	9a06      	ldr	r2, [sp, #24]
 800ac62:	441a      	add	r2, r3
 800ac64:	441d      	add	r5, r3
 800ac66:	9206      	str	r2, [sp, #24]
 800ac68:	e779      	b.n	800ab5e <_dtoa_r+0x816>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	e7f4      	b.n	800ac58 <_dtoa_r+0x910>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	dc37      	bgt.n	800ace4 <_dtoa_r+0x99c>
 800ac74:	9b07      	ldr	r3, [sp, #28]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	dd34      	ble.n	800ace4 <_dtoa_r+0x99c>
 800ac7a:	9b04      	ldr	r3, [sp, #16]
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	9b01      	ldr	r3, [sp, #4]
 800ac80:	b963      	cbnz	r3, 800ac9c <_dtoa_r+0x954>
 800ac82:	4631      	mov	r1, r6
 800ac84:	2205      	movs	r2, #5
 800ac86:	4620      	mov	r0, r4
 800ac88:	f000 fe1c 	bl	800b8c4 <__multadd>
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	4606      	mov	r6, r0
 800ac90:	4650      	mov	r0, sl
 800ac92:	f001 f87b 	bl	800bd8c <__mcmp>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	f73f adbb 	bgt.w	800a812 <_dtoa_r+0x4ca>
 800ac9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac9e:	9d00      	ldr	r5, [sp, #0]
 800aca0:	ea6f 0b03 	mvn.w	fp, r3
 800aca4:	f04f 0800 	mov.w	r8, #0
 800aca8:	4631      	mov	r1, r6
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fde8 	bl	800b880 <_Bfree>
 800acb0:	2f00      	cmp	r7, #0
 800acb2:	f43f aeab 	beq.w	800aa0c <_dtoa_r+0x6c4>
 800acb6:	f1b8 0f00 	cmp.w	r8, #0
 800acba:	d005      	beq.n	800acc8 <_dtoa_r+0x980>
 800acbc:	45b8      	cmp	r8, r7
 800acbe:	d003      	beq.n	800acc8 <_dtoa_r+0x980>
 800acc0:	4641      	mov	r1, r8
 800acc2:	4620      	mov	r0, r4
 800acc4:	f000 fddc 	bl	800b880 <_Bfree>
 800acc8:	4639      	mov	r1, r7
 800acca:	4620      	mov	r0, r4
 800accc:	f000 fdd8 	bl	800b880 <_Bfree>
 800acd0:	e69c      	b.n	800aa0c <_dtoa_r+0x6c4>
 800acd2:	2600      	movs	r6, #0
 800acd4:	4637      	mov	r7, r6
 800acd6:	e7e1      	b.n	800ac9c <_dtoa_r+0x954>
 800acd8:	46bb      	mov	fp, r7
 800acda:	4637      	mov	r7, r6
 800acdc:	e599      	b.n	800a812 <_dtoa_r+0x4ca>
 800acde:	bf00      	nop
 800ace0:	40240000 	.word	0x40240000
 800ace4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 80c8 	beq.w	800ae7c <_dtoa_r+0xb34>
 800acec:	9b04      	ldr	r3, [sp, #16]
 800acee:	9301      	str	r3, [sp, #4]
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	dd05      	ble.n	800ad00 <_dtoa_r+0x9b8>
 800acf4:	4639      	mov	r1, r7
 800acf6:	462a      	mov	r2, r5
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 ffdb 	bl	800bcb4 <__lshift>
 800acfe:	4607      	mov	r7, r0
 800ad00:	f1b8 0f00 	cmp.w	r8, #0
 800ad04:	d05b      	beq.n	800adbe <_dtoa_r+0xa76>
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 fd79 	bl	800b800 <_Balloc>
 800ad0e:	4605      	mov	r5, r0
 800ad10:	b928      	cbnz	r0, 800ad1e <_dtoa_r+0x9d6>
 800ad12:	4b83      	ldr	r3, [pc, #524]	; (800af20 <_dtoa_r+0xbd8>)
 800ad14:	4602      	mov	r2, r0
 800ad16:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ad1a:	f7ff bb2e 	b.w	800a37a <_dtoa_r+0x32>
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	3202      	adds	r2, #2
 800ad22:	0092      	lsls	r2, r2, #2
 800ad24:	f107 010c 	add.w	r1, r7, #12
 800ad28:	300c      	adds	r0, #12
 800ad2a:	f7ff fa6e 	bl	800a20a <memcpy>
 800ad2e:	2201      	movs	r2, #1
 800ad30:	4629      	mov	r1, r5
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 ffbe 	bl	800bcb4 <__lshift>
 800ad38:	9b00      	ldr	r3, [sp, #0]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	9304      	str	r3, [sp, #16]
 800ad3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad42:	4413      	add	r3, r2
 800ad44:	9308      	str	r3, [sp, #32]
 800ad46:	9b02      	ldr	r3, [sp, #8]
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	46b8      	mov	r8, r7
 800ad4e:	9306      	str	r3, [sp, #24]
 800ad50:	4607      	mov	r7, r0
 800ad52:	9b04      	ldr	r3, [sp, #16]
 800ad54:	4631      	mov	r1, r6
 800ad56:	3b01      	subs	r3, #1
 800ad58:	4650      	mov	r0, sl
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	f7ff fa6c 	bl	800a238 <quorem>
 800ad60:	4641      	mov	r1, r8
 800ad62:	9002      	str	r0, [sp, #8]
 800ad64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad68:	4650      	mov	r0, sl
 800ad6a:	f001 f80f 	bl	800bd8c <__mcmp>
 800ad6e:	463a      	mov	r2, r7
 800ad70:	9005      	str	r0, [sp, #20]
 800ad72:	4631      	mov	r1, r6
 800ad74:	4620      	mov	r0, r4
 800ad76:	f001 f825 	bl	800bdc4 <__mdiff>
 800ad7a:	68c2      	ldr	r2, [r0, #12]
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	bb02      	cbnz	r2, 800adc2 <_dtoa_r+0xa7a>
 800ad80:	4601      	mov	r1, r0
 800ad82:	4650      	mov	r0, sl
 800ad84:	f001 f802 	bl	800bd8c <__mcmp>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad90:	f000 fd76 	bl	800b880 <_Bfree>
 800ad94:	9b07      	ldr	r3, [sp, #28]
 800ad96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad98:	9d04      	ldr	r5, [sp, #16]
 800ad9a:	ea43 0102 	orr.w	r1, r3, r2
 800ad9e:	9b06      	ldr	r3, [sp, #24]
 800ada0:	4319      	orrs	r1, r3
 800ada2:	d110      	bne.n	800adc6 <_dtoa_r+0xa7e>
 800ada4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ada8:	d029      	beq.n	800adfe <_dtoa_r+0xab6>
 800adaa:	9b05      	ldr	r3, [sp, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dd02      	ble.n	800adb6 <_dtoa_r+0xa6e>
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	f883 9000 	strb.w	r9, [r3]
 800adbc:	e774      	b.n	800aca8 <_dtoa_r+0x960>
 800adbe:	4638      	mov	r0, r7
 800adc0:	e7ba      	b.n	800ad38 <_dtoa_r+0x9f0>
 800adc2:	2201      	movs	r2, #1
 800adc4:	e7e1      	b.n	800ad8a <_dtoa_r+0xa42>
 800adc6:	9b05      	ldr	r3, [sp, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	db04      	blt.n	800add6 <_dtoa_r+0xa8e>
 800adcc:	9907      	ldr	r1, [sp, #28]
 800adce:	430b      	orrs	r3, r1
 800add0:	9906      	ldr	r1, [sp, #24]
 800add2:	430b      	orrs	r3, r1
 800add4:	d120      	bne.n	800ae18 <_dtoa_r+0xad0>
 800add6:	2a00      	cmp	r2, #0
 800add8:	dded      	ble.n	800adb6 <_dtoa_r+0xa6e>
 800adda:	4651      	mov	r1, sl
 800addc:	2201      	movs	r2, #1
 800adde:	4620      	mov	r0, r4
 800ade0:	f000 ff68 	bl	800bcb4 <__lshift>
 800ade4:	4631      	mov	r1, r6
 800ade6:	4682      	mov	sl, r0
 800ade8:	f000 ffd0 	bl	800bd8c <__mcmp>
 800adec:	2800      	cmp	r0, #0
 800adee:	dc03      	bgt.n	800adf8 <_dtoa_r+0xab0>
 800adf0:	d1e1      	bne.n	800adb6 <_dtoa_r+0xa6e>
 800adf2:	f019 0f01 	tst.w	r9, #1
 800adf6:	d0de      	beq.n	800adb6 <_dtoa_r+0xa6e>
 800adf8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800adfc:	d1d8      	bne.n	800adb0 <_dtoa_r+0xa68>
 800adfe:	9a01      	ldr	r2, [sp, #4]
 800ae00:	2339      	movs	r3, #57	; 0x39
 800ae02:	7013      	strb	r3, [r2, #0]
 800ae04:	462b      	mov	r3, r5
 800ae06:	461d      	mov	r5, r3
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae0e:	2a39      	cmp	r2, #57	; 0x39
 800ae10:	d06c      	beq.n	800aeec <_dtoa_r+0xba4>
 800ae12:	3201      	adds	r2, #1
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	e747      	b.n	800aca8 <_dtoa_r+0x960>
 800ae18:	2a00      	cmp	r2, #0
 800ae1a:	dd07      	ble.n	800ae2c <_dtoa_r+0xae4>
 800ae1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae20:	d0ed      	beq.n	800adfe <_dtoa_r+0xab6>
 800ae22:	9a01      	ldr	r2, [sp, #4]
 800ae24:	f109 0301 	add.w	r3, r9, #1
 800ae28:	7013      	strb	r3, [r2, #0]
 800ae2a:	e73d      	b.n	800aca8 <_dtoa_r+0x960>
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	9a08      	ldr	r2, [sp, #32]
 800ae30:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d043      	beq.n	800aec0 <_dtoa_r+0xb78>
 800ae38:	4651      	mov	r1, sl
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	220a      	movs	r2, #10
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 fd40 	bl	800b8c4 <__multadd>
 800ae44:	45b8      	cmp	r8, r7
 800ae46:	4682      	mov	sl, r0
 800ae48:	f04f 0300 	mov.w	r3, #0
 800ae4c:	f04f 020a 	mov.w	r2, #10
 800ae50:	4641      	mov	r1, r8
 800ae52:	4620      	mov	r0, r4
 800ae54:	d107      	bne.n	800ae66 <_dtoa_r+0xb1e>
 800ae56:	f000 fd35 	bl	800b8c4 <__multadd>
 800ae5a:	4680      	mov	r8, r0
 800ae5c:	4607      	mov	r7, r0
 800ae5e:	9b04      	ldr	r3, [sp, #16]
 800ae60:	3301      	adds	r3, #1
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	e775      	b.n	800ad52 <_dtoa_r+0xa0a>
 800ae66:	f000 fd2d 	bl	800b8c4 <__multadd>
 800ae6a:	4639      	mov	r1, r7
 800ae6c:	4680      	mov	r8, r0
 800ae6e:	2300      	movs	r3, #0
 800ae70:	220a      	movs	r2, #10
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 fd26 	bl	800b8c4 <__multadd>
 800ae78:	4607      	mov	r7, r0
 800ae7a:	e7f0      	b.n	800ae5e <_dtoa_r+0xb16>
 800ae7c:	9b04      	ldr	r3, [sp, #16]
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	9d00      	ldr	r5, [sp, #0]
 800ae82:	4631      	mov	r1, r6
 800ae84:	4650      	mov	r0, sl
 800ae86:	f7ff f9d7 	bl	800a238 <quorem>
 800ae8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae8e:	9b00      	ldr	r3, [sp, #0]
 800ae90:	f805 9b01 	strb.w	r9, [r5], #1
 800ae94:	1aea      	subs	r2, r5, r3
 800ae96:	9b01      	ldr	r3, [sp, #4]
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	dd07      	ble.n	800aeac <_dtoa_r+0xb64>
 800ae9c:	4651      	mov	r1, sl
 800ae9e:	2300      	movs	r3, #0
 800aea0:	220a      	movs	r2, #10
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 fd0e 	bl	800b8c4 <__multadd>
 800aea8:	4682      	mov	sl, r0
 800aeaa:	e7ea      	b.n	800ae82 <_dtoa_r+0xb3a>
 800aeac:	9b01      	ldr	r3, [sp, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	bfc8      	it	gt
 800aeb2:	461d      	movgt	r5, r3
 800aeb4:	9b00      	ldr	r3, [sp, #0]
 800aeb6:	bfd8      	it	le
 800aeb8:	2501      	movle	r5, #1
 800aeba:	441d      	add	r5, r3
 800aebc:	f04f 0800 	mov.w	r8, #0
 800aec0:	4651      	mov	r1, sl
 800aec2:	2201      	movs	r2, #1
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fef5 	bl	800bcb4 <__lshift>
 800aeca:	4631      	mov	r1, r6
 800aecc:	4682      	mov	sl, r0
 800aece:	f000 ff5d 	bl	800bd8c <__mcmp>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	dc96      	bgt.n	800ae04 <_dtoa_r+0xabc>
 800aed6:	d102      	bne.n	800aede <_dtoa_r+0xb96>
 800aed8:	f019 0f01 	tst.w	r9, #1
 800aedc:	d192      	bne.n	800ae04 <_dtoa_r+0xabc>
 800aede:	462b      	mov	r3, r5
 800aee0:	461d      	mov	r5, r3
 800aee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aee6:	2a30      	cmp	r2, #48	; 0x30
 800aee8:	d0fa      	beq.n	800aee0 <_dtoa_r+0xb98>
 800aeea:	e6dd      	b.n	800aca8 <_dtoa_r+0x960>
 800aeec:	9a00      	ldr	r2, [sp, #0]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d189      	bne.n	800ae06 <_dtoa_r+0xabe>
 800aef2:	f10b 0b01 	add.w	fp, fp, #1
 800aef6:	2331      	movs	r3, #49	; 0x31
 800aef8:	e796      	b.n	800ae28 <_dtoa_r+0xae0>
 800aefa:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <_dtoa_r+0xbdc>)
 800aefc:	f7ff ba99 	b.w	800a432 <_dtoa_r+0xea>
 800af00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af02:	2b00      	cmp	r3, #0
 800af04:	f47f aa6d 	bne.w	800a3e2 <_dtoa_r+0x9a>
 800af08:	4b07      	ldr	r3, [pc, #28]	; (800af28 <_dtoa_r+0xbe0>)
 800af0a:	f7ff ba92 	b.w	800a432 <_dtoa_r+0xea>
 800af0e:	9b01      	ldr	r3, [sp, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	dcb5      	bgt.n	800ae80 <_dtoa_r+0xb38>
 800af14:	9b07      	ldr	r3, [sp, #28]
 800af16:	2b02      	cmp	r3, #2
 800af18:	f73f aeb1 	bgt.w	800ac7e <_dtoa_r+0x936>
 800af1c:	e7b0      	b.n	800ae80 <_dtoa_r+0xb38>
 800af1e:	bf00      	nop
 800af20:	0800cf41 	.word	0x0800cf41
 800af24:	0800ce99 	.word	0x0800ce99
 800af28:	0800cec5 	.word	0x0800cec5

0800af2c <_free_r>:
 800af2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af2e:	2900      	cmp	r1, #0
 800af30:	d044      	beq.n	800afbc <_free_r+0x90>
 800af32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af36:	9001      	str	r0, [sp, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f1a1 0404 	sub.w	r4, r1, #4
 800af3e:	bfb8      	it	lt
 800af40:	18e4      	addlt	r4, r4, r3
 800af42:	f000 fc51 	bl	800b7e8 <__malloc_lock>
 800af46:	4a1e      	ldr	r2, [pc, #120]	; (800afc0 <_free_r+0x94>)
 800af48:	9801      	ldr	r0, [sp, #4]
 800af4a:	6813      	ldr	r3, [r2, #0]
 800af4c:	b933      	cbnz	r3, 800af5c <_free_r+0x30>
 800af4e:	6063      	str	r3, [r4, #4]
 800af50:	6014      	str	r4, [r2, #0]
 800af52:	b003      	add	sp, #12
 800af54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af58:	f000 bc4c 	b.w	800b7f4 <__malloc_unlock>
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	d908      	bls.n	800af72 <_free_r+0x46>
 800af60:	6825      	ldr	r5, [r4, #0]
 800af62:	1961      	adds	r1, r4, r5
 800af64:	428b      	cmp	r3, r1
 800af66:	bf01      	itttt	eq
 800af68:	6819      	ldreq	r1, [r3, #0]
 800af6a:	685b      	ldreq	r3, [r3, #4]
 800af6c:	1949      	addeq	r1, r1, r5
 800af6e:	6021      	streq	r1, [r4, #0]
 800af70:	e7ed      	b.n	800af4e <_free_r+0x22>
 800af72:	461a      	mov	r2, r3
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	b10b      	cbz	r3, 800af7c <_free_r+0x50>
 800af78:	42a3      	cmp	r3, r4
 800af7a:	d9fa      	bls.n	800af72 <_free_r+0x46>
 800af7c:	6811      	ldr	r1, [r2, #0]
 800af7e:	1855      	adds	r5, r2, r1
 800af80:	42a5      	cmp	r5, r4
 800af82:	d10b      	bne.n	800af9c <_free_r+0x70>
 800af84:	6824      	ldr	r4, [r4, #0]
 800af86:	4421      	add	r1, r4
 800af88:	1854      	adds	r4, r2, r1
 800af8a:	42a3      	cmp	r3, r4
 800af8c:	6011      	str	r1, [r2, #0]
 800af8e:	d1e0      	bne.n	800af52 <_free_r+0x26>
 800af90:	681c      	ldr	r4, [r3, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	6053      	str	r3, [r2, #4]
 800af96:	440c      	add	r4, r1
 800af98:	6014      	str	r4, [r2, #0]
 800af9a:	e7da      	b.n	800af52 <_free_r+0x26>
 800af9c:	d902      	bls.n	800afa4 <_free_r+0x78>
 800af9e:	230c      	movs	r3, #12
 800afa0:	6003      	str	r3, [r0, #0]
 800afa2:	e7d6      	b.n	800af52 <_free_r+0x26>
 800afa4:	6825      	ldr	r5, [r4, #0]
 800afa6:	1961      	adds	r1, r4, r5
 800afa8:	428b      	cmp	r3, r1
 800afaa:	bf04      	itt	eq
 800afac:	6819      	ldreq	r1, [r3, #0]
 800afae:	685b      	ldreq	r3, [r3, #4]
 800afb0:	6063      	str	r3, [r4, #4]
 800afb2:	bf04      	itt	eq
 800afb4:	1949      	addeq	r1, r1, r5
 800afb6:	6021      	streq	r1, [r4, #0]
 800afb8:	6054      	str	r4, [r2, #4]
 800afba:	e7ca      	b.n	800af52 <_free_r+0x26>
 800afbc:	b003      	add	sp, #12
 800afbe:	bd30      	pop	{r4, r5, pc}
 800afc0:	200006f4 	.word	0x200006f4

0800afc4 <rshift>:
 800afc4:	6903      	ldr	r3, [r0, #16]
 800afc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afd2:	f100 0414 	add.w	r4, r0, #20
 800afd6:	dd45      	ble.n	800b064 <rshift+0xa0>
 800afd8:	f011 011f 	ands.w	r1, r1, #31
 800afdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afe0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afe4:	d10c      	bne.n	800b000 <rshift+0x3c>
 800afe6:	f100 0710 	add.w	r7, r0, #16
 800afea:	4629      	mov	r1, r5
 800afec:	42b1      	cmp	r1, r6
 800afee:	d334      	bcc.n	800b05a <rshift+0x96>
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	1eea      	subs	r2, r5, #3
 800aff6:	4296      	cmp	r6, r2
 800aff8:	bf38      	it	cc
 800affa:	2300      	movcc	r3, #0
 800affc:	4423      	add	r3, r4
 800affe:	e015      	b.n	800b02c <rshift+0x68>
 800b000:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b004:	f1c1 0820 	rsb	r8, r1, #32
 800b008:	40cf      	lsrs	r7, r1
 800b00a:	f105 0e04 	add.w	lr, r5, #4
 800b00e:	46a1      	mov	r9, r4
 800b010:	4576      	cmp	r6, lr
 800b012:	46f4      	mov	ip, lr
 800b014:	d815      	bhi.n	800b042 <rshift+0x7e>
 800b016:	1a9a      	subs	r2, r3, r2
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	3a04      	subs	r2, #4
 800b01c:	3501      	adds	r5, #1
 800b01e:	42ae      	cmp	r6, r5
 800b020:	bf38      	it	cc
 800b022:	2200      	movcc	r2, #0
 800b024:	18a3      	adds	r3, r4, r2
 800b026:	50a7      	str	r7, [r4, r2]
 800b028:	b107      	cbz	r7, 800b02c <rshift+0x68>
 800b02a:	3304      	adds	r3, #4
 800b02c:	1b1a      	subs	r2, r3, r4
 800b02e:	42a3      	cmp	r3, r4
 800b030:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b034:	bf08      	it	eq
 800b036:	2300      	moveq	r3, #0
 800b038:	6102      	str	r2, [r0, #16]
 800b03a:	bf08      	it	eq
 800b03c:	6143      	streq	r3, [r0, #20]
 800b03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b042:	f8dc c000 	ldr.w	ip, [ip]
 800b046:	fa0c fc08 	lsl.w	ip, ip, r8
 800b04a:	ea4c 0707 	orr.w	r7, ip, r7
 800b04e:	f849 7b04 	str.w	r7, [r9], #4
 800b052:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b056:	40cf      	lsrs	r7, r1
 800b058:	e7da      	b.n	800b010 <rshift+0x4c>
 800b05a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b05e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b062:	e7c3      	b.n	800afec <rshift+0x28>
 800b064:	4623      	mov	r3, r4
 800b066:	e7e1      	b.n	800b02c <rshift+0x68>

0800b068 <__hexdig_fun>:
 800b068:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b06c:	2b09      	cmp	r3, #9
 800b06e:	d802      	bhi.n	800b076 <__hexdig_fun+0xe>
 800b070:	3820      	subs	r0, #32
 800b072:	b2c0      	uxtb	r0, r0
 800b074:	4770      	bx	lr
 800b076:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b07a:	2b05      	cmp	r3, #5
 800b07c:	d801      	bhi.n	800b082 <__hexdig_fun+0x1a>
 800b07e:	3847      	subs	r0, #71	; 0x47
 800b080:	e7f7      	b.n	800b072 <__hexdig_fun+0xa>
 800b082:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b086:	2b05      	cmp	r3, #5
 800b088:	d801      	bhi.n	800b08e <__hexdig_fun+0x26>
 800b08a:	3827      	subs	r0, #39	; 0x27
 800b08c:	e7f1      	b.n	800b072 <__hexdig_fun+0xa>
 800b08e:	2000      	movs	r0, #0
 800b090:	4770      	bx	lr
	...

0800b094 <__gethex>:
 800b094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	4617      	mov	r7, r2
 800b09a:	680a      	ldr	r2, [r1, #0]
 800b09c:	b085      	sub	sp, #20
 800b09e:	f102 0b02 	add.w	fp, r2, #2
 800b0a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b0a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b0aa:	4681      	mov	r9, r0
 800b0ac:	468a      	mov	sl, r1
 800b0ae:	9302      	str	r3, [sp, #8]
 800b0b0:	32fe      	adds	r2, #254	; 0xfe
 800b0b2:	eb02 030b 	add.w	r3, r2, fp
 800b0b6:	46d8      	mov	r8, fp
 800b0b8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	2830      	cmp	r0, #48	; 0x30
 800b0c0:	d0f7      	beq.n	800b0b2 <__gethex+0x1e>
 800b0c2:	f7ff ffd1 	bl	800b068 <__hexdig_fun>
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d138      	bne.n	800b13e <__gethex+0xaa>
 800b0cc:	49a7      	ldr	r1, [pc, #668]	; (800b36c <__gethex+0x2d8>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	f7ff f811 	bl	800a0f8 <strncmp>
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d169      	bne.n	800b1b0 <__gethex+0x11c>
 800b0dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b0e0:	465d      	mov	r5, fp
 800b0e2:	f7ff ffc1 	bl	800b068 <__hexdig_fun>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d064      	beq.n	800b1b4 <__gethex+0x120>
 800b0ea:	465a      	mov	r2, fp
 800b0ec:	7810      	ldrb	r0, [r2, #0]
 800b0ee:	2830      	cmp	r0, #48	; 0x30
 800b0f0:	4690      	mov	r8, r2
 800b0f2:	f102 0201 	add.w	r2, r2, #1
 800b0f6:	d0f9      	beq.n	800b0ec <__gethex+0x58>
 800b0f8:	f7ff ffb6 	bl	800b068 <__hexdig_fun>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	fab0 f480 	clz	r4, r0
 800b102:	0964      	lsrs	r4, r4, #5
 800b104:	465e      	mov	r6, fp
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	4642      	mov	r2, r8
 800b10a:	4615      	mov	r5, r2
 800b10c:	3201      	adds	r2, #1
 800b10e:	7828      	ldrb	r0, [r5, #0]
 800b110:	f7ff ffaa 	bl	800b068 <__hexdig_fun>
 800b114:	2800      	cmp	r0, #0
 800b116:	d1f8      	bne.n	800b10a <__gethex+0x76>
 800b118:	4994      	ldr	r1, [pc, #592]	; (800b36c <__gethex+0x2d8>)
 800b11a:	2201      	movs	r2, #1
 800b11c:	4628      	mov	r0, r5
 800b11e:	f7fe ffeb 	bl	800a0f8 <strncmp>
 800b122:	b978      	cbnz	r0, 800b144 <__gethex+0xb0>
 800b124:	b946      	cbnz	r6, 800b138 <__gethex+0xa4>
 800b126:	1c6e      	adds	r6, r5, #1
 800b128:	4632      	mov	r2, r6
 800b12a:	4615      	mov	r5, r2
 800b12c:	3201      	adds	r2, #1
 800b12e:	7828      	ldrb	r0, [r5, #0]
 800b130:	f7ff ff9a 	bl	800b068 <__hexdig_fun>
 800b134:	2800      	cmp	r0, #0
 800b136:	d1f8      	bne.n	800b12a <__gethex+0x96>
 800b138:	1b73      	subs	r3, r6, r5
 800b13a:	009e      	lsls	r6, r3, #2
 800b13c:	e004      	b.n	800b148 <__gethex+0xb4>
 800b13e:	2400      	movs	r4, #0
 800b140:	4626      	mov	r6, r4
 800b142:	e7e1      	b.n	800b108 <__gethex+0x74>
 800b144:	2e00      	cmp	r6, #0
 800b146:	d1f7      	bne.n	800b138 <__gethex+0xa4>
 800b148:	782b      	ldrb	r3, [r5, #0]
 800b14a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b14e:	2b50      	cmp	r3, #80	; 0x50
 800b150:	d13d      	bne.n	800b1ce <__gethex+0x13a>
 800b152:	786b      	ldrb	r3, [r5, #1]
 800b154:	2b2b      	cmp	r3, #43	; 0x2b
 800b156:	d02f      	beq.n	800b1b8 <__gethex+0x124>
 800b158:	2b2d      	cmp	r3, #45	; 0x2d
 800b15a:	d031      	beq.n	800b1c0 <__gethex+0x12c>
 800b15c:	1c69      	adds	r1, r5, #1
 800b15e:	f04f 0b00 	mov.w	fp, #0
 800b162:	7808      	ldrb	r0, [r1, #0]
 800b164:	f7ff ff80 	bl	800b068 <__hexdig_fun>
 800b168:	1e42      	subs	r2, r0, #1
 800b16a:	b2d2      	uxtb	r2, r2
 800b16c:	2a18      	cmp	r2, #24
 800b16e:	d82e      	bhi.n	800b1ce <__gethex+0x13a>
 800b170:	f1a0 0210 	sub.w	r2, r0, #16
 800b174:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b178:	f7ff ff76 	bl	800b068 <__hexdig_fun>
 800b17c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b180:	fa5f fc8c 	uxtb.w	ip, ip
 800b184:	f1bc 0f18 	cmp.w	ip, #24
 800b188:	d91d      	bls.n	800b1c6 <__gethex+0x132>
 800b18a:	f1bb 0f00 	cmp.w	fp, #0
 800b18e:	d000      	beq.n	800b192 <__gethex+0xfe>
 800b190:	4252      	negs	r2, r2
 800b192:	4416      	add	r6, r2
 800b194:	f8ca 1000 	str.w	r1, [sl]
 800b198:	b1dc      	cbz	r4, 800b1d2 <__gethex+0x13e>
 800b19a:	9b01      	ldr	r3, [sp, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bf14      	ite	ne
 800b1a0:	f04f 0800 	movne.w	r8, #0
 800b1a4:	f04f 0806 	moveq.w	r8, #6
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	b005      	add	sp, #20
 800b1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b0:	4645      	mov	r5, r8
 800b1b2:	4626      	mov	r6, r4
 800b1b4:	2401      	movs	r4, #1
 800b1b6:	e7c7      	b.n	800b148 <__gethex+0xb4>
 800b1b8:	f04f 0b00 	mov.w	fp, #0
 800b1bc:	1ca9      	adds	r1, r5, #2
 800b1be:	e7d0      	b.n	800b162 <__gethex+0xce>
 800b1c0:	f04f 0b01 	mov.w	fp, #1
 800b1c4:	e7fa      	b.n	800b1bc <__gethex+0x128>
 800b1c6:	230a      	movs	r3, #10
 800b1c8:	fb03 0002 	mla	r0, r3, r2, r0
 800b1cc:	e7d0      	b.n	800b170 <__gethex+0xdc>
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	e7e0      	b.n	800b194 <__gethex+0x100>
 800b1d2:	eba5 0308 	sub.w	r3, r5, r8
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	4621      	mov	r1, r4
 800b1da:	2b07      	cmp	r3, #7
 800b1dc:	dc0a      	bgt.n	800b1f4 <__gethex+0x160>
 800b1de:	4648      	mov	r0, r9
 800b1e0:	f000 fb0e 	bl	800b800 <_Balloc>
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	b940      	cbnz	r0, 800b1fa <__gethex+0x166>
 800b1e8:	4b61      	ldr	r3, [pc, #388]	; (800b370 <__gethex+0x2dc>)
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	21e4      	movs	r1, #228	; 0xe4
 800b1ee:	4861      	ldr	r0, [pc, #388]	; (800b374 <__gethex+0x2e0>)
 800b1f0:	f001 f9f0 	bl	800c5d4 <__assert_func>
 800b1f4:	3101      	adds	r1, #1
 800b1f6:	105b      	asrs	r3, r3, #1
 800b1f8:	e7ef      	b.n	800b1da <__gethex+0x146>
 800b1fa:	f100 0a14 	add.w	sl, r0, #20
 800b1fe:	2300      	movs	r3, #0
 800b200:	495a      	ldr	r1, [pc, #360]	; (800b36c <__gethex+0x2d8>)
 800b202:	f8cd a004 	str.w	sl, [sp, #4]
 800b206:	469b      	mov	fp, r3
 800b208:	45a8      	cmp	r8, r5
 800b20a:	d342      	bcc.n	800b292 <__gethex+0x1fe>
 800b20c:	9801      	ldr	r0, [sp, #4]
 800b20e:	f840 bb04 	str.w	fp, [r0], #4
 800b212:	eba0 000a 	sub.w	r0, r0, sl
 800b216:	1080      	asrs	r0, r0, #2
 800b218:	6120      	str	r0, [r4, #16]
 800b21a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b21e:	4658      	mov	r0, fp
 800b220:	f000 fbe0 	bl	800b9e4 <__hi0bits>
 800b224:	683d      	ldr	r5, [r7, #0]
 800b226:	eba8 0000 	sub.w	r0, r8, r0
 800b22a:	42a8      	cmp	r0, r5
 800b22c:	dd59      	ble.n	800b2e2 <__gethex+0x24e>
 800b22e:	eba0 0805 	sub.w	r8, r0, r5
 800b232:	4641      	mov	r1, r8
 800b234:	4620      	mov	r0, r4
 800b236:	f000 ff6f 	bl	800c118 <__any_on>
 800b23a:	4683      	mov	fp, r0
 800b23c:	b1b8      	cbz	r0, 800b26e <__gethex+0x1da>
 800b23e:	f108 33ff 	add.w	r3, r8, #4294967295
 800b242:	1159      	asrs	r1, r3, #5
 800b244:	f003 021f 	and.w	r2, r3, #31
 800b248:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b24c:	f04f 0b01 	mov.w	fp, #1
 800b250:	fa0b f202 	lsl.w	r2, fp, r2
 800b254:	420a      	tst	r2, r1
 800b256:	d00a      	beq.n	800b26e <__gethex+0x1da>
 800b258:	455b      	cmp	r3, fp
 800b25a:	dd06      	ble.n	800b26a <__gethex+0x1d6>
 800b25c:	f1a8 0102 	sub.w	r1, r8, #2
 800b260:	4620      	mov	r0, r4
 800b262:	f000 ff59 	bl	800c118 <__any_on>
 800b266:	2800      	cmp	r0, #0
 800b268:	d138      	bne.n	800b2dc <__gethex+0x248>
 800b26a:	f04f 0b02 	mov.w	fp, #2
 800b26e:	4641      	mov	r1, r8
 800b270:	4620      	mov	r0, r4
 800b272:	f7ff fea7 	bl	800afc4 <rshift>
 800b276:	4446      	add	r6, r8
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	42b3      	cmp	r3, r6
 800b27c:	da41      	bge.n	800b302 <__gethex+0x26e>
 800b27e:	4621      	mov	r1, r4
 800b280:	4648      	mov	r0, r9
 800b282:	f000 fafd 	bl	800b880 <_Bfree>
 800b286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b288:	2300      	movs	r3, #0
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b290:	e78a      	b.n	800b1a8 <__gethex+0x114>
 800b292:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b296:	2a2e      	cmp	r2, #46	; 0x2e
 800b298:	d014      	beq.n	800b2c4 <__gethex+0x230>
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d106      	bne.n	800b2ac <__gethex+0x218>
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	f843 bb04 	str.w	fp, [r3], #4
 800b2a4:	f04f 0b00 	mov.w	fp, #0
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	465b      	mov	r3, fp
 800b2ac:	7828      	ldrb	r0, [r5, #0]
 800b2ae:	9303      	str	r3, [sp, #12]
 800b2b0:	f7ff feda 	bl	800b068 <__hexdig_fun>
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	f000 000f 	and.w	r0, r0, #15
 800b2ba:	4098      	lsls	r0, r3
 800b2bc:	ea4b 0b00 	orr.w	fp, fp, r0
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	e7a1      	b.n	800b208 <__gethex+0x174>
 800b2c4:	45a8      	cmp	r8, r5
 800b2c6:	d8e8      	bhi.n	800b29a <__gethex+0x206>
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	9303      	str	r3, [sp, #12]
 800b2ce:	f7fe ff13 	bl	800a0f8 <strncmp>
 800b2d2:	4926      	ldr	r1, [pc, #152]	; (800b36c <__gethex+0x2d8>)
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d1df      	bne.n	800b29a <__gethex+0x206>
 800b2da:	e795      	b.n	800b208 <__gethex+0x174>
 800b2dc:	f04f 0b03 	mov.w	fp, #3
 800b2e0:	e7c5      	b.n	800b26e <__gethex+0x1da>
 800b2e2:	da0b      	bge.n	800b2fc <__gethex+0x268>
 800b2e4:	eba5 0800 	sub.w	r8, r5, r0
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	4642      	mov	r2, r8
 800b2ec:	4648      	mov	r0, r9
 800b2ee:	f000 fce1 	bl	800bcb4 <__lshift>
 800b2f2:	eba6 0608 	sub.w	r6, r6, r8
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	f100 0a14 	add.w	sl, r0, #20
 800b2fc:	f04f 0b00 	mov.w	fp, #0
 800b300:	e7ba      	b.n	800b278 <__gethex+0x1e4>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	42b3      	cmp	r3, r6
 800b306:	dd73      	ble.n	800b3f0 <__gethex+0x35c>
 800b308:	1b9e      	subs	r6, r3, r6
 800b30a:	42b5      	cmp	r5, r6
 800b30c:	dc34      	bgt.n	800b378 <__gethex+0x2e4>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2b02      	cmp	r3, #2
 800b312:	d023      	beq.n	800b35c <__gethex+0x2c8>
 800b314:	2b03      	cmp	r3, #3
 800b316:	d025      	beq.n	800b364 <__gethex+0x2d0>
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d115      	bne.n	800b348 <__gethex+0x2b4>
 800b31c:	42b5      	cmp	r5, r6
 800b31e:	d113      	bne.n	800b348 <__gethex+0x2b4>
 800b320:	2d01      	cmp	r5, #1
 800b322:	d10b      	bne.n	800b33c <__gethex+0x2a8>
 800b324:	9a02      	ldr	r2, [sp, #8]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	2301      	movs	r3, #1
 800b32c:	6123      	str	r3, [r4, #16]
 800b32e:	f8ca 3000 	str.w	r3, [sl]
 800b332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b334:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b338:	601c      	str	r4, [r3, #0]
 800b33a:	e735      	b.n	800b1a8 <__gethex+0x114>
 800b33c:	1e69      	subs	r1, r5, #1
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 feea 	bl	800c118 <__any_on>
 800b344:	2800      	cmp	r0, #0
 800b346:	d1ed      	bne.n	800b324 <__gethex+0x290>
 800b348:	4621      	mov	r1, r4
 800b34a:	4648      	mov	r0, r9
 800b34c:	f000 fa98 	bl	800b880 <_Bfree>
 800b350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b352:	2300      	movs	r3, #0
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b35a:	e725      	b.n	800b1a8 <__gethex+0x114>
 800b35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1f2      	bne.n	800b348 <__gethex+0x2b4>
 800b362:	e7df      	b.n	800b324 <__gethex+0x290>
 800b364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1dc      	bne.n	800b324 <__gethex+0x290>
 800b36a:	e7ed      	b.n	800b348 <__gethex+0x2b4>
 800b36c:	0800cd30 	.word	0x0800cd30
 800b370:	0800cf41 	.word	0x0800cf41
 800b374:	0800cf52 	.word	0x0800cf52
 800b378:	f106 38ff 	add.w	r8, r6, #4294967295
 800b37c:	f1bb 0f00 	cmp.w	fp, #0
 800b380:	d133      	bne.n	800b3ea <__gethex+0x356>
 800b382:	f1b8 0f00 	cmp.w	r8, #0
 800b386:	d004      	beq.n	800b392 <__gethex+0x2fe>
 800b388:	4641      	mov	r1, r8
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 fec4 	bl	800c118 <__any_on>
 800b390:	4683      	mov	fp, r0
 800b392:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b396:	2301      	movs	r3, #1
 800b398:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b39c:	f008 081f 	and.w	r8, r8, #31
 800b3a0:	fa03 f308 	lsl.w	r3, r3, r8
 800b3a4:	4213      	tst	r3, r2
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	bf18      	it	ne
 800b3ac:	f04b 0b02 	orrne.w	fp, fp, #2
 800b3b0:	1bad      	subs	r5, r5, r6
 800b3b2:	f7ff fe07 	bl	800afc4 <rshift>
 800b3b6:	687e      	ldr	r6, [r7, #4]
 800b3b8:	f04f 0802 	mov.w	r8, #2
 800b3bc:	f1bb 0f00 	cmp.w	fp, #0
 800b3c0:	d04a      	beq.n	800b458 <__gethex+0x3c4>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d016      	beq.n	800b3f6 <__gethex+0x362>
 800b3c8:	2b03      	cmp	r3, #3
 800b3ca:	d018      	beq.n	800b3fe <__gethex+0x36a>
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d109      	bne.n	800b3e4 <__gethex+0x350>
 800b3d0:	f01b 0f02 	tst.w	fp, #2
 800b3d4:	d006      	beq.n	800b3e4 <__gethex+0x350>
 800b3d6:	f8da 3000 	ldr.w	r3, [sl]
 800b3da:	ea4b 0b03 	orr.w	fp, fp, r3
 800b3de:	f01b 0f01 	tst.w	fp, #1
 800b3e2:	d10f      	bne.n	800b404 <__gethex+0x370>
 800b3e4:	f048 0810 	orr.w	r8, r8, #16
 800b3e8:	e036      	b.n	800b458 <__gethex+0x3c4>
 800b3ea:	f04f 0b01 	mov.w	fp, #1
 800b3ee:	e7d0      	b.n	800b392 <__gethex+0x2fe>
 800b3f0:	f04f 0801 	mov.w	r8, #1
 800b3f4:	e7e2      	b.n	800b3bc <__gethex+0x328>
 800b3f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3f8:	f1c3 0301 	rsb	r3, r3, #1
 800b3fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b400:	2b00      	cmp	r3, #0
 800b402:	d0ef      	beq.n	800b3e4 <__gethex+0x350>
 800b404:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b408:	f104 0214 	add.w	r2, r4, #20
 800b40c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b416:	2300      	movs	r3, #0
 800b418:	4694      	mov	ip, r2
 800b41a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b41e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b422:	d01e      	beq.n	800b462 <__gethex+0x3ce>
 800b424:	3101      	adds	r1, #1
 800b426:	f8cc 1000 	str.w	r1, [ip]
 800b42a:	f1b8 0f02 	cmp.w	r8, #2
 800b42e:	f104 0214 	add.w	r2, r4, #20
 800b432:	d13d      	bne.n	800b4b0 <__gethex+0x41c>
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	3b01      	subs	r3, #1
 800b438:	42ab      	cmp	r3, r5
 800b43a:	d10b      	bne.n	800b454 <__gethex+0x3c0>
 800b43c:	1169      	asrs	r1, r5, #5
 800b43e:	2301      	movs	r3, #1
 800b440:	f005 051f 	and.w	r5, r5, #31
 800b444:	fa03 f505 	lsl.w	r5, r3, r5
 800b448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b44c:	421d      	tst	r5, r3
 800b44e:	bf18      	it	ne
 800b450:	f04f 0801 	movne.w	r8, #1
 800b454:	f048 0820 	orr.w	r8, r8, #32
 800b458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b45a:	601c      	str	r4, [r3, #0]
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	601e      	str	r6, [r3, #0]
 800b460:	e6a2      	b.n	800b1a8 <__gethex+0x114>
 800b462:	4290      	cmp	r0, r2
 800b464:	f842 3c04 	str.w	r3, [r2, #-4]
 800b468:	d8d6      	bhi.n	800b418 <__gethex+0x384>
 800b46a:	68a2      	ldr	r2, [r4, #8]
 800b46c:	4593      	cmp	fp, r2
 800b46e:	db17      	blt.n	800b4a0 <__gethex+0x40c>
 800b470:	6861      	ldr	r1, [r4, #4]
 800b472:	4648      	mov	r0, r9
 800b474:	3101      	adds	r1, #1
 800b476:	f000 f9c3 	bl	800b800 <_Balloc>
 800b47a:	4682      	mov	sl, r0
 800b47c:	b918      	cbnz	r0, 800b486 <__gethex+0x3f2>
 800b47e:	4b1b      	ldr	r3, [pc, #108]	; (800b4ec <__gethex+0x458>)
 800b480:	4602      	mov	r2, r0
 800b482:	2184      	movs	r1, #132	; 0x84
 800b484:	e6b3      	b.n	800b1ee <__gethex+0x15a>
 800b486:	6922      	ldr	r2, [r4, #16]
 800b488:	3202      	adds	r2, #2
 800b48a:	f104 010c 	add.w	r1, r4, #12
 800b48e:	0092      	lsls	r2, r2, #2
 800b490:	300c      	adds	r0, #12
 800b492:	f7fe feba 	bl	800a20a <memcpy>
 800b496:	4621      	mov	r1, r4
 800b498:	4648      	mov	r0, r9
 800b49a:	f000 f9f1 	bl	800b880 <_Bfree>
 800b49e:	4654      	mov	r4, sl
 800b4a0:	6922      	ldr	r2, [r4, #16]
 800b4a2:	1c51      	adds	r1, r2, #1
 800b4a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b4a8:	6121      	str	r1, [r4, #16]
 800b4aa:	2101      	movs	r1, #1
 800b4ac:	6151      	str	r1, [r2, #20]
 800b4ae:	e7bc      	b.n	800b42a <__gethex+0x396>
 800b4b0:	6921      	ldr	r1, [r4, #16]
 800b4b2:	4559      	cmp	r1, fp
 800b4b4:	dd0b      	ble.n	800b4ce <__gethex+0x43a>
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7ff fd83 	bl	800afc4 <rshift>
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	3601      	adds	r6, #1
 800b4c2:	42b3      	cmp	r3, r6
 800b4c4:	f6ff aedb 	blt.w	800b27e <__gethex+0x1ea>
 800b4c8:	f04f 0801 	mov.w	r8, #1
 800b4cc:	e7c2      	b.n	800b454 <__gethex+0x3c0>
 800b4ce:	f015 051f 	ands.w	r5, r5, #31
 800b4d2:	d0f9      	beq.n	800b4c8 <__gethex+0x434>
 800b4d4:	9b01      	ldr	r3, [sp, #4]
 800b4d6:	441a      	add	r2, r3
 800b4d8:	f1c5 0520 	rsb	r5, r5, #32
 800b4dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b4e0:	f000 fa80 	bl	800b9e4 <__hi0bits>
 800b4e4:	42a8      	cmp	r0, r5
 800b4e6:	dbe6      	blt.n	800b4b6 <__gethex+0x422>
 800b4e8:	e7ee      	b.n	800b4c8 <__gethex+0x434>
 800b4ea:	bf00      	nop
 800b4ec:	0800cf41 	.word	0x0800cf41

0800b4f0 <L_shift>:
 800b4f0:	f1c2 0208 	rsb	r2, r2, #8
 800b4f4:	0092      	lsls	r2, r2, #2
 800b4f6:	b570      	push	{r4, r5, r6, lr}
 800b4f8:	f1c2 0620 	rsb	r6, r2, #32
 800b4fc:	6843      	ldr	r3, [r0, #4]
 800b4fe:	6804      	ldr	r4, [r0, #0]
 800b500:	fa03 f506 	lsl.w	r5, r3, r6
 800b504:	432c      	orrs	r4, r5
 800b506:	40d3      	lsrs	r3, r2
 800b508:	6004      	str	r4, [r0, #0]
 800b50a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b50e:	4288      	cmp	r0, r1
 800b510:	d3f4      	bcc.n	800b4fc <L_shift+0xc>
 800b512:	bd70      	pop	{r4, r5, r6, pc}

0800b514 <__match>:
 800b514:	b530      	push	{r4, r5, lr}
 800b516:	6803      	ldr	r3, [r0, #0]
 800b518:	3301      	adds	r3, #1
 800b51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b51e:	b914      	cbnz	r4, 800b526 <__match+0x12>
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	2001      	movs	r0, #1
 800b524:	bd30      	pop	{r4, r5, pc}
 800b526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b52a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b52e:	2d19      	cmp	r5, #25
 800b530:	bf98      	it	ls
 800b532:	3220      	addls	r2, #32
 800b534:	42a2      	cmp	r2, r4
 800b536:	d0f0      	beq.n	800b51a <__match+0x6>
 800b538:	2000      	movs	r0, #0
 800b53a:	e7f3      	b.n	800b524 <__match+0x10>

0800b53c <__hexnan>:
 800b53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b540:	680b      	ldr	r3, [r1, #0]
 800b542:	6801      	ldr	r1, [r0, #0]
 800b544:	115e      	asrs	r6, r3, #5
 800b546:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b54a:	f013 031f 	ands.w	r3, r3, #31
 800b54e:	b087      	sub	sp, #28
 800b550:	bf18      	it	ne
 800b552:	3604      	addne	r6, #4
 800b554:	2500      	movs	r5, #0
 800b556:	1f37      	subs	r7, r6, #4
 800b558:	4682      	mov	sl, r0
 800b55a:	4690      	mov	r8, r2
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b562:	46b9      	mov	r9, r7
 800b564:	463c      	mov	r4, r7
 800b566:	9502      	str	r5, [sp, #8]
 800b568:	46ab      	mov	fp, r5
 800b56a:	784a      	ldrb	r2, [r1, #1]
 800b56c:	1c4b      	adds	r3, r1, #1
 800b56e:	9303      	str	r3, [sp, #12]
 800b570:	b342      	cbz	r2, 800b5c4 <__hexnan+0x88>
 800b572:	4610      	mov	r0, r2
 800b574:	9105      	str	r1, [sp, #20]
 800b576:	9204      	str	r2, [sp, #16]
 800b578:	f7ff fd76 	bl	800b068 <__hexdig_fun>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d14f      	bne.n	800b620 <__hexnan+0xe4>
 800b580:	9a04      	ldr	r2, [sp, #16]
 800b582:	9905      	ldr	r1, [sp, #20]
 800b584:	2a20      	cmp	r2, #32
 800b586:	d818      	bhi.n	800b5ba <__hexnan+0x7e>
 800b588:	9b02      	ldr	r3, [sp, #8]
 800b58a:	459b      	cmp	fp, r3
 800b58c:	dd13      	ble.n	800b5b6 <__hexnan+0x7a>
 800b58e:	454c      	cmp	r4, r9
 800b590:	d206      	bcs.n	800b5a0 <__hexnan+0x64>
 800b592:	2d07      	cmp	r5, #7
 800b594:	dc04      	bgt.n	800b5a0 <__hexnan+0x64>
 800b596:	462a      	mov	r2, r5
 800b598:	4649      	mov	r1, r9
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7ff ffa8 	bl	800b4f0 <L_shift>
 800b5a0:	4544      	cmp	r4, r8
 800b5a2:	d950      	bls.n	800b646 <__hexnan+0x10a>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f1a4 0904 	sub.w	r9, r4, #4
 800b5aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5ae:	f8cd b008 	str.w	fp, [sp, #8]
 800b5b2:	464c      	mov	r4, r9
 800b5b4:	461d      	mov	r5, r3
 800b5b6:	9903      	ldr	r1, [sp, #12]
 800b5b8:	e7d7      	b.n	800b56a <__hexnan+0x2e>
 800b5ba:	2a29      	cmp	r2, #41	; 0x29
 800b5bc:	d155      	bne.n	800b66a <__hexnan+0x12e>
 800b5be:	3102      	adds	r1, #2
 800b5c0:	f8ca 1000 	str.w	r1, [sl]
 800b5c4:	f1bb 0f00 	cmp.w	fp, #0
 800b5c8:	d04f      	beq.n	800b66a <__hexnan+0x12e>
 800b5ca:	454c      	cmp	r4, r9
 800b5cc:	d206      	bcs.n	800b5dc <__hexnan+0xa0>
 800b5ce:	2d07      	cmp	r5, #7
 800b5d0:	dc04      	bgt.n	800b5dc <__hexnan+0xa0>
 800b5d2:	462a      	mov	r2, r5
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f7ff ff8a 	bl	800b4f0 <L_shift>
 800b5dc:	4544      	cmp	r4, r8
 800b5de:	d934      	bls.n	800b64a <__hexnan+0x10e>
 800b5e0:	f1a8 0204 	sub.w	r2, r8, #4
 800b5e4:	4623      	mov	r3, r4
 800b5e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5ee:	429f      	cmp	r7, r3
 800b5f0:	d2f9      	bcs.n	800b5e6 <__hexnan+0xaa>
 800b5f2:	1b3b      	subs	r3, r7, r4
 800b5f4:	f023 0303 	bic.w	r3, r3, #3
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	3e03      	subs	r6, #3
 800b5fc:	3401      	adds	r4, #1
 800b5fe:	42a6      	cmp	r6, r4
 800b600:	bf38      	it	cc
 800b602:	2304      	movcc	r3, #4
 800b604:	4443      	add	r3, r8
 800b606:	2200      	movs	r2, #0
 800b608:	f843 2b04 	str.w	r2, [r3], #4
 800b60c:	429f      	cmp	r7, r3
 800b60e:	d2fb      	bcs.n	800b608 <__hexnan+0xcc>
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	b91b      	cbnz	r3, 800b61c <__hexnan+0xe0>
 800b614:	4547      	cmp	r7, r8
 800b616:	d126      	bne.n	800b666 <__hexnan+0x12a>
 800b618:	2301      	movs	r3, #1
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	2005      	movs	r0, #5
 800b61e:	e025      	b.n	800b66c <__hexnan+0x130>
 800b620:	3501      	adds	r5, #1
 800b622:	2d08      	cmp	r5, #8
 800b624:	f10b 0b01 	add.w	fp, fp, #1
 800b628:	dd06      	ble.n	800b638 <__hexnan+0xfc>
 800b62a:	4544      	cmp	r4, r8
 800b62c:	d9c3      	bls.n	800b5b6 <__hexnan+0x7a>
 800b62e:	2300      	movs	r3, #0
 800b630:	f844 3c04 	str.w	r3, [r4, #-4]
 800b634:	2501      	movs	r5, #1
 800b636:	3c04      	subs	r4, #4
 800b638:	6822      	ldr	r2, [r4, #0]
 800b63a:	f000 000f 	and.w	r0, r0, #15
 800b63e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b642:	6020      	str	r0, [r4, #0]
 800b644:	e7b7      	b.n	800b5b6 <__hexnan+0x7a>
 800b646:	2508      	movs	r5, #8
 800b648:	e7b5      	b.n	800b5b6 <__hexnan+0x7a>
 800b64a:	9b01      	ldr	r3, [sp, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d0df      	beq.n	800b610 <__hexnan+0xd4>
 800b650:	f1c3 0320 	rsb	r3, r3, #32
 800b654:	f04f 32ff 	mov.w	r2, #4294967295
 800b658:	40da      	lsrs	r2, r3
 800b65a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b65e:	4013      	ands	r3, r2
 800b660:	f846 3c04 	str.w	r3, [r6, #-4]
 800b664:	e7d4      	b.n	800b610 <__hexnan+0xd4>
 800b666:	3f04      	subs	r7, #4
 800b668:	e7d2      	b.n	800b610 <__hexnan+0xd4>
 800b66a:	2004      	movs	r0, #4
 800b66c:	b007      	add	sp, #28
 800b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b674 <malloc>:
 800b674:	4b02      	ldr	r3, [pc, #8]	; (800b680 <malloc+0xc>)
 800b676:	4601      	mov	r1, r0
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	f000 b823 	b.w	800b6c4 <_malloc_r>
 800b67e:	bf00      	nop
 800b680:	20000224 	.word	0x20000224

0800b684 <sbrk_aligned>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	4e0e      	ldr	r6, [pc, #56]	; (800b6c0 <sbrk_aligned+0x3c>)
 800b688:	460c      	mov	r4, r1
 800b68a:	6831      	ldr	r1, [r6, #0]
 800b68c:	4605      	mov	r5, r0
 800b68e:	b911      	cbnz	r1, 800b696 <sbrk_aligned+0x12>
 800b690:	f000 ff90 	bl	800c5b4 <_sbrk_r>
 800b694:	6030      	str	r0, [r6, #0]
 800b696:	4621      	mov	r1, r4
 800b698:	4628      	mov	r0, r5
 800b69a:	f000 ff8b 	bl	800c5b4 <_sbrk_r>
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	d00a      	beq.n	800b6b8 <sbrk_aligned+0x34>
 800b6a2:	1cc4      	adds	r4, r0, #3
 800b6a4:	f024 0403 	bic.w	r4, r4, #3
 800b6a8:	42a0      	cmp	r0, r4
 800b6aa:	d007      	beq.n	800b6bc <sbrk_aligned+0x38>
 800b6ac:	1a21      	subs	r1, r4, r0
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f000 ff80 	bl	800c5b4 <_sbrk_r>
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d101      	bne.n	800b6bc <sbrk_aligned+0x38>
 800b6b8:	f04f 34ff 	mov.w	r4, #4294967295
 800b6bc:	4620      	mov	r0, r4
 800b6be:	bd70      	pop	{r4, r5, r6, pc}
 800b6c0:	200006f8 	.word	0x200006f8

0800b6c4 <_malloc_r>:
 800b6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c8:	1ccd      	adds	r5, r1, #3
 800b6ca:	f025 0503 	bic.w	r5, r5, #3
 800b6ce:	3508      	adds	r5, #8
 800b6d0:	2d0c      	cmp	r5, #12
 800b6d2:	bf38      	it	cc
 800b6d4:	250c      	movcc	r5, #12
 800b6d6:	2d00      	cmp	r5, #0
 800b6d8:	4607      	mov	r7, r0
 800b6da:	db01      	blt.n	800b6e0 <_malloc_r+0x1c>
 800b6dc:	42a9      	cmp	r1, r5
 800b6de:	d905      	bls.n	800b6ec <_malloc_r+0x28>
 800b6e0:	230c      	movs	r3, #12
 800b6e2:	603b      	str	r3, [r7, #0]
 800b6e4:	2600      	movs	r6, #0
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7c0 <_malloc_r+0xfc>
 800b6f0:	f000 f87a 	bl	800b7e8 <__malloc_lock>
 800b6f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b6f8:	461c      	mov	r4, r3
 800b6fa:	bb5c      	cbnz	r4, 800b754 <_malloc_r+0x90>
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4638      	mov	r0, r7
 800b700:	f7ff ffc0 	bl	800b684 <sbrk_aligned>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	4604      	mov	r4, r0
 800b708:	d155      	bne.n	800b7b6 <_malloc_r+0xf2>
 800b70a:	f8d8 4000 	ldr.w	r4, [r8]
 800b70e:	4626      	mov	r6, r4
 800b710:	2e00      	cmp	r6, #0
 800b712:	d145      	bne.n	800b7a0 <_malloc_r+0xdc>
 800b714:	2c00      	cmp	r4, #0
 800b716:	d048      	beq.n	800b7aa <_malloc_r+0xe6>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	4631      	mov	r1, r6
 800b71c:	4638      	mov	r0, r7
 800b71e:	eb04 0903 	add.w	r9, r4, r3
 800b722:	f000 ff47 	bl	800c5b4 <_sbrk_r>
 800b726:	4581      	cmp	r9, r0
 800b728:	d13f      	bne.n	800b7aa <_malloc_r+0xe6>
 800b72a:	6821      	ldr	r1, [r4, #0]
 800b72c:	1a6d      	subs	r5, r5, r1
 800b72e:	4629      	mov	r1, r5
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff ffa7 	bl	800b684 <sbrk_aligned>
 800b736:	3001      	adds	r0, #1
 800b738:	d037      	beq.n	800b7aa <_malloc_r+0xe6>
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	442b      	add	r3, r5
 800b73e:	6023      	str	r3, [r4, #0]
 800b740:	f8d8 3000 	ldr.w	r3, [r8]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d038      	beq.n	800b7ba <_malloc_r+0xf6>
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	42a2      	cmp	r2, r4
 800b74c:	d12b      	bne.n	800b7a6 <_malloc_r+0xe2>
 800b74e:	2200      	movs	r2, #0
 800b750:	605a      	str	r2, [r3, #4]
 800b752:	e00f      	b.n	800b774 <_malloc_r+0xb0>
 800b754:	6822      	ldr	r2, [r4, #0]
 800b756:	1b52      	subs	r2, r2, r5
 800b758:	d41f      	bmi.n	800b79a <_malloc_r+0xd6>
 800b75a:	2a0b      	cmp	r2, #11
 800b75c:	d917      	bls.n	800b78e <_malloc_r+0xca>
 800b75e:	1961      	adds	r1, r4, r5
 800b760:	42a3      	cmp	r3, r4
 800b762:	6025      	str	r5, [r4, #0]
 800b764:	bf18      	it	ne
 800b766:	6059      	strne	r1, [r3, #4]
 800b768:	6863      	ldr	r3, [r4, #4]
 800b76a:	bf08      	it	eq
 800b76c:	f8c8 1000 	streq.w	r1, [r8]
 800b770:	5162      	str	r2, [r4, r5]
 800b772:	604b      	str	r3, [r1, #4]
 800b774:	4638      	mov	r0, r7
 800b776:	f104 060b 	add.w	r6, r4, #11
 800b77a:	f000 f83b 	bl	800b7f4 <__malloc_unlock>
 800b77e:	f026 0607 	bic.w	r6, r6, #7
 800b782:	1d23      	adds	r3, r4, #4
 800b784:	1af2      	subs	r2, r6, r3
 800b786:	d0ae      	beq.n	800b6e6 <_malloc_r+0x22>
 800b788:	1b9b      	subs	r3, r3, r6
 800b78a:	50a3      	str	r3, [r4, r2]
 800b78c:	e7ab      	b.n	800b6e6 <_malloc_r+0x22>
 800b78e:	42a3      	cmp	r3, r4
 800b790:	6862      	ldr	r2, [r4, #4]
 800b792:	d1dd      	bne.n	800b750 <_malloc_r+0x8c>
 800b794:	f8c8 2000 	str.w	r2, [r8]
 800b798:	e7ec      	b.n	800b774 <_malloc_r+0xb0>
 800b79a:	4623      	mov	r3, r4
 800b79c:	6864      	ldr	r4, [r4, #4]
 800b79e:	e7ac      	b.n	800b6fa <_malloc_r+0x36>
 800b7a0:	4634      	mov	r4, r6
 800b7a2:	6876      	ldr	r6, [r6, #4]
 800b7a4:	e7b4      	b.n	800b710 <_malloc_r+0x4c>
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	e7cc      	b.n	800b744 <_malloc_r+0x80>
 800b7aa:	230c      	movs	r3, #12
 800b7ac:	603b      	str	r3, [r7, #0]
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f000 f820 	bl	800b7f4 <__malloc_unlock>
 800b7b4:	e797      	b.n	800b6e6 <_malloc_r+0x22>
 800b7b6:	6025      	str	r5, [r4, #0]
 800b7b8:	e7dc      	b.n	800b774 <_malloc_r+0xb0>
 800b7ba:	605b      	str	r3, [r3, #4]
 800b7bc:	deff      	udf	#255	; 0xff
 800b7be:	bf00      	nop
 800b7c0:	200006f4 	.word	0x200006f4

0800b7c4 <__ascii_mbtowc>:
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	b901      	cbnz	r1, 800b7ca <__ascii_mbtowc+0x6>
 800b7c8:	a901      	add	r1, sp, #4
 800b7ca:	b142      	cbz	r2, 800b7de <__ascii_mbtowc+0x1a>
 800b7cc:	b14b      	cbz	r3, 800b7e2 <__ascii_mbtowc+0x1e>
 800b7ce:	7813      	ldrb	r3, [r2, #0]
 800b7d0:	600b      	str	r3, [r1, #0]
 800b7d2:	7812      	ldrb	r2, [r2, #0]
 800b7d4:	1e10      	subs	r0, r2, #0
 800b7d6:	bf18      	it	ne
 800b7d8:	2001      	movne	r0, #1
 800b7da:	b002      	add	sp, #8
 800b7dc:	4770      	bx	lr
 800b7de:	4610      	mov	r0, r2
 800b7e0:	e7fb      	b.n	800b7da <__ascii_mbtowc+0x16>
 800b7e2:	f06f 0001 	mvn.w	r0, #1
 800b7e6:	e7f8      	b.n	800b7da <__ascii_mbtowc+0x16>

0800b7e8 <__malloc_lock>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__malloc_lock+0x8>)
 800b7ea:	f7fe bd0c 	b.w	800a206 <__retarget_lock_acquire_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	200006f0 	.word	0x200006f0

0800b7f4 <__malloc_unlock>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__malloc_unlock+0x8>)
 800b7f6:	f7fe bd07 	b.w	800a208 <__retarget_lock_release_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	200006f0 	.word	0x200006f0

0800b800 <_Balloc>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	69c6      	ldr	r6, [r0, #28]
 800b804:	4604      	mov	r4, r0
 800b806:	460d      	mov	r5, r1
 800b808:	b976      	cbnz	r6, 800b828 <_Balloc+0x28>
 800b80a:	2010      	movs	r0, #16
 800b80c:	f7ff ff32 	bl	800b674 <malloc>
 800b810:	4602      	mov	r2, r0
 800b812:	61e0      	str	r0, [r4, #28]
 800b814:	b920      	cbnz	r0, 800b820 <_Balloc+0x20>
 800b816:	4b18      	ldr	r3, [pc, #96]	; (800b878 <_Balloc+0x78>)
 800b818:	4818      	ldr	r0, [pc, #96]	; (800b87c <_Balloc+0x7c>)
 800b81a:	216b      	movs	r1, #107	; 0x6b
 800b81c:	f000 feda 	bl	800c5d4 <__assert_func>
 800b820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b824:	6006      	str	r6, [r0, #0]
 800b826:	60c6      	str	r6, [r0, #12]
 800b828:	69e6      	ldr	r6, [r4, #28]
 800b82a:	68f3      	ldr	r3, [r6, #12]
 800b82c:	b183      	cbz	r3, 800b850 <_Balloc+0x50>
 800b82e:	69e3      	ldr	r3, [r4, #28]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b836:	b9b8      	cbnz	r0, 800b868 <_Balloc+0x68>
 800b838:	2101      	movs	r1, #1
 800b83a:	fa01 f605 	lsl.w	r6, r1, r5
 800b83e:	1d72      	adds	r2, r6, #5
 800b840:	0092      	lsls	r2, r2, #2
 800b842:	4620      	mov	r0, r4
 800b844:	f000 fee4 	bl	800c610 <_calloc_r>
 800b848:	b160      	cbz	r0, 800b864 <_Balloc+0x64>
 800b84a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b84e:	e00e      	b.n	800b86e <_Balloc+0x6e>
 800b850:	2221      	movs	r2, #33	; 0x21
 800b852:	2104      	movs	r1, #4
 800b854:	4620      	mov	r0, r4
 800b856:	f000 fedb 	bl	800c610 <_calloc_r>
 800b85a:	69e3      	ldr	r3, [r4, #28]
 800b85c:	60f0      	str	r0, [r6, #12]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e4      	bne.n	800b82e <_Balloc+0x2e>
 800b864:	2000      	movs	r0, #0
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	6802      	ldr	r2, [r0, #0]
 800b86a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b86e:	2300      	movs	r3, #0
 800b870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b874:	e7f7      	b.n	800b866 <_Balloc+0x66>
 800b876:	bf00      	nop
 800b878:	0800ced2 	.word	0x0800ced2
 800b87c:	0800cfb2 	.word	0x0800cfb2

0800b880 <_Bfree>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	69c6      	ldr	r6, [r0, #28]
 800b884:	4605      	mov	r5, r0
 800b886:	460c      	mov	r4, r1
 800b888:	b976      	cbnz	r6, 800b8a8 <_Bfree+0x28>
 800b88a:	2010      	movs	r0, #16
 800b88c:	f7ff fef2 	bl	800b674 <malloc>
 800b890:	4602      	mov	r2, r0
 800b892:	61e8      	str	r0, [r5, #28]
 800b894:	b920      	cbnz	r0, 800b8a0 <_Bfree+0x20>
 800b896:	4b09      	ldr	r3, [pc, #36]	; (800b8bc <_Bfree+0x3c>)
 800b898:	4809      	ldr	r0, [pc, #36]	; (800b8c0 <_Bfree+0x40>)
 800b89a:	218f      	movs	r1, #143	; 0x8f
 800b89c:	f000 fe9a 	bl	800c5d4 <__assert_func>
 800b8a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8a4:	6006      	str	r6, [r0, #0]
 800b8a6:	60c6      	str	r6, [r0, #12]
 800b8a8:	b13c      	cbz	r4, 800b8ba <_Bfree+0x3a>
 800b8aa:	69eb      	ldr	r3, [r5, #28]
 800b8ac:	6862      	ldr	r2, [r4, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8b4:	6021      	str	r1, [r4, #0]
 800b8b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}
 800b8bc:	0800ced2 	.word	0x0800ced2
 800b8c0:	0800cfb2 	.word	0x0800cfb2

0800b8c4 <__multadd>:
 800b8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c8:	690d      	ldr	r5, [r1, #16]
 800b8ca:	4607      	mov	r7, r0
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	461e      	mov	r6, r3
 800b8d0:	f101 0c14 	add.w	ip, r1, #20
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b8da:	b299      	uxth	r1, r3
 800b8dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b8e0:	0c1e      	lsrs	r6, r3, #16
 800b8e2:	0c0b      	lsrs	r3, r1, #16
 800b8e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b8e8:	b289      	uxth	r1, r1
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8f0:	4285      	cmp	r5, r0
 800b8f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b8f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8fa:	dcec      	bgt.n	800b8d6 <__multadd+0x12>
 800b8fc:	b30e      	cbz	r6, 800b942 <__multadd+0x7e>
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	42ab      	cmp	r3, r5
 800b902:	dc19      	bgt.n	800b938 <__multadd+0x74>
 800b904:	6861      	ldr	r1, [r4, #4]
 800b906:	4638      	mov	r0, r7
 800b908:	3101      	adds	r1, #1
 800b90a:	f7ff ff79 	bl	800b800 <_Balloc>
 800b90e:	4680      	mov	r8, r0
 800b910:	b928      	cbnz	r0, 800b91e <__multadd+0x5a>
 800b912:	4602      	mov	r2, r0
 800b914:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <__multadd+0x84>)
 800b916:	480d      	ldr	r0, [pc, #52]	; (800b94c <__multadd+0x88>)
 800b918:	21ba      	movs	r1, #186	; 0xba
 800b91a:	f000 fe5b 	bl	800c5d4 <__assert_func>
 800b91e:	6922      	ldr	r2, [r4, #16]
 800b920:	3202      	adds	r2, #2
 800b922:	f104 010c 	add.w	r1, r4, #12
 800b926:	0092      	lsls	r2, r2, #2
 800b928:	300c      	adds	r0, #12
 800b92a:	f7fe fc6e 	bl	800a20a <memcpy>
 800b92e:	4621      	mov	r1, r4
 800b930:	4638      	mov	r0, r7
 800b932:	f7ff ffa5 	bl	800b880 <_Bfree>
 800b936:	4644      	mov	r4, r8
 800b938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b93c:	3501      	adds	r5, #1
 800b93e:	615e      	str	r6, [r3, #20]
 800b940:	6125      	str	r5, [r4, #16]
 800b942:	4620      	mov	r0, r4
 800b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b948:	0800cf41 	.word	0x0800cf41
 800b94c:	0800cfb2 	.word	0x0800cfb2

0800b950 <__s2b>:
 800b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b954:	460c      	mov	r4, r1
 800b956:	4615      	mov	r5, r2
 800b958:	461f      	mov	r7, r3
 800b95a:	2209      	movs	r2, #9
 800b95c:	3308      	adds	r3, #8
 800b95e:	4606      	mov	r6, r0
 800b960:	fb93 f3f2 	sdiv	r3, r3, r2
 800b964:	2100      	movs	r1, #0
 800b966:	2201      	movs	r2, #1
 800b968:	429a      	cmp	r2, r3
 800b96a:	db09      	blt.n	800b980 <__s2b+0x30>
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff ff47 	bl	800b800 <_Balloc>
 800b972:	b940      	cbnz	r0, 800b986 <__s2b+0x36>
 800b974:	4602      	mov	r2, r0
 800b976:	4b19      	ldr	r3, [pc, #100]	; (800b9dc <__s2b+0x8c>)
 800b978:	4819      	ldr	r0, [pc, #100]	; (800b9e0 <__s2b+0x90>)
 800b97a:	21d3      	movs	r1, #211	; 0xd3
 800b97c:	f000 fe2a 	bl	800c5d4 <__assert_func>
 800b980:	0052      	lsls	r2, r2, #1
 800b982:	3101      	adds	r1, #1
 800b984:	e7f0      	b.n	800b968 <__s2b+0x18>
 800b986:	9b08      	ldr	r3, [sp, #32]
 800b988:	6143      	str	r3, [r0, #20]
 800b98a:	2d09      	cmp	r5, #9
 800b98c:	f04f 0301 	mov.w	r3, #1
 800b990:	6103      	str	r3, [r0, #16]
 800b992:	dd16      	ble.n	800b9c2 <__s2b+0x72>
 800b994:	f104 0909 	add.w	r9, r4, #9
 800b998:	46c8      	mov	r8, r9
 800b99a:	442c      	add	r4, r5
 800b99c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	3b30      	subs	r3, #48	; 0x30
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f7ff ff8c 	bl	800b8c4 <__multadd>
 800b9ac:	45a0      	cmp	r8, r4
 800b9ae:	d1f5      	bne.n	800b99c <__s2b+0x4c>
 800b9b0:	f1a5 0408 	sub.w	r4, r5, #8
 800b9b4:	444c      	add	r4, r9
 800b9b6:	1b2d      	subs	r5, r5, r4
 800b9b8:	1963      	adds	r3, r4, r5
 800b9ba:	42bb      	cmp	r3, r7
 800b9bc:	db04      	blt.n	800b9c8 <__s2b+0x78>
 800b9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c2:	340a      	adds	r4, #10
 800b9c4:	2509      	movs	r5, #9
 800b9c6:	e7f6      	b.n	800b9b6 <__s2b+0x66>
 800b9c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	3b30      	subs	r3, #48	; 0x30
 800b9d0:	220a      	movs	r2, #10
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f7ff ff76 	bl	800b8c4 <__multadd>
 800b9d8:	e7ee      	b.n	800b9b8 <__s2b+0x68>
 800b9da:	bf00      	nop
 800b9dc:	0800cf41 	.word	0x0800cf41
 800b9e0:	0800cfb2 	.word	0x0800cfb2

0800b9e4 <__hi0bits>:
 800b9e4:	0c03      	lsrs	r3, r0, #16
 800b9e6:	041b      	lsls	r3, r3, #16
 800b9e8:	b9d3      	cbnz	r3, 800ba20 <__hi0bits+0x3c>
 800b9ea:	0400      	lsls	r0, r0, #16
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9f2:	bf04      	itt	eq
 800b9f4:	0200      	lsleq	r0, r0, #8
 800b9f6:	3308      	addeq	r3, #8
 800b9f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9fc:	bf04      	itt	eq
 800b9fe:	0100      	lsleq	r0, r0, #4
 800ba00:	3304      	addeq	r3, #4
 800ba02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba06:	bf04      	itt	eq
 800ba08:	0080      	lsleq	r0, r0, #2
 800ba0a:	3302      	addeq	r3, #2
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	db05      	blt.n	800ba1c <__hi0bits+0x38>
 800ba10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba14:	f103 0301 	add.w	r3, r3, #1
 800ba18:	bf08      	it	eq
 800ba1a:	2320      	moveq	r3, #32
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	4770      	bx	lr
 800ba20:	2300      	movs	r3, #0
 800ba22:	e7e4      	b.n	800b9ee <__hi0bits+0xa>

0800ba24 <__lo0bits>:
 800ba24:	6803      	ldr	r3, [r0, #0]
 800ba26:	f013 0207 	ands.w	r2, r3, #7
 800ba2a:	d00c      	beq.n	800ba46 <__lo0bits+0x22>
 800ba2c:	07d9      	lsls	r1, r3, #31
 800ba2e:	d422      	bmi.n	800ba76 <__lo0bits+0x52>
 800ba30:	079a      	lsls	r2, r3, #30
 800ba32:	bf49      	itett	mi
 800ba34:	085b      	lsrmi	r3, r3, #1
 800ba36:	089b      	lsrpl	r3, r3, #2
 800ba38:	6003      	strmi	r3, [r0, #0]
 800ba3a:	2201      	movmi	r2, #1
 800ba3c:	bf5c      	itt	pl
 800ba3e:	6003      	strpl	r3, [r0, #0]
 800ba40:	2202      	movpl	r2, #2
 800ba42:	4610      	mov	r0, r2
 800ba44:	4770      	bx	lr
 800ba46:	b299      	uxth	r1, r3
 800ba48:	b909      	cbnz	r1, 800ba4e <__lo0bits+0x2a>
 800ba4a:	0c1b      	lsrs	r3, r3, #16
 800ba4c:	2210      	movs	r2, #16
 800ba4e:	b2d9      	uxtb	r1, r3
 800ba50:	b909      	cbnz	r1, 800ba56 <__lo0bits+0x32>
 800ba52:	3208      	adds	r2, #8
 800ba54:	0a1b      	lsrs	r3, r3, #8
 800ba56:	0719      	lsls	r1, r3, #28
 800ba58:	bf04      	itt	eq
 800ba5a:	091b      	lsreq	r3, r3, #4
 800ba5c:	3204      	addeq	r2, #4
 800ba5e:	0799      	lsls	r1, r3, #30
 800ba60:	bf04      	itt	eq
 800ba62:	089b      	lsreq	r3, r3, #2
 800ba64:	3202      	addeq	r2, #2
 800ba66:	07d9      	lsls	r1, r3, #31
 800ba68:	d403      	bmi.n	800ba72 <__lo0bits+0x4e>
 800ba6a:	085b      	lsrs	r3, r3, #1
 800ba6c:	f102 0201 	add.w	r2, r2, #1
 800ba70:	d003      	beq.n	800ba7a <__lo0bits+0x56>
 800ba72:	6003      	str	r3, [r0, #0]
 800ba74:	e7e5      	b.n	800ba42 <__lo0bits+0x1e>
 800ba76:	2200      	movs	r2, #0
 800ba78:	e7e3      	b.n	800ba42 <__lo0bits+0x1e>
 800ba7a:	2220      	movs	r2, #32
 800ba7c:	e7e1      	b.n	800ba42 <__lo0bits+0x1e>
	...

0800ba80 <__i2b>:
 800ba80:	b510      	push	{r4, lr}
 800ba82:	460c      	mov	r4, r1
 800ba84:	2101      	movs	r1, #1
 800ba86:	f7ff febb 	bl	800b800 <_Balloc>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	b928      	cbnz	r0, 800ba9a <__i2b+0x1a>
 800ba8e:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <__i2b+0x24>)
 800ba90:	4805      	ldr	r0, [pc, #20]	; (800baa8 <__i2b+0x28>)
 800ba92:	f240 1145 	movw	r1, #325	; 0x145
 800ba96:	f000 fd9d 	bl	800c5d4 <__assert_func>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	6144      	str	r4, [r0, #20]
 800ba9e:	6103      	str	r3, [r0, #16]
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	bf00      	nop
 800baa4:	0800cf41 	.word	0x0800cf41
 800baa8:	0800cfb2 	.word	0x0800cfb2

0800baac <__multiply>:
 800baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	4691      	mov	r9, r2
 800bab2:	690a      	ldr	r2, [r1, #16]
 800bab4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bab8:	429a      	cmp	r2, r3
 800baba:	bfb8      	it	lt
 800babc:	460b      	movlt	r3, r1
 800babe:	460c      	mov	r4, r1
 800bac0:	bfbc      	itt	lt
 800bac2:	464c      	movlt	r4, r9
 800bac4:	4699      	movlt	r9, r3
 800bac6:	6927      	ldr	r7, [r4, #16]
 800bac8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bacc:	68a3      	ldr	r3, [r4, #8]
 800bace:	6861      	ldr	r1, [r4, #4]
 800bad0:	eb07 060a 	add.w	r6, r7, sl
 800bad4:	42b3      	cmp	r3, r6
 800bad6:	b085      	sub	sp, #20
 800bad8:	bfb8      	it	lt
 800bada:	3101      	addlt	r1, #1
 800badc:	f7ff fe90 	bl	800b800 <_Balloc>
 800bae0:	b930      	cbnz	r0, 800baf0 <__multiply+0x44>
 800bae2:	4602      	mov	r2, r0
 800bae4:	4b44      	ldr	r3, [pc, #272]	; (800bbf8 <__multiply+0x14c>)
 800bae6:	4845      	ldr	r0, [pc, #276]	; (800bbfc <__multiply+0x150>)
 800bae8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800baec:	f000 fd72 	bl	800c5d4 <__assert_func>
 800baf0:	f100 0514 	add.w	r5, r0, #20
 800baf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800baf8:	462b      	mov	r3, r5
 800bafa:	2200      	movs	r2, #0
 800bafc:	4543      	cmp	r3, r8
 800bafe:	d321      	bcc.n	800bb44 <__multiply+0x98>
 800bb00:	f104 0314 	add.w	r3, r4, #20
 800bb04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb08:	f109 0314 	add.w	r3, r9, #20
 800bb0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb10:	9202      	str	r2, [sp, #8]
 800bb12:	1b3a      	subs	r2, r7, r4
 800bb14:	3a15      	subs	r2, #21
 800bb16:	f022 0203 	bic.w	r2, r2, #3
 800bb1a:	3204      	adds	r2, #4
 800bb1c:	f104 0115 	add.w	r1, r4, #21
 800bb20:	428f      	cmp	r7, r1
 800bb22:	bf38      	it	cc
 800bb24:	2204      	movcc	r2, #4
 800bb26:	9201      	str	r2, [sp, #4]
 800bb28:	9a02      	ldr	r2, [sp, #8]
 800bb2a:	9303      	str	r3, [sp, #12]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d80c      	bhi.n	800bb4a <__multiply+0x9e>
 800bb30:	2e00      	cmp	r6, #0
 800bb32:	dd03      	ble.n	800bb3c <__multiply+0x90>
 800bb34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d05b      	beq.n	800bbf4 <__multiply+0x148>
 800bb3c:	6106      	str	r6, [r0, #16]
 800bb3e:	b005      	add	sp, #20
 800bb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb44:	f843 2b04 	str.w	r2, [r3], #4
 800bb48:	e7d8      	b.n	800bafc <__multiply+0x50>
 800bb4a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb4e:	f1ba 0f00 	cmp.w	sl, #0
 800bb52:	d024      	beq.n	800bb9e <__multiply+0xf2>
 800bb54:	f104 0e14 	add.w	lr, r4, #20
 800bb58:	46a9      	mov	r9, r5
 800bb5a:	f04f 0c00 	mov.w	ip, #0
 800bb5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb62:	f8d9 1000 	ldr.w	r1, [r9]
 800bb66:	fa1f fb82 	uxth.w	fp, r2
 800bb6a:	b289      	uxth	r1, r1
 800bb6c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb74:	f8d9 2000 	ldr.w	r2, [r9]
 800bb78:	4461      	add	r1, ip
 800bb7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb7e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb86:	b289      	uxth	r1, r1
 800bb88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb8c:	4577      	cmp	r7, lr
 800bb8e:	f849 1b04 	str.w	r1, [r9], #4
 800bb92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb96:	d8e2      	bhi.n	800bb5e <__multiply+0xb2>
 800bb98:	9a01      	ldr	r2, [sp, #4]
 800bb9a:	f845 c002 	str.w	ip, [r5, r2]
 800bb9e:	9a03      	ldr	r2, [sp, #12]
 800bba0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bba4:	3304      	adds	r3, #4
 800bba6:	f1b9 0f00 	cmp.w	r9, #0
 800bbaa:	d021      	beq.n	800bbf0 <__multiply+0x144>
 800bbac:	6829      	ldr	r1, [r5, #0]
 800bbae:	f104 0c14 	add.w	ip, r4, #20
 800bbb2:	46ae      	mov	lr, r5
 800bbb4:	f04f 0a00 	mov.w	sl, #0
 800bbb8:	f8bc b000 	ldrh.w	fp, [ip]
 800bbbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bbc0:	fb09 220b 	mla	r2, r9, fp, r2
 800bbc4:	4452      	add	r2, sl
 800bbc6:	b289      	uxth	r1, r1
 800bbc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bbcc:	f84e 1b04 	str.w	r1, [lr], #4
 800bbd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bbd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbd8:	f8be 1000 	ldrh.w	r1, [lr]
 800bbdc:	fb09 110a 	mla	r1, r9, sl, r1
 800bbe0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bbe4:	4567      	cmp	r7, ip
 800bbe6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbea:	d8e5      	bhi.n	800bbb8 <__multiply+0x10c>
 800bbec:	9a01      	ldr	r2, [sp, #4]
 800bbee:	50a9      	str	r1, [r5, r2]
 800bbf0:	3504      	adds	r5, #4
 800bbf2:	e799      	b.n	800bb28 <__multiply+0x7c>
 800bbf4:	3e01      	subs	r6, #1
 800bbf6:	e79b      	b.n	800bb30 <__multiply+0x84>
 800bbf8:	0800cf41 	.word	0x0800cf41
 800bbfc:	0800cfb2 	.word	0x0800cfb2

0800bc00 <__pow5mult>:
 800bc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc04:	4615      	mov	r5, r2
 800bc06:	f012 0203 	ands.w	r2, r2, #3
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460f      	mov	r7, r1
 800bc0e:	d007      	beq.n	800bc20 <__pow5mult+0x20>
 800bc10:	4c25      	ldr	r4, [pc, #148]	; (800bca8 <__pow5mult+0xa8>)
 800bc12:	3a01      	subs	r2, #1
 800bc14:	2300      	movs	r3, #0
 800bc16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc1a:	f7ff fe53 	bl	800b8c4 <__multadd>
 800bc1e:	4607      	mov	r7, r0
 800bc20:	10ad      	asrs	r5, r5, #2
 800bc22:	d03d      	beq.n	800bca0 <__pow5mult+0xa0>
 800bc24:	69f4      	ldr	r4, [r6, #28]
 800bc26:	b97c      	cbnz	r4, 800bc48 <__pow5mult+0x48>
 800bc28:	2010      	movs	r0, #16
 800bc2a:	f7ff fd23 	bl	800b674 <malloc>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	61f0      	str	r0, [r6, #28]
 800bc32:	b928      	cbnz	r0, 800bc40 <__pow5mult+0x40>
 800bc34:	4b1d      	ldr	r3, [pc, #116]	; (800bcac <__pow5mult+0xac>)
 800bc36:	481e      	ldr	r0, [pc, #120]	; (800bcb0 <__pow5mult+0xb0>)
 800bc38:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bc3c:	f000 fcca 	bl	800c5d4 <__assert_func>
 800bc40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc44:	6004      	str	r4, [r0, #0]
 800bc46:	60c4      	str	r4, [r0, #12]
 800bc48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bc4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc50:	b94c      	cbnz	r4, 800bc66 <__pow5mult+0x66>
 800bc52:	f240 2171 	movw	r1, #625	; 0x271
 800bc56:	4630      	mov	r0, r6
 800bc58:	f7ff ff12 	bl	800ba80 <__i2b>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc62:	4604      	mov	r4, r0
 800bc64:	6003      	str	r3, [r0, #0]
 800bc66:	f04f 0900 	mov.w	r9, #0
 800bc6a:	07eb      	lsls	r3, r5, #31
 800bc6c:	d50a      	bpl.n	800bc84 <__pow5mult+0x84>
 800bc6e:	4639      	mov	r1, r7
 800bc70:	4622      	mov	r2, r4
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7ff ff1a 	bl	800baac <__multiply>
 800bc78:	4639      	mov	r1, r7
 800bc7a:	4680      	mov	r8, r0
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	f7ff fdff 	bl	800b880 <_Bfree>
 800bc82:	4647      	mov	r7, r8
 800bc84:	106d      	asrs	r5, r5, #1
 800bc86:	d00b      	beq.n	800bca0 <__pow5mult+0xa0>
 800bc88:	6820      	ldr	r0, [r4, #0]
 800bc8a:	b938      	cbnz	r0, 800bc9c <__pow5mult+0x9c>
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	4621      	mov	r1, r4
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7ff ff0b 	bl	800baac <__multiply>
 800bc96:	6020      	str	r0, [r4, #0]
 800bc98:	f8c0 9000 	str.w	r9, [r0]
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	e7e4      	b.n	800bc6a <__pow5mult+0x6a>
 800bca0:	4638      	mov	r0, r7
 800bca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bca6:	bf00      	nop
 800bca8:	0800d100 	.word	0x0800d100
 800bcac:	0800ced2 	.word	0x0800ced2
 800bcb0:	0800cfb2 	.word	0x0800cfb2

0800bcb4 <__lshift>:
 800bcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb8:	460c      	mov	r4, r1
 800bcba:	6849      	ldr	r1, [r1, #4]
 800bcbc:	6923      	ldr	r3, [r4, #16]
 800bcbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcc2:	68a3      	ldr	r3, [r4, #8]
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	4691      	mov	r9, r2
 800bcc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bccc:	f108 0601 	add.w	r6, r8, #1
 800bcd0:	42b3      	cmp	r3, r6
 800bcd2:	db0b      	blt.n	800bcec <__lshift+0x38>
 800bcd4:	4638      	mov	r0, r7
 800bcd6:	f7ff fd93 	bl	800b800 <_Balloc>
 800bcda:	4605      	mov	r5, r0
 800bcdc:	b948      	cbnz	r0, 800bcf2 <__lshift+0x3e>
 800bcde:	4602      	mov	r2, r0
 800bce0:	4b28      	ldr	r3, [pc, #160]	; (800bd84 <__lshift+0xd0>)
 800bce2:	4829      	ldr	r0, [pc, #164]	; (800bd88 <__lshift+0xd4>)
 800bce4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bce8:	f000 fc74 	bl	800c5d4 <__assert_func>
 800bcec:	3101      	adds	r1, #1
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	e7ee      	b.n	800bcd0 <__lshift+0x1c>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f100 0114 	add.w	r1, r0, #20
 800bcf8:	f100 0210 	add.w	r2, r0, #16
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	4553      	cmp	r3, sl
 800bd00:	db33      	blt.n	800bd6a <__lshift+0xb6>
 800bd02:	6920      	ldr	r0, [r4, #16]
 800bd04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd08:	f104 0314 	add.w	r3, r4, #20
 800bd0c:	f019 091f 	ands.w	r9, r9, #31
 800bd10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd18:	d02b      	beq.n	800bd72 <__lshift+0xbe>
 800bd1a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd1e:	468a      	mov	sl, r1
 800bd20:	2200      	movs	r2, #0
 800bd22:	6818      	ldr	r0, [r3, #0]
 800bd24:	fa00 f009 	lsl.w	r0, r0, r9
 800bd28:	4310      	orrs	r0, r2
 800bd2a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd32:	459c      	cmp	ip, r3
 800bd34:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd38:	d8f3      	bhi.n	800bd22 <__lshift+0x6e>
 800bd3a:	ebac 0304 	sub.w	r3, ip, r4
 800bd3e:	3b15      	subs	r3, #21
 800bd40:	f023 0303 	bic.w	r3, r3, #3
 800bd44:	3304      	adds	r3, #4
 800bd46:	f104 0015 	add.w	r0, r4, #21
 800bd4a:	4584      	cmp	ip, r0
 800bd4c:	bf38      	it	cc
 800bd4e:	2304      	movcc	r3, #4
 800bd50:	50ca      	str	r2, [r1, r3]
 800bd52:	b10a      	cbz	r2, 800bd58 <__lshift+0xa4>
 800bd54:	f108 0602 	add.w	r6, r8, #2
 800bd58:	3e01      	subs	r6, #1
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	612e      	str	r6, [r5, #16]
 800bd5e:	4621      	mov	r1, r4
 800bd60:	f7ff fd8e 	bl	800b880 <_Bfree>
 800bd64:	4628      	mov	r0, r5
 800bd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd6e:	3301      	adds	r3, #1
 800bd70:	e7c5      	b.n	800bcfe <__lshift+0x4a>
 800bd72:	3904      	subs	r1, #4
 800bd74:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd78:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd7c:	459c      	cmp	ip, r3
 800bd7e:	d8f9      	bhi.n	800bd74 <__lshift+0xc0>
 800bd80:	e7ea      	b.n	800bd58 <__lshift+0xa4>
 800bd82:	bf00      	nop
 800bd84:	0800cf41 	.word	0x0800cf41
 800bd88:	0800cfb2 	.word	0x0800cfb2

0800bd8c <__mcmp>:
 800bd8c:	b530      	push	{r4, r5, lr}
 800bd8e:	6902      	ldr	r2, [r0, #16]
 800bd90:	690c      	ldr	r4, [r1, #16]
 800bd92:	1b12      	subs	r2, r2, r4
 800bd94:	d10e      	bne.n	800bdb4 <__mcmp+0x28>
 800bd96:	f100 0314 	add.w	r3, r0, #20
 800bd9a:	3114      	adds	r1, #20
 800bd9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bda0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bda4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bda8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bdac:	42a5      	cmp	r5, r4
 800bdae:	d003      	beq.n	800bdb8 <__mcmp+0x2c>
 800bdb0:	d305      	bcc.n	800bdbe <__mcmp+0x32>
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	bd30      	pop	{r4, r5, pc}
 800bdb8:	4283      	cmp	r3, r0
 800bdba:	d3f3      	bcc.n	800bda4 <__mcmp+0x18>
 800bdbc:	e7fa      	b.n	800bdb4 <__mcmp+0x28>
 800bdbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc2:	e7f7      	b.n	800bdb4 <__mcmp+0x28>

0800bdc4 <__mdiff>:
 800bdc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	460c      	mov	r4, r1
 800bdca:	4606      	mov	r6, r0
 800bdcc:	4611      	mov	r1, r2
 800bdce:	4620      	mov	r0, r4
 800bdd0:	4690      	mov	r8, r2
 800bdd2:	f7ff ffdb 	bl	800bd8c <__mcmp>
 800bdd6:	1e05      	subs	r5, r0, #0
 800bdd8:	d110      	bne.n	800bdfc <__mdiff+0x38>
 800bdda:	4629      	mov	r1, r5
 800bddc:	4630      	mov	r0, r6
 800bdde:	f7ff fd0f 	bl	800b800 <_Balloc>
 800bde2:	b930      	cbnz	r0, 800bdf2 <__mdiff+0x2e>
 800bde4:	4b3a      	ldr	r3, [pc, #232]	; (800bed0 <__mdiff+0x10c>)
 800bde6:	4602      	mov	r2, r0
 800bde8:	f240 2137 	movw	r1, #567	; 0x237
 800bdec:	4839      	ldr	r0, [pc, #228]	; (800bed4 <__mdiff+0x110>)
 800bdee:	f000 fbf1 	bl	800c5d4 <__assert_func>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfc:	bfa4      	itt	ge
 800bdfe:	4643      	movge	r3, r8
 800be00:	46a0      	movge	r8, r4
 800be02:	4630      	mov	r0, r6
 800be04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be08:	bfa6      	itte	ge
 800be0a:	461c      	movge	r4, r3
 800be0c:	2500      	movge	r5, #0
 800be0e:	2501      	movlt	r5, #1
 800be10:	f7ff fcf6 	bl	800b800 <_Balloc>
 800be14:	b920      	cbnz	r0, 800be20 <__mdiff+0x5c>
 800be16:	4b2e      	ldr	r3, [pc, #184]	; (800bed0 <__mdiff+0x10c>)
 800be18:	4602      	mov	r2, r0
 800be1a:	f240 2145 	movw	r1, #581	; 0x245
 800be1e:	e7e5      	b.n	800bdec <__mdiff+0x28>
 800be20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be24:	6926      	ldr	r6, [r4, #16]
 800be26:	60c5      	str	r5, [r0, #12]
 800be28:	f104 0914 	add.w	r9, r4, #20
 800be2c:	f108 0514 	add.w	r5, r8, #20
 800be30:	f100 0e14 	add.w	lr, r0, #20
 800be34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800be38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be3c:	f108 0210 	add.w	r2, r8, #16
 800be40:	46f2      	mov	sl, lr
 800be42:	2100      	movs	r1, #0
 800be44:	f859 3b04 	ldr.w	r3, [r9], #4
 800be48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be4c:	fa11 f88b 	uxtah	r8, r1, fp
 800be50:	b299      	uxth	r1, r3
 800be52:	0c1b      	lsrs	r3, r3, #16
 800be54:	eba8 0801 	sub.w	r8, r8, r1
 800be58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be5c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be60:	fa1f f888 	uxth.w	r8, r8
 800be64:	1419      	asrs	r1, r3, #16
 800be66:	454e      	cmp	r6, r9
 800be68:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be6c:	f84a 3b04 	str.w	r3, [sl], #4
 800be70:	d8e8      	bhi.n	800be44 <__mdiff+0x80>
 800be72:	1b33      	subs	r3, r6, r4
 800be74:	3b15      	subs	r3, #21
 800be76:	f023 0303 	bic.w	r3, r3, #3
 800be7a:	3304      	adds	r3, #4
 800be7c:	3415      	adds	r4, #21
 800be7e:	42a6      	cmp	r6, r4
 800be80:	bf38      	it	cc
 800be82:	2304      	movcc	r3, #4
 800be84:	441d      	add	r5, r3
 800be86:	4473      	add	r3, lr
 800be88:	469e      	mov	lr, r3
 800be8a:	462e      	mov	r6, r5
 800be8c:	4566      	cmp	r6, ip
 800be8e:	d30e      	bcc.n	800beae <__mdiff+0xea>
 800be90:	f10c 0203 	add.w	r2, ip, #3
 800be94:	1b52      	subs	r2, r2, r5
 800be96:	f022 0203 	bic.w	r2, r2, #3
 800be9a:	3d03      	subs	r5, #3
 800be9c:	45ac      	cmp	ip, r5
 800be9e:	bf38      	it	cc
 800bea0:	2200      	movcc	r2, #0
 800bea2:	4413      	add	r3, r2
 800bea4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bea8:	b17a      	cbz	r2, 800beca <__mdiff+0x106>
 800beaa:	6107      	str	r7, [r0, #16]
 800beac:	e7a4      	b.n	800bdf8 <__mdiff+0x34>
 800beae:	f856 8b04 	ldr.w	r8, [r6], #4
 800beb2:	fa11 f288 	uxtah	r2, r1, r8
 800beb6:	1414      	asrs	r4, r2, #16
 800beb8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bebc:	b292      	uxth	r2, r2
 800bebe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bec2:	f84e 2b04 	str.w	r2, [lr], #4
 800bec6:	1421      	asrs	r1, r4, #16
 800bec8:	e7e0      	b.n	800be8c <__mdiff+0xc8>
 800beca:	3f01      	subs	r7, #1
 800becc:	e7ea      	b.n	800bea4 <__mdiff+0xe0>
 800bece:	bf00      	nop
 800bed0:	0800cf41 	.word	0x0800cf41
 800bed4:	0800cfb2 	.word	0x0800cfb2

0800bed8 <__ulp>:
 800bed8:	b082      	sub	sp, #8
 800beda:	ed8d 0b00 	vstr	d0, [sp]
 800bede:	9a01      	ldr	r2, [sp, #4]
 800bee0:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <__ulp+0x48>)
 800bee2:	4013      	ands	r3, r2
 800bee4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dc08      	bgt.n	800befe <__ulp+0x26>
 800beec:	425b      	negs	r3, r3
 800beee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bef2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bef6:	da04      	bge.n	800bf02 <__ulp+0x2a>
 800bef8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800befc:	4113      	asrs	r3, r2
 800befe:	2200      	movs	r2, #0
 800bf00:	e008      	b.n	800bf14 <__ulp+0x3c>
 800bf02:	f1a2 0314 	sub.w	r3, r2, #20
 800bf06:	2b1e      	cmp	r3, #30
 800bf08:	bfda      	itte	le
 800bf0a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bf0e:	40da      	lsrle	r2, r3
 800bf10:	2201      	movgt	r2, #1
 800bf12:	2300      	movs	r3, #0
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	ec41 0b10 	vmov	d0, r0, r1
 800bf1c:	b002      	add	sp, #8
 800bf1e:	4770      	bx	lr
 800bf20:	7ff00000 	.word	0x7ff00000

0800bf24 <__b2d>:
 800bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf28:	6906      	ldr	r6, [r0, #16]
 800bf2a:	f100 0814 	add.w	r8, r0, #20
 800bf2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bf32:	1f37      	subs	r7, r6, #4
 800bf34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf38:	4610      	mov	r0, r2
 800bf3a:	f7ff fd53 	bl	800b9e4 <__hi0bits>
 800bf3e:	f1c0 0320 	rsb	r3, r0, #32
 800bf42:	280a      	cmp	r0, #10
 800bf44:	600b      	str	r3, [r1, #0]
 800bf46:	491b      	ldr	r1, [pc, #108]	; (800bfb4 <__b2d+0x90>)
 800bf48:	dc15      	bgt.n	800bf76 <__b2d+0x52>
 800bf4a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bf4e:	fa22 f30c 	lsr.w	r3, r2, ip
 800bf52:	45b8      	cmp	r8, r7
 800bf54:	ea43 0501 	orr.w	r5, r3, r1
 800bf58:	bf34      	ite	cc
 800bf5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf5e:	2300      	movcs	r3, #0
 800bf60:	3015      	adds	r0, #21
 800bf62:	fa02 f000 	lsl.w	r0, r2, r0
 800bf66:	fa23 f30c 	lsr.w	r3, r3, ip
 800bf6a:	4303      	orrs	r3, r0
 800bf6c:	461c      	mov	r4, r3
 800bf6e:	ec45 4b10 	vmov	d0, r4, r5
 800bf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf76:	45b8      	cmp	r8, r7
 800bf78:	bf3a      	itte	cc
 800bf7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf7e:	f1a6 0708 	subcc.w	r7, r6, #8
 800bf82:	2300      	movcs	r3, #0
 800bf84:	380b      	subs	r0, #11
 800bf86:	d012      	beq.n	800bfae <__b2d+0x8a>
 800bf88:	f1c0 0120 	rsb	r1, r0, #32
 800bf8c:	fa23 f401 	lsr.w	r4, r3, r1
 800bf90:	4082      	lsls	r2, r0
 800bf92:	4322      	orrs	r2, r4
 800bf94:	4547      	cmp	r7, r8
 800bf96:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bf9a:	bf8c      	ite	hi
 800bf9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bfa0:	2200      	movls	r2, #0
 800bfa2:	4083      	lsls	r3, r0
 800bfa4:	40ca      	lsrs	r2, r1
 800bfa6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	e7de      	b.n	800bf6c <__b2d+0x48>
 800bfae:	ea42 0501 	orr.w	r5, r2, r1
 800bfb2:	e7db      	b.n	800bf6c <__b2d+0x48>
 800bfb4:	3ff00000 	.word	0x3ff00000

0800bfb8 <__d2b>:
 800bfb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfbc:	460f      	mov	r7, r1
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	ec59 8b10 	vmov	r8, r9, d0
 800bfc4:	4616      	mov	r6, r2
 800bfc6:	f7ff fc1b 	bl	800b800 <_Balloc>
 800bfca:	4604      	mov	r4, r0
 800bfcc:	b930      	cbnz	r0, 800bfdc <__d2b+0x24>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	4b24      	ldr	r3, [pc, #144]	; (800c064 <__d2b+0xac>)
 800bfd2:	4825      	ldr	r0, [pc, #148]	; (800c068 <__d2b+0xb0>)
 800bfd4:	f240 310f 	movw	r1, #783	; 0x30f
 800bfd8:	f000 fafc 	bl	800c5d4 <__assert_func>
 800bfdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfe4:	bb2d      	cbnz	r5, 800c032 <__d2b+0x7a>
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	f1b8 0300 	subs.w	r3, r8, #0
 800bfec:	d026      	beq.n	800c03c <__d2b+0x84>
 800bfee:	4668      	mov	r0, sp
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	f7ff fd17 	bl	800ba24 <__lo0bits>
 800bff6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bffa:	b1e8      	cbz	r0, 800c038 <__d2b+0x80>
 800bffc:	f1c0 0320 	rsb	r3, r0, #32
 800c000:	fa02 f303 	lsl.w	r3, r2, r3
 800c004:	430b      	orrs	r3, r1
 800c006:	40c2      	lsrs	r2, r0
 800c008:	6163      	str	r3, [r4, #20]
 800c00a:	9201      	str	r2, [sp, #4]
 800c00c:	9b01      	ldr	r3, [sp, #4]
 800c00e:	61a3      	str	r3, [r4, #24]
 800c010:	2b00      	cmp	r3, #0
 800c012:	bf14      	ite	ne
 800c014:	2202      	movne	r2, #2
 800c016:	2201      	moveq	r2, #1
 800c018:	6122      	str	r2, [r4, #16]
 800c01a:	b1bd      	cbz	r5, 800c04c <__d2b+0x94>
 800c01c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c020:	4405      	add	r5, r0
 800c022:	603d      	str	r5, [r7, #0]
 800c024:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c028:	6030      	str	r0, [r6, #0]
 800c02a:	4620      	mov	r0, r4
 800c02c:	b003      	add	sp, #12
 800c02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c036:	e7d6      	b.n	800bfe6 <__d2b+0x2e>
 800c038:	6161      	str	r1, [r4, #20]
 800c03a:	e7e7      	b.n	800c00c <__d2b+0x54>
 800c03c:	a801      	add	r0, sp, #4
 800c03e:	f7ff fcf1 	bl	800ba24 <__lo0bits>
 800c042:	9b01      	ldr	r3, [sp, #4]
 800c044:	6163      	str	r3, [r4, #20]
 800c046:	3020      	adds	r0, #32
 800c048:	2201      	movs	r2, #1
 800c04a:	e7e5      	b.n	800c018 <__d2b+0x60>
 800c04c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c054:	6038      	str	r0, [r7, #0]
 800c056:	6918      	ldr	r0, [r3, #16]
 800c058:	f7ff fcc4 	bl	800b9e4 <__hi0bits>
 800c05c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c060:	e7e2      	b.n	800c028 <__d2b+0x70>
 800c062:	bf00      	nop
 800c064:	0800cf41 	.word	0x0800cf41
 800c068:	0800cfb2 	.word	0x0800cfb2

0800c06c <__ratio>:
 800c06c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c070:	4688      	mov	r8, r1
 800c072:	4669      	mov	r1, sp
 800c074:	4681      	mov	r9, r0
 800c076:	f7ff ff55 	bl	800bf24 <__b2d>
 800c07a:	a901      	add	r1, sp, #4
 800c07c:	4640      	mov	r0, r8
 800c07e:	ec55 4b10 	vmov	r4, r5, d0
 800c082:	f7ff ff4f 	bl	800bf24 <__b2d>
 800c086:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c08a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c08e:	eba3 0c02 	sub.w	ip, r3, r2
 800c092:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c096:	1a9b      	subs	r3, r3, r2
 800c098:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c09c:	ec51 0b10 	vmov	r0, r1, d0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	bfd6      	itet	le
 800c0a4:	460a      	movle	r2, r1
 800c0a6:	462a      	movgt	r2, r5
 800c0a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c0ac:	468b      	mov	fp, r1
 800c0ae:	462f      	mov	r7, r5
 800c0b0:	bfd4      	ite	le
 800c0b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c0b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	ee10 2a10 	vmov	r2, s0
 800c0c0:	465b      	mov	r3, fp
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fbe2 	bl	800088c <__aeabi_ddiv>
 800c0c8:	ec41 0b10 	vmov	d0, r0, r1
 800c0cc:	b003      	add	sp, #12
 800c0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0d2 <__copybits>:
 800c0d2:	3901      	subs	r1, #1
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	1149      	asrs	r1, r1, #5
 800c0d8:	6914      	ldr	r4, [r2, #16]
 800c0da:	3101      	adds	r1, #1
 800c0dc:	f102 0314 	add.w	r3, r2, #20
 800c0e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0e8:	1f05      	subs	r5, r0, #4
 800c0ea:	42a3      	cmp	r3, r4
 800c0ec:	d30c      	bcc.n	800c108 <__copybits+0x36>
 800c0ee:	1aa3      	subs	r3, r4, r2
 800c0f0:	3b11      	subs	r3, #17
 800c0f2:	f023 0303 	bic.w	r3, r3, #3
 800c0f6:	3211      	adds	r2, #17
 800c0f8:	42a2      	cmp	r2, r4
 800c0fa:	bf88      	it	hi
 800c0fc:	2300      	movhi	r3, #0
 800c0fe:	4418      	add	r0, r3
 800c100:	2300      	movs	r3, #0
 800c102:	4288      	cmp	r0, r1
 800c104:	d305      	bcc.n	800c112 <__copybits+0x40>
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	f853 6b04 	ldr.w	r6, [r3], #4
 800c10c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c110:	e7eb      	b.n	800c0ea <__copybits+0x18>
 800c112:	f840 3b04 	str.w	r3, [r0], #4
 800c116:	e7f4      	b.n	800c102 <__copybits+0x30>

0800c118 <__any_on>:
 800c118:	f100 0214 	add.w	r2, r0, #20
 800c11c:	6900      	ldr	r0, [r0, #16]
 800c11e:	114b      	asrs	r3, r1, #5
 800c120:	4298      	cmp	r0, r3
 800c122:	b510      	push	{r4, lr}
 800c124:	db11      	blt.n	800c14a <__any_on+0x32>
 800c126:	dd0a      	ble.n	800c13e <__any_on+0x26>
 800c128:	f011 011f 	ands.w	r1, r1, #31
 800c12c:	d007      	beq.n	800c13e <__any_on+0x26>
 800c12e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c132:	fa24 f001 	lsr.w	r0, r4, r1
 800c136:	fa00 f101 	lsl.w	r1, r0, r1
 800c13a:	428c      	cmp	r4, r1
 800c13c:	d10b      	bne.n	800c156 <__any_on+0x3e>
 800c13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c142:	4293      	cmp	r3, r2
 800c144:	d803      	bhi.n	800c14e <__any_on+0x36>
 800c146:	2000      	movs	r0, #0
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	4603      	mov	r3, r0
 800c14c:	e7f7      	b.n	800c13e <__any_on+0x26>
 800c14e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c152:	2900      	cmp	r1, #0
 800c154:	d0f5      	beq.n	800c142 <__any_on+0x2a>
 800c156:	2001      	movs	r0, #1
 800c158:	e7f6      	b.n	800c148 <__any_on+0x30>

0800c15a <__ascii_wctomb>:
 800c15a:	b149      	cbz	r1, 800c170 <__ascii_wctomb+0x16>
 800c15c:	2aff      	cmp	r2, #255	; 0xff
 800c15e:	bf85      	ittet	hi
 800c160:	238a      	movhi	r3, #138	; 0x8a
 800c162:	6003      	strhi	r3, [r0, #0]
 800c164:	700a      	strbls	r2, [r1, #0]
 800c166:	f04f 30ff 	movhi.w	r0, #4294967295
 800c16a:	bf98      	it	ls
 800c16c:	2001      	movls	r0, #1
 800c16e:	4770      	bx	lr
 800c170:	4608      	mov	r0, r1
 800c172:	4770      	bx	lr

0800c174 <__ssputs_r>:
 800c174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c178:	688e      	ldr	r6, [r1, #8]
 800c17a:	461f      	mov	r7, r3
 800c17c:	42be      	cmp	r6, r7
 800c17e:	680b      	ldr	r3, [r1, #0]
 800c180:	4682      	mov	sl, r0
 800c182:	460c      	mov	r4, r1
 800c184:	4690      	mov	r8, r2
 800c186:	d82c      	bhi.n	800c1e2 <__ssputs_r+0x6e>
 800c188:	898a      	ldrh	r2, [r1, #12]
 800c18a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c18e:	d026      	beq.n	800c1de <__ssputs_r+0x6a>
 800c190:	6965      	ldr	r5, [r4, #20]
 800c192:	6909      	ldr	r1, [r1, #16]
 800c194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c198:	eba3 0901 	sub.w	r9, r3, r1
 800c19c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1a0:	1c7b      	adds	r3, r7, #1
 800c1a2:	444b      	add	r3, r9
 800c1a4:	106d      	asrs	r5, r5, #1
 800c1a6:	429d      	cmp	r5, r3
 800c1a8:	bf38      	it	cc
 800c1aa:	461d      	movcc	r5, r3
 800c1ac:	0553      	lsls	r3, r2, #21
 800c1ae:	d527      	bpl.n	800c200 <__ssputs_r+0x8c>
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	f7ff fa87 	bl	800b6c4 <_malloc_r>
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	b360      	cbz	r0, 800c214 <__ssputs_r+0xa0>
 800c1ba:	6921      	ldr	r1, [r4, #16]
 800c1bc:	464a      	mov	r2, r9
 800c1be:	f7fe f824 	bl	800a20a <memcpy>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1cc:	81a3      	strh	r3, [r4, #12]
 800c1ce:	6126      	str	r6, [r4, #16]
 800c1d0:	6165      	str	r5, [r4, #20]
 800c1d2:	444e      	add	r6, r9
 800c1d4:	eba5 0509 	sub.w	r5, r5, r9
 800c1d8:	6026      	str	r6, [r4, #0]
 800c1da:	60a5      	str	r5, [r4, #8]
 800c1dc:	463e      	mov	r6, r7
 800c1de:	42be      	cmp	r6, r7
 800c1e0:	d900      	bls.n	800c1e4 <__ssputs_r+0x70>
 800c1e2:	463e      	mov	r6, r7
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	4641      	mov	r1, r8
 800c1ea:	f000 f9c9 	bl	800c580 <memmove>
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	1b9b      	subs	r3, r3, r6
 800c1f2:	60a3      	str	r3, [r4, #8]
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	4433      	add	r3, r6
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c200:	462a      	mov	r2, r5
 800c202:	f000 fa1b 	bl	800c63c <_realloc_r>
 800c206:	4606      	mov	r6, r0
 800c208:	2800      	cmp	r0, #0
 800c20a:	d1e0      	bne.n	800c1ce <__ssputs_r+0x5a>
 800c20c:	6921      	ldr	r1, [r4, #16]
 800c20e:	4650      	mov	r0, sl
 800c210:	f7fe fe8c 	bl	800af2c <_free_r>
 800c214:	230c      	movs	r3, #12
 800c216:	f8ca 3000 	str.w	r3, [sl]
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	f04f 30ff 	mov.w	r0, #4294967295
 800c226:	e7e9      	b.n	800c1fc <__ssputs_r+0x88>

0800c228 <_svfiprintf_r>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	4698      	mov	r8, r3
 800c22e:	898b      	ldrh	r3, [r1, #12]
 800c230:	061b      	lsls	r3, r3, #24
 800c232:	b09d      	sub	sp, #116	; 0x74
 800c234:	4607      	mov	r7, r0
 800c236:	460d      	mov	r5, r1
 800c238:	4614      	mov	r4, r2
 800c23a:	d50e      	bpl.n	800c25a <_svfiprintf_r+0x32>
 800c23c:	690b      	ldr	r3, [r1, #16]
 800c23e:	b963      	cbnz	r3, 800c25a <_svfiprintf_r+0x32>
 800c240:	2140      	movs	r1, #64	; 0x40
 800c242:	f7ff fa3f 	bl	800b6c4 <_malloc_r>
 800c246:	6028      	str	r0, [r5, #0]
 800c248:	6128      	str	r0, [r5, #16]
 800c24a:	b920      	cbnz	r0, 800c256 <_svfiprintf_r+0x2e>
 800c24c:	230c      	movs	r3, #12
 800c24e:	603b      	str	r3, [r7, #0]
 800c250:	f04f 30ff 	mov.w	r0, #4294967295
 800c254:	e0d0      	b.n	800c3f8 <_svfiprintf_r+0x1d0>
 800c256:	2340      	movs	r3, #64	; 0x40
 800c258:	616b      	str	r3, [r5, #20]
 800c25a:	2300      	movs	r3, #0
 800c25c:	9309      	str	r3, [sp, #36]	; 0x24
 800c25e:	2320      	movs	r3, #32
 800c260:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c264:	f8cd 800c 	str.w	r8, [sp, #12]
 800c268:	2330      	movs	r3, #48	; 0x30
 800c26a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c410 <_svfiprintf_r+0x1e8>
 800c26e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c272:	f04f 0901 	mov.w	r9, #1
 800c276:	4623      	mov	r3, r4
 800c278:	469a      	mov	sl, r3
 800c27a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c27e:	b10a      	cbz	r2, 800c284 <_svfiprintf_r+0x5c>
 800c280:	2a25      	cmp	r2, #37	; 0x25
 800c282:	d1f9      	bne.n	800c278 <_svfiprintf_r+0x50>
 800c284:	ebba 0b04 	subs.w	fp, sl, r4
 800c288:	d00b      	beq.n	800c2a2 <_svfiprintf_r+0x7a>
 800c28a:	465b      	mov	r3, fp
 800c28c:	4622      	mov	r2, r4
 800c28e:	4629      	mov	r1, r5
 800c290:	4638      	mov	r0, r7
 800c292:	f7ff ff6f 	bl	800c174 <__ssputs_r>
 800c296:	3001      	adds	r0, #1
 800c298:	f000 80a9 	beq.w	800c3ee <_svfiprintf_r+0x1c6>
 800c29c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c29e:	445a      	add	r2, fp
 800c2a0:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 80a1 	beq.w	800c3ee <_svfiprintf_r+0x1c6>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b6:	f10a 0a01 	add.w	sl, sl, #1
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	9307      	str	r3, [sp, #28]
 800c2be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2c2:	931a      	str	r3, [sp, #104]	; 0x68
 800c2c4:	4654      	mov	r4, sl
 800c2c6:	2205      	movs	r2, #5
 800c2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2cc:	4850      	ldr	r0, [pc, #320]	; (800c410 <_svfiprintf_r+0x1e8>)
 800c2ce:	f7f3 ff9f 	bl	8000210 <memchr>
 800c2d2:	9a04      	ldr	r2, [sp, #16]
 800c2d4:	b9d8      	cbnz	r0, 800c30e <_svfiprintf_r+0xe6>
 800c2d6:	06d0      	lsls	r0, r2, #27
 800c2d8:	bf44      	itt	mi
 800c2da:	2320      	movmi	r3, #32
 800c2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e0:	0711      	lsls	r1, r2, #28
 800c2e2:	bf44      	itt	mi
 800c2e4:	232b      	movmi	r3, #43	; 0x2b
 800c2e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f0:	d015      	beq.n	800c31e <_svfiprintf_r+0xf6>
 800c2f2:	9a07      	ldr	r2, [sp, #28]
 800c2f4:	4654      	mov	r4, sl
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	f04f 0c0a 	mov.w	ip, #10
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c302:	3b30      	subs	r3, #48	; 0x30
 800c304:	2b09      	cmp	r3, #9
 800c306:	d94d      	bls.n	800c3a4 <_svfiprintf_r+0x17c>
 800c308:	b1b0      	cbz	r0, 800c338 <_svfiprintf_r+0x110>
 800c30a:	9207      	str	r2, [sp, #28]
 800c30c:	e014      	b.n	800c338 <_svfiprintf_r+0x110>
 800c30e:	eba0 0308 	sub.w	r3, r0, r8
 800c312:	fa09 f303 	lsl.w	r3, r9, r3
 800c316:	4313      	orrs	r3, r2
 800c318:	9304      	str	r3, [sp, #16]
 800c31a:	46a2      	mov	sl, r4
 800c31c:	e7d2      	b.n	800c2c4 <_svfiprintf_r+0x9c>
 800c31e:	9b03      	ldr	r3, [sp, #12]
 800c320:	1d19      	adds	r1, r3, #4
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	9103      	str	r1, [sp, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	bfbb      	ittet	lt
 800c32a:	425b      	neglt	r3, r3
 800c32c:	f042 0202 	orrlt.w	r2, r2, #2
 800c330:	9307      	strge	r3, [sp, #28]
 800c332:	9307      	strlt	r3, [sp, #28]
 800c334:	bfb8      	it	lt
 800c336:	9204      	strlt	r2, [sp, #16]
 800c338:	7823      	ldrb	r3, [r4, #0]
 800c33a:	2b2e      	cmp	r3, #46	; 0x2e
 800c33c:	d10c      	bne.n	800c358 <_svfiprintf_r+0x130>
 800c33e:	7863      	ldrb	r3, [r4, #1]
 800c340:	2b2a      	cmp	r3, #42	; 0x2a
 800c342:	d134      	bne.n	800c3ae <_svfiprintf_r+0x186>
 800c344:	9b03      	ldr	r3, [sp, #12]
 800c346:	1d1a      	adds	r2, r3, #4
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	9203      	str	r2, [sp, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bfb8      	it	lt
 800c350:	f04f 33ff 	movlt.w	r3, #4294967295
 800c354:	3402      	adds	r4, #2
 800c356:	9305      	str	r3, [sp, #20]
 800c358:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c420 <_svfiprintf_r+0x1f8>
 800c35c:	7821      	ldrb	r1, [r4, #0]
 800c35e:	2203      	movs	r2, #3
 800c360:	4650      	mov	r0, sl
 800c362:	f7f3 ff55 	bl	8000210 <memchr>
 800c366:	b138      	cbz	r0, 800c378 <_svfiprintf_r+0x150>
 800c368:	9b04      	ldr	r3, [sp, #16]
 800c36a:	eba0 000a 	sub.w	r0, r0, sl
 800c36e:	2240      	movs	r2, #64	; 0x40
 800c370:	4082      	lsls	r2, r0
 800c372:	4313      	orrs	r3, r2
 800c374:	3401      	adds	r4, #1
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37c:	4825      	ldr	r0, [pc, #148]	; (800c414 <_svfiprintf_r+0x1ec>)
 800c37e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c382:	2206      	movs	r2, #6
 800c384:	f7f3 ff44 	bl	8000210 <memchr>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d038      	beq.n	800c3fe <_svfiprintf_r+0x1d6>
 800c38c:	4b22      	ldr	r3, [pc, #136]	; (800c418 <_svfiprintf_r+0x1f0>)
 800c38e:	bb1b      	cbnz	r3, 800c3d8 <_svfiprintf_r+0x1b0>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	3307      	adds	r3, #7
 800c394:	f023 0307 	bic.w	r3, r3, #7
 800c398:	3308      	adds	r3, #8
 800c39a:	9303      	str	r3, [sp, #12]
 800c39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39e:	4433      	add	r3, r6
 800c3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a2:	e768      	b.n	800c276 <_svfiprintf_r+0x4e>
 800c3a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	2001      	movs	r0, #1
 800c3ac:	e7a6      	b.n	800c2fc <_svfiprintf_r+0xd4>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	3401      	adds	r4, #1
 800c3b2:	9305      	str	r3, [sp, #20]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	f04f 0c0a 	mov.w	ip, #10
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3c0:	3a30      	subs	r2, #48	; 0x30
 800c3c2:	2a09      	cmp	r2, #9
 800c3c4:	d903      	bls.n	800c3ce <_svfiprintf_r+0x1a6>
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0c6      	beq.n	800c358 <_svfiprintf_r+0x130>
 800c3ca:	9105      	str	r1, [sp, #20]
 800c3cc:	e7c4      	b.n	800c358 <_svfiprintf_r+0x130>
 800c3ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e7f0      	b.n	800c3ba <_svfiprintf_r+0x192>
 800c3d8:	ab03      	add	r3, sp, #12
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	462a      	mov	r2, r5
 800c3de:	4b0f      	ldr	r3, [pc, #60]	; (800c41c <_svfiprintf_r+0x1f4>)
 800c3e0:	a904      	add	r1, sp, #16
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	f7fd f95c 	bl	80096a0 <_printf_float>
 800c3e8:	1c42      	adds	r2, r0, #1
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	d1d6      	bne.n	800c39c <_svfiprintf_r+0x174>
 800c3ee:	89ab      	ldrh	r3, [r5, #12]
 800c3f0:	065b      	lsls	r3, r3, #25
 800c3f2:	f53f af2d 	bmi.w	800c250 <_svfiprintf_r+0x28>
 800c3f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3f8:	b01d      	add	sp, #116	; 0x74
 800c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	ab03      	add	r3, sp, #12
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	462a      	mov	r2, r5
 800c404:	4b05      	ldr	r3, [pc, #20]	; (800c41c <_svfiprintf_r+0x1f4>)
 800c406:	a904      	add	r1, sp, #16
 800c408:	4638      	mov	r0, r7
 800c40a:	f7fd fbed 	bl	8009be8 <_printf_i>
 800c40e:	e7eb      	b.n	800c3e8 <_svfiprintf_r+0x1c0>
 800c410:	0800d10c 	.word	0x0800d10c
 800c414:	0800d116 	.word	0x0800d116
 800c418:	080096a1 	.word	0x080096a1
 800c41c:	0800c175 	.word	0x0800c175
 800c420:	0800d112 	.word	0x0800d112

0800c424 <__sflush_r>:
 800c424:	898a      	ldrh	r2, [r1, #12]
 800c426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c42a:	4605      	mov	r5, r0
 800c42c:	0710      	lsls	r0, r2, #28
 800c42e:	460c      	mov	r4, r1
 800c430:	d458      	bmi.n	800c4e4 <__sflush_r+0xc0>
 800c432:	684b      	ldr	r3, [r1, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	dc05      	bgt.n	800c444 <__sflush_r+0x20>
 800c438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	dc02      	bgt.n	800c444 <__sflush_r+0x20>
 800c43e:	2000      	movs	r0, #0
 800c440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c446:	2e00      	cmp	r6, #0
 800c448:	d0f9      	beq.n	800c43e <__sflush_r+0x1a>
 800c44a:	2300      	movs	r3, #0
 800c44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c450:	682f      	ldr	r7, [r5, #0]
 800c452:	6a21      	ldr	r1, [r4, #32]
 800c454:	602b      	str	r3, [r5, #0]
 800c456:	d032      	beq.n	800c4be <__sflush_r+0x9a>
 800c458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	075a      	lsls	r2, r3, #29
 800c45e:	d505      	bpl.n	800c46c <__sflush_r+0x48>
 800c460:	6863      	ldr	r3, [r4, #4]
 800c462:	1ac0      	subs	r0, r0, r3
 800c464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c466:	b10b      	cbz	r3, 800c46c <__sflush_r+0x48>
 800c468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c46a:	1ac0      	subs	r0, r0, r3
 800c46c:	2300      	movs	r3, #0
 800c46e:	4602      	mov	r2, r0
 800c470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c472:	6a21      	ldr	r1, [r4, #32]
 800c474:	4628      	mov	r0, r5
 800c476:	47b0      	blx	r6
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	d106      	bne.n	800c48c <__sflush_r+0x68>
 800c47e:	6829      	ldr	r1, [r5, #0]
 800c480:	291d      	cmp	r1, #29
 800c482:	d82b      	bhi.n	800c4dc <__sflush_r+0xb8>
 800c484:	4a29      	ldr	r2, [pc, #164]	; (800c52c <__sflush_r+0x108>)
 800c486:	410a      	asrs	r2, r1
 800c488:	07d6      	lsls	r6, r2, #31
 800c48a:	d427      	bmi.n	800c4dc <__sflush_r+0xb8>
 800c48c:	2200      	movs	r2, #0
 800c48e:	6062      	str	r2, [r4, #4]
 800c490:	04d9      	lsls	r1, r3, #19
 800c492:	6922      	ldr	r2, [r4, #16]
 800c494:	6022      	str	r2, [r4, #0]
 800c496:	d504      	bpl.n	800c4a2 <__sflush_r+0x7e>
 800c498:	1c42      	adds	r2, r0, #1
 800c49a:	d101      	bne.n	800c4a0 <__sflush_r+0x7c>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b903      	cbnz	r3, 800c4a2 <__sflush_r+0x7e>
 800c4a0:	6560      	str	r0, [r4, #84]	; 0x54
 800c4a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4a4:	602f      	str	r7, [r5, #0]
 800c4a6:	2900      	cmp	r1, #0
 800c4a8:	d0c9      	beq.n	800c43e <__sflush_r+0x1a>
 800c4aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4ae:	4299      	cmp	r1, r3
 800c4b0:	d002      	beq.n	800c4b8 <__sflush_r+0x94>
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f7fe fd3a 	bl	800af2c <_free_r>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	6360      	str	r0, [r4, #52]	; 0x34
 800c4bc:	e7c0      	b.n	800c440 <__sflush_r+0x1c>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	47b0      	blx	r6
 800c4c4:	1c41      	adds	r1, r0, #1
 800c4c6:	d1c8      	bne.n	800c45a <__sflush_r+0x36>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0c5      	beq.n	800c45a <__sflush_r+0x36>
 800c4ce:	2b1d      	cmp	r3, #29
 800c4d0:	d001      	beq.n	800c4d6 <__sflush_r+0xb2>
 800c4d2:	2b16      	cmp	r3, #22
 800c4d4:	d101      	bne.n	800c4da <__sflush_r+0xb6>
 800c4d6:	602f      	str	r7, [r5, #0]
 800c4d8:	e7b1      	b.n	800c43e <__sflush_r+0x1a>
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e0:	81a3      	strh	r3, [r4, #12]
 800c4e2:	e7ad      	b.n	800c440 <__sflush_r+0x1c>
 800c4e4:	690f      	ldr	r7, [r1, #16]
 800c4e6:	2f00      	cmp	r7, #0
 800c4e8:	d0a9      	beq.n	800c43e <__sflush_r+0x1a>
 800c4ea:	0793      	lsls	r3, r2, #30
 800c4ec:	680e      	ldr	r6, [r1, #0]
 800c4ee:	bf08      	it	eq
 800c4f0:	694b      	ldreq	r3, [r1, #20]
 800c4f2:	600f      	str	r7, [r1, #0]
 800c4f4:	bf18      	it	ne
 800c4f6:	2300      	movne	r3, #0
 800c4f8:	eba6 0807 	sub.w	r8, r6, r7
 800c4fc:	608b      	str	r3, [r1, #8]
 800c4fe:	f1b8 0f00 	cmp.w	r8, #0
 800c502:	dd9c      	ble.n	800c43e <__sflush_r+0x1a>
 800c504:	6a21      	ldr	r1, [r4, #32]
 800c506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c508:	4643      	mov	r3, r8
 800c50a:	463a      	mov	r2, r7
 800c50c:	4628      	mov	r0, r5
 800c50e:	47b0      	blx	r6
 800c510:	2800      	cmp	r0, #0
 800c512:	dc06      	bgt.n	800c522 <__sflush_r+0xfe>
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c51a:	81a3      	strh	r3, [r4, #12]
 800c51c:	f04f 30ff 	mov.w	r0, #4294967295
 800c520:	e78e      	b.n	800c440 <__sflush_r+0x1c>
 800c522:	4407      	add	r7, r0
 800c524:	eba8 0800 	sub.w	r8, r8, r0
 800c528:	e7e9      	b.n	800c4fe <__sflush_r+0xda>
 800c52a:	bf00      	nop
 800c52c:	dfbffffe 	.word	0xdfbffffe

0800c530 <_fflush_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	690b      	ldr	r3, [r1, #16]
 800c534:	4605      	mov	r5, r0
 800c536:	460c      	mov	r4, r1
 800c538:	b913      	cbnz	r3, 800c540 <_fflush_r+0x10>
 800c53a:	2500      	movs	r5, #0
 800c53c:	4628      	mov	r0, r5
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
 800c540:	b118      	cbz	r0, 800c54a <_fflush_r+0x1a>
 800c542:	6a03      	ldr	r3, [r0, #32]
 800c544:	b90b      	cbnz	r3, 800c54a <_fflush_r+0x1a>
 800c546:	f7fd fcfd 	bl	8009f44 <__sinit>
 800c54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d0f3      	beq.n	800c53a <_fflush_r+0xa>
 800c552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c554:	07d0      	lsls	r0, r2, #31
 800c556:	d404      	bmi.n	800c562 <_fflush_r+0x32>
 800c558:	0599      	lsls	r1, r3, #22
 800c55a:	d402      	bmi.n	800c562 <_fflush_r+0x32>
 800c55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c55e:	f7fd fe52 	bl	800a206 <__retarget_lock_acquire_recursive>
 800c562:	4628      	mov	r0, r5
 800c564:	4621      	mov	r1, r4
 800c566:	f7ff ff5d 	bl	800c424 <__sflush_r>
 800c56a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c56c:	07da      	lsls	r2, r3, #31
 800c56e:	4605      	mov	r5, r0
 800c570:	d4e4      	bmi.n	800c53c <_fflush_r+0xc>
 800c572:	89a3      	ldrh	r3, [r4, #12]
 800c574:	059b      	lsls	r3, r3, #22
 800c576:	d4e1      	bmi.n	800c53c <_fflush_r+0xc>
 800c578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c57a:	f7fd fe45 	bl	800a208 <__retarget_lock_release_recursive>
 800c57e:	e7dd      	b.n	800c53c <_fflush_r+0xc>

0800c580 <memmove>:
 800c580:	4288      	cmp	r0, r1
 800c582:	b510      	push	{r4, lr}
 800c584:	eb01 0402 	add.w	r4, r1, r2
 800c588:	d902      	bls.n	800c590 <memmove+0x10>
 800c58a:	4284      	cmp	r4, r0
 800c58c:	4623      	mov	r3, r4
 800c58e:	d807      	bhi.n	800c5a0 <memmove+0x20>
 800c590:	1e43      	subs	r3, r0, #1
 800c592:	42a1      	cmp	r1, r4
 800c594:	d008      	beq.n	800c5a8 <memmove+0x28>
 800c596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c59a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c59e:	e7f8      	b.n	800c592 <memmove+0x12>
 800c5a0:	4402      	add	r2, r0
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	428a      	cmp	r2, r1
 800c5a6:	d100      	bne.n	800c5aa <memmove+0x2a>
 800c5a8:	bd10      	pop	{r4, pc}
 800c5aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5b2:	e7f7      	b.n	800c5a4 <memmove+0x24>

0800c5b4 <_sbrk_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d06      	ldr	r5, [pc, #24]	; (800c5d0 <_sbrk_r+0x1c>)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	602b      	str	r3, [r5, #0]
 800c5c0:	f7f6 fdca 	bl	8003158 <_sbrk>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_sbrk_r+0x1a>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_sbrk_r+0x1a>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	200006ec 	.word	0x200006ec

0800c5d4 <__assert_func>:
 800c5d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5d6:	4614      	mov	r4, r2
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b09      	ldr	r3, [pc, #36]	; (800c600 <__assert_func+0x2c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4605      	mov	r5, r0
 800c5e0:	68d8      	ldr	r0, [r3, #12]
 800c5e2:	b14c      	cbz	r4, 800c5f8 <__assert_func+0x24>
 800c5e4:	4b07      	ldr	r3, [pc, #28]	; (800c604 <__assert_func+0x30>)
 800c5e6:	9100      	str	r1, [sp, #0]
 800c5e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5ec:	4906      	ldr	r1, [pc, #24]	; (800c608 <__assert_func+0x34>)
 800c5ee:	462b      	mov	r3, r5
 800c5f0:	f000 f854 	bl	800c69c <fiprintf>
 800c5f4:	f000 f864 	bl	800c6c0 <abort>
 800c5f8:	4b04      	ldr	r3, [pc, #16]	; (800c60c <__assert_func+0x38>)
 800c5fa:	461c      	mov	r4, r3
 800c5fc:	e7f3      	b.n	800c5e6 <__assert_func+0x12>
 800c5fe:	bf00      	nop
 800c600:	20000224 	.word	0x20000224
 800c604:	0800d11d 	.word	0x0800d11d
 800c608:	0800d12a 	.word	0x0800d12a
 800c60c:	0800d158 	.word	0x0800d158

0800c610 <_calloc_r>:
 800c610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c612:	fba1 2402 	umull	r2, r4, r1, r2
 800c616:	b94c      	cbnz	r4, 800c62c <_calloc_r+0x1c>
 800c618:	4611      	mov	r1, r2
 800c61a:	9201      	str	r2, [sp, #4]
 800c61c:	f7ff f852 	bl	800b6c4 <_malloc_r>
 800c620:	9a01      	ldr	r2, [sp, #4]
 800c622:	4605      	mov	r5, r0
 800c624:	b930      	cbnz	r0, 800c634 <_calloc_r+0x24>
 800c626:	4628      	mov	r0, r5
 800c628:	b003      	add	sp, #12
 800c62a:	bd30      	pop	{r4, r5, pc}
 800c62c:	220c      	movs	r2, #12
 800c62e:	6002      	str	r2, [r0, #0]
 800c630:	2500      	movs	r5, #0
 800c632:	e7f8      	b.n	800c626 <_calloc_r+0x16>
 800c634:	4621      	mov	r1, r4
 800c636:	f7fd fd57 	bl	800a0e8 <memset>
 800c63a:	e7f4      	b.n	800c626 <_calloc_r+0x16>

0800c63c <_realloc_r>:
 800c63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c640:	4680      	mov	r8, r0
 800c642:	4614      	mov	r4, r2
 800c644:	460e      	mov	r6, r1
 800c646:	b921      	cbnz	r1, 800c652 <_realloc_r+0x16>
 800c648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c64c:	4611      	mov	r1, r2
 800c64e:	f7ff b839 	b.w	800b6c4 <_malloc_r>
 800c652:	b92a      	cbnz	r2, 800c660 <_realloc_r+0x24>
 800c654:	f7fe fc6a 	bl	800af2c <_free_r>
 800c658:	4625      	mov	r5, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c660:	f000 f835 	bl	800c6ce <_malloc_usable_size_r>
 800c664:	4284      	cmp	r4, r0
 800c666:	4607      	mov	r7, r0
 800c668:	d802      	bhi.n	800c670 <_realloc_r+0x34>
 800c66a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c66e:	d812      	bhi.n	800c696 <_realloc_r+0x5a>
 800c670:	4621      	mov	r1, r4
 800c672:	4640      	mov	r0, r8
 800c674:	f7ff f826 	bl	800b6c4 <_malloc_r>
 800c678:	4605      	mov	r5, r0
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d0ed      	beq.n	800c65a <_realloc_r+0x1e>
 800c67e:	42bc      	cmp	r4, r7
 800c680:	4622      	mov	r2, r4
 800c682:	4631      	mov	r1, r6
 800c684:	bf28      	it	cs
 800c686:	463a      	movcs	r2, r7
 800c688:	f7fd fdbf 	bl	800a20a <memcpy>
 800c68c:	4631      	mov	r1, r6
 800c68e:	4640      	mov	r0, r8
 800c690:	f7fe fc4c 	bl	800af2c <_free_r>
 800c694:	e7e1      	b.n	800c65a <_realloc_r+0x1e>
 800c696:	4635      	mov	r5, r6
 800c698:	e7df      	b.n	800c65a <_realloc_r+0x1e>
	...

0800c69c <fiprintf>:
 800c69c:	b40e      	push	{r1, r2, r3}
 800c69e:	b503      	push	{r0, r1, lr}
 800c6a0:	4601      	mov	r1, r0
 800c6a2:	ab03      	add	r3, sp, #12
 800c6a4:	4805      	ldr	r0, [pc, #20]	; (800c6bc <fiprintf+0x20>)
 800c6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6aa:	6800      	ldr	r0, [r0, #0]
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	f000 f83f 	bl	800c730 <_vfiprintf_r>
 800c6b2:	b002      	add	sp, #8
 800c6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6b8:	b003      	add	sp, #12
 800c6ba:	4770      	bx	lr
 800c6bc:	20000224 	.word	0x20000224

0800c6c0 <abort>:
 800c6c0:	b508      	push	{r3, lr}
 800c6c2:	2006      	movs	r0, #6
 800c6c4:	f000 fa0c 	bl	800cae0 <raise>
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	f7f6 fccd 	bl	8003068 <_exit>

0800c6ce <_malloc_usable_size_r>:
 800c6ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6d2:	1f18      	subs	r0, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	bfbc      	itt	lt
 800c6d8:	580b      	ldrlt	r3, [r1, r0]
 800c6da:	18c0      	addlt	r0, r0, r3
 800c6dc:	4770      	bx	lr

0800c6de <__sfputc_r>:
 800c6de:	6893      	ldr	r3, [r2, #8]
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	b410      	push	{r4}
 800c6e6:	6093      	str	r3, [r2, #8]
 800c6e8:	da08      	bge.n	800c6fc <__sfputc_r+0x1e>
 800c6ea:	6994      	ldr	r4, [r2, #24]
 800c6ec:	42a3      	cmp	r3, r4
 800c6ee:	db01      	blt.n	800c6f4 <__sfputc_r+0x16>
 800c6f0:	290a      	cmp	r1, #10
 800c6f2:	d103      	bne.n	800c6fc <__sfputc_r+0x1e>
 800c6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6f8:	f000 b934 	b.w	800c964 <__swbuf_r>
 800c6fc:	6813      	ldr	r3, [r2, #0]
 800c6fe:	1c58      	adds	r0, r3, #1
 800c700:	6010      	str	r0, [r2, #0]
 800c702:	7019      	strb	r1, [r3, #0]
 800c704:	4608      	mov	r0, r1
 800c706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <__sfputs_r>:
 800c70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70e:	4606      	mov	r6, r0
 800c710:	460f      	mov	r7, r1
 800c712:	4614      	mov	r4, r2
 800c714:	18d5      	adds	r5, r2, r3
 800c716:	42ac      	cmp	r4, r5
 800c718:	d101      	bne.n	800c71e <__sfputs_r+0x12>
 800c71a:	2000      	movs	r0, #0
 800c71c:	e007      	b.n	800c72e <__sfputs_r+0x22>
 800c71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c722:	463a      	mov	r2, r7
 800c724:	4630      	mov	r0, r6
 800c726:	f7ff ffda 	bl	800c6de <__sfputc_r>
 800c72a:	1c43      	adds	r3, r0, #1
 800c72c:	d1f3      	bne.n	800c716 <__sfputs_r+0xa>
 800c72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c730 <_vfiprintf_r>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	460d      	mov	r5, r1
 800c736:	b09d      	sub	sp, #116	; 0x74
 800c738:	4614      	mov	r4, r2
 800c73a:	4698      	mov	r8, r3
 800c73c:	4606      	mov	r6, r0
 800c73e:	b118      	cbz	r0, 800c748 <_vfiprintf_r+0x18>
 800c740:	6a03      	ldr	r3, [r0, #32]
 800c742:	b90b      	cbnz	r3, 800c748 <_vfiprintf_r+0x18>
 800c744:	f7fd fbfe 	bl	8009f44 <__sinit>
 800c748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c74a:	07d9      	lsls	r1, r3, #31
 800c74c:	d405      	bmi.n	800c75a <_vfiprintf_r+0x2a>
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	059a      	lsls	r2, r3, #22
 800c752:	d402      	bmi.n	800c75a <_vfiprintf_r+0x2a>
 800c754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c756:	f7fd fd56 	bl	800a206 <__retarget_lock_acquire_recursive>
 800c75a:	89ab      	ldrh	r3, [r5, #12]
 800c75c:	071b      	lsls	r3, r3, #28
 800c75e:	d501      	bpl.n	800c764 <_vfiprintf_r+0x34>
 800c760:	692b      	ldr	r3, [r5, #16]
 800c762:	b99b      	cbnz	r3, 800c78c <_vfiprintf_r+0x5c>
 800c764:	4629      	mov	r1, r5
 800c766:	4630      	mov	r0, r6
 800c768:	f000 f93a 	bl	800c9e0 <__swsetup_r>
 800c76c:	b170      	cbz	r0, 800c78c <_vfiprintf_r+0x5c>
 800c76e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c770:	07dc      	lsls	r4, r3, #31
 800c772:	d504      	bpl.n	800c77e <_vfiprintf_r+0x4e>
 800c774:	f04f 30ff 	mov.w	r0, #4294967295
 800c778:	b01d      	add	sp, #116	; 0x74
 800c77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77e:	89ab      	ldrh	r3, [r5, #12]
 800c780:	0598      	lsls	r0, r3, #22
 800c782:	d4f7      	bmi.n	800c774 <_vfiprintf_r+0x44>
 800c784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c786:	f7fd fd3f 	bl	800a208 <__retarget_lock_release_recursive>
 800c78a:	e7f3      	b.n	800c774 <_vfiprintf_r+0x44>
 800c78c:	2300      	movs	r3, #0
 800c78e:	9309      	str	r3, [sp, #36]	; 0x24
 800c790:	2320      	movs	r3, #32
 800c792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c796:	f8cd 800c 	str.w	r8, [sp, #12]
 800c79a:	2330      	movs	r3, #48	; 0x30
 800c79c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c950 <_vfiprintf_r+0x220>
 800c7a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7a4:	f04f 0901 	mov.w	r9, #1
 800c7a8:	4623      	mov	r3, r4
 800c7aa:	469a      	mov	sl, r3
 800c7ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7b0:	b10a      	cbz	r2, 800c7b6 <_vfiprintf_r+0x86>
 800c7b2:	2a25      	cmp	r2, #37	; 0x25
 800c7b4:	d1f9      	bne.n	800c7aa <_vfiprintf_r+0x7a>
 800c7b6:	ebba 0b04 	subs.w	fp, sl, r4
 800c7ba:	d00b      	beq.n	800c7d4 <_vfiprintf_r+0xa4>
 800c7bc:	465b      	mov	r3, fp
 800c7be:	4622      	mov	r2, r4
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	f7ff ffa2 	bl	800c70c <__sfputs_r>
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	f000 80a9 	beq.w	800c920 <_vfiprintf_r+0x1f0>
 800c7ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7d0:	445a      	add	r2, fp
 800c7d2:	9209      	str	r2, [sp, #36]	; 0x24
 800c7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f000 80a1 	beq.w	800c920 <_vfiprintf_r+0x1f0>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7e8:	f10a 0a01 	add.w	sl, sl, #1
 800c7ec:	9304      	str	r3, [sp, #16]
 800c7ee:	9307      	str	r3, [sp, #28]
 800c7f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7f4:	931a      	str	r3, [sp, #104]	; 0x68
 800c7f6:	4654      	mov	r4, sl
 800c7f8:	2205      	movs	r2, #5
 800c7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fe:	4854      	ldr	r0, [pc, #336]	; (800c950 <_vfiprintf_r+0x220>)
 800c800:	f7f3 fd06 	bl	8000210 <memchr>
 800c804:	9a04      	ldr	r2, [sp, #16]
 800c806:	b9d8      	cbnz	r0, 800c840 <_vfiprintf_r+0x110>
 800c808:	06d1      	lsls	r1, r2, #27
 800c80a:	bf44      	itt	mi
 800c80c:	2320      	movmi	r3, #32
 800c80e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c812:	0713      	lsls	r3, r2, #28
 800c814:	bf44      	itt	mi
 800c816:	232b      	movmi	r3, #43	; 0x2b
 800c818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c81c:	f89a 3000 	ldrb.w	r3, [sl]
 800c820:	2b2a      	cmp	r3, #42	; 0x2a
 800c822:	d015      	beq.n	800c850 <_vfiprintf_r+0x120>
 800c824:	9a07      	ldr	r2, [sp, #28]
 800c826:	4654      	mov	r4, sl
 800c828:	2000      	movs	r0, #0
 800c82a:	f04f 0c0a 	mov.w	ip, #10
 800c82e:	4621      	mov	r1, r4
 800c830:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c834:	3b30      	subs	r3, #48	; 0x30
 800c836:	2b09      	cmp	r3, #9
 800c838:	d94d      	bls.n	800c8d6 <_vfiprintf_r+0x1a6>
 800c83a:	b1b0      	cbz	r0, 800c86a <_vfiprintf_r+0x13a>
 800c83c:	9207      	str	r2, [sp, #28]
 800c83e:	e014      	b.n	800c86a <_vfiprintf_r+0x13a>
 800c840:	eba0 0308 	sub.w	r3, r0, r8
 800c844:	fa09 f303 	lsl.w	r3, r9, r3
 800c848:	4313      	orrs	r3, r2
 800c84a:	9304      	str	r3, [sp, #16]
 800c84c:	46a2      	mov	sl, r4
 800c84e:	e7d2      	b.n	800c7f6 <_vfiprintf_r+0xc6>
 800c850:	9b03      	ldr	r3, [sp, #12]
 800c852:	1d19      	adds	r1, r3, #4
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	9103      	str	r1, [sp, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bfbb      	ittet	lt
 800c85c:	425b      	neglt	r3, r3
 800c85e:	f042 0202 	orrlt.w	r2, r2, #2
 800c862:	9307      	strge	r3, [sp, #28]
 800c864:	9307      	strlt	r3, [sp, #28]
 800c866:	bfb8      	it	lt
 800c868:	9204      	strlt	r2, [sp, #16]
 800c86a:	7823      	ldrb	r3, [r4, #0]
 800c86c:	2b2e      	cmp	r3, #46	; 0x2e
 800c86e:	d10c      	bne.n	800c88a <_vfiprintf_r+0x15a>
 800c870:	7863      	ldrb	r3, [r4, #1]
 800c872:	2b2a      	cmp	r3, #42	; 0x2a
 800c874:	d134      	bne.n	800c8e0 <_vfiprintf_r+0x1b0>
 800c876:	9b03      	ldr	r3, [sp, #12]
 800c878:	1d1a      	adds	r2, r3, #4
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	9203      	str	r2, [sp, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	bfb8      	it	lt
 800c882:	f04f 33ff 	movlt.w	r3, #4294967295
 800c886:	3402      	adds	r4, #2
 800c888:	9305      	str	r3, [sp, #20]
 800c88a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c960 <_vfiprintf_r+0x230>
 800c88e:	7821      	ldrb	r1, [r4, #0]
 800c890:	2203      	movs	r2, #3
 800c892:	4650      	mov	r0, sl
 800c894:	f7f3 fcbc 	bl	8000210 <memchr>
 800c898:	b138      	cbz	r0, 800c8aa <_vfiprintf_r+0x17a>
 800c89a:	9b04      	ldr	r3, [sp, #16]
 800c89c:	eba0 000a 	sub.w	r0, r0, sl
 800c8a0:	2240      	movs	r2, #64	; 0x40
 800c8a2:	4082      	lsls	r2, r0
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	3401      	adds	r4, #1
 800c8a8:	9304      	str	r3, [sp, #16]
 800c8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ae:	4829      	ldr	r0, [pc, #164]	; (800c954 <_vfiprintf_r+0x224>)
 800c8b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8b4:	2206      	movs	r2, #6
 800c8b6:	f7f3 fcab 	bl	8000210 <memchr>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d03f      	beq.n	800c93e <_vfiprintf_r+0x20e>
 800c8be:	4b26      	ldr	r3, [pc, #152]	; (800c958 <_vfiprintf_r+0x228>)
 800c8c0:	bb1b      	cbnz	r3, 800c90a <_vfiprintf_r+0x1da>
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	3307      	adds	r3, #7
 800c8c6:	f023 0307 	bic.w	r3, r3, #7
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	9303      	str	r3, [sp, #12]
 800c8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d0:	443b      	add	r3, r7
 800c8d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d4:	e768      	b.n	800c7a8 <_vfiprintf_r+0x78>
 800c8d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8da:	460c      	mov	r4, r1
 800c8dc:	2001      	movs	r0, #1
 800c8de:	e7a6      	b.n	800c82e <_vfiprintf_r+0xfe>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	3401      	adds	r4, #1
 800c8e4:	9305      	str	r3, [sp, #20]
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	f04f 0c0a 	mov.w	ip, #10
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8f2:	3a30      	subs	r2, #48	; 0x30
 800c8f4:	2a09      	cmp	r2, #9
 800c8f6:	d903      	bls.n	800c900 <_vfiprintf_r+0x1d0>
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d0c6      	beq.n	800c88a <_vfiprintf_r+0x15a>
 800c8fc:	9105      	str	r1, [sp, #20]
 800c8fe:	e7c4      	b.n	800c88a <_vfiprintf_r+0x15a>
 800c900:	fb0c 2101 	mla	r1, ip, r1, r2
 800c904:	4604      	mov	r4, r0
 800c906:	2301      	movs	r3, #1
 800c908:	e7f0      	b.n	800c8ec <_vfiprintf_r+0x1bc>
 800c90a:	ab03      	add	r3, sp, #12
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	462a      	mov	r2, r5
 800c910:	4b12      	ldr	r3, [pc, #72]	; (800c95c <_vfiprintf_r+0x22c>)
 800c912:	a904      	add	r1, sp, #16
 800c914:	4630      	mov	r0, r6
 800c916:	f7fc fec3 	bl	80096a0 <_printf_float>
 800c91a:	4607      	mov	r7, r0
 800c91c:	1c78      	adds	r0, r7, #1
 800c91e:	d1d6      	bne.n	800c8ce <_vfiprintf_r+0x19e>
 800c920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c922:	07d9      	lsls	r1, r3, #31
 800c924:	d405      	bmi.n	800c932 <_vfiprintf_r+0x202>
 800c926:	89ab      	ldrh	r3, [r5, #12]
 800c928:	059a      	lsls	r2, r3, #22
 800c92a:	d402      	bmi.n	800c932 <_vfiprintf_r+0x202>
 800c92c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c92e:	f7fd fc6b 	bl	800a208 <__retarget_lock_release_recursive>
 800c932:	89ab      	ldrh	r3, [r5, #12]
 800c934:	065b      	lsls	r3, r3, #25
 800c936:	f53f af1d 	bmi.w	800c774 <_vfiprintf_r+0x44>
 800c93a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c93c:	e71c      	b.n	800c778 <_vfiprintf_r+0x48>
 800c93e:	ab03      	add	r3, sp, #12
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	462a      	mov	r2, r5
 800c944:	4b05      	ldr	r3, [pc, #20]	; (800c95c <_vfiprintf_r+0x22c>)
 800c946:	a904      	add	r1, sp, #16
 800c948:	4630      	mov	r0, r6
 800c94a:	f7fd f94d 	bl	8009be8 <_printf_i>
 800c94e:	e7e4      	b.n	800c91a <_vfiprintf_r+0x1ea>
 800c950:	0800d10c 	.word	0x0800d10c
 800c954:	0800d116 	.word	0x0800d116
 800c958:	080096a1 	.word	0x080096a1
 800c95c:	0800c70d 	.word	0x0800c70d
 800c960:	0800d112 	.word	0x0800d112

0800c964 <__swbuf_r>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	460e      	mov	r6, r1
 800c968:	4614      	mov	r4, r2
 800c96a:	4605      	mov	r5, r0
 800c96c:	b118      	cbz	r0, 800c976 <__swbuf_r+0x12>
 800c96e:	6a03      	ldr	r3, [r0, #32]
 800c970:	b90b      	cbnz	r3, 800c976 <__swbuf_r+0x12>
 800c972:	f7fd fae7 	bl	8009f44 <__sinit>
 800c976:	69a3      	ldr	r3, [r4, #24]
 800c978:	60a3      	str	r3, [r4, #8]
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	071a      	lsls	r2, r3, #28
 800c97e:	d525      	bpl.n	800c9cc <__swbuf_r+0x68>
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	b31b      	cbz	r3, 800c9cc <__swbuf_r+0x68>
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	6922      	ldr	r2, [r4, #16]
 800c988:	1a98      	subs	r0, r3, r2
 800c98a:	6963      	ldr	r3, [r4, #20]
 800c98c:	b2f6      	uxtb	r6, r6
 800c98e:	4283      	cmp	r3, r0
 800c990:	4637      	mov	r7, r6
 800c992:	dc04      	bgt.n	800c99e <__swbuf_r+0x3a>
 800c994:	4621      	mov	r1, r4
 800c996:	4628      	mov	r0, r5
 800c998:	f7ff fdca 	bl	800c530 <_fflush_r>
 800c99c:	b9e0      	cbnz	r0, 800c9d8 <__swbuf_r+0x74>
 800c99e:	68a3      	ldr	r3, [r4, #8]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	60a3      	str	r3, [r4, #8]
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	6022      	str	r2, [r4, #0]
 800c9aa:	701e      	strb	r6, [r3, #0]
 800c9ac:	6962      	ldr	r2, [r4, #20]
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d004      	beq.n	800c9be <__swbuf_r+0x5a>
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	07db      	lsls	r3, r3, #31
 800c9b8:	d506      	bpl.n	800c9c8 <__swbuf_r+0x64>
 800c9ba:	2e0a      	cmp	r6, #10
 800c9bc:	d104      	bne.n	800c9c8 <__swbuf_r+0x64>
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	f7ff fdb5 	bl	800c530 <_fflush_r>
 800c9c6:	b938      	cbnz	r0, 800c9d8 <__swbuf_r+0x74>
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	f000 f806 	bl	800c9e0 <__swsetup_r>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d0d5      	beq.n	800c984 <__swbuf_r+0x20>
 800c9d8:	f04f 37ff 	mov.w	r7, #4294967295
 800c9dc:	e7f4      	b.n	800c9c8 <__swbuf_r+0x64>
	...

0800c9e0 <__swsetup_r>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	4b2a      	ldr	r3, [pc, #168]	; (800ca8c <__swsetup_r+0xac>)
 800c9e4:	4605      	mov	r5, r0
 800c9e6:	6818      	ldr	r0, [r3, #0]
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	b118      	cbz	r0, 800c9f4 <__swsetup_r+0x14>
 800c9ec:	6a03      	ldr	r3, [r0, #32]
 800c9ee:	b90b      	cbnz	r3, 800c9f4 <__swsetup_r+0x14>
 800c9f0:	f7fd faa8 	bl	8009f44 <__sinit>
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9fa:	0718      	lsls	r0, r3, #28
 800c9fc:	d422      	bmi.n	800ca44 <__swsetup_r+0x64>
 800c9fe:	06d9      	lsls	r1, r3, #27
 800ca00:	d407      	bmi.n	800ca12 <__swsetup_r+0x32>
 800ca02:	2309      	movs	r3, #9
 800ca04:	602b      	str	r3, [r5, #0]
 800ca06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca0a:	81a3      	strh	r3, [r4, #12]
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca10:	e034      	b.n	800ca7c <__swsetup_r+0x9c>
 800ca12:	0758      	lsls	r0, r3, #29
 800ca14:	d512      	bpl.n	800ca3c <__swsetup_r+0x5c>
 800ca16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca18:	b141      	cbz	r1, 800ca2c <__swsetup_r+0x4c>
 800ca1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca1e:	4299      	cmp	r1, r3
 800ca20:	d002      	beq.n	800ca28 <__swsetup_r+0x48>
 800ca22:	4628      	mov	r0, r5
 800ca24:	f7fe fa82 	bl	800af2c <_free_r>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	6363      	str	r3, [r4, #52]	; 0x34
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	2300      	movs	r3, #0
 800ca36:	6063      	str	r3, [r4, #4]
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	6023      	str	r3, [r4, #0]
 800ca3c:	89a3      	ldrh	r3, [r4, #12]
 800ca3e:	f043 0308 	orr.w	r3, r3, #8
 800ca42:	81a3      	strh	r3, [r4, #12]
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	b94b      	cbnz	r3, 800ca5c <__swsetup_r+0x7c>
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca52:	d003      	beq.n	800ca5c <__swsetup_r+0x7c>
 800ca54:	4621      	mov	r1, r4
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 f884 	bl	800cb64 <__smakebuf_r>
 800ca5c:	89a0      	ldrh	r0, [r4, #12]
 800ca5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca62:	f010 0301 	ands.w	r3, r0, #1
 800ca66:	d00a      	beq.n	800ca7e <__swsetup_r+0x9e>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60a3      	str	r3, [r4, #8]
 800ca6c:	6963      	ldr	r3, [r4, #20]
 800ca6e:	425b      	negs	r3, r3
 800ca70:	61a3      	str	r3, [r4, #24]
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	b943      	cbnz	r3, 800ca88 <__swsetup_r+0xa8>
 800ca76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca7a:	d1c4      	bne.n	800ca06 <__swsetup_r+0x26>
 800ca7c:	bd38      	pop	{r3, r4, r5, pc}
 800ca7e:	0781      	lsls	r1, r0, #30
 800ca80:	bf58      	it	pl
 800ca82:	6963      	ldrpl	r3, [r4, #20]
 800ca84:	60a3      	str	r3, [r4, #8]
 800ca86:	e7f4      	b.n	800ca72 <__swsetup_r+0x92>
 800ca88:	2000      	movs	r0, #0
 800ca8a:	e7f7      	b.n	800ca7c <__swsetup_r+0x9c>
 800ca8c:	20000224 	.word	0x20000224

0800ca90 <_raise_r>:
 800ca90:	291f      	cmp	r1, #31
 800ca92:	b538      	push	{r3, r4, r5, lr}
 800ca94:	4604      	mov	r4, r0
 800ca96:	460d      	mov	r5, r1
 800ca98:	d904      	bls.n	800caa4 <_raise_r+0x14>
 800ca9a:	2316      	movs	r3, #22
 800ca9c:	6003      	str	r3, [r0, #0]
 800ca9e:	f04f 30ff 	mov.w	r0, #4294967295
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800caa6:	b112      	cbz	r2, 800caae <_raise_r+0x1e>
 800caa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800caac:	b94b      	cbnz	r3, 800cac2 <_raise_r+0x32>
 800caae:	4620      	mov	r0, r4
 800cab0:	f000 f830 	bl	800cb14 <_getpid_r>
 800cab4:	462a      	mov	r2, r5
 800cab6:	4601      	mov	r1, r0
 800cab8:	4620      	mov	r0, r4
 800caba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cabe:	f000 b817 	b.w	800caf0 <_kill_r>
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d00a      	beq.n	800cadc <_raise_r+0x4c>
 800cac6:	1c59      	adds	r1, r3, #1
 800cac8:	d103      	bne.n	800cad2 <_raise_r+0x42>
 800caca:	2316      	movs	r3, #22
 800cacc:	6003      	str	r3, [r0, #0]
 800cace:	2001      	movs	r0, #1
 800cad0:	e7e7      	b.n	800caa2 <_raise_r+0x12>
 800cad2:	2400      	movs	r4, #0
 800cad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cad8:	4628      	mov	r0, r5
 800cada:	4798      	blx	r3
 800cadc:	2000      	movs	r0, #0
 800cade:	e7e0      	b.n	800caa2 <_raise_r+0x12>

0800cae0 <raise>:
 800cae0:	4b02      	ldr	r3, [pc, #8]	; (800caec <raise+0xc>)
 800cae2:	4601      	mov	r1, r0
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	f7ff bfd3 	b.w	800ca90 <_raise_r>
 800caea:	bf00      	nop
 800caec:	20000224 	.word	0x20000224

0800caf0 <_kill_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d07      	ldr	r5, [pc, #28]	; (800cb10 <_kill_r+0x20>)
 800caf4:	2300      	movs	r3, #0
 800caf6:	4604      	mov	r4, r0
 800caf8:	4608      	mov	r0, r1
 800cafa:	4611      	mov	r1, r2
 800cafc:	602b      	str	r3, [r5, #0]
 800cafe:	f7f6 faa3 	bl	8003048 <_kill>
 800cb02:	1c43      	adds	r3, r0, #1
 800cb04:	d102      	bne.n	800cb0c <_kill_r+0x1c>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	b103      	cbz	r3, 800cb0c <_kill_r+0x1c>
 800cb0a:	6023      	str	r3, [r4, #0]
 800cb0c:	bd38      	pop	{r3, r4, r5, pc}
 800cb0e:	bf00      	nop
 800cb10:	200006ec 	.word	0x200006ec

0800cb14 <_getpid_r>:
 800cb14:	f7f6 ba90 	b.w	8003038 <_getpid>

0800cb18 <__swhatbuf_r>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb20:	2900      	cmp	r1, #0
 800cb22:	b096      	sub	sp, #88	; 0x58
 800cb24:	4615      	mov	r5, r2
 800cb26:	461e      	mov	r6, r3
 800cb28:	da0d      	bge.n	800cb46 <__swhatbuf_r+0x2e>
 800cb2a:	89a3      	ldrh	r3, [r4, #12]
 800cb2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb30:	f04f 0100 	mov.w	r1, #0
 800cb34:	bf0c      	ite	eq
 800cb36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb3a:	2340      	movne	r3, #64	; 0x40
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	6031      	str	r1, [r6, #0]
 800cb40:	602b      	str	r3, [r5, #0]
 800cb42:	b016      	add	sp, #88	; 0x58
 800cb44:	bd70      	pop	{r4, r5, r6, pc}
 800cb46:	466a      	mov	r2, sp
 800cb48:	f000 f848 	bl	800cbdc <_fstat_r>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	dbec      	blt.n	800cb2a <__swhatbuf_r+0x12>
 800cb50:	9901      	ldr	r1, [sp, #4]
 800cb52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb5a:	4259      	negs	r1, r3
 800cb5c:	4159      	adcs	r1, r3
 800cb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb62:	e7eb      	b.n	800cb3c <__swhatbuf_r+0x24>

0800cb64 <__smakebuf_r>:
 800cb64:	898b      	ldrh	r3, [r1, #12]
 800cb66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb68:	079d      	lsls	r5, r3, #30
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	d507      	bpl.n	800cb80 <__smakebuf_r+0x1c>
 800cb70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	6123      	str	r3, [r4, #16]
 800cb78:	2301      	movs	r3, #1
 800cb7a:	6163      	str	r3, [r4, #20]
 800cb7c:	b002      	add	sp, #8
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
 800cb80:	ab01      	add	r3, sp, #4
 800cb82:	466a      	mov	r2, sp
 800cb84:	f7ff ffc8 	bl	800cb18 <__swhatbuf_r>
 800cb88:	9900      	ldr	r1, [sp, #0]
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f7fe fd99 	bl	800b6c4 <_malloc_r>
 800cb92:	b948      	cbnz	r0, 800cba8 <__smakebuf_r+0x44>
 800cb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb98:	059a      	lsls	r2, r3, #22
 800cb9a:	d4ef      	bmi.n	800cb7c <__smakebuf_r+0x18>
 800cb9c:	f023 0303 	bic.w	r3, r3, #3
 800cba0:	f043 0302 	orr.w	r3, r3, #2
 800cba4:	81a3      	strh	r3, [r4, #12]
 800cba6:	e7e3      	b.n	800cb70 <__smakebuf_r+0xc>
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	6020      	str	r0, [r4, #0]
 800cbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbb0:	81a3      	strh	r3, [r4, #12]
 800cbb2:	9b00      	ldr	r3, [sp, #0]
 800cbb4:	6163      	str	r3, [r4, #20]
 800cbb6:	9b01      	ldr	r3, [sp, #4]
 800cbb8:	6120      	str	r0, [r4, #16]
 800cbba:	b15b      	cbz	r3, 800cbd4 <__smakebuf_r+0x70>
 800cbbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	f000 f81d 	bl	800cc00 <_isatty_r>
 800cbc6:	b128      	cbz	r0, 800cbd4 <__smakebuf_r+0x70>
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	f023 0303 	bic.w	r3, r3, #3
 800cbce:	f043 0301 	orr.w	r3, r3, #1
 800cbd2:	81a3      	strh	r3, [r4, #12]
 800cbd4:	89a3      	ldrh	r3, [r4, #12]
 800cbd6:	431d      	orrs	r5, r3
 800cbd8:	81a5      	strh	r5, [r4, #12]
 800cbda:	e7cf      	b.n	800cb7c <__smakebuf_r+0x18>

0800cbdc <_fstat_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d07      	ldr	r5, [pc, #28]	; (800cbfc <_fstat_r+0x20>)
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	4608      	mov	r0, r1
 800cbe6:	4611      	mov	r1, r2
 800cbe8:	602b      	str	r3, [r5, #0]
 800cbea:	f7f6 fa8c 	bl	8003106 <_fstat>
 800cbee:	1c43      	adds	r3, r0, #1
 800cbf0:	d102      	bne.n	800cbf8 <_fstat_r+0x1c>
 800cbf2:	682b      	ldr	r3, [r5, #0]
 800cbf4:	b103      	cbz	r3, 800cbf8 <_fstat_r+0x1c>
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	bd38      	pop	{r3, r4, r5, pc}
 800cbfa:	bf00      	nop
 800cbfc:	200006ec 	.word	0x200006ec

0800cc00 <_isatty_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	4d06      	ldr	r5, [pc, #24]	; (800cc1c <_isatty_r+0x1c>)
 800cc04:	2300      	movs	r3, #0
 800cc06:	4604      	mov	r4, r0
 800cc08:	4608      	mov	r0, r1
 800cc0a:	602b      	str	r3, [r5, #0]
 800cc0c:	f7f6 fa8b 	bl	8003126 <_isatty>
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	d102      	bne.n	800cc1a <_isatty_r+0x1a>
 800cc14:	682b      	ldr	r3, [r5, #0]
 800cc16:	b103      	cbz	r3, 800cc1a <_isatty_r+0x1a>
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}
 800cc1c:	200006ec 	.word	0x200006ec

0800cc20 <_init>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	bf00      	nop
 800cc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc26:	bc08      	pop	{r3}
 800cc28:	469e      	mov	lr, r3
 800cc2a:	4770      	bx	lr

0800cc2c <_fini>:
 800cc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2e:	bf00      	nop
 800cc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc32:	bc08      	pop	{r3}
 800cc34:	469e      	mov	lr, r3
 800cc36:	4770      	bx	lr
