
Mini_room_Automatic_temperature_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800cc08  0800cc08  0001cc08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d12c  0800d12c  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800d12c  0800d12c  0001d12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d134  0800d134  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d134  0800d134  0001d134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d138  0800d138  0001d138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800d13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000228  0800d364  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  0800d364  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d9e  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036a5  00000000  00000000  000370b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  0003a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8c  00000000  00000000  0003ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299e2  00000000  00000000  0003c8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192de  00000000  00000000  000662b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9e7e  00000000  00000000  0007f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006254  00000000  00000000  00179414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0017f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0017f6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cbf0 	.word	0x0800cbf0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800cbf0 	.word	0x0800cbf0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <software_delay>:
#include <stdint.h>
#include <ctype.h>
//#include "bmp280_defs.h"
//#include "bmp280.h"
static void software_delay(uint32_t tick)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint32_t delay;
	while(tick-->0)
 8001038:	e00c      	b.n	8001054 <software_delay+0x24>
	{
		for(delay=5; delay>0; delay--){
 800103a:	2305      	movs	r3, #5
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e006      	b.n	800104e <software_delay+0x1e>
			asm("nop");
 8001040:	bf00      	nop
			asm("nop");
 8001042:	bf00      	nop
			asm("nop");
 8001044:	bf00      	nop
			asm("nop");
 8001046:	bf00      	nop
		for(delay=5; delay>0; delay--){
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f5      	bne.n	8001040 <software_delay+0x10>
	while(tick-->0)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1ed      	bne.n	800103a <software_delay+0xa>
		}
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LCD_init>:

void LCD_init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
	software_delay(1000000);
 8001072:	4849      	ldr	r0, [pc, #292]	; (8001198 <LCD_init+0x12c>)
 8001074:	f7ff ffdc 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f89d 	bl	80011bc <LCD_send_4bits>
 8001082:	4845      	ldr	r0, [pc, #276]	; (8001198 <LCD_init+0x12c>)
 8001084:	f7ff ffd4 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f895 	bl	80011bc <LCD_send_4bits>
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <LCD_init+0x12c>)
 8001094:	f7ff ffcc 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(400000);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f88d 	bl	80011bc <LCD_send_4bits>
 80010a2:	483e      	ldr	r0, [pc, #248]	; (800119c <LCD_init+0x130>)
 80010a4:	f7ff ffc4 	bl	8001030 <software_delay>
	//Set 4-bit
	LCD_send_4bits(0x02,0,0);	software_delay(400000);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 f885 	bl	80011bc <LCD_send_4bits>
 80010b2:	483a      	ldr	r0, [pc, #232]	; (800119c <LCD_init+0x130>)
 80010b4:	f7ff ffbc 	bl	8001030 <software_delay>

	//Function SET
	LCD_write_command(LCD_FUNCTION_INSTRUCTION | LCD_FUNCTION_DL_4BIT | LCD_FUNCTION_LINE_NUMBER_2 | LCD_FUNCTION_FONT_5x8); software_delay(50000);
 80010b8:	2028      	movs	r0, #40	; 0x28
 80010ba:	f000 f914 	bl	80012e6 <LCD_write_command>
 80010be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010c2:	f7ff ffb5 	bl	8001030 <software_delay>
	//Display on
	LCD_write_command(LCD_DISPLAY_INSTRUCTION | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR_OFF | LCD_DISPLAY_BLINK_OFF);software_delay(100000);
 80010c6:	200c      	movs	r0, #12
 80010c8:	f000 f90d 	bl	80012e6 <LCD_write_command>
 80010cc:	4834      	ldr	r0, [pc, #208]	; (80011a0 <LCD_init+0x134>)
 80010ce:	f7ff ffaf 	bl	8001030 <software_delay>
	//Display clear
	LCD_write_command(LCD_CLEAR_INSTRUCTION);software_delay(100000);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 f907 	bl	80012e6 <LCD_write_command>
 80010d8:	4831      	ldr	r0, [pc, #196]	; (80011a0 <LCD_init+0x134>)
 80010da:	f7ff ffa9 	bl	8001030 <software_delay>

	//Entry mode
	LCD_write_command(LCD_ENTRY_MODE_INSTRUCTION | LCD_ENTRY_MODE_INCREMENT | LCD_ENTRY_MODE_SHIFT_DISPLAY_OFF);software_delay(100000);
 80010de:	2006      	movs	r0, #6
 80010e0:	f000 f901 	bl	80012e6 <LCD_write_command>
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <LCD_init+0x134>)
 80010e6:	f7ff ffa3 	bl	8001030 <software_delay>
	//Init end

	//Return home
	LCD_write_command(LCD_HOME_INSTRUCTION);	software_delay(100000);
 80010ea:	2002      	movs	r0, #2
 80010ec:	f000 f8fb 	bl	80012e6 <LCD_write_command>
 80010f0:	482b      	ldr	r0, [pc, #172]	; (80011a0 <LCD_init+0x134>)
 80010f2:	f7ff ff9d 	bl	8001030 <software_delay>
	uint8_t custom_char1[] = LCD_CUSTOM_CHAR_ARROW_UP_PATERN;
 80010f6:	4a2b      	ldr	r2, [pc, #172]	; (80011a4 <LCD_init+0x138>)
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001100:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char1, 0);
 8001104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f98d 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char2[] = LCD_CUSTOM_CHAR_ARROW_DOWN_PATERN;
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <LCD_init+0x13c>)
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char2, 1);
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f980 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char3[] = LCD_CUSTOM_CHAR_ARROW_OUT_PATERN;
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <LCD_init+0x140>)
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001134:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char3, 2);
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	2102      	movs	r1, #2
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f973 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char4[] = LCD_CUSTOM_CHAR_ARROW_INTO_PATERN;
 8001144:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <LCD_init+0x144>)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char4, 3);
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2103      	movs	r1, #3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f966 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char5[] = LCD_CUSTOM_CHAR_ARROW_ENTER_PATERN;
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <LCD_init+0x148>)
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001168:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char5, 4);
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2104      	movs	r1, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f959 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char6[] = LCD_CUSTOM_CHAR_ARROW_PLUS_MINUS_PATERN;
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <LCD_init+0x14c>)
 800117a:	463b      	mov	r3, r7
 800117c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001180:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char6, 5);
 8001184:	463b      	mov	r3, r7
 8001186:	2105      	movs	r1, #5
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f94e 	bl	800142a <LCD_create_custom_character>



}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	000f4240 	.word	0x000f4240
 800119c:	00061a80 	.word	0x00061a80
 80011a0:	000186a0 	.word	0x000186a0
 80011a4:	0800cc08 	.word	0x0800cc08
 80011a8:	0800cc10 	.word	0x0800cc10
 80011ac:	0800cc18 	.word	0x0800cc18
 80011b0:	0800cc20 	.word	0x0800cc20
 80011b4:	0800cc28 	.word	0x0800cc28
 80011b8:	0800cc30 	.word	0x0800cc30

080011bc <LCD_send_4bits>:


void LCD_send_4bits(uint8_t data_to_send, char RS, char RW)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	460b      	mov	r3, r1
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	4613      	mov	r3, r2
 80011cc:	717b      	strb	r3, [r7, #5]
	LCD_GPIO_SET_VALUE(LCD_GPIO_RS_Pin, RS, LCD_GPIO_RS_Port);
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <LCD_send_4bits+0x24>
 80011d4:	2200      	movs	r2, #0
 80011d6:	2104      	movs	r1, #4
 80011d8:	4834      	ldr	r0, [pc, #208]	; (80012ac <LCD_send_4bits+0xf0>)
 80011da:	f002 fe1f 	bl	8003e1c <HAL_GPIO_WritePin>
 80011de:	e004      	b.n	80011ea <LCD_send_4bits+0x2e>
 80011e0:	2201      	movs	r2, #1
 80011e2:	2104      	movs	r1, #4
 80011e4:	4831      	ldr	r0, [pc, #196]	; (80012ac <LCD_send_4bits+0xf0>)
 80011e6:	f002 fe19 	bl	8003e1c <HAL_GPIO_WritePin>
	//set RW to LOW (GND) by hardware

	if(data_to_send&(0x01<<0)){LCD_DATABIT_ON(4);}else{LCD_DATABIT_OFF(4);}
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <LCD_send_4bits+0x44>
 80011f4:	2201      	movs	r2, #1
 80011f6:	2110      	movs	r1, #16
 80011f8:	482c      	ldr	r0, [pc, #176]	; (80012ac <LCD_send_4bits+0xf0>)
 80011fa:	f002 fe0f 	bl	8003e1c <HAL_GPIO_WritePin>
 80011fe:	e004      	b.n	800120a <LCD_send_4bits+0x4e>
 8001200:	2200      	movs	r2, #0
 8001202:	2110      	movs	r1, #16
 8001204:	4829      	ldr	r0, [pc, #164]	; (80012ac <LCD_send_4bits+0xf0>)
 8001206:	f002 fe09 	bl	8003e1c <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<1)){LCD_DATABIT_ON(5);}else{LCD_DATABIT_OFF(5);}
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <LCD_send_4bits+0x64>
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	4824      	ldr	r0, [pc, #144]	; (80012ac <LCD_send_4bits+0xf0>)
 800121a:	f002 fdff 	bl	8003e1c <HAL_GPIO_WritePin>
 800121e:	e004      	b.n	800122a <LCD_send_4bits+0x6e>
 8001220:	2200      	movs	r2, #0
 8001222:	2120      	movs	r1, #32
 8001224:	4821      	ldr	r0, [pc, #132]	; (80012ac <LCD_send_4bits+0xf0>)
 8001226:	f002 fdf9 	bl	8003e1c <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<2)){LCD_DATABIT_ON(6);}else{LCD_DATABIT_OFF(6);}
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <LCD_send_4bits+0x84>
 8001234:	2201      	movs	r2, #1
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	481c      	ldr	r0, [pc, #112]	; (80012ac <LCD_send_4bits+0xf0>)
 800123a:	f002 fdef 	bl	8003e1c <HAL_GPIO_WritePin>
 800123e:	e004      	b.n	800124a <LCD_send_4bits+0x8e>
 8001240:	2200      	movs	r2, #0
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	4819      	ldr	r0, [pc, #100]	; (80012ac <LCD_send_4bits+0xf0>)
 8001246:	f002 fde9 	bl	8003e1c <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<3)){LCD_DATABIT_ON(7);}else{LCD_DATABIT_OFF(7);}
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <LCD_send_4bits+0xa4>
 8001254:	2201      	movs	r2, #1
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	4814      	ldr	r0, [pc, #80]	; (80012ac <LCD_send_4bits+0xf0>)
 800125a:	f002 fddf 	bl	8003e1c <HAL_GPIO_WritePin>
 800125e:	e004      	b.n	800126a <LCD_send_4bits+0xae>
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <LCD_send_4bits+0xf0>)
 8001266:	f002 fdd9 	bl	8003e1c <HAL_GPIO_WritePin>
	software_delay(100);
 800126a:	2064      	movs	r0, #100	; 0x64
 800126c:	f7ff fee0 	bl	8001030 <software_delay>
	
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8001270:	2201      	movs	r2, #1
 8001272:	2108      	movs	r1, #8
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LCD_send_4bits+0xf0>)
 8001276:	f002 fdd1 	bl	8003e1c <HAL_GPIO_WritePin>
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f7ff fed8 	bl	8001030 <software_delay>
	LCD_GPIO_OFF(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8001280:	2200      	movs	r2, #0
 8001282:	2108      	movs	r1, #8
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <LCD_send_4bits+0xf0>)
 8001286:	f002 fdc9 	bl	8003e1c <HAL_GPIO_WritePin>
 800128a:	2064      	movs	r0, #100	; 0x64
 800128c:	f7ff fed0 	bl	8001030 <software_delay>
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(1000);
 8001290:	2201      	movs	r2, #1
 8001292:	2108      	movs	r1, #8
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <LCD_send_4bits+0xf0>)
 8001296:	f002 fdc1 	bl	8003e1c <HAL_GPIO_WritePin>
 800129a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129e:	f7ff fec7 	bl	8001030 <software_delay>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <LCD_send_8bits_twice_4bits>:

void LCD_send_8bits_twice_4bits(uint8_t data, char RS, char RW)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	460b      	mov	r3, r1
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	4613      	mov	r3, r2
 80012c0:	717b      	strb	r3, [r7, #5]
	LCD_send_4bits((data>>4), RS, RW);	//high part
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	797a      	ldrb	r2, [r7, #5]
 80012ca:	79b9      	ldrb	r1, [r7, #6]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff75 	bl	80011bc <LCD_send_4bits>
	LCD_send_4bits(data, RS, RW);		//low part
 80012d2:	797a      	ldrb	r2, [r7, #5]
 80012d4:	79b9      	ldrb	r1, [r7, #6]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff6f 	bl	80011bc <LCD_send_4bits>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(command, 0, 0);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffda 	bl	80012b0 <LCD_send_8bits_twice_4bits>
	software_delay(10000);
 80012fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8001300:	f7ff fe96 	bl	8001030 <software_delay>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <LCD_write_data>:

void LCD_write_data(char byte_data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(byte_data, 1, 0);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ffc7 	bl	80012b0 <LCD_send_8bits_twice_4bits>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <LCD_write_char>:

void LCD_write_char(char character)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	if(isprint(character))	LCD_write_data(character);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3301      	adds	r3, #1
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <LCD_write_char+0x2c>)
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <LCD_write_char+0x24>
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffde 	bl	800130c <LCD_write_data>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800cd58 	.word	0x0800cd58

0800135c <LCD_write_text>:



void LCD_write_text(char* pText){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	while(*pText!='\0')
 8001364:	e007      	b.n	8001376 <LCD_write_text+0x1a>
	{
		LCD_write_char(*pText);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffde 	bl	800132c <LCD_write_char>
		pText++;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3301      	adds	r3, #1
 8001374:	607b      	str	r3, [r7, #4]
	while(*pText!='\0')
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f3      	bne.n	8001366 <LCD_write_text+0xa>
	}
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <LCD_goto_xy>:

void LCD_goto_xy(uint8_t line, uint8_t y)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]
	switch(line){
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <LCD_goto_xy+0x1c>
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d003      	beq.n	80013aa <LCD_goto_xy+0x22>
 80013a2:	e005      	b.n	80013b0 <LCD_goto_xy+0x28>
		case 0: line=0x00; break;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	e004      	b.n	80013b4 <LCD_goto_xy+0x2c>
		case 1: line=0x40; break;
 80013aa:	2340      	movs	r3, #64	; 0x40
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e001      	b.n	80013b4 <LCD_goto_xy+0x2c>
		default: line=0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	71fb      	strb	r3, [r7, #7]
	}
	LCD_write_command(LCD_DDRAM_ADDRESS | (line+y));
 80013b4:	79fa      	ldrb	r2, [r7, #7]
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4413      	add	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff8d 	bl	80012e6 <LCD_write_command>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <LCD_goto_line>:

void LCD_goto_line(uint8_t line)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	LCD_goto_xy(line, 0);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ffd0 	bl	8001388 <LCD_goto_xy>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LCD_printf>:
		LCD_write_text(text_buffer);
	}
}

uint8_t LCD_printf(const char * format, ... )
{
 80013f0:	b40f      	push	{r0, r1, r2, r3}
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
	#define LCD_BUFFER_SIZE (LCD_MAXIMUM_LINE_LENGTH+1)
	char text_buffer[LCD_BUFFER_SIZE];
	uint8_t length=0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
	va_list args;
	va_start (args, format);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	603b      	str	r3, [r7, #0]
	length=vsnprintf(text_buffer, LCD_BUFFER_SIZE, format, args);
 8001402:	1d38      	adds	r0, r7, #4
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6a3a      	ldr	r2, [r7, #32]
 8001408:	2111      	movs	r1, #17
 800140a:	f008 fe47 	bl	800a09c <vsniprintf>
 800140e:	4603      	mov	r3, r0
 8001410:	75fb      	strb	r3, [r7, #23]
	LCD_write_text(text_buffer);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffa1 	bl	800135c <LCD_write_text>
	va_end (args);
	return length;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr

0800142a <LCD_create_custom_character>:


void LCD_create_custom_character(uint8_t* pPattern, uint8_t position)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	70fb      	strb	r3, [r7, #3]
	LCD_write_command(LCD_CGRAM_ADDRESS | (position*8));
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	b25b      	sxtb	r3, r3
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	b25b      	sxtb	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff4d 	bl	80012e6 <LCD_write_command>
	for (uint8_t i=0; i<8; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e009      	b.n	8001466 <LCD_create_custom_character+0x3c>
		LCD_write_data(pPattern[i]);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff56 	bl	800130c <LCD_write_data>
	for (uint8_t i=0; i<8; i++)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	3301      	adds	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b07      	cmp	r3, #7
 800146a:	d9f2      	bls.n	8001452 <LCD_create_custom_character+0x28>
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fa48 	bl	8001914 <null_ptr_check>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d117      	bne.n	80014c0 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	20d0      	movs	r0, #208	; 0xd0
 8001498:	f000 f818 	bl	80014cc <bmp2_get_regs>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 80014a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b58      	cmp	r3, #88	; 0x58
 80014ae:	d105      	bne.n	80014bc <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fa7a 	bl	80019aa <get_calib_param>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e001      	b.n	80014c0 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 80014bc:	23fc      	movs	r3, #252	; 0xfc
 80014be:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f000 fa19 	bl	8001914 <null_ptr_check>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80014e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11e      	bne.n	800152c <bmp2_get_regs+0x60>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001502:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68dc      	ldr	r4, [r3, #12]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	7bf8      	ldrb	r0, [r7, #15]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	47a0      	blx	r4
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001526:	23fe      	movs	r3, #254	; 0xfe
 8001528:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800152a:	e001      	b.n	8001530 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800152c:	23ff      	movs	r3, #255	; 0xff
 800152e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}

0800153c <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b04      	cmp	r3, #4
 800154e:	d901      	bls.n	8001554 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001550:	2304      	movs	r3, #4
 8001552:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f000 f9dd 	bl	8001914 <null_ptr_check>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001560:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001564:	2b00      	cmp	r3, #0
 8001566:	d150      	bne.n	800160a <bmp2_set_regs+0xce>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d04d      	beq.n	800160a <bmp2_set_regs+0xce>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d04a      	beq.n	800160a <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d043      	beq.n	8001602 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d114      	bne.n	80015b2 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001588:	2300      	movs	r3, #0
 800158a:	77fb      	strb	r3, [r7, #31]
 800158c:	e00d      	b.n	80015aa <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	68f9      	ldr	r1, [r7, #12]
 800159a:	440b      	add	r3, r1
 800159c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	3301      	adds	r3, #1
 80015a8:	77fb      	strb	r3, [r7, #31]
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d8ed      	bhi.n	800158e <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d90b      	bls.n	80015d0 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80015b8:	f107 0114 	add.w	r1, r7, #20
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f9c7 	bl	8001954 <interleave_data>
                temp_len = ((len * 2) - 1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	e001      	b.n	80015d4 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691c      	ldr	r4, [r3, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	7818      	ldrb	r0, [r3, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f107 0114 	add.w	r1, r7, #20
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	47a0      	blx	r4
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80015fa:	23fe      	movs	r3, #254	; 0xfe
 80015fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001600:	e007      	b.n	8001612 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001602:	23fd      	movs	r3, #253	; 0xfd
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001608:	e003      	b.n	8001612 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001610:	e000      	b.n	8001614 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001612:	bf00      	nop
    }

    return rslt;
 8001614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001618:	4618      	mov	r0, r3
 800161a:	372c      	adds	r7, #44	; 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}

08001620 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8001628:	23e0      	movs	r3, #224	; 0xe0
 800162a:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800162c:	23b6      	movs	r3, #182	; 0xb6
 800162e:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001630:	f107 010d 	add.w	r1, r7, #13
 8001634:	f107 000e 	add.w	r0, r7, #14
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f7ff ff7e 	bl	800153c <bmp2_set_regs>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800165a:	2300      	movs	r3, #0
 800165c:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d02d      	beq.n	80016c0 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001664:	f107 010c 	add.w	r1, r7, #12
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2202      	movs	r2, #2
 800166c:	20f4      	movs	r0, #244	; 0xf4
 800166e:	f7ff ff2d 	bl	80014cc <bmp2_get_regs>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d122      	bne.n	80016c4 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	095b      	lsrs	r3, r3, #5
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001688:	7b3b      	ldrb	r3, [r7, #12]
 800168a:	109b      	asrs	r3, r3, #2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001698:	7b7b      	ldrb	r3, [r7, #13]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	b2da      	uxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	109b      	asrs	r3, r3, #2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	715a      	strb	r2, [r3, #5]
 80016be:	e001      	b.n	80016c4 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016c0:	23ff      	movs	r3, #255	; 0xff
 80016c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f9fe 	bl	8001ae0 <conf_sensor>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01b      	beq.n	8001736 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80016fe:	f107 010e 	add.w	r1, r7, #14
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	20f3      	movs	r0, #243	; 0xf3
 8001708:	f7ff fee0 	bl	80014cc <bmp2_get_regs>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d110      	bne.n	800173a <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	10db      	asrs	r3, r3, #3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	705a      	strb	r2, [r3, #1]
 8001734:	e001      	b.n	800173a <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001736:	23ff      	movs	r3, #255	; 0xff
 8001738:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f9c0 	bl	8001ae0 <conf_sensor>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001764:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	2300      	movs	r3, #0
 8001780:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d024      	beq.n	80017dc <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001792:	f107 0110 	add.w	r1, r7, #16
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2206      	movs	r2, #6
 800179a:	20f7      	movs	r0, #247	; 0xf7
 800179c:	f7ff fe96 	bl	80014cc <bmp2_get_regs>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80017a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d119      	bne.n	80017e0 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80017ac:	f107 0208 	add.w	r2, r7, #8
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 faba 	bl	8001d30 <parse_sensor_data>
 80017bc:	4603      	mov	r3, r0
 80017be:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80017c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f80b 	bl	80017ec <bmp2_compensate_data>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]
 80017da:	e001      	b.n	80017e0 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80017dc:	23ff      	movs	r3, #255	; 0xff
 80017de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f88b 	bl	8001914 <null_ptr_check>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d129      	bne.n	800185e <bmp2_compensate_data+0x72>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d026      	beq.n	800185e <bmp2_compensate_data+0x72>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d023      	beq.n	800185e <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3308      	adds	r3, #8
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fabc 	bl	8001db8 <compensate_temperature>
 8001840:	4603      	mov	r3, r0
 8001842:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fba8 	bl	8001fa8 <compensate_pressure>
 8001858:	4603      	mov	r3, r0
 800185a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800185c:	e001      	b.n	8001862 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800185e:	23ff      	movs	r3, #255	; 0xff
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b092      	sub	sp, #72	; 0x48
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <bmp2_compute_meas_time+0x9c>)
 800187e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001882:	461d      	mov	r5, r3
 8001884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <bmp2_compute_meas_time+0xa0>)
 800188e:	f107 0410 	add.w	r4, r7, #16
 8001892:	461d      	mov	r5, r3
 8001894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800189c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f837 	bl	8001914 <null_ptr_check>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80018ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d122      	bne.n	80018fa <bmp2_compute_meas_time+0x8a>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01f      	beq.n	80018fa <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7e1b      	ldrb	r3, [r3, #24]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d111      	bne.n	80018e6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	3348      	adds	r3, #72	; 0x48
 80018ca:	443b      	add	r3, r7
 80018cc:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	789b      	ldrb	r3, [r3, #2]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	3348      	adds	r3, #72	; 0x48
 80018d8:	443b      	add	r3, r7
 80018da:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80018de:	441a      	add	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018e4:	e00c      	b.n	8001900 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	78db      	ldrb	r3, [r3, #3]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3348      	adds	r3, #72	; 0x48
 80018ee:	443b      	add	r3, r7
 80018f0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018f8:	e002      	b.n	8001900 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80018fa:	23ff      	movs	r3, #255	; 0xff
 80018fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001900:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001904:	4618      	mov	r0, r3
 8001906:	3748      	adds	r7, #72	; 0x48
 8001908:	46bd      	mov	sp, r7
 800190a:	bdb0      	pop	{r4, r5, r7, pc}
 800190c:	0800cc3c 	.word	0x0800cc3c
 8001910:	0800cc50 	.word	0x0800cc50

08001914 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <null_ptr_check+0x26>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <null_ptr_check+0x26>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <null_ptr_check+0x26>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800193a:	23ff      	movs	r3, #255	; 0xff
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e001      	b.n	8001944 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e015      	b.n	8001994 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	441a      	add	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	3b01      	subs	r3, #1
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	440b      	add	r3, r1
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	441a      	add	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	440b      	add	r3, r1
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d3e5      	bcc.n	8001968 <interleave_data+0x14>
    }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b08a      	sub	sp, #40	; 0x28
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80019c8:	f107 010c 	add.w	r1, r7, #12
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2219      	movs	r2, #25
 80019d0:	2088      	movs	r0, #136	; 0x88
 80019d2:	f7ff fd7b 	bl	80014cc <bmp2_get_regs>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80019dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d177      	bne.n	8001ad4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7b3b      	ldrb	r3, [r7, #12]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001a0a:	7c7b      	ldrb	r3, [r7, #17]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	7c3b      	ldrb	r3, [r7, #16]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	7cbb      	ldrb	r3, [r7, #18]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001a30:	7d7b      	ldrb	r3, [r7, #21]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	7d3b      	ldrb	r3, [r7, #20]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	7dbb      	ldrb	r3, [r7, #22]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001a54:	7e7b      	ldrb	r3, [r7, #25]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	7e3b      	ldrb	r3, [r7, #24]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001a66:	7efb      	ldrb	r3, [r7, #27]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	7ebb      	ldrb	r3, [r7, #26]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001a78:	7f7b      	ldrb	r3, [r7, #29]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	7f3b      	ldrb	r3, [r7, #28]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	7fbb      	ldrb	r3, [r7, #30]
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001a9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001ac8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001aee:	2300      	movs	r3, #0
 8001af0:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001af2:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001af6:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d074      	beq.n	8001be8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001afe:	f107 0114 	add.w	r1, r7, #20
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	20f4      	movs	r0, #244	; 0xf4
 8001b08:	f7ff fce0 	bl	80014cc <bmp2_get_regs>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d169      	bne.n	8001bec <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fd81 	bl	8001620 <bmp2_soft_reset>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d160      	bne.n	8001bec <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f861 	bl	8001bf8 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001b36:	7d7b      	ldrb	r3, [r7, #21]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	b25a      	sxtb	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	789b      	ldrb	r3, [r3, #2]
 8001b44:	015b      	lsls	r3, r3, #5
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001b50:	7d7b      	ldrb	r3, [r7, #21]
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	f023 031c 	bic.w	r3, r3, #28
 8001b58:	b25a      	sxtb	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	791b      	ldrb	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	f003 031c 	and.w	r3, r3, #28
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001b70:	7d7b      	ldrb	r3, [r7, #21]
 8001b72:	b25b      	sxtb	r3, r3
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	b25a      	sxtb	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001b8e:	f107 0114 	add.w	r1, r7, #20
 8001b92:	f107 0010 	add.w	r0, r7, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f7ff fccf 	bl	800153c <bmp2_set_regs>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d120      	bne.n	8001bec <conf_sensor+0x10c>
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01d      	beq.n	8001bec <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001bb6:	7d3b      	ldrb	r3, [r7, #20]
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001bd2:	f107 0114 	add.w	r1, r7, #20
 8001bd6:	f107 0010 	add.w	r0, r7, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f7ff fcad 	bl	800153c <bmp2_set_regs>
 8001be2:	4603      	mov	r3, r0
 8001be4:	75fb      	strb	r3, [r7, #23]
 8001be6:	e001      	b.n	8001bec <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001be8:	23ff      	movs	r3, #255	; 0xff
 8001bea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	78db      	ldrb	r3, [r3, #3]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	f200 808b 	bhi.w	8001d22 <set_os_mode+0x12a>
 8001c0c:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <set_os_mode+0x1c>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c29 	.word	0x08001c29
 8001c18:	08001c5b 	.word	0x08001c5b
 8001c1c:	08001c8d 	.word	0x08001c8d
 8001c20:	08001cbf 	.word	0x08001cbf
 8001c24:	08001cf1 	.word	0x08001cf1
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	f023 031c 	bic.w	r3, r3, #28
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	701a      	strb	r2, [r3, #0]
            break;
 8001c58:	e064      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	f043 0320 	orr.w	r3, r3, #32
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	f023 031c 	bic.w	r3, r3, #28
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	701a      	strb	r2, [r3, #0]
            break;
 8001c8a:	e04b      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	f023 031c 	bic.w	r3, r3, #28
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	f043 030c 	orr.w	r3, r3, #12
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	701a      	strb	r2, [r3, #0]
            break;
 8001cbc:	e032      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	f043 0320 	orr.w	r3, r3, #32
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	f023 031c 	bic.w	r3, r3, #28
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	701a      	strb	r2, [r3, #0]
            break;
 8001cee:	e019      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	f023 031c 	bic.w	r3, r3, #28
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	f043 0314 	orr.w	r3, r3, #20
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	701a      	strb	r2, [r3, #0]
            break;
 8001d20:	e000      	b.n	8001d24 <set_os_mode+0x12c>
        default:
            break;
 8001d22:	bf00      	nop
    }
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3301      	adds	r3, #1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3302      	adds	r3, #2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3303      	adds	r3, #3
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	031b      	lsls	r3, r3, #12
 8001d6e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3305      	adds	r3, #5
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f000 fae5 	bl	8002370 <st_check_boundaries>
 8001da6:	4603      	mov	r3, r0
 8001da8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001daa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dbc:	b08c      	sub	sp, #48	; 0x30
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbc7 	bl	8000564 <__aeabi_i2d>
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <compensate_temperature+0x1d4>)
 8001ddc:	f7fe fd56 	bl	800088c <__aeabi_ddiv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4614      	mov	r4, r2
 8001de6:	461d      	mov	r5, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	8b9b      	ldrh	r3, [r3, #28]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fba9 	bl	8000544 <__aeabi_ui2d>
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <compensate_temperature+0x1d8>)
 8001df8:	f7fe fd48 	bl	800088c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa60 	bl	80002c8 <__aeabi_dsub>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fba4 	bl	8000564 <__aeabi_i2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fc08 	bl	8000638 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb95 	bl	8000564 <__aeabi_i2d>
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e42:	f7fe fd23 	bl	800088c <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8b9b      	ldrh	r3, [r3, #28]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb76 	bl	8000544 <__aeabi_ui2d>
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <compensate_temperature+0x1dc>)
 8001e5e:	f7fe fd15 	bl	800088c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4620      	mov	r0, r4
 8001e68:	4629      	mov	r1, r5
 8001e6a:	f7fe fa2d 	bl	80002c8 <__aeabi_dsub>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4614      	mov	r4, r2
 8001e74:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb72 	bl	8000564 <__aeabi_i2d>
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e88:	f7fe fd00 	bl	800088c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4690      	mov	r8, r2
 8001e92:	4699      	mov	r9, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8b9b      	ldrh	r3, [r3, #28]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb53 	bl	8000544 <__aeabi_ui2d>
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <compensate_temperature+0x1dc>)
 8001ea4:	f7fe fcf2 	bl	800088c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4640      	mov	r0, r8
 8001eae:	4649      	mov	r1, r9
 8001eb0:	f7fe fa0a 	bl	80002c8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe fbbc 	bl	8000638 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb48 	bl	8000564 <__aeabi_i2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
    var2 =
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe fbac 	bl	8000638 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ef0:	f7fe f9ec 	bl	80002cc <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fe4c 	bl	8000b98 <__aeabi_d2iz>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001f06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f0e:	f7fe f9dd 	bl	80002cc <__adddf3>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <compensate_temperature+0x1e0>)
 8001f20:	f7fe fcb4 	bl	800088c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <compensate_temperature+0x1e4>)
 8001f32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f36:	f7fe fdf1 	bl	8000b1c <__aeabi_dcmplt>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <compensate_temperature+0x1e4>)
 8001f46:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <compensate_temperature+0x1e8>)
 8001f56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f5a:	f7fe fdfd 	bl	8000b58 <__aeabi_dcmpgt>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <compensate_temperature+0x1e8>)
 8001f6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f7a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001f7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f8c:	40d00000 	.word	0x40d00000
 8001f90:	40900000 	.word	0x40900000
 8001f94:	40c00000 	.word	0x40c00000
 8001f98:	40b40000 	.word	0x40b40000
 8001f9c:	c0440000 	.word	0xc0440000
 8001fa0:	40554000 	.word	0x40554000
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe faca 	bl	8000564 <__aeabi_i2d>
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	f7fe fc58 	bl	800088c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4bcb      	ldr	r3, [pc, #812]	; (8002318 <compensate_pressure+0x370>)
 8001fea:	f7fe f96d 	bl	80002c8 <__aeabi_dsub>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ffa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ffe:	f7fe fb1b 	bl	8000638 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe faa7 	bl	8000564 <__aeabi_i2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f7fe fb0b 	bl	8000638 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	4bbb      	ldr	r3, [pc, #748]	; (800231c <compensate_pressure+0x374>)
 8002030:	f7fe fc2c 	bl	800088c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fa8e 	bl	8000564 <__aeabi_i2d>
 8002048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204c:	f7fe faf4 	bl	8000638 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	f7fe f936 	bl	80002cc <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002068:	f7fe f930 	bl	80002cc <__adddf3>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4ba9      	ldr	r3, [pc, #676]	; (8002320 <compensate_pressure+0x378>)
 800207a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800207e:	f7fe fc05 	bl	800088c <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	461d      	mov	r5, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa67 	bl	8000564 <__aeabi_i2d>
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4ba2      	ldr	r3, [pc, #648]	; (8002324 <compensate_pressure+0x37c>)
 800209c:	f7fe facc 	bl	8000638 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe f910 	bl	80002cc <__adddf3>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa52 	bl	8000564 <__aeabi_i2d>
 80020c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c4:	f7fe fab8 	bl	8000638 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	f7fe fab0 	bl	8000638 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b90      	ldr	r3, [pc, #576]	; (8002328 <compensate_pressure+0x380>)
 80020e6:	f7fe fbd1 	bl	800088c <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4614      	mov	r4, r2
 80020f0:	461d      	mov	r5, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa33 	bl	8000564 <__aeabi_i2d>
 80020fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002102:	f7fe fa99 	bl	8000638 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4620      	mov	r0, r4
 800210c:	4629      	mov	r1, r5
 800210e:	f7fe f8dd 	bl	80002cc <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <compensate_pressure+0x380>)
 8002120:	f7fe fbb4 	bl	800088c <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b7a      	ldr	r3, [pc, #488]	; (800231c <compensate_pressure+0x374>)
 8002132:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002136:	f7fe fba9 	bl	800088c <__aeabi_ddiv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b79      	ldr	r3, [pc, #484]	; (800232c <compensate_pressure+0x384>)
 8002148:	f7fe f8c0 	bl	80002cc <__adddf3>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4614      	mov	r4, r2
 8002152:	461d      	mov	r5, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f9f3 	bl	8000544 <__aeabi_ui2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4620      	mov	r0, r4
 8002164:	4629      	mov	r1, r5
 8002166:	f7fe fa67 	bl	8000638 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800217e:	f7fe fccd 	bl	8000b1c <__aeabi_dcmplt>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <compensate_pressure+0x1f8>
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002194:	f7fe fce0 	bl	8000b58 <__aeabi_dcmpgt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80de 	beq.w	800235c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9cd 	bl	8000544 <__aeabi_ui2d>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	f04f 0000 	mov.w	r0, #0
 80021b2:	495f      	ldr	r1, [pc, #380]	; (8002330 <compensate_pressure+0x388>)
 80021b4:	f7fe f888 	bl	80002c8 <__aeabi_dsub>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <compensate_pressure+0x38c>)
 80021c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021ca:	f7fe fb5f 	bl	800088c <__aeabi_ddiv>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021d6:	f7fe f877 	bl	80002c8 <__aeabi_dsub>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	a347      	add	r3, pc, #284	; (adr r3, 8002300 <compensate_pressure+0x358>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fa26 	bl	8000638 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f8:	f7fe fb48 	bl	800088c <__aeabi_ddiv>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f9aa 	bl	8000564 <__aeabi_i2d>
 8002210:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002214:	f7fe fa10 	bl	8000638 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002224:	f7fe fa08 	bl	8000638 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	4b40      	ldr	r3, [pc, #256]	; (8002338 <compensate_pressure+0x390>)
 8002236:	f7fe fb29 	bl	800088c <__aeabi_ddiv>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f98b 	bl	8000564 <__aeabi_i2d>
 800224e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002252:	f7fe f9f1 	bl	8000638 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <compensate_pressure+0x374>)
 8002264:	f7fe fb12 	bl	800088c <__aeabi_ddiv>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002270:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002274:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002278:	f7fe f828 	bl	80002cc <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f96a 	bl	8000564 <__aeabi_i2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fe f818 	bl	80002cc <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <compensate_pressure+0x394>)
 80022aa:	f7fe faef 	bl	800088c <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022b6:	f7fe f809 	bl	80002cc <__adddf3>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 80022c2:	a311      	add	r3, pc, #68	; (adr r3, 8002308 <compensate_pressure+0x360>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022cc:	f7fe fc26 	bl	8000b1c <__aeabi_dcmplt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 80022d6:	a30c      	add	r3, pc, #48	; (adr r3, 8002308 <compensate_pressure+0x360>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 80022e6:	a30a      	add	r3, pc, #40	; (adr r3, 8002310 <compensate_pressure+0x368>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022f0:	f7fe fc32 	bl	8000b58 <__aeabi_dcmpgt>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	e022      	b.n	8002340 <compensate_pressure+0x398>
 80022fa:	bf00      	nop
 80022fc:	f3af 8000 	nop.w
 8002300:	00000000 	.word	0x00000000
 8002304:	40b86a00 	.word	0x40b86a00
 8002308:	00000000 	.word	0x00000000
 800230c:	40dd4c00 	.word	0x40dd4c00
 8002310:	00000000 	.word	0x00000000
 8002314:	40fadb00 	.word	0x40fadb00
 8002318:	40ef4000 	.word	0x40ef4000
 800231c:	40e00000 	.word	0x40e00000
 8002320:	40100000 	.word	0x40100000
 8002324:	40f00000 	.word	0x40f00000
 8002328:	41200000 	.word	0x41200000
 800232c:	3ff00000 	.word	0x3ff00000
 8002330:	41300000 	.word	0x41300000
 8002334:	40b00000 	.word	0x40b00000
 8002338:	41e00000 	.word	0x41e00000
 800233c:	40300000 	.word	0x40300000
 8002340:	d007      	beq.n	8002352 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8002342:	a309      	add	r3, pc, #36	; (adr r3, 8002368 <compensate_pressure+0x3c0>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 800234c:	2304      	movs	r3, #4
 800234e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002358:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 800235c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002360:	4618      	mov	r0, r3
 8002362:	3730      	adds	r7, #48	; 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bdb0      	pop	{r4, r5, r7, pc}
 8002368:	00000000 	.word	0x00000000
 800236c:	40fadb00 	.word	0x40fadb00

08002370 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db03      	blt.n	800238c <st_check_boundaries+0x1c>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <st_check_boundaries+0x88>)
 8002388:	4293      	cmp	r3, r2
 800238a:	dd09      	ble.n	80023a0 <st_check_boundaries+0x30>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db06      	blt.n	80023a0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <st_check_boundaries+0x88>)
 8002396:	4293      	cmp	r3, r2
 8002398:	dc02      	bgt.n	80023a0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 800239a:	23fa      	movs	r3, #250	; 0xfa
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e023      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db03      	blt.n	80023ae <st_check_boundaries+0x3e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <st_check_boundaries+0x88>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	dd09      	ble.n	80023c2 <st_check_boundaries+0x52>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db06      	blt.n	80023c2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <st_check_boundaries+0x88>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	dc02      	bgt.n	80023c2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 80023bc:	23fb      	movs	r3, #251	; 0xfb
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e012      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db03      	blt.n	80023d0 <st_check_boundaries+0x60>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <st_check_boundaries+0x88>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	dd09      	ble.n	80023e4 <st_check_boundaries+0x74>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db03      	blt.n	80023de <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <st_check_boundaries+0x88>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	dd02      	ble.n	80023e4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80023de:	23f9      	movs	r3, #249	; 0xf9
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e001      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	000ffff0 	.word	0x000ffff0

080023fc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff f836 	bl	8001476 <bmp2_init>
 800240a:	4603      	mov	r3, r0
 800240c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f91b 	bl	8001650 <bmp2_get_config>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 800241e:	2303      	movs	r3, #3
 8002420:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8002422:	2300      	movs	r3, #0
 8002424:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8002426:	2303      	movs	r3, #3
 8002428:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f94d 	bl	80016d0 <bmp2_set_config>
 8002436:	4603      	mov	r3, r0
 8002438:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4619      	mov	r1, r3
 8002442:	2003      	movs	r0, #3
 8002444:	f7ff f97f 	bl	8001746 <bmp2_set_power_mode>
 8002448:	4603      	mov	r3, r0
 800244a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 800244c:	f107 0108 	add.w	r1, r7, #8
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fa0a 	bl	8001870 <bmp2_compute_meas_time>
 800245c:	4603      	mov	r3, r0
 800245e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6858      	ldr	r0, [r3, #4]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	891b      	ldrh	r3, [r3, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	4619      	mov	r1, r3
 8002494:	f001 fcc2 	bl	8003e1c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	f107 010f 	add.w	r1, r7, #15
 80024a0:	2305      	movs	r3, #5
 80024a2:	2201      	movs	r2, #1
 80024a4:	f002 febd 	bl	8005222 <HAL_SPI_Transmit>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	2305      	movs	r3, #5
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	f003 f821 	bl	80054fe <HAL_SPI_Receive>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	7dbb      	ldrb	r3, [r7, #22]
 80024c2:	4413      	add	r3, r2
 80024c4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6858      	ldr	r0, [r3, #4]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	891b      	ldrh	r3, [r3, #8]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4619      	mov	r1, r3
 80024d2:	f001 fca3 	bl	8003e1c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80024d6:	7dbb      	ldrb	r3, [r7, #22]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <bmp2_spi_read+0x74>
    iError = -1;
 80024dc:	23ff      	movs	r3, #255	; 0xff
 80024de:	75fb      	strb	r3, [r7, #23]

  return iError;
 80024e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6858      	ldr	r0, [r3, #4]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	891b      	ldrh	r3, [r3, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	f001 fc82 	bl	8003e1c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	f107 010f 	add.w	r1, r7, #15
 8002520:	2305      	movs	r3, #5
 8002522:	2201      	movs	r2, #1
 8002524:	f002 fe7d 	bl	8005222 <HAL_SPI_Transmit>
 8002528:	4603      	mov	r3, r0
 800252a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	b29a      	uxth	r2, r3
 8002534:	2305      	movs	r3, #5
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	f002 fe73 	bl	8005222 <HAL_SPI_Transmit>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	7dbb      	ldrb	r3, [r7, #22]
 8002542:	4413      	add	r3, r2
 8002544:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6858      	ldr	r0, [r3, #4]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	891b      	ldrh	r3, [r3, #8]
 800254e:	2201      	movs	r2, #1
 8002550:	4619      	mov	r1, r3
 8002552:	f001 fc63 	bl	8003e1c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002556:	7dbb      	ldrb	r3, [r7, #22]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <bmp2_spi_write+0x74>
    iError = -1;
 800255c:	23ff      	movs	r3, #255	; 0xff
 800255e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a05      	ldr	r2, [pc, #20]	; (8002590 <bmp2_delay_us+0x24>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	4618      	mov	r0, r3
 8002582:	f001 f8d7 	bl	8003734 <HAL_Delay>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08d      	sub	sp, #52	; 0x34
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 800259c:	23ff      	movs	r3, #255	; 0xff
 800259e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <BMP2_ReadTemperature_degC+0x9c>)
 80025a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	899b      	ldrh	r3, [r3, #12]
 80025b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f896 	bl	80016ee <bmp2_get_status>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f8ce 	bl	8001770 <bmp2_get_sensor_data>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 80025da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 80025e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80025f0:	7f3b      	ldrb	r3, [r7, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <BMP2_ReadTemperature_degC+0x6a>
 80025f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	dcdb      	bgt.n	80025b6 <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685c      	ldr	r4, [r3, #4]
 8002602:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002606:	f7fe fb0f 	bl	8000c28 <__aeabi_d2f>
 800260a:	4603      	mov	r3, r0
 800260c:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002616:	729a      	strb	r2, [r3, #10]

  return temp;
 8002618:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800261c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002620:	eeb0 0a47 	vmov.f32	s0, s14
 8002624:	eef0 0a67 	vmov.f32	s1, s15
 8002628:	3734      	adds	r7, #52	; 0x34
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	7ff80000 	.word	0x7ff80000

08002634 <ARM_PID_Init>:

static arm_pid_instance_f32 PID;
static float error;
static float32_t pid_out;
static uint32_t pwm_duty;
void ARM_PID_Init(float32_t KP,float32_t KI,float32_t KD) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	ed87 0a03 	vstr	s0, [r7, #12]
 800263e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002642:	ed87 1a01 	vstr	s2, [r7, #4]
    PID.Kp = KP;
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <ARM_PID_Init+0x34>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6193      	str	r3, [r2, #24]
    PID.Ki = KI;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <ARM_PID_Init+0x34>)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	61d3      	str	r3, [r2, #28]
    PID.Kd = KD;
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <ARM_PID_Init+0x34>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6213      	str	r3, [r2, #32]
    arm_pid_init_f32(&PID, 1);
 8002658:	2101      	movs	r1, #1
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <ARM_PID_Init+0x34>)
 800265c:	f006 f92e 	bl	80088bc <arm_pid_init_f32>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000244 	.word	0x20000244

0800266c <Calculate_PID_out>:

uint32_t Calculate_PID_out(float setpoint, float measured) {
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	ed87 0a01 	vstr	s0, [r7, #4]
 8002676:	edc7 0a00 	vstr	s1, [r7]
    // Funkcja oblicza aktualny error, potem pid_out a na koniec konwersja na PWM
    error = setpoint - measured;  // Calculate the error
 800267a:	ed97 7a01 	vldr	s14, [r7, #4]
 800267e:	edd7 7a00 	vldr	s15, [r7]
 8002682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <Calculate_PID_out+0xb8>)
 8002688:	edc3 7a00 	vstr	s15, [r3]
    pid_out = arm_pid_f32(&PID, error);  // Calculate the PID output
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <Calculate_PID_out+0xb8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a25      	ldr	r2, [pc, #148]	; (8002728 <Calculate_PID_out+0xbc>)
 8002692:	617a      	str	r2, [r7, #20]
 8002694:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	ed93 7a00 	vldr	s14, [r3]
 800269c:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80026b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80026b4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80026c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a0e      	ldr	r2, [pc, #56]	; (800272c <Calculate_PID_out+0xc0>)
 80026f2:	6013      	str	r3, [r2, #0]
    pwm_duty = (uint32_t)pid_out;  // Convert to PWM
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <Calculate_PID_out+0xc0>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fe:	ee17 2a90 	vmov	r2, s15
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <Calculate_PID_out+0xc4>)
 8002704:	601a      	str	r2, [r3, #0]
    if (pwm_duty > 45){
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <Calculate_PID_out+0xc4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b2d      	cmp	r3, #45	; 0x2d
 800270c:	d902      	bls.n	8002714 <Calculate_PID_out+0xa8>
    	// Limit the duty cycle to 100
    	pwm_duty = 45;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <Calculate_PID_out+0xc4>)
 8002710:	222d      	movs	r2, #45	; 0x2d
 8002712:	601a      	str	r2, [r3, #0]
    }
    if (pwm_duty < 0){
    	pwm_duty = 0;
    }// Limit the duty cycle to 0
    return pwm_duty;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <Calculate_PID_out+0xc4>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	20000268 	.word	0x20000268
 8002728:	20000244 	.word	0x20000244
 800272c:	2000026c 	.word	0x2000026c
 8002730:	20000270 	.word	0x20000270

08002734 <MX_GPIO_Init>:
     PG13   ------> ETH_TXD0
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	; 0x30
 8002738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 031c 	add.w	r3, r7, #28
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800274a:	4b9d      	ldr	r3, [pc, #628]	; (80029c0 <MX_GPIO_Init+0x28c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a9c      	ldr	r2, [pc, #624]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b9a      	ldr	r3, [pc, #616]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002762:	4b97      	ldr	r3, [pc, #604]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a96      	ldr	r2, [pc, #600]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b94      	ldr	r3, [pc, #592]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800277a:	4b91      	ldr	r3, [pc, #580]	; (80029c0 <MX_GPIO_Init+0x28c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a90      	ldr	r2, [pc, #576]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b8e      	ldr	r3, [pc, #568]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	4b8b      	ldr	r3, [pc, #556]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a8a      	ldr	r2, [pc, #552]	; (80029c0 <MX_GPIO_Init+0x28c>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	4b85      	ldr	r3, [pc, #532]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a84      	ldr	r2, [pc, #528]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b82      	ldr	r3, [pc, #520]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a7e      	ldr	r2, [pc, #504]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b7c      	ldr	r3, [pc, #496]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027da:	4b79      	ldr	r3, [pc, #484]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a78      	ldr	r2, [pc, #480]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <MX_GPIO_Init+0x28c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CS1_GPIO_Port, BMP2_CS1_Pin, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2110      	movs	r1, #16
 80027f6:	4873      	ldr	r0, [pc, #460]	; (80029c4 <MX_GPIO_Init+0x290>)
 80027f8:	f001 fb10 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80027fc:	2200      	movs	r2, #0
 80027fe:	f244 0181 	movw	r1, #16513	; 0x4081
 8002802:	4871      	ldr	r0, [pc, #452]	; (80029c8 <MX_GPIO_Init+0x294>)
 8002804:	f001 fb0a 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8002808:	2200      	movs	r2, #0
 800280a:	21fc      	movs	r1, #252	; 0xfc
 800280c:	486f      	ldr	r0, [pc, #444]	; (80029cc <MX_GPIO_Init+0x298>)
 800280e:	f001 fb05 	bl	8003e1c <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CS1_Pin;
 8002812:	2310      	movs	r3, #16
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BMP2_CS1_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 031c 	add.w	r3, r7, #28
 8002826:	4619      	mov	r1, r3
 8002828:	4866      	ldr	r0, [pc, #408]	; (80029c4 <MX_GPIO_Init+0x290>)
 800282a:	f001 f94b 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800282e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	4619      	mov	r1, r3
 8002844:	4862      	ldr	r0, [pc, #392]	; (80029d0 <MX_GPIO_Init+0x29c>)
 8002846:	f001 f93d 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800284a:	2332      	movs	r3, #50	; 0x32
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800285a:	230b      	movs	r3, #11
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285e:	f107 031c 	add.w	r3, r7, #28
 8002862:	4619      	mov	r1, r3
 8002864:	485a      	ldr	r0, [pc, #360]	; (80029d0 <MX_GPIO_Init+0x29c>)
 8002866:	f001 f92d 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800286a:	2386      	movs	r3, #134	; 0x86
 800286c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800287a:	230b      	movs	r3, #11
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	4853      	ldr	r0, [pc, #332]	; (80029d4 <MX_GPIO_Init+0x2a0>)
 8002886:	f001 f91d 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800288a:	2308      	movs	r3, #8
 800288c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800289a:	2302      	movs	r3, #2
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	484b      	ldr	r0, [pc, #300]	; (80029d4 <MX_GPIO_Init+0x2a0>)
 80028a6:	f001 f90d 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80028aa:	f244 0381 	movw	r3, #16513	; 0x4081
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4841      	ldr	r0, [pc, #260]	; (80029c8 <MX_GPIO_Init+0x294>)
 80028c4:	f001 f8fe 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80028c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028da:	230b      	movs	r3, #11
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	4838      	ldr	r0, [pc, #224]	; (80029c8 <MX_GPIO_Init+0x294>)
 80028e6:	f001 f8ed 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 80028ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028fc:	2302      	movs	r3, #2
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	4619      	mov	r1, r3
 8002906:	4831      	ldr	r0, [pc, #196]	; (80029cc <MX_GPIO_Init+0x298>)
 8002908:	f001 f8dc 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800290c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800291e:	230a      	movs	r3, #10
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	4619      	mov	r1, r3
 8002928:	482a      	ldr	r0, [pc, #168]	; (80029d4 <MX_GPIO_Init+0x2a0>)
 800292a:	f001 f8cb 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800292e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	4619      	mov	r1, r3
 8002942:	4824      	ldr	r0, [pc, #144]	; (80029d4 <MX_GPIO_Init+0x2a0>)
 8002944:	f001 f8be 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8002948:	23fc      	movs	r3, #252	; 0xfc
 800294a:	61fb      	str	r3, [r7, #28]
                          |LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	481b      	ldr	r0, [pc, #108]	; (80029cc <MX_GPIO_Init+0x298>)
 8002960:	f001 f8b0 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002964:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002976:	230b      	movs	r3, #11
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	4815      	ldr	r0, [pc, #84]	; (80029d8 <MX_GPIO_Init+0x2a4>)
 8002982:	f001 f89f 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 8002986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298c:	2312      	movs	r3, #18
 800298e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002998:	2304      	movs	r3, #4
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4809      	ldr	r0, [pc, #36]	; (80029c8 <MX_GPIO_Init+0x294>)
 80029a4:	f001 f88e 	bl	8003ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2100      	movs	r1, #0
 80029ac:	2028      	movs	r0, #40	; 0x28
 80029ae:	f000 ffc0 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029b2:	2028      	movs	r0, #40	; 0x28
 80029b4:	f000 ffd9 	bl	800396a <HAL_NVIC_EnableIRQ>

}
 80029b8:	bf00      	nop
 80029ba:	3730      	adds	r7, #48	; 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40020800 	.word	0x40020800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40021800 	.word	0x40021800

080029dc <set_pwm_power>:
  uint32_t Arr = htim->Init.Period + 1;
  uint32_t freq = timer_freq / (prescaler * Arr);
  return freq;
}

void set_pwm_power (TIM_HandleTypeDef *htim, uint32_t pwm_power){
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	if (pwm_power == 0){
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <set_pwm_power+0x18>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 0);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2200      	movs	r2, #0
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34
	}
	uint32_t Counter_period = htim->Init.Period;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60fb      	str	r3, [r7, #12]
	uint32_t pwm_val = (Counter_period*pwm_power)/100.0f;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a0a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002a30 <set_pwm_power+0x54>
 8002a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a16:	ee17 3a90 	vmov	r3, s15
 8002a1a:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (uint32_t)pwm_val);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	42c80000 	.word	0x42c80000

08002a34 <HAL_TIM_PeriodElapsedCallback>:
// Inside the HAL_TIM_PeriodElapsedCallback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a38:	b08b      	sub	sp, #44	; 0x2c
 8002a3a:	af06      	add	r7, sp, #24
 8002a3c:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a63      	ldr	r2, [pc, #396]	; (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	f040 80bf 	bne.w	8002bc6 <HAL_TIM_PeriodElapsedCallback+0x192>
    // Read the temperature with a frequency of 4 Hz. 
		temp_read = BMP2_ReadTemperature_degC(&bmp2dev_1);
 8002a48:	4862      	ldr	r0, [pc, #392]	; (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002a4a:	f7ff fda3 	bl	8002594 <BMP2_ReadTemperature_degC>
 8002a4e:	ec53 2b10 	vmov	r2, r3, d0
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fe f8e7 	bl	8000c28 <__aeabi_d2f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4a5e      	ldr	r2, [pc, #376]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a5e:	6013      	str	r3, [r2, #0]
		temp_read_int = (int)temp_read;
 8002a60:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a6a:	ee17 2a90 	vmov	r2, s15
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a70:	601a      	str	r2, [r3, #0]
		temp_fractional = (int)((temp_read - temp_read_int) * 1000);
 8002a72:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a74:	ed93 7a00 	vldr	s14, [r3]
 8002a78:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a88:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002be0 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8002a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a94:	ee17 2a90 	vmov	r2, s15
 8002a98:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002a9a:	601a      	str	r2, [r3, #0]
		// Write data to LCD
		LCD_goto_line(0);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe fc99 	bl	80013d4 <LCD_goto_line>
		LCD_printf("Actual=%d.%03d[C]", temp_read_int, temp_fractional);
 8002aa2:	4b4e      	ldr	r3, [pc, #312]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a4f      	ldr	r2, [pc, #316]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	484e      	ldr	r0, [pc, #312]	; (8002be8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002aae:	f7fe fc9f 	bl	80013f0 <LCD_printf>
		// Jakiś smiszny debugging dla odczytywania wartości zadaniej
		// opisać komentarze #TODO @Bartek
		if (dataReceivedFlag == 1){
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d13c      	bne.n	8002b36 <HAL_TIM_PeriodElapsedCallback+0x102>
			dataReceivedFlag = 0;  // Resetuj flagę
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]

			// Konwersja stringa na float
			receivedValue = atof(rxBuffer);
 8002ac2:	484b      	ldr	r0, [pc, #300]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002ac4:	f005 ff18 	bl	80088f8 <atof>
 8002ac8:	ec53 2b10 	vmov	r2, r3, d0
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fe f8aa 	bl	8000c28 <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002ad8:	6013      	str	r3, [r2, #0]
			temp_receivedValue_int = (int)receivedValue;
 8002ada:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae4:	ee17 2a90 	vmov	r2, s15
 8002ae8:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002aea:	601a      	str	r2, [r3, #0]
			temp_receivedValue_fractional = (int)((receivedValue - temp_receivedValue_int) * 1000);
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002aee:	ed93 7a00 	vldr	s14, [r3]
 8002af2:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b02:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002be0 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8002b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b0e:	ee17 2a90 	vmov	r2, s15
 8002b12:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002b14:	601a      	str	r2, [r3, #0]

			// Wyświetl odebraną wiadomość
			LCD_goto_line(1);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fe fc5c 	bl	80013d4 <LCD_goto_line>
			LCD_printf("Set:%d.%03d[C]       ",  temp_receivedValue_int, temp_receivedValue_fractional);
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a36      	ldr	r2, [pc, #216]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4836      	ldr	r0, [pc, #216]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002b28:	f7fe fc62 	bl	80013f0 <LCD_printf>

			// Resetuj rxBuffer
			memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	2100      	movs	r1, #0
 8002b30:	482f      	ldr	r0, [pc, #188]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002b32:	f007 fac1 	bl	800a0b8 <memset>
		}

    // Calculate the PID output
    pwm_duty = Calculate_PID_out(receivedValue, temp_read);
 8002b36:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b3e:	ed93 7a00 	vldr	s14, [r3]
 8002b42:	eef0 0a47 	vmov.f32	s1, s14
 8002b46:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4a:	f7ff fd8f 	bl	800266c <Calculate_PID_out>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4a2c      	ldr	r2, [pc, #176]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002b52:	6013      	str	r3, [r2, #0]

    set_pwm_power(&htim2, pwm_duty+6);
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3306      	adds	r3, #6
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	481c      	ldr	r0, [pc, #112]	; (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002b5e:	f7ff ff3d 	bl	80029dc <set_pwm_power>
	int msg_len = sprintf(json_msg, "{\"temperature\": %.2f, \"error\": %.2f, \"pwm_power\": %u, \"destined\": %.2f}\r\n",
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fd0e 	bl	8000588 <__aeabi_f2d>
 8002b6c:	4680      	mov	r8, r0
 8002b6e:	4689      	mov	r9, r1
			temp_read,receivedValue-temp_read,pwm_duty,receivedValue);
 8002b70:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b72:	ed93 7a00 	vldr	s14, [r3]
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
	int msg_len = sprintf(json_msg, "{\"temperature\": %.2f, \"error\": %.2f, \"pwm_power\": %u, \"destined\": %.2f}\r\n",
 8002b80:	ee17 0a90 	vmov	r0, s15
 8002b84:	f7fd fd00 	bl	8000588 <__aeabi_f2d>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	460d      	mov	r5, r1
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002b8e:	681e      	ldr	r6, [r3, #0]
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcf7 	bl	8000588 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ba2:	9602      	str	r6, [sp, #8]
 8002ba4:	e9cd 4500 	strd	r4, r5, [sp]
 8002ba8:	4642      	mov	r2, r8
 8002baa:	464b      	mov	r3, r9
 8002bac:	4916      	ldr	r1, [pc, #88]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002bae:	4817      	ldr	r0, [pc, #92]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002bb0:	f007 f9e6 	bl	8009f80 <siprintf>
 8002bb4:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart3, (uint8_t*)json_msg, msg_len, 1000);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	4913      	ldr	r1, [pc, #76]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002bc0:	4813      	ldr	r0, [pc, #76]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002bc2:	f004 fbed 	bl	80073a0 <HAL_UART_Transmit>
	}
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bd0:	20000494 	.word	0x20000494
 8002bd4:	20000018 	.word	0x20000018
 8002bd8:	20000284 	.word	0x20000284
 8002bdc:	20000274 	.word	0x20000274
 8002be0:	447a0000 	.word	0x447a0000
 8002be4:	20000278 	.word	0x20000278
 8002be8:	0800cc70 	.word	0x0800cc70
 8002bec:	2000042a 	.word	0x2000042a
 8002bf0:	20000328 	.word	0x20000328
 8002bf4:	20000288 	.word	0x20000288
 8002bf8:	2000027c 	.word	0x2000027c
 8002bfc:	20000280 	.word	0x20000280
 8002c00:	0800cc84 	.word	0x0800cc84
 8002c04:	20000324 	.word	0x20000324
 8002c08:	0800cc9c 	.word	0x0800cc9c
 8002c0c:	2000028c 	.word	0x2000028c
 8002c10:	2000052c 	.word	0x2000052c

08002c14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)  // Sprawdź, czy przerwanie pochodzi z USART3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_UART_RxCpltCallback+0x78>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d12d      	bne.n	8002c82 <HAL_UART_RxCpltCallback+0x6e>
    {
        if (rxBuffer[rxIndex] == '\n')  // Sprawdź, czy odebrano znak końca linii
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_UART_RxCpltCallback+0x7c>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_UART_RxCpltCallback+0x80>)
 8002c30:	5c9b      	ldrb	r3, [r3, r2]
 8002c32:	2b0a      	cmp	r3, #10
 8002c34:	d10d      	bne.n	8002c52 <HAL_UART_RxCpltCallback+0x3e>
        {
            dataReceivedFlag = 1;  // Ustaw flagę o odebraniu pełnej wiadomości
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_UART_RxCpltCallback+0x84>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
            rxBuffer[rxIndex] = '\0';  // Zamień znak końca linii na znak końca łańcucha
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_UART_RxCpltCallback+0x7c>)
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_UART_RxCpltCallback+0x80>)
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]
            rxIndex = 0;  // Resetuj indeks bufora
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_UART_RxCpltCallback+0x7c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	e00c      	b.n	8002c6c <HAL_UART_RxCpltCallback+0x58>
        }
        else
        {
            if (++rxIndex >= RX_BUFFER_SIZE)  // Inkrementuj indeks i sprawdź przepełnienie
 8002c52:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <HAL_UART_RxCpltCallback+0x7c>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <HAL_UART_RxCpltCallback+0x7c>)
 8002c5e:	4619      	mov	r1, r3
 8002c60:	8011      	strh	r1, [r2, #0]
 8002c62:	2b7f      	cmp	r3, #127	; 0x7f
 8002c64:	d902      	bls.n	8002c6c <HAL_UART_RxCpltCallback+0x58>
            {
                rxIndex = 0;  // Resetuj indeks bufora
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_UART_RxCpltCallback+0x7c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	801a      	strh	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);  // Ponownie włącz przerwanie
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_UART_RxCpltCallback+0x7c>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_UART_RxCpltCallback+0x80>)
 8002c76:	4413      	add	r3, r2
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4807      	ldr	r0, [pc, #28]	; (8002c9c <HAL_UART_RxCpltCallback+0x88>)
 8002c7e:	f004 fc12 	bl	80074a6 <HAL_UART_Receive_IT>
    }
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40004800 	.word	0x40004800
 8002c90:	20000428 	.word	0x20000428
 8002c94:	20000328 	.word	0x20000328
 8002c98:	2000042a 	.word	0x2000042a
 8002c9c:	2000052c 	.word	0x2000052c

08002ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ca4:	f000 fce9 	bl	800367a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ca8:	f000 f846 	bl	8002d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cac:	f7ff fd42 	bl	8002734 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002cb0:	f000 fc22 	bl	80034f8 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002cb4:	f000 f8b4 	bl	8002e20 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002cb8:	f000 fa80 	bl	80031bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002cbc:	f000 faf6 	bl	80032ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicjalizacja komponentów zewnętrznych
  BMP2_Init(&bmp2dev_1);
 8002cc0:	4817      	ldr	r0, [pc, #92]	; (8002d20 <main+0x80>)
 8002cc2:	f7ff fb9b 	bl	80023fc <BMP2_Init>
  LCD_init();
 8002cc6:	f7fe f9d1 	bl	800106c <LCD_init>
  memset(lastRxBuffer, 0, RX_BUFFER_SIZE);  // Inicjalizacja lastRxBuffer
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4815      	ldr	r0, [pc, #84]	; (8002d24 <main+0x84>)
 8002cd0:	f007 f9f2 	bl	800a0b8 <memset>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);  // Inicjalizacja przerwania odbioru UART
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <main+0x88>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <main+0x8c>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4812      	ldr	r0, [pc, #72]	; (8002d30 <main+0x90>)
 8002ce6:	f004 fbde 	bl	80074a6 <HAL_UART_Receive_IT>
  //Zmiana priorytetu przerwań, #TODO debugging.
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2105      	movs	r1, #5
 8002cee:	2027      	movs	r0, #39	; 0x27
 8002cf0:	f000 fe1f 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0); // Przykładowy niższy priorytet
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2106      	movs	r1, #6
 8002cf8:	201c      	movs	r0, #28
 8002cfa:	f000 fe1a 	bl	8003932 <HAL_NVIC_SetPriority>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ARM_PID_Init(10.0f,2.0f,3.5f);
 8002cfe:	eeb0 1a0c 	vmov.f32	s2, #12	; 0x40600000  3.5
 8002d02:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002d06:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002d0a:	f7ff fc93 	bl	8002634 <ARM_PID_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002d0e:	4809      	ldr	r0, [pc, #36]	; (8002d34 <main+0x94>)
 8002d10:	f003 f994 	bl	800603c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002d14:	2100      	movs	r1, #0
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <main+0x94>)
 8002d18:	f003 fa6a 	bl	80061f0 <HAL_TIM_PWM_Start>
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <main+0x7c>
 8002d1e:	bf00      	nop
 8002d20:	20000018 	.word	0x20000018
 8002d24:	200003a8 	.word	0x200003a8
 8002d28:	20000428 	.word	0x20000428
 8002d2c:	20000328 	.word	0x20000328
 8002d30:	2000052c 	.word	0x2000052c
 8002d34:	20000494 	.word	0x20000494

08002d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b094      	sub	sp, #80	; 0x50
 8002d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d3e:	f107 0320 	add.w	r3, r7, #32
 8002d42:	2230      	movs	r2, #48	; 0x30
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f007 f9b6 	bl	800a0b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d5c:	f001 f89c 	bl	8003e98 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <SystemClock_Config+0xd4>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <SystemClock_Config+0xd4>)
 8002d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <SystemClock_Config+0xd4>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <SystemClock_Config+0xd8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <SystemClock_Config+0xd8>)
 8002d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <SystemClock_Config+0xd8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002da4:	2304      	movs	r3, #4
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002da8:	23d8      	movs	r3, #216	; 0xd8
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dac:	2302      	movs	r3, #2
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002db0:	2303      	movs	r3, #3
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002db4:	f107 0320 	add.w	r3, r7, #32
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 f8cd 	bl	8003f58 <HAL_RCC_OscConfig>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002dc4:	f000 f826 	bl	8002e14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002dc8:	f001 f876 	bl	8003eb8 <HAL_PWREx_EnableOverDrive>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002dd2:	f000 f81f 	bl	8002e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002de2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002de8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002dee:	f107 030c 	add.w	r3, r7, #12
 8002df2:	2107      	movs	r1, #7
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fb53 	bl	80044a0 <HAL_RCC_ClockConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002e00:	f000 f808 	bl	8002e14 <Error_Handler>
  }
}
 8002e04:	bf00      	nop
 8002e06:	3750      	adds	r7, #80	; 0x50
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40007000 	.word	0x40007000

08002e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e18:	b672      	cpsid	i
}
 8002e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <Error_Handler+0x8>
	...

08002e20 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e26:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <MX_SPI4_Init+0x78>)
 8002e28:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e30:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e3e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e42:	2202      	movs	r2, #2
 8002e44:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e52:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e56:	2210      	movs	r2, #16
 8002e58:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e6e:	2207      	movs	r2, #7
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002e7e:	4805      	ldr	r0, [pc, #20]	; (8002e94 <MX_SPI4_Init+0x74>)
 8002e80:	f002 f924 	bl	80050cc <HAL_SPI_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002e8a:	f7ff ffc3 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000042c 	.word	0x2000042c
 8002e98:	40013400 	.word	0x40013400

08002e9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <HAL_SPI_MspInit+0x7c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d127      	bne.n	8002f0e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ebe:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <HAL_SPI_MspInit+0x80>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <HAL_SPI_MspInit+0x80>)
 8002ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_SPI_MspInit+0x80>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_SPI_MspInit+0x80>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a10      	ldr	r2, [pc, #64]	; (8002f1c <HAL_SPI_MspInit+0x80>)
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_SPI_MspInit+0x80>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCL_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8002eee:	2364      	movs	r3, #100	; 0x64
 8002ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002efe:	2305      	movs	r3, #5
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	4805      	ldr	r0, [pc, #20]	; (8002f20 <HAL_SPI_MspInit+0x84>)
 8002f0a:	f000 fddb 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3728      	adds	r7, #40	; 0x28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40013400 	.word	0x40013400
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_MspInit+0x44>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_MspInit+0x44>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_MspInit+0x44>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_MspInit+0x44>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_MspInit+0x44>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_MspInit+0x44>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <NMI_Handler+0x4>

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 fb9c 	bl	80036f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <TIM2_IRQHandler+0x10>)
 8002fc6:	f003 fa0d 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000494 	.word	0x20000494

08002fd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <TIM3_IRQHandler+0x10>)
 8002fda:	f003 fa03 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200004e0 	.word	0x200004e0

08002fe8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <USART3_IRQHandler+0x10>)
 8002fee:	f004 fa9f 	bl	8007530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000052c 	.word	0x2000052c

08002ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003000:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003004:	f000 ff24 	bl	8003e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}

0800300c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return 1;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_kill>:

int _kill(int pid, int sig)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003026:	f007 f8ab 	bl	800a180 <__errno>
 800302a:	4603      	mov	r3, r0
 800302c:	2216      	movs	r2, #22
 800302e:	601a      	str	r2, [r3, #0]
  return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_exit>:

void _exit (int status)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ffe7 	bl	800301c <_kill>
  while (1) {}    /* Make sure we hang here */
 800304e:	e7fe      	b.n	800304e <_exit+0x12>

08003050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e00a      	b.n	8003078 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003062:	f3af 8000 	nop.w
 8003066:	4601      	mov	r1, r0
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	60ba      	str	r2, [r7, #8]
 800306e:	b2ca      	uxtb	r2, r1
 8003070:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	dbf0      	blt.n	8003062 <_read+0x12>
  }

  return len;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e009      	b.n	80030b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	60ba      	str	r2, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbf1      	blt.n	800309c <_write+0x12>
  }
  return len;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_close>:

int _close(int file)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ea:	605a      	str	r2, [r3, #4]
  return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <_isatty>:

int _isatty(int file)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <_sbrk+0x5c>)
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <_sbrk+0x60>)
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <_sbrk+0x64>)
 800314a:	4a12      	ldr	r2, [pc, #72]	; (8003194 <_sbrk+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800315c:	f007 f810 	bl	800a180 <__errno>
 8003160:	4603      	mov	r3, r0
 8003162:	220c      	movs	r2, #12
 8003164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e009      	b.n	8003180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <_sbrk+0x64>)
 800317c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20050000 	.word	0x20050000
 800318c:	00000400 	.word	0x00000400
 8003190:	20000490 	.word	0x20000490
 8003194:	20000708 	.word	0x20000708

08003198 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <SystemInit+0x20>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <SystemInit+0x20>)
 80031a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08e      	sub	sp, #56	; 0x38
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d0:	f107 031c 	add.w	r3, r7, #28
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031dc:	463b      	mov	r3, r7
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	611a      	str	r2, [r3, #16]
 80031ea:	615a      	str	r2, [r3, #20]
 80031ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <MX_TIM2_Init+0xec>)
 80031f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <MX_TIM2_Init+0xec>)
 80031f8:	226b      	movs	r2, #107	; 0x6b
 80031fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <MX_TIM2_Init+0xec>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8003202:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <MX_TIM2_Init+0xec>)
 8003204:	f241 3287 	movw	r2, #4999	; 0x1387
 8003208:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <MX_TIM2_Init+0xec>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <MX_TIM2_Init+0xec>)
 8003212:	2200      	movs	r2, #0
 8003214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003216:	4824      	ldr	r0, [pc, #144]	; (80032a8 <MX_TIM2_Init+0xec>)
 8003218:	f002 feb8 	bl	8005f8c <HAL_TIM_Base_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003222:	f7ff fdf7 	bl	8002e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800322c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003230:	4619      	mov	r1, r3
 8003232:	481d      	ldr	r0, [pc, #116]	; (80032a8 <MX_TIM2_Init+0xec>)
 8003234:	f003 fb0a 	bl	800684c <HAL_TIM_ConfigClockSource>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800323e:	f7ff fde9 	bl	8002e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003242:	4819      	ldr	r0, [pc, #100]	; (80032a8 <MX_TIM2_Init+0xec>)
 8003244:	f002 ff72 	bl	800612c <HAL_TIM_PWM_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800324e:	f7ff fde1 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	4619      	mov	r1, r3
 8003260:	4811      	ldr	r0, [pc, #68]	; (80032a8 <MX_TIM2_Init+0xec>)
 8003262:	f003 ffa3 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800326c:	f7ff fdd2 	bl	8002e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003270:	2360      	movs	r3, #96	; 0x60
 8003272:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 8003274:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003278:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003282:	463b      	mov	r3, r7
 8003284:	2200      	movs	r2, #0
 8003286:	4619      	mov	r1, r3
 8003288:	4807      	ldr	r0, [pc, #28]	; (80032a8 <MX_TIM2_Init+0xec>)
 800328a:	f003 f9cb 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003294:	f7ff fdbe 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003298:	4803      	ldr	r0, [pc, #12]	; (80032a8 <MX_TIM2_Init+0xec>)
 800329a:	f000 f8f7 	bl	800348c <HAL_TIM_MspPostInit>

}
 800329e:	bf00      	nop
 80032a0:	3738      	adds	r7, #56	; 0x38
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000494 	.word	0x20000494

080032ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032b2:	f107 0310 	add.w	r3, r7, #16
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <MX_TIM3_Init+0x94>)
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <MX_TIM3_Init+0x98>)
 80032ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <MX_TIM3_Init+0x94>)
 80032d2:	226b      	movs	r2, #107	; 0x6b
 80032d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <MX_TIM3_Init+0x94>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <MX_TIM3_Init+0x94>)
 80032de:	f241 3287 	movw	r2, #4999	; 0x1387
 80032e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <MX_TIM3_Init+0x94>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <MX_TIM3_Init+0x94>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032f0:	4813      	ldr	r0, [pc, #76]	; (8003340 <MX_TIM3_Init+0x94>)
 80032f2:	f002 fe4b 	bl	8005f8c <HAL_TIM_Base_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80032fc:	f7ff fd8a 	bl	8002e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003304:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003306:	f107 0310 	add.w	r3, r7, #16
 800330a:	4619      	mov	r1, r3
 800330c:	480c      	ldr	r0, [pc, #48]	; (8003340 <MX_TIM3_Init+0x94>)
 800330e:	f003 fa9d 	bl	800684c <HAL_TIM_ConfigClockSource>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003318:	f7ff fd7c 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	4619      	mov	r1, r3
 8003328:	4805      	ldr	r0, [pc, #20]	; (8003340 <MX_TIM3_Init+0x94>)
 800332a:	f003 ff3f 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003334:	f7ff fd6e 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003338:	bf00      	nop
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200004e0 	.word	0x200004e0
 8003344:	40000400 	.word	0x40000400

08003348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08c      	sub	sp, #48	; 0x30
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 031c 	add.w	r3, r7, #28
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d131      	bne.n	80033ce <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800336a:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a42      	ldr	r2, [pc, #264]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b40      	ldr	r3, [pc, #256]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003382:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a3c      	ldr	r2, [pc, #240]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 800339a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ac:	2301      	movs	r3, #1
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	f107 031c 	add.w	r3, r7, #28
 80033b4:	4619      	mov	r1, r3
 80033b6:	4831      	ldr	r0, [pc, #196]	; (800347c <HAL_TIM_Base_MspInit+0x134>)
 80033b8:	f000 fb84 	bl	8003ac4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	2100      	movs	r1, #0
 80033c0:	201c      	movs	r0, #28
 80033c2:	f000 fab6 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033c6:	201c      	movs	r0, #28
 80033c8:	f000 facf 	bl	800396a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033cc:	e050      	b.n	8003470 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM3)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <HAL_TIM_Base_MspInit+0x138>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d14b      	bne.n	8003470 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	4a26      	ldr	r2, [pc, #152]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	6413      	str	r3, [r2, #64]	; 0x40
 80033e4:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	6313      	str	r3, [r2, #48]	; 0x30
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_TIM_Base_MspInit+0x130>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8003420:	2340      	movs	r3, #64	; 0x40
 8003422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003430:	2302      	movs	r3, #2
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	4619      	mov	r1, r3
 800343a:	4812      	ldr	r0, [pc, #72]	; (8003484 <HAL_TIM_Base_MspInit+0x13c>)
 800343c:	f000 fb42 	bl	8003ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003450:	2302      	movs	r3, #2
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8003454:	f107 031c 	add.w	r3, r7, #28
 8003458:	4619      	mov	r1, r3
 800345a:	480b      	ldr	r0, [pc, #44]	; (8003488 <HAL_TIM_Base_MspInit+0x140>)
 800345c:	f000 fb32 	bl	8003ac4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2100      	movs	r1, #0
 8003464:	201d      	movs	r0, #29
 8003466:	f000 fa64 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800346a:	201d      	movs	r0, #29
 800346c:	f000 fa7d 	bl	800396a <HAL_NVIC_EnableIRQ>
}
 8003470:	bf00      	nop
 8003472:	3730      	adds	r7, #48	; 0x30
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	40020400 	.word	0x40020400
 8003480:	40000400 	.word	0x40000400
 8003484:	40020000 	.word	0x40020000
 8003488:	40020800 	.word	0x40020800

0800348c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ac:	d11b      	bne.n	80034e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_TIM_MspPostInit+0x64>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a0f      	ldr	r2, [pc, #60]	; (80034f0 <HAL_TIM_MspPostInit+0x64>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <HAL_TIM_MspPostInit+0x64>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034c6:	2320      	movs	r3, #32
 80034c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	4619      	mov	r1, r3
 80034e0:	4804      	ldr	r0, [pc, #16]	; (80034f4 <HAL_TIM_MspPostInit+0x68>)
 80034e2:	f000 faef 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034e6:	bf00      	nop
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000

080034f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <MX_USART3_UART_Init+0x58>)
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <MX_USART3_UART_Init+0x5c>)
 8003500:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003502:	4b13      	ldr	r3, [pc, #76]	; (8003550 <MX_USART3_UART_Init+0x58>)
 8003504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003508:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_USART3_UART_Init+0x58>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <MX_USART3_UART_Init+0x58>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <MX_USART3_UART_Init+0x58>)
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <MX_USART3_UART_Init+0x58>)
 800351e:	220c      	movs	r2, #12
 8003520:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MX_USART3_UART_Init+0x58>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <MX_USART3_UART_Init+0x58>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <MX_USART3_UART_Init+0x58>)
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_USART3_UART_Init+0x58>)
 8003536:	2200      	movs	r2, #0
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <MX_USART3_UART_Init+0x58>)
 800353c:	f003 fee2 	bl	8007304 <HAL_UART_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003546:	f7ff fc65 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000052c 	.word	0x2000052c
 8003554:	40004800 	.word	0x40004800

08003558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b0aa      	sub	sp, #168	; 0xa8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003570:	f107 0310 	add.w	r3, r7, #16
 8003574:	2284      	movs	r2, #132	; 0x84
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f006 fd9d 	bl	800a0b8 <memset>
  if(uartHandle->Instance==USART3)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_UART_MspInit+0xc4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d144      	bne.n	8003612 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800358c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800358e:	2310      	movs	r3, #16
 8003590:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003592:	f107 0310 	add.w	r3, r7, #16
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f9a8 	bl	80048ec <HAL_RCCEx_PeriphCLKConfig>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80035a2:	f7ff fc37 	bl	8002e14 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_UART_MspInit+0xc8>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_UART_MspInit+0xc8>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_UART_MspInit+0xc8>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_UART_MspInit+0xc8>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a17      	ldr	r2, [pc, #92]	; (8003620 <HAL_UART_MspInit+0xc8>)
 80035c4:	f043 0308 	orr.w	r3, r3, #8
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_UART_MspInit+0xc8>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80035d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	2302      	movs	r3, #2
 80035e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035f0:	2307      	movs	r3, #7
 80035f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035fa:	4619      	mov	r1, r3
 80035fc:	4809      	ldr	r0, [pc, #36]	; (8003624 <HAL_UART_MspInit+0xcc>)
 80035fe:	f000 fa61 	bl	8003ac4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	2027      	movs	r0, #39	; 0x27
 8003608:	f000 f993 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800360c:	2027      	movs	r0, #39	; 0x27
 800360e:	f000 f9ac 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003612:	bf00      	nop
 8003614:	37a8      	adds	r7, #168	; 0xa8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40004800 	.word	0x40004800
 8003620:	40023800 	.word	0x40023800
 8003624:	40020c00 	.word	0x40020c00

08003628 <Reset_Handler>:
 8003628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003660 <LoopFillZerobss+0x12>
 800362c:	480d      	ldr	r0, [pc, #52]	; (8003664 <LoopFillZerobss+0x16>)
 800362e:	490e      	ldr	r1, [pc, #56]	; (8003668 <LoopFillZerobss+0x1a>)
 8003630:	4a0e      	ldr	r2, [pc, #56]	; (800366c <LoopFillZerobss+0x1e>)
 8003632:	2300      	movs	r3, #0
 8003634:	e002      	b.n	800363c <LoopCopyDataInit>

08003636 <CopyDataInit>:
 8003636:	58d4      	ldr	r4, [r2, r3]
 8003638:	50c4      	str	r4, [r0, r3]
 800363a:	3304      	adds	r3, #4

0800363c <LoopCopyDataInit>:
 800363c:	18c4      	adds	r4, r0, r3
 800363e:	428c      	cmp	r4, r1
 8003640:	d3f9      	bcc.n	8003636 <CopyDataInit>
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <LoopFillZerobss+0x22>)
 8003644:	4c0b      	ldr	r4, [pc, #44]	; (8003674 <LoopFillZerobss+0x26>)
 8003646:	2300      	movs	r3, #0
 8003648:	e001      	b.n	800364e <LoopFillZerobss>

0800364a <FillZerobss>:
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	3204      	adds	r2, #4

0800364e <LoopFillZerobss>:
 800364e:	42a2      	cmp	r2, r4
 8003650:	d3fb      	bcc.n	800364a <FillZerobss>
 8003652:	f7ff fda1 	bl	8003198 <SystemInit>
 8003656:	f006 fd99 	bl	800a18c <__libc_init_array>
 800365a:	f7ff fb21 	bl	8002ca0 <main>
 800365e:	4770      	bx	lr
 8003660:	20050000 	.word	0x20050000
 8003664:	20000000 	.word	0x20000000
 8003668:	20000228 	.word	0x20000228
 800366c:	0800d13c 	.word	0x0800d13c
 8003670:	20000228 	.word	0x20000228
 8003674:	20000704 	.word	0x20000704

08003678 <ADC_IRQHandler>:
 8003678:	e7fe      	b.n	8003678 <ADC_IRQHandler>

0800367a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367e:	2003      	movs	r0, #3
 8003680:	f000 f94c 	bl	800391c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003684:	2000      	movs	r0, #0
 8003686:	f000 f805 	bl	8003694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800368a:	f7ff fc4b 	bl	8002f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_InitTick+0x54>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_InitTick+0x58>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	4619      	mov	r1, r3
 80036a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f967 	bl	8003986 <HAL_SYSTICK_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e00e      	b.n	80036e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b0f      	cmp	r3, #15
 80036c6:	d80a      	bhi.n	80036de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c8:	2200      	movs	r2, #0
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f000 f92f 	bl	8003932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d4:	4a06      	ldr	r2, [pc, #24]	; (80036f0 <HAL_InitTick+0x5c>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000054 	.word	0x20000054
 80036ec:	2000005c 	.word	0x2000005c
 80036f0:	20000058 	.word	0x20000058

080036f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_IncTick+0x20>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_IncTick+0x24>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4413      	add	r3, r2
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <HAL_IncTick+0x24>)
 8003706:	6013      	str	r3, [r2, #0]
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	2000005c 	.word	0x2000005c
 8003718:	200005b4 	.word	0x200005b4

0800371c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return uwTick;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_GetTick+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	200005b4 	.word	0x200005b4

08003734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800373c:	f7ff ffee 	bl	800371c <HAL_GetTick>
 8003740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d005      	beq.n	800375a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <HAL_Delay+0x44>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800375a:	bf00      	nop
 800375c:	f7ff ffde 	bl	800371c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	429a      	cmp	r2, r3
 800376a:	d8f7      	bhi.n	800375c <HAL_Delay+0x28>
  {
  }
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000005c 	.word	0x2000005c

0800377c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <__NVIC_SetPriorityGrouping+0x40>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <__NVIC_SetPriorityGrouping+0x40>)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	60d3      	str	r3, [r2, #12]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00
 80037c0:	05fa0000 	.word	0x05fa0000

080037c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <__NVIC_GetPriorityGrouping+0x18>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 0307 	and.w	r3, r3, #7
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db0b      	blt.n	800380a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <__NVIC_EnableIRQ+0x38>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2001      	movs	r0, #1
 8003802:	fa00 f202 	lsl.w	r2, r0, r2
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000e100 	.word	0xe000e100

0800381c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db0a      	blt.n	8003846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	490c      	ldr	r1, [pc, #48]	; (8003868 <__NVIC_SetPriority+0x4c>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	0112      	lsls	r2, r2, #4
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	440b      	add	r3, r1
 8003840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003844:	e00a      	b.n	800385c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <__NVIC_SetPriority+0x50>)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3b04      	subs	r3, #4
 8003854:	0112      	lsls	r2, r2, #4
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	440b      	add	r3, r1
 800385a:	761a      	strb	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000e100 	.word	0xe000e100
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f1c3 0307 	rsb	r3, r3, #7
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf28      	it	cs
 800388e:	2304      	movcs	r3, #4
 8003890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3304      	adds	r3, #4
 8003896:	2b06      	cmp	r3, #6
 8003898:	d902      	bls.n	80038a0 <NVIC_EncodePriority+0x30>
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3b03      	subs	r3, #3
 800389e:	e000      	b.n	80038a2 <NVIC_EncodePriority+0x32>
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	401a      	ands	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b8:	f04f 31ff 	mov.w	r1, #4294967295
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	43d9      	mvns	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	4313      	orrs	r3, r2
         );
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e8:	d301      	bcc.n	80038ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ea:	2301      	movs	r3, #1
 80038ec:	e00f      	b.n	800390e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <SysTick_Config+0x40>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f6:	210f      	movs	r1, #15
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	f7ff ff8e 	bl	800381c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <SysTick_Config+0x40>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <SysTick_Config+0x40>)
 8003908:	2207      	movs	r2, #7
 800390a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000e010 	.word	0xe000e010

0800391c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff29 	bl	800377c <__NVIC_SetPriorityGrouping>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003944:	f7ff ff3e 	bl	80037c4 <__NVIC_GetPriorityGrouping>
 8003948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff8e 	bl	8003870 <NVIC_EncodePriority>
 8003954:	4602      	mov	r2, r0
 8003956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff5d 	bl	800381c <__NVIC_SetPriority>
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff31 	bl	80037e0 <__NVIC_EnableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffa2 	bl	80038d8 <SysTick_Config>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff feb6 	bl	800371c <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d008      	beq.n	80039d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e052      	b.n	8003a76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0216 	bic.w	r2, r2, #22
 80039de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d103      	bne.n	8003a00 <HAL_DMA_Abort+0x62>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0208 	bic.w	r2, r2, #8
 8003a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a20:	e013      	b.n	8003a4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a22:	f7ff fe7b 	bl	800371c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d90c      	bls.n	8003a4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e015      	b.n	8003a76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e4      	bne.n	8003a22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5c:	223f      	movs	r2, #63	; 0x3f
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d004      	beq.n	8003a9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e00c      	b.n	8003ab6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e175      	b.n	8003dd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 8164 	bne.w	8003dca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d005      	beq.n	8003b1a <HAL_GPIO_Init+0x56>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d130      	bne.n	8003b7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0201 	and.w	r2, r3, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d017      	beq.n	8003bb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80be 	beq.w	8003dca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	4b66      	ldr	r3, [pc, #408]	; (8003de8 <HAL_GPIO_Init+0x324>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <HAL_GPIO_Init+0x324>)
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c58:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5a:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <HAL_GPIO_Init+0x324>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c66:	4a61      	ldr	r2, [pc, #388]	; (8003dec <HAL_GPIO_Init+0x328>)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a58      	ldr	r2, [pc, #352]	; (8003df0 <HAL_GPIO_Init+0x32c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d037      	beq.n	8003d02 <HAL_GPIO_Init+0x23e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a57      	ldr	r2, [pc, #348]	; (8003df4 <HAL_GPIO_Init+0x330>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d031      	beq.n	8003cfe <HAL_GPIO_Init+0x23a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a56      	ldr	r2, [pc, #344]	; (8003df8 <HAL_GPIO_Init+0x334>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02b      	beq.n	8003cfa <HAL_GPIO_Init+0x236>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a55      	ldr	r2, [pc, #340]	; (8003dfc <HAL_GPIO_Init+0x338>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d025      	beq.n	8003cf6 <HAL_GPIO_Init+0x232>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a54      	ldr	r2, [pc, #336]	; (8003e00 <HAL_GPIO_Init+0x33c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01f      	beq.n	8003cf2 <HAL_GPIO_Init+0x22e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a53      	ldr	r2, [pc, #332]	; (8003e04 <HAL_GPIO_Init+0x340>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d019      	beq.n	8003cee <HAL_GPIO_Init+0x22a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	; (8003e08 <HAL_GPIO_Init+0x344>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x226>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a51      	ldr	r2, [pc, #324]	; (8003e0c <HAL_GPIO_Init+0x348>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x222>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a50      	ldr	r2, [pc, #320]	; (8003e10 <HAL_GPIO_Init+0x34c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x21e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4f      	ldr	r2, [pc, #316]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x21a>
 8003cda:	2309      	movs	r3, #9
 8003cdc:	e012      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cde:	230a      	movs	r3, #10
 8003ce0:	e010      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	e00e      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003ce6:	2307      	movs	r3, #7
 8003ce8:	e00c      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cea:	2306      	movs	r3, #6
 8003cec:	e00a      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cee:	2305      	movs	r3, #5
 8003cf0:	e008      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003d02:	2300      	movs	r3, #0
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f002 0203 	and.w	r2, r2, #3
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d14:	4935      	ldr	r1, [pc, #212]	; (8003dec <HAL_GPIO_Init+0x328>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d22:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <HAL_GPIO_Init+0x354>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d46:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <HAL_GPIO_Init+0x354>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d4c:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <HAL_GPIO_Init+0x354>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d70:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <HAL_GPIO_Init+0x354>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_GPIO_Init+0x354>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_GPIO_Init+0x354>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_GPIO_Init+0x354>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <HAL_GPIO_Init+0x354>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	f67f ae86 	bls.w	8003ae4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40020400 	.word	0x40020400
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	40020c00 	.word	0x40020c00
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40021400 	.word	0x40021400
 8003e08:	40021800 	.word	0x40021800
 8003e0c:	40021c00 	.word	0x40021c00
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40022400 	.word	0x40022400
 8003e18:	40013c00 	.word	0x40013c00

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e38:	e003      	b.n	8003e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e66:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f806 	bl	8003e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40013c00 	.word	0x40013c00

08003e80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40007000 	.word	0x40007000

08003eb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eda:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee6:	f7ff fc19 	bl	800371c <HAL_GetTick>
 8003eea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003eec:	e009      	b.n	8003f02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eee:	f7ff fc15 	bl	800371c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003efc:	d901      	bls.n	8003f02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e022      	b.n	8003f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d1ee      	bne.n	8003eee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f1c:	f7ff fbfe 	bl	800371c <HAL_GetTick>
 8003f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f22:	e009      	b.n	8003f38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f24:	f7ff fbfa 	bl	800371c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f32:	d901      	bls.n	8003f38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e007      	b.n	8003f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f44:	d1ee      	bne.n	8003f24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e291      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8087 	beq.w	800408a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f7c:	4b96      	ldr	r3, [pc, #600]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d00c      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f88:	4b93      	ldr	r3, [pc, #588]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d112      	bne.n	8003fba <HAL_RCC_OscConfig+0x62>
 8003f94:	4b90      	ldr	r3, [pc, #576]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d10b      	bne.n	8003fba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa2:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d06c      	beq.n	8004088 <HAL_RCC_OscConfig+0x130>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d168      	bne.n	8004088 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e26b      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x7a>
 8003fc4:	4b84      	ldr	r3, [pc, #528]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a83      	ldr	r2, [pc, #524]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e02e      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x9c>
 8003fda:	4b7f      	ldr	r3, [pc, #508]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7e      	ldr	r2, [pc, #504]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b7c      	ldr	r3, [pc, #496]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7b      	ldr	r2, [pc, #492]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0xc0>
 8003ffe:	4b76      	ldr	r3, [pc, #472]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a75      	ldr	r2, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b73      	ldr	r3, [pc, #460]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8004018:	4b6f      	ldr	r3, [pc, #444]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6e      	ldr	r2, [pc, #440]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b6c      	ldr	r3, [pc, #432]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6b      	ldr	r2, [pc, #428]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7ff fb70 	bl	800371c <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004040:	f7ff fb6c 	bl	800371c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e21f      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xe8>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7ff fb5c 	bl	800371c <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7ff fb58 	bl	800371c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e20b      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x110>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d069      	beq.n	800416a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004096:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x190>
 80040ae:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1df      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	493d      	ldr	r1, [pc, #244]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e040      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d023      	beq.n	8004138 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a38      	ldr	r2, [pc, #224]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7ff fb0e 	bl	800371c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004104:	f7ff fb0a 	bl	800371c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1bd      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004116:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4929      	ldr	r1, [pc, #164]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
 8004136:	e018      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7ff faea 	bl	800371c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414c:	f7ff fae6 	bl	800371c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e199      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d038      	beq.n	80041e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d019      	beq.n	80041b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7ff fac7 	bl	800371c <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7ff fac3 	bl	800371c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e176      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x23a>
 80041b0:	e01a      	b.n	80041e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b6:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7ff faad 	bl	800371c <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c6:	f7ff faa9 	bl	800371c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d903      	bls.n	80041dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e15c      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
 80041d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041dc:	4b91      	ldr	r3, [pc, #580]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80041de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ee      	bne.n	80041c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80a4 	beq.w	800433e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	4b88      	ldr	r3, [pc, #544]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a87      	ldr	r2, [pc, #540]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
 800420e:	4b85      	ldr	r3, [pc, #532]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421e:	4b82      	ldr	r3, [pc, #520]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d118      	bne.n	800425c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800422a:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7e      	ldr	r2, [pc, #504]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004236:	f7ff fa71 	bl	800371c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7ff fa6d 	bl	800371c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	; 0x64
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e120      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	4b75      	ldr	r3, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x31a>
 8004264:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	e02d      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x33c>
 800427a:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a69      	ldr	r2, [pc, #420]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a66      	ldr	r2, [pc, #408]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
 8004292:	e01c      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b05      	cmp	r3, #5
 800429a:	d10c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x35e>
 800429c:	4b61      	ldr	r3, [pc, #388]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4a60      	ldr	r2, [pc, #384]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
 80042a8:	4b5e      	ldr	r3, [pc, #376]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a5d      	ldr	r2, [pc, #372]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70
 80042b4:	e00b      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 80042b6:	4b5b      	ldr	r3, [pc, #364]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a5a      	ldr	r2, [pc, #360]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	4b58      	ldr	r3, [pc, #352]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	4a57      	ldr	r2, [pc, #348]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d015      	beq.n	8004302 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7ff fa21 	bl	800371c <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7ff fa1d 	bl	800371c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0ce      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f4:	4b4b      	ldr	r3, [pc, #300]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ee      	beq.n	80042de <HAL_RCC_OscConfig+0x386>
 8004300:	e014      	b.n	800432c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7ff fa0b 	bl	800371c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7ff fa07 	bl	800371c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0b8      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004320:	4b40      	ldr	r3, [pc, #256]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4b3c      	ldr	r3, [pc, #240]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a3b      	ldr	r2, [pc, #236]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80a4 	beq.w	8004490 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004348:	4b36      	ldr	r3, [pc, #216]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d06b      	beq.n	800442c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d149      	bne.n	80043f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a30      	ldr	r2, [pc, #192]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7ff f9d8 	bl	800371c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7ff f9d4 	bl	800371c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e087      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	3b01      	subs	r3, #1
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	4313      	orrs	r3, r2
 80043b4:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80043b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7ff f9a8 	bl	800371c <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7ff f9a4 	bl	800371c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e057      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x478>
 80043ee:	e04f      	b.n	8004490 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0b      	ldr	r2, [pc, #44]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80043f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7ff f98e 	bl	800371c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7ff f98a 	bl	800371c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e03d      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x4ac>
 8004422:	e035      	b.n	8004490 <HAL_RCC_OscConfig+0x538>
 8004424:	40023800 	.word	0x40023800
 8004428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800442c:	4b1b      	ldr	r3, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x544>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d028      	beq.n	800448c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d121      	bne.n	800448c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d11a      	bne.n	800448c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004462:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004464:	4293      	cmp	r3, r2
 8004466:	d111      	bne.n	800448c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	3b01      	subs	r3, #1
 8004476:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d107      	bne.n	800448c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0d0      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b6a      	ldr	r3, [pc, #424]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b67      	ldr	r3, [pc, #412]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 020f 	bic.w	r2, r3, #15
 80044ce:	4965      	ldr	r1, [pc, #404]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b63      	ldr	r3, [pc, #396]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b8      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004500:	4b59      	ldr	r3, [pc, #356]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a58      	ldr	r2, [pc, #352]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800450a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a52      	ldr	r2, [pc, #328]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800451e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b50      	ldr	r3, [pc, #320]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	494d      	ldr	r1, [pc, #308]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d040      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b47      	ldr	r3, [pc, #284]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d115      	bne.n	8004582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004562:	4b41      	ldr	r3, [pc, #260]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e073      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e06b      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004582:	4b39      	ldr	r3, [pc, #228]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 0203 	bic.w	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4936      	ldr	r1, [pc, #216]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004594:	f7ff f8c2 	bl	800371c <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7ff f8be 	bl	800371c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e053      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	4b2d      	ldr	r3, [pc, #180]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 020c 	and.w	r2, r3, #12
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d1eb      	bne.n	800459c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c4:	4b27      	ldr	r3, [pc, #156]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d210      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 020f 	bic.w	r2, r3, #15
 80045da:	4922      	ldr	r1, [pc, #136]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e032      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4916      	ldr	r1, [pc, #88]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490e      	ldr	r1, [pc, #56]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f821 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004636:	4602      	mov	r2, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	490a      	ldr	r1, [pc, #40]	; (800466c <HAL_RCC_ClockConfig+0x1cc>)
 8004644:	5ccb      	ldrb	r3, [r1, r3]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1d0>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1d4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f81e 	bl	8003694 <HAL_InitTick>

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023c00 	.word	0x40023c00
 8004668:	40023800 	.word	0x40023800
 800466c:	0800cce8 	.word	0x0800cce8
 8004670:	20000054 	.word	0x20000054
 8004674:	20000058 	.word	0x20000058

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b094      	sub	sp, #80	; 0x50
 800467e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	647b      	str	r3, [r7, #68]	; 0x44
 8004684:	2300      	movs	r3, #0
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	2300      	movs	r3, #0
 800468a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004690:	4b79      	ldr	r3, [pc, #484]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b08      	cmp	r3, #8
 800469a:	d00d      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x40>
 800469c:	2b08      	cmp	r3, #8
 800469e:	f200 80e1 	bhi.w	8004864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x34>
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046aa:	e0db      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b73      	ldr	r3, [pc, #460]	; (800487c <HAL_RCC_GetSysClockFreq+0x204>)
 80046ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b0:	e0db      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_GetSysClockFreq+0x208>)
 80046b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b6:	e0d8      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b8:	4b6f      	ldr	r3, [pc, #444]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046c2:	4b6d      	ldr	r3, [pc, #436]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d063      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ce:	4b6a      	ldr	r3, [pc, #424]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	2200      	movs	r2, #0
 80046d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80046d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
 80046e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046ea:	4622      	mov	r2, r4
 80046ec:	462b      	mov	r3, r5
 80046ee:	f04f 0000 	mov.w	r0, #0
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	0159      	lsls	r1, r3, #5
 80046f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046fc:	0150      	lsls	r0, r2, #5
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4621      	mov	r1, r4
 8004704:	1a51      	subs	r1, r2, r1
 8004706:	6139      	str	r1, [r7, #16]
 8004708:	4629      	mov	r1, r5
 800470a:	eb63 0301 	sbc.w	r3, r3, r1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800471c:	4659      	mov	r1, fp
 800471e:	018b      	lsls	r3, r1, #6
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004726:	4651      	mov	r1, sl
 8004728:	018a      	lsls	r2, r1, #6
 800472a:	4651      	mov	r1, sl
 800472c:	ebb2 0801 	subs.w	r8, r2, r1
 8004730:	4659      	mov	r1, fp
 8004732:	eb63 0901 	sbc.w	r9, r3, r1
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474a:	4690      	mov	r8, r2
 800474c:	4699      	mov	r9, r3
 800474e:	4623      	mov	r3, r4
 8004750:	eb18 0303 	adds.w	r3, r8, r3
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	462b      	mov	r3, r5
 8004758:	eb49 0303 	adc.w	r3, r9, r3
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800476a:	4629      	mov	r1, r5
 800476c:	024b      	lsls	r3, r1, #9
 800476e:	4621      	mov	r1, r4
 8004770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004774:	4621      	mov	r1, r4
 8004776:	024a      	lsls	r2, r1, #9
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477e:	2200      	movs	r2, #0
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
 8004782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004788:	f7fc fa9e 	bl	8000cc8 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004794:	e058      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	2200      	movs	r2, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	4611      	mov	r1, r2
 80047a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
 80047ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	0159      	lsls	r1, r3, #5
 80047be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c2:	0150      	lsls	r0, r2, #5
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4641      	mov	r1, r8
 80047ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ce:	4649      	mov	r1, r9
 80047d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e8:	ebb2 040a 	subs.w	r4, r2, sl
 80047ec:	eb63 050b 	sbc.w	r5, r3, fp
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00eb      	lsls	r3, r5, #3
 80047fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fe:	00e2      	lsls	r2, r4, #3
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4643      	mov	r3, r8
 8004806:	18e3      	adds	r3, r4, r3
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	464b      	mov	r3, r9
 800480c:	eb45 0303 	adc.w	r3, r5, r3
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481e:	4629      	mov	r1, r5
 8004820:	028b      	lsls	r3, r1, #10
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004828:	4621      	mov	r1, r4
 800482a:	028a      	lsls	r2, r1, #10
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004832:	2200      	movs	r2, #0
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	61fa      	str	r2, [r7, #28]
 8004838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483c:	f7fc fa44 	bl	8000cc8 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	3301      	adds	r3, #1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800485a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004862:	e002      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_GetSysClockFreq+0x204>)
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800486c:	4618      	mov	r0, r3
 800486e:	3750      	adds	r7, #80	; 0x50
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200

08004884 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000054 	.word	0x20000054

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	0800ccf8 	.word	0x0800ccf8

080048c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c8:	f7ff ffdc 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0b5b      	lsrs	r3, r3, #13
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	0800ccf8 	.word	0x0800ccf8

080048ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d012      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004914:	4b69      	ldr	r3, [pc, #420]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a68      	ldr	r2, [pc, #416]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800491e:	6093      	str	r3, [r2, #8]
 8004920:	4b66      	ldr	r3, [pc, #408]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	4964      	ldr	r1, [pc, #400]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d017      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004946:	4b5d      	ldr	r3, [pc, #372]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	4959      	ldr	r1, [pc, #356]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004964:	d101      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004966:	2301      	movs	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004972:	2301      	movs	r3, #1
 8004974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d017      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004982:	4b4e      	ldr	r3, [pc, #312]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	494a      	ldr	r1, [pc, #296]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a0:	d101      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 808b 	beq.w	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049d0:	4b3a      	ldr	r3, [pc, #232]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	4a39      	ldr	r2, [pc, #228]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049da:	6413      	str	r3, [r2, #64]	; 0x40
 80049dc:	4b37      	ldr	r3, [pc, #220]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049e8:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a34      	ldr	r2, [pc, #208]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f4:	f7fe fe92 	bl	800371c <HAL_GetTick>
 80049f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fc:	f7fe fe8e 	bl	800371c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e357      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d035      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d02e      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	4a1a      	ldr	r2, [pc, #104]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a5a:	4a18      	ldr	r2, [pc, #96]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d114      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fe56 	bl	800371c <HAL_GetTick>
 8004a70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a72:	e00a      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a74:	f7fe fe52 	bl	800371c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e319      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0ee      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa2:	d111      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ab2:	400b      	ands	r3, r1
 8004ab4:	4901      	ldr	r1, [pc, #4]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	0ffffcff 	.word	0x0ffffcff
 8004ac8:	4baa      	ldr	r3, [pc, #680]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4aa9      	ldr	r2, [pc, #676]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ace:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ad2:	6093      	str	r3, [r2, #8]
 8004ad4:	4ba7      	ldr	r3, [pc, #668]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae0:	49a4      	ldr	r1, [pc, #656]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d010      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004af2:	4ba0      	ldr	r3, [pc, #640]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af8:	4a9e      	ldr	r2, [pc, #632]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b02:	4b9c      	ldr	r3, [pc, #624]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	4999      	ldr	r1, [pc, #612]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b20:	4b94      	ldr	r3, [pc, #592]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b2e:	4991      	ldr	r1, [pc, #580]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b42:	4b8c      	ldr	r3, [pc, #560]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b50:	4988      	ldr	r1, [pc, #544]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b64:	4b83      	ldr	r3, [pc, #524]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b72:	4980      	ldr	r1, [pc, #512]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b86:	4b7b      	ldr	r3, [pc, #492]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4977      	ldr	r1, [pc, #476]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ba8:	4b72      	ldr	r3, [pc, #456]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f023 0203 	bic.w	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	496f      	ldr	r1, [pc, #444]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bca:	4b6a      	ldr	r3, [pc, #424]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f023 020c 	bic.w	r2, r3, #12
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd8:	4966      	ldr	r1, [pc, #408]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bec:	4b61      	ldr	r3, [pc, #388]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	495e      	ldr	r1, [pc, #376]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c0e:	4b59      	ldr	r3, [pc, #356]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	4955      	ldr	r1, [pc, #340]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c30:	4b50      	ldr	r3, [pc, #320]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	494d      	ldr	r1, [pc, #308]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c52:	4b48      	ldr	r3, [pc, #288]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	4944      	ldr	r1, [pc, #272]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c74:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c82:	493c      	ldr	r1, [pc, #240]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c96:	4b37      	ldr	r3, [pc, #220]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca4:	4933      	ldr	r1, [pc, #204]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cb8:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc6:	492b      	ldr	r1, [pc, #172]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d011      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce8:	4922      	ldr	r1, [pc, #136]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d1a:	4b16      	ldr	r3, [pc, #88]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d28:	4912      	ldr	r1, [pc, #72]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00b      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d4c:	4909      	ldr	r1, [pc, #36]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d006      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80d9 	beq.w	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d68:	4b02      	ldr	r3, [pc, #8]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a01      	ldr	r2, [pc, #4]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d72:	e001      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004d74:	40023800 	.word	0x40023800
 8004d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7a:	f7fe fccf 	bl	800371c <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d82:	f7fe fccb 	bl	800371c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b64      	cmp	r3, #100	; 0x64
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e194      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d94:	4b6c      	ldr	r3, [pc, #432]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d021      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d11d      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004db4:	4b64      	ldr	r3, [pc, #400]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dc2:	4b61      	ldr	r3, [pc, #388]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc8:	0e1b      	lsrs	r3, r3, #24
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	019a      	lsls	r2, r3, #6
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	071b      	lsls	r3, r3, #28
 8004de8:	4957      	ldr	r1, [pc, #348]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d02e      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1a:	d129      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e1c:	4b4a      	ldr	r3, [pc, #296]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e22:	0c1b      	lsrs	r3, r3, #16
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e2a:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	0f1b      	lsrs	r3, r3, #28
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	019a      	lsls	r2, r3, #6
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	041b      	lsls	r3, r3, #16
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	071b      	lsls	r3, r3, #28
 8004e50:	493d      	ldr	r1, [pc, #244]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e58:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e5e:	f023 021f 	bic.w	r2, r3, #31
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4937      	ldr	r1, [pc, #220]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e7c:	4b32      	ldr	r3, [pc, #200]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e82:	0e1b      	lsrs	r3, r3, #24
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e8a:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e90:	0f1b      	lsrs	r3, r3, #28
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	019a      	lsls	r2, r3, #6
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	071b      	lsls	r3, r3, #28
 8004eb0:	4925      	ldr	r1, [pc, #148]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d011      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	019a      	lsls	r2, r3, #6
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	071b      	lsls	r3, r3, #28
 8004ee0:	4919      	ldr	r1, [pc, #100]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ee8:	4b17      	ldr	r3, [pc, #92]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef4:	f7fe fc12 	bl	800371c <HAL_GetTick>
 8004ef8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004efc:	f7fe fc0e 	bl	800371c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0d7      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	f040 80cd 	bne.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a08      	ldr	r2, [pc, #32]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2e:	f7fe fbf5 	bl	800371c <HAL_GetTick>
 8004f32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f36:	f7fe fbf1 	bl	800371c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b64      	cmp	r3, #100	; 0x64
 8004f42:	d903      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0ba      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f4c:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f58:	d0ed      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02e      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d12a      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f82:	4b51      	ldr	r3, [pc, #324]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f90:	4b4d      	ldr	r3, [pc, #308]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	0f1b      	lsrs	r3, r3, #28
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	019a      	lsls	r2, r3, #6
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	4944      	ldr	r1, [pc, #272]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fbe:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	493d      	ldr	r1, [pc, #244]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d022      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fec:	d11d      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fee:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	0e1b      	lsrs	r3, r3, #24
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ffc:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	0f1b      	lsrs	r3, r3, #28
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	019a      	lsls	r2, r3, #6
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	431a      	orrs	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	071b      	lsls	r3, r3, #28
 8005022:	4929      	ldr	r1, [pc, #164]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d028      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	0e1b      	lsrs	r3, r3, #24
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005044:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	019a      	lsls	r2, r3, #6
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	431a      	orrs	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	061b      	lsls	r3, r3, #24
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	071b      	lsls	r3, r3, #28
 800506a:	4917      	ldr	r1, [pc, #92]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4911      	ldr	r1, [pc, #68]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a0e      	ldr	r2, [pc, #56]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005094:	f7fe fb42 	bl	800371c <HAL_GetTick>
 8005098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800509c:	f7fe fb3e 	bl	800371c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e007      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ba:	d1ef      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e09d      	b.n	800521a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d108      	bne.n	80050f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ee:	d009      	beq.n	8005104 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	61da      	str	r2, [r3, #28]
 80050f6:	e005      	b.n	8005104 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fd febc 	bl	8002e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800513a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005144:	d902      	bls.n	800514c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e002      	b.n	8005152 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800514c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005150:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800515a:	d007      	beq.n	800516c <HAL_SPI_Init+0xa0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005164:	d002      	beq.n	800516c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	ea42 0103 	orr.w	r1, r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	f003 0204 	and.w	r2, r3, #4
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051e8:	ea42 0103 	orr.w	r1, r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005208:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b088      	sub	sp, #32
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_SPI_Transmit+0x22>
 8005240:	2302      	movs	r3, #2
 8005242:	e158      	b.n	80054f6 <HAL_SPI_Transmit+0x2d4>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800524c:	f7fe fa66 	bl	800371c <HAL_GetTick>
 8005250:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005262:	2302      	movs	r3, #2
 8005264:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005266:	e13d      	b.n	80054e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_SPI_Transmit+0x52>
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005278:	e134      	b.n	80054e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2203      	movs	r2, #3
 800527e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	88fa      	ldrh	r2, [r7, #6]
 8005292:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c4:	d10f      	bne.n	80052e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d007      	beq.n	8005304 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800530c:	d94b      	bls.n	80053a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_SPI_Transmit+0xfa>
 8005316:	8afb      	ldrh	r3, [r7, #22]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d13e      	bne.n	800539a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005340:	e02b      	b.n	800539a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d112      	bne.n	8005376 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	881a      	ldrh	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	1c9a      	adds	r2, r3, #2
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005374:	e011      	b.n	800539a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005376:	f7fe f9d1 	bl	800371c <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d803      	bhi.n	800538e <HAL_SPI_Transmit+0x16c>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d102      	bne.n	8005394 <HAL_SPI_Transmit+0x172>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005398:	e0a4      	b.n	80054e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1ce      	bne.n	8005342 <HAL_SPI_Transmit+0x120>
 80053a4:	e07c      	b.n	80054a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_SPI_Transmit+0x192>
 80053ae:	8afb      	ldrh	r3, [r7, #22]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d170      	bne.n	8005496 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d912      	bls.n	80053e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	881a      	ldrh	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	1c9a      	adds	r2, r3, #2
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b02      	subs	r3, #2
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e2:	e058      	b.n	8005496 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	7812      	ldrb	r2, [r2, #0]
 80053f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800540a:	e044      	b.n	8005496 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d12b      	bne.n	8005472 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d912      	bls.n	800544a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	881a      	ldrh	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	1c9a      	adds	r2, r3, #2
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b02      	subs	r3, #2
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005448:	e025      	b.n	8005496 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	7812      	ldrb	r2, [r2, #0]
 8005456:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005470:	e011      	b.n	8005496 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005472:	f7fe f953 	bl	800371c <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d803      	bhi.n	800548a <HAL_SPI_Transmit+0x268>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d102      	bne.n	8005490 <HAL_SPI_Transmit+0x26e>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005494:	e026      	b.n	80054e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1b5      	bne.n	800540c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fd07 	bl	8005eb8 <SPI_EndRxTxTransaction>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054be:	2300      	movs	r3, #0
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e000      	b.n	80054e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80054e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af02      	add	r7, sp, #8
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551a:	d112      	bne.n	8005542 <HAL_SPI_Receive+0x44>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10e      	bne.n	8005542 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2204      	movs	r2, #4
 8005528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	4613      	mov	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f910 	bl	800575e <HAL_SPI_TransmitReceive>
 800553e:	4603      	mov	r3, r0
 8005540:	e109      	b.n	8005756 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_SPI_Receive+0x52>
 800554c:	2302      	movs	r3, #2
 800554e:	e102      	b.n	8005756 <HAL_SPI_Receive+0x258>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005558:	f7fe f8e0 	bl	800371c <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d002      	beq.n	8005570 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800556a:	2302      	movs	r3, #2
 800556c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800556e:	e0e9      	b.n	8005744 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_Receive+0x7e>
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005580:	e0e0      	b.n	8005744 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2204      	movs	r2, #4
 8005586:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055cc:	d908      	bls.n	80055e0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	e007      	b.n	80055f0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f8:	d10f      	bne.n	800561a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005618:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d007      	beq.n	8005638 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005636:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005640:	d867      	bhi.n	8005712 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005642:	e030      	b.n	80056a6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d117      	bne.n	8005682 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f103 020c 	add.w	r2, r3, #12
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005680:	e011      	b.n	80056a6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005682:	f7fe f84b 	bl	800371c <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d803      	bhi.n	800569a <HAL_SPI_Receive+0x19c>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d102      	bne.n	80056a0 <HAL_SPI_Receive+0x1a2>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056a4:	e04e      	b.n	8005744 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1c8      	bne.n	8005644 <HAL_SPI_Receive+0x146>
 80056b2:	e034      	b.n	800571e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d115      	bne.n	80056ee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	b292      	uxth	r2, r2
 80056ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	1c9a      	adds	r2, r3, #2
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056ec:	e011      	b.n	8005712 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ee:	f7fe f815 	bl	800371c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d803      	bhi.n	8005706 <HAL_SPI_Receive+0x208>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d102      	bne.n	800570c <HAL_SPI_Receive+0x20e>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005710:	e018      	b.n	8005744 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1ca      	bne.n	80056b4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fb4c 	bl	8005dc0 <SPI_EndRxTransaction>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
 8005740:	e000      	b.n	8005744 <HAL_SPI_Receive+0x246>
  }

error :
 8005742:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005754:	7dfb      	ldrb	r3, [r7, #23]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b08a      	sub	sp, #40	; 0x28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800576c:	2301      	movs	r3, #1
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x26>
 8005780:	2302      	movs	r3, #2
 8005782:	e1fb      	b.n	8005b7c <HAL_SPI_TransmitReceive+0x41e>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800578c:	f7fd ffc6 	bl	800371c <HAL_GetTick>
 8005790:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005798:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057a4:	887b      	ldrh	r3, [r7, #2]
 80057a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057a8:	7efb      	ldrb	r3, [r7, #27]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d00e      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x6e>
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b4:	d106      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x66>
 80057be:	7efb      	ldrb	r3, [r7, #27]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d003      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80057ca:	e1cd      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_SPI_TransmitReceive+0x80>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_TransmitReceive+0x80>
 80057d8:	887b      	ldrh	r3, [r7, #2]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80057e4:	e1c0      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d003      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2205      	movs	r2, #5
 80057f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	887a      	ldrh	r2, [r7, #2]
 800580a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	887a      	ldrh	r2, [r7, #2]
 8005812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	887a      	ldrh	r2, [r7, #2]
 8005820:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	887a      	ldrh	r2, [r7, #2]
 8005826:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800583c:	d802      	bhi.n	8005844 <HAL_SPI_TransmitReceive+0xe6>
 800583e:	8a3b      	ldrh	r3, [r7, #16]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d908      	bls.n	8005856 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	e007      	b.n	8005866 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005864:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d007      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800588c:	d97c      	bls.n	8005988 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SPI_TransmitReceive+0x13e>
 8005896:	8a7b      	ldrh	r3, [r7, #18]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d169      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	881a      	ldrh	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	1c9a      	adds	r2, r3, #2
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c0:	e056      	b.n	8005970 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d11b      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x1aa>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x1aa>
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d113      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	881a      	ldrh	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d11c      	bne.n	8005950 <HAL_SPI_TransmitReceive+0x1f2>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d016      	beq.n	8005950 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	b292      	uxth	r2, r2
 800592e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	1c9a      	adds	r2, r3, #2
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800594c:	2301      	movs	r3, #1
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005950:	f7fd fee4 	bl	800371c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595c:	429a      	cmp	r2, r3
 800595e:	d807      	bhi.n	8005970 <HAL_SPI_TransmitReceive+0x212>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d003      	beq.n	8005970 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800596e:	e0fb      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1a3      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x164>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d19d      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x164>
 8005986:	e0df      	b.n	8005b48 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x23a>
 8005990:	8a7b      	ldrh	r3, [r7, #18]
 8005992:	2b01      	cmp	r3, #1
 8005994:	f040 80cb 	bne.w	8005b2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d912      	bls.n	80059c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	881a      	ldrh	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	1c9a      	adds	r2, r3, #2
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b02      	subs	r3, #2
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c6:	e0b2      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	7812      	ldrb	r2, [r2, #0]
 80059d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ee:	e09e      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d134      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x30a>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d02f      	beq.n	8005a68 <HAL_SPI_TransmitReceive+0x30a>
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d12c      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d912      	bls.n	8005a3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	881a      	ldrh	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	1c9a      	adds	r2, r3, #2
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b02      	subs	r3, #2
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a3c:	e012      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	330c      	adds	r3, #12
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d148      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x3aa>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d042      	beq.n	8005b08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d923      	bls.n	8005ad6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	1c9a      	adds	r2, r3, #2
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b02      	subs	r3, #2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d81f      	bhi.n	8005b04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ad2:	605a      	str	r2, [r3, #4]
 8005ad4:	e016      	b.n	8005b04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f103 020c 	add.w	r2, r3, #12
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	7812      	ldrb	r2, [r2, #0]
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b04:	2301      	movs	r3, #1
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b08:	f7fd fe08 	bl	800371c <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d803      	bhi.n	8005b20 <HAL_SPI_TransmitReceive+0x3c2>
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1e:	d102      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x3c8>
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b2c:	e01c      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f47f af5b 	bne.w	80059f0 <HAL_SPI_TransmitReceive+0x292>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f47f af54 	bne.w	80059f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f9b3 	bl	8005eb8 <SPI_EndRxTxTransaction>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d006      	beq.n	8005b66 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	661a      	str	r2, [r3, #96]	; 0x60
 8005b64:	e000      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3728      	adds	r7, #40	; 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b94:	f7fd fdc2 	bl	800371c <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ba4:	f7fd fdba 	bl	800371c <HAL_GetTick>
 8005ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	015b      	lsls	r3, r3, #5
 8005bb0:	0d1b      	lsrs	r3, r3, #20
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bba:	e054      	b.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d050      	beq.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bc4:	f7fd fdaa 	bl	800371c <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d902      	bls.n	8005bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d13d      	bne.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bf2:	d111      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	d004      	beq.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c06:	d107      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c20:	d10f      	bne.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e017      	b.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d19b      	bne.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000054 	.word	0x20000054

08005c94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ca6:	f7fd fd39 	bl	800371c <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005cb6:	f7fd fd31 	bl	800371c <HAL_GetTick>
 8005cba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005cc4:	4b3d      	ldr	r3, [pc, #244]	; (8005dbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	00da      	lsls	r2, r3, #3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	0d1b      	lsrs	r3, r3, #20
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005cdc:	e060      	b.n	8005da0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ce4:	d107      	bne.n	8005cf6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d050      	beq.n	8005da0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cfe:	f7fd fd0d 	bl	800371c <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d902      	bls.n	8005d14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d13d      	bne.n	8005d90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2c:	d111      	bne.n	8005d52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d36:	d004      	beq.n	8005d42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d40:	d107      	bne.n	8005d52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d5a:	d10f      	bne.n	8005d7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e010      	b.n	8005db2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4013      	ands	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d196      	bne.n	8005cde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3728      	adds	r7, #40	; 0x28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000054 	.word	0x20000054

08005dc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd4:	d111      	bne.n	8005dfa <SPI_EndRxTransaction+0x3a>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dde:	d004      	beq.n	8005dea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d107      	bne.n	8005dfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e02:	d112      	bne.n	8005e2a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2180      	movs	r1, #128	; 0x80
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff feb8 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d021      	beq.n	8005e5e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e03d      	b.n	8005ea6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e2a:	4b21      	ldr	r3, [pc, #132]	; (8005eb0 <SPI_EndRxTransaction+0xf0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <SPI_EndRxTransaction+0xf4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	0d5b      	lsrs	r3, r3, #21
 8005e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b80      	cmp	r3, #128	; 0x80
 8005e58:	d0f2      	beq.n	8005e40 <SPI_EndRxTransaction+0x80>
 8005e5a:	e000      	b.n	8005e5e <SPI_EndRxTransaction+0x9e>
        break;
 8005e5c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e66:	d11d      	bne.n	8005ea4 <SPI_EndRxTransaction+0xe4>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e70:	d004      	beq.n	8005e7c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7a:	d113      	bne.n	8005ea4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff ff03 	bl	8005c94 <SPI_WaitFifoStateUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d007      	beq.n	8005ea4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e000      	b.n	8005ea6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000054 	.word	0x20000054
 8005eb4:	165e9f81 	.word	0x165e9f81

08005eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff fedf 	bl	8005c94 <SPI_WaitFifoStateUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e046      	b.n	8005f7a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eec:	4b25      	ldr	r3, [pc, #148]	; (8005f84 <SPI_EndRxTxTransaction+0xcc>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a25      	ldr	r2, [pc, #148]	; (8005f88 <SPI_EndRxTxTransaction+0xd0>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	0d5b      	lsrs	r3, r3, #21
 8005ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005efc:	fb02 f303 	mul.w	r3, r2, r3
 8005f00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f0a:	d112      	bne.n	8005f32 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	2180      	movs	r1, #128	; 0x80
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff fe34 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d016      	beq.n	8005f50 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f26:	f043 0220 	orr.w	r2, r3, #32
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e023      	b.n	8005f7a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	d0f2      	beq.n	8005f32 <SPI_EndRxTxTransaction+0x7a>
 8005f4c:	e000      	b.n	8005f50 <SPI_EndRxTxTransaction+0x98>
        break;
 8005f4e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff fe99 	bl	8005c94 <SPI_WaitFifoStateUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e000      	b.n	8005f7a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000054 	.word	0x20000054
 8005f88:	165e9f81 	.word	0x165e9f81

08005f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e049      	b.n	8006032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fd f9c8 	bl	8003348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f000 fd30 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d001      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e054      	b.n	80060fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a26      	ldr	r2, [pc, #152]	; (800610c <HAL_TIM_Base_Start_IT+0xd0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607e:	d01d      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a22      	ldr	r2, [pc, #136]	; (8006110 <HAL_TIM_Base_Start_IT+0xd4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_TIM_Base_Start_IT+0xd8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <HAL_TIM_Base_Start_IT+0xdc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1e      	ldr	r2, [pc, #120]	; (800611c <HAL_TIM_Base_Start_IT+0xe0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <HAL_TIM_Base_Start_IT+0xe4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_TIM_Base_Start_IT+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d115      	bne.n	80060e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <HAL_TIM_Base_Start_IT+0xec>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b06      	cmp	r3, #6
 80060cc:	d015      	beq.n	80060fa <HAL_TIM_Base_Start_IT+0xbe>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d4:	d011      	beq.n	80060fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e6:	e008      	b.n	80060fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e000      	b.n	80060fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40010400 	.word	0x40010400
 8006120:	40014000 	.word	0x40014000
 8006124:	40001800 	.word	0x40001800
 8006128:	00010007 	.word	0x00010007

0800612c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e049      	b.n	80061d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f841 	bl	80061da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f000 fc60 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x24>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e03c      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d109      	bne.n	800622e <HAL_TIM_PWM_Start+0x3e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e02f      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x58>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e022      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b0c      	cmp	r3, #12
 800624c:	d109      	bne.n	8006262 <HAL_TIM_PWM_Start+0x72>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e015      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b10      	cmp	r3, #16
 8006266:	d109      	bne.n	800627c <HAL_TIM_PWM_Start+0x8c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e008      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e092      	b.n	80063bc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_PWM_Start+0xb6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a4:	e023      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_PWM_Start+0xc6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b4:	e01b      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Start+0xd6>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c4:	e013      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b0c      	cmp	r3, #12
 80062ca:	d104      	bne.n	80062d6 <HAL_TIM_PWM_Start+0xe6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d4:	e00b      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d104      	bne.n	80062e6 <HAL_TIM_PWM_Start+0xf6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e4:	e003      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 ff32 	bl	8007160 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a30      	ldr	r2, [pc, #192]	; (80063c4 <HAL_TIM_PWM_Start+0x1d4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_TIM_PWM_Start+0x120>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <HAL_TIM_PWM_Start+0x1d8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_TIM_PWM_Start+0x124>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_TIM_PWM_Start+0x126>
 8006314:	2300      	movs	r3, #0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a25      	ldr	r2, [pc, #148]	; (80063c4 <HAL_TIM_PWM_Start+0x1d4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d01d      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a22      	ldr	r2, [pc, #136]	; (80063cc <HAL_TIM_PWM_Start+0x1dc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a20      	ldr	r2, [pc, #128]	; (80063d0 <HAL_TIM_PWM_Start+0x1e0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1f      	ldr	r2, [pc, #124]	; (80063d4 <HAL_TIM_PWM_Start+0x1e4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <HAL_TIM_PWM_Start+0x1d8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1b      	ldr	r2, [pc, #108]	; (80063d8 <HAL_TIM_PWM_Start+0x1e8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a19      	ldr	r2, [pc, #100]	; (80063dc <HAL_TIM_PWM_Start+0x1ec>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d115      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <HAL_TIM_PWM_Start+0x1f0>)
 8006382:	4013      	ands	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b06      	cmp	r3, #6
 800638a:	d015      	beq.n	80063b8 <HAL_TIM_PWM_Start+0x1c8>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006392:	d011      	beq.n	80063b8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a4:	e008      	b.n	80063b8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0201 	orr.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	e000      	b.n	80063ba <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40010400 	.word	0x40010400
 80063cc:	40000400 	.word	0x40000400
 80063d0:	40000800 	.word	0x40000800
 80063d4:	40000c00 	.word	0x40000c00
 80063d8:	40014000 	.word	0x40014000
 80063dc:	40001800 	.word	0x40001800
 80063e0:	00010007 	.word	0x00010007

080063e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d122      	bne.n	8006440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d11b      	bne.n	8006440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0202 	mvn.w	r2, #2
 8006410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fae4 	bl	80069f4 <HAL_TIM_IC_CaptureCallback>
 800642c:	e005      	b.n	800643a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fad6 	bl	80069e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fae7 	bl	8006a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d122      	bne.n	8006494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b04      	cmp	r3, #4
 800645a:	d11b      	bne.n	8006494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0204 	mvn.w	r2, #4
 8006464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 faba 	bl	80069f4 <HAL_TIM_IC_CaptureCallback>
 8006480:	e005      	b.n	800648e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 faac 	bl	80069e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fabd 	bl	8006a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d122      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d11b      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0208 	mvn.w	r2, #8
 80064b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2204      	movs	r2, #4
 80064be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa90 	bl	80069f4 <HAL_TIM_IC_CaptureCallback>
 80064d4:	e005      	b.n	80064e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa82 	bl	80069e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa93 	bl	8006a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d122      	bne.n	800653c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b10      	cmp	r3, #16
 8006502:	d11b      	bne.n	800653c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0210 	mvn.w	r2, #16
 800650c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2208      	movs	r2, #8
 8006512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fa66 	bl	80069f4 <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa58 	bl	80069e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fa69 	bl	8006a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d10e      	bne.n	8006568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b01      	cmp	r3, #1
 8006556:	d107      	bne.n	8006568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0201 	mvn.w	r2, #1
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc fa66 	bl	8002a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d10e      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b80      	cmp	r3, #128	; 0x80
 8006582:	d107      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fea4 	bl	80072dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ae:	2b80      	cmp	r3, #128	; 0x80
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fe97 	bl	80072f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d10e      	bne.n	80065ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa17 	bl	8006a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d10e      	bne.n	800661a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b20      	cmp	r3, #32
 8006608:	d107      	bne.n	800661a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f06f 0220 	mvn.w	r2, #32
 8006612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fe57 	bl	80072c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800663e:	2302      	movs	r3, #2
 8006640:	e0ff      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b14      	cmp	r3, #20
 800664e:	f200 80f0 	bhi.w	8006832 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	080066ad 	.word	0x080066ad
 800665c:	08006833 	.word	0x08006833
 8006660:	08006833 	.word	0x08006833
 8006664:	08006833 	.word	0x08006833
 8006668:	080066ed 	.word	0x080066ed
 800666c:	08006833 	.word	0x08006833
 8006670:	08006833 	.word	0x08006833
 8006674:	08006833 	.word	0x08006833
 8006678:	0800672f 	.word	0x0800672f
 800667c:	08006833 	.word	0x08006833
 8006680:	08006833 	.word	0x08006833
 8006684:	08006833 	.word	0x08006833
 8006688:	0800676f 	.word	0x0800676f
 800668c:	08006833 	.word	0x08006833
 8006690:	08006833 	.word	0x08006833
 8006694:	08006833 	.word	0x08006833
 8006698:	080067b1 	.word	0x080067b1
 800669c:	08006833 	.word	0x08006833
 80066a0:	08006833 	.word	0x08006833
 80066a4:	08006833 	.word	0x08006833
 80066a8:	080067f1 	.word	0x080067f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fa5c 	bl	8006b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0208 	orr.w	r2, r2, #8
 80066c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0204 	bic.w	r2, r2, #4
 80066d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6999      	ldr	r1, [r3, #24]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	691a      	ldr	r2, [r3, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	619a      	str	r2, [r3, #24]
      break;
 80066ea:	e0a5      	b.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 faae 	bl	8006c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6999      	ldr	r1, [r3, #24]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	021a      	lsls	r2, r3, #8
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	619a      	str	r2, [r3, #24]
      break;
 800672c:	e084      	b.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fb05 	bl	8006d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0208 	orr.w	r2, r2, #8
 8006748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0204 	bic.w	r2, r2, #4
 8006758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69d9      	ldr	r1, [r3, #28]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	61da      	str	r2, [r3, #28]
      break;
 800676c:	e064      	b.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fb5b 	bl	8006e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69d9      	ldr	r1, [r3, #28]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	021a      	lsls	r2, r3, #8
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	61da      	str	r2, [r3, #28]
      break;
 80067ae:	e043      	b.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fb92 	bl	8006ee0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0208 	orr.w	r2, r2, #8
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0204 	bic.w	r2, r2, #4
 80067da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067ee:	e023      	b.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fbc4 	bl	8006f84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800680a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800681a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	021a      	lsls	r2, r3, #8
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006830:	e002      	b.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
      break;
 8006836:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006840:	7dfb      	ldrb	r3, [r7, #23]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop

0800684c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_TIM_ConfigClockSource+0x1c>
 8006864:	2302      	movs	r3, #2
 8006866:	e0b4      	b.n	80069d2 <HAL_TIM_ConfigClockSource+0x186>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	4b56      	ldr	r3, [pc, #344]	; (80069dc <HAL_TIM_ConfigClockSource+0x190>)
 8006884:	4013      	ands	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800688e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a0:	d03e      	beq.n	8006920 <HAL_TIM_ConfigClockSource+0xd4>
 80068a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a6:	f200 8087 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	f000 8086 	beq.w	80069be <HAL_TIM_ConfigClockSource+0x172>
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b6:	d87f      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
 80068b8:	2b70      	cmp	r3, #112	; 0x70
 80068ba:	d01a      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0xa6>
 80068bc:	2b70      	cmp	r3, #112	; 0x70
 80068be:	d87b      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b60      	cmp	r3, #96	; 0x60
 80068c2:	d050      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x11a>
 80068c4:	2b60      	cmp	r3, #96	; 0x60
 80068c6:	d877      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b50      	cmp	r3, #80	; 0x50
 80068ca:	d03c      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0xfa>
 80068cc:	2b50      	cmp	r3, #80	; 0x50
 80068ce:	d873      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d058      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x13a>
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d86f      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b30      	cmp	r3, #48	; 0x30
 80068da:	d064      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x15a>
 80068dc:	2b30      	cmp	r3, #48	; 0x30
 80068de:	d86b      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d060      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x15a>
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d867      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d05c      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x15a>
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d05a      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x15a>
 80068f0:	e062      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006902:	f000 fc0d 	bl	8007120 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	609a      	str	r2, [r3, #8]
      break;
 800691e:	e04f      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006930:	f000 fbf6 	bl	8007120 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006942:	609a      	str	r2, [r3, #8]
      break;
 8006944:	e03c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006952:	461a      	mov	r2, r3
 8006954:	f000 fb6a 	bl	800702c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2150      	movs	r1, #80	; 0x50
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fbc3 	bl	80070ea <TIM_ITRx_SetConfig>
      break;
 8006964:	e02c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006972:	461a      	mov	r2, r3
 8006974:	f000 fb89 	bl	800708a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2160      	movs	r1, #96	; 0x60
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fbb3 	bl	80070ea <TIM_ITRx_SetConfig>
      break;
 8006984:	e01c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006992:	461a      	mov	r2, r3
 8006994:	f000 fb4a 	bl	800702c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2140      	movs	r1, #64	; 0x40
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fba3 	bl	80070ea <TIM_ITRx_SetConfig>
      break;
 80069a4:	e00c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	4610      	mov	r0, r2
 80069b2:	f000 fb9a 	bl	80070ea <TIM_ITRx_SetConfig>
      break;
 80069b6:	e003      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]
      break;
 80069bc:	e000      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	fffeff88 	.word	0xfffeff88

080069e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a40      	ldr	r2, [pc, #256]	; (8006b44 <TIM_Base_SetConfig+0x114>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d013      	beq.n	8006a70 <TIM_Base_SetConfig+0x40>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4e:	d00f      	beq.n	8006a70 <TIM_Base_SetConfig+0x40>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a3d      	ldr	r2, [pc, #244]	; (8006b48 <TIM_Base_SetConfig+0x118>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <TIM_Base_SetConfig+0x40>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a3c      	ldr	r2, [pc, #240]	; (8006b4c <TIM_Base_SetConfig+0x11c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_Base_SetConfig+0x40>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a3b      	ldr	r2, [pc, #236]	; (8006b50 <TIM_Base_SetConfig+0x120>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_Base_SetConfig+0x40>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a3a      	ldr	r2, [pc, #232]	; (8006b54 <TIM_Base_SetConfig+0x124>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d108      	bne.n	8006a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a2f      	ldr	r2, [pc, #188]	; (8006b44 <TIM_Base_SetConfig+0x114>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d02b      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a90:	d027      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a2c      	ldr	r2, [pc, #176]	; (8006b48 <TIM_Base_SetConfig+0x118>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d023      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a2b      	ldr	r2, [pc, #172]	; (8006b4c <TIM_Base_SetConfig+0x11c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d01f      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a2a      	ldr	r2, [pc, #168]	; (8006b50 <TIM_Base_SetConfig+0x120>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d01b      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a29      	ldr	r2, [pc, #164]	; (8006b54 <TIM_Base_SetConfig+0x124>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d017      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a28      	ldr	r2, [pc, #160]	; (8006b58 <TIM_Base_SetConfig+0x128>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a27      	ldr	r2, [pc, #156]	; (8006b5c <TIM_Base_SetConfig+0x12c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00f      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a26      	ldr	r2, [pc, #152]	; (8006b60 <TIM_Base_SetConfig+0x130>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00b      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a25      	ldr	r2, [pc, #148]	; (8006b64 <TIM_Base_SetConfig+0x134>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d007      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a24      	ldr	r2, [pc, #144]	; (8006b68 <TIM_Base_SetConfig+0x138>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a23      	ldr	r2, [pc, #140]	; (8006b6c <TIM_Base_SetConfig+0x13c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d108      	bne.n	8006af4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a0a      	ldr	r2, [pc, #40]	; (8006b44 <TIM_Base_SetConfig+0x114>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <TIM_Base_SetConfig+0xf8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a0c      	ldr	r2, [pc, #48]	; (8006b54 <TIM_Base_SetConfig+0x124>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d103      	bne.n	8006b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	615a      	str	r2, [r3, #20]
}
 8006b36:	bf00      	nop
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40000400 	.word	0x40000400
 8006b4c:	40000800 	.word	0x40000800
 8006b50:	40000c00 	.word	0x40000c00
 8006b54:	40010400 	.word	0x40010400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40014400 	.word	0x40014400
 8006b60:	40014800 	.word	0x40014800
 8006b64:	40001800 	.word	0x40001800
 8006b68:	40001c00 	.word	0x40001c00
 8006b6c:	40002000 	.word	0x40002000

08006b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0201 	bic.w	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <TIM_OC1_SetConfig+0xd8>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f023 0302 	bic.w	r3, r3, #2
 8006bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a21      	ldr	r2, [pc, #132]	; (8006c4c <TIM_OC1_SetConfig+0xdc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC1_SetConfig+0x64>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a20      	ldr	r2, [pc, #128]	; (8006c50 <TIM_OC1_SetConfig+0xe0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d10c      	bne.n	8006bee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 0308 	bic.w	r3, r3, #8
 8006bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f023 0304 	bic.w	r3, r3, #4
 8006bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a16      	ldr	r2, [pc, #88]	; (8006c4c <TIM_OC1_SetConfig+0xdc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_OC1_SetConfig+0x8e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <TIM_OC1_SetConfig+0xe0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d111      	bne.n	8006c22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	fffeff8f 	.word	0xfffeff8f
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40010400 	.word	0x40010400

08006c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0210 	bic.w	r2, r3, #16
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4b2e      	ldr	r3, [pc, #184]	; (8006d38 <TIM_OC2_SetConfig+0xe4>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 0320 	bic.w	r3, r3, #32
 8006c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a23      	ldr	r2, [pc, #140]	; (8006d3c <TIM_OC2_SetConfig+0xe8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC2_SetConfig+0x68>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a22      	ldr	r2, [pc, #136]	; (8006d40 <TIM_OC2_SetConfig+0xec>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d10d      	bne.n	8006cd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a18      	ldr	r2, [pc, #96]	; (8006d3c <TIM_OC2_SetConfig+0xe8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_OC2_SetConfig+0x94>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a17      	ldr	r2, [pc, #92]	; (8006d40 <TIM_OC2_SetConfig+0xec>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d113      	bne.n	8006d10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	feff8fff 	.word	0xfeff8fff
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400

08006d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4b2d      	ldr	r3, [pc, #180]	; (8006e24 <TIM_OC3_SetConfig+0xe0>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a22      	ldr	r2, [pc, #136]	; (8006e28 <TIM_OC3_SetConfig+0xe4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_OC3_SetConfig+0x66>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a21      	ldr	r2, [pc, #132]	; (8006e2c <TIM_OC3_SetConfig+0xe8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d10d      	bne.n	8006dc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <TIM_OC3_SetConfig+0xe4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d003      	beq.n	8006dd6 <TIM_OC3_SetConfig+0x92>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a16      	ldr	r2, [pc, #88]	; (8006e2c <TIM_OC3_SetConfig+0xe8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d113      	bne.n	8006dfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	621a      	str	r2, [r3, #32]
}
 8006e18:	bf00      	nop
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	fffeff8f 	.word	0xfffeff8f
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40010400 	.word	0x40010400

08006e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4b1e      	ldr	r3, [pc, #120]	; (8006ed4 <TIM_OC4_SetConfig+0xa4>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	031b      	lsls	r3, r3, #12
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <TIM_OC4_SetConfig+0xa8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_OC4_SetConfig+0x68>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a12      	ldr	r2, [pc, #72]	; (8006edc <TIM_OC4_SetConfig+0xac>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d109      	bne.n	8006eac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	019b      	lsls	r3, r3, #6
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	feff8fff 	.word	0xfeff8fff
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40010400 	.word	0x40010400

08006ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <TIM_OC5_SetConfig+0x98>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a12      	ldr	r2, [pc, #72]	; (8006f7c <TIM_OC5_SetConfig+0x9c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d003      	beq.n	8006f3e <TIM_OC5_SetConfig+0x5e>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a11      	ldr	r2, [pc, #68]	; (8006f80 <TIM_OC5_SetConfig+0xa0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d109      	bne.n	8006f52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	fffeff8f 	.word	0xfffeff8f
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40010400 	.word	0x40010400

08006f84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <TIM_OC6_SetConfig+0x9c>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	021b      	lsls	r3, r3, #8
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	051b      	lsls	r3, r3, #20
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a13      	ldr	r2, [pc, #76]	; (8007024 <TIM_OC6_SetConfig+0xa0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_OC6_SetConfig+0x60>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a12      	ldr	r2, [pc, #72]	; (8007028 <TIM_OC6_SetConfig+0xa4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d109      	bne.n	8006ff8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	feff8fff 	.word	0xfeff8fff
 8007024:	40010000 	.word	0x40010000
 8007028:	40010400 	.word	0x40010400

0800702c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	f023 0201 	bic.w	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f023 030a 	bic.w	r3, r3, #10
 8007068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4313      	orrs	r3, r2
 8007070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800708a:	b480      	push	{r7}
 800708c:	b087      	sub	sp, #28
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f023 0210 	bic.w	r2, r3, #16
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	031b      	lsls	r3, r3, #12
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	621a      	str	r2, [r3, #32]
}
 80070de:	bf00      	nop
 80070e0:	371c      	adds	r7, #28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	f043 0307 	orr.w	r3, r3, #7
 800710c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	609a      	str	r2, [r3, #8]
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	021a      	lsls	r2, r3, #8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	431a      	orrs	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4313      	orrs	r3, r2
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	609a      	str	r2, [r3, #8]
}
 8007154:	bf00      	nop
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	2201      	movs	r2, #1
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	43db      	mvns	r3, r3
 8007182:	401a      	ands	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a1a      	ldr	r2, [r3, #32]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f003 031f 	and.w	r3, r3, #31
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	fa01 f303 	lsl.w	r3, r1, r3
 8007198:	431a      	orrs	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	621a      	str	r2, [r3, #32]
}
 800719e:	bf00      	nop
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e06d      	b.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a30      	ldr	r2, [pc, #192]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d004      	beq.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2f      	ldr	r2, [pc, #188]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d108      	bne.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a20      	ldr	r2, [pc, #128]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d022      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007236:	d01d      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d018      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d013      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00e      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d009      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d004      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10c      	bne.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	4313      	orrs	r3, r2
 8007284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40001800 	.word	0x40001800

080072c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e040      	b.n	8007398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fc f916 	bl	8003558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2224      	movs	r2, #36	; 0x24
 8007330:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fbe6 	bl	8007b14 <UART_SetConfig>
 8007348:	4603      	mov	r3, r0
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e022      	b.n	8007398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fe3e 	bl	8007fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800736e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800737e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fec5 	bl	8008120 <UART_CheckIdleState>
 8007396:	4603      	mov	r3, r0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	603b      	str	r3, [r7, #0]
 80073ac:	4613      	mov	r3, r2
 80073ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d171      	bne.n	800749c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <HAL_UART_Transmit+0x24>
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e06a      	b.n	800749e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2221      	movs	r2, #33	; 0x21
 80073d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073d6:	f7fc f9a1 	bl	800371c <HAL_GetTick>
 80073da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f4:	d108      	bne.n	8007408 <HAL_UART_Transmit+0x68>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d104      	bne.n	8007408 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	e003      	b.n	8007410 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800740c:	2300      	movs	r3, #0
 800740e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007410:	e02c      	b.n	800746c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2200      	movs	r2, #0
 800741a:	2180      	movs	r1, #128	; 0x80
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 feb6 	bl	800818e <UART_WaitOnFlagUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e038      	b.n	800749e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10b      	bne.n	800744a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007440:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	3302      	adds	r3, #2
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	e007      	b.n	800745a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	781a      	ldrb	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	3301      	adds	r3, #1
 8007458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1cc      	bne.n	8007412 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2200      	movs	r2, #0
 8007480:	2140      	movs	r1, #64	; 0x40
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 fe83 	bl	800818e <UART_WaitOnFlagUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e005      	b.n	800749e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	e000      	b.n	800749e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800749c:	2302      	movs	r3, #2
  }
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b08a      	sub	sp, #40	; 0x28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	4613      	mov	r3, r2
 80074b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d132      	bne.n	8007524 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <HAL_UART_Receive_IT+0x24>
 80074c4:	88fb      	ldrh	r3, [r7, #6]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e02b      	b.n	8007526 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d018      	beq.n	8007514 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	613b      	str	r3, [r7, #16]
   return(result);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	623b      	str	r3, [r7, #32]
 8007502:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	69f9      	ldr	r1, [r7, #28]
 8007506:	6a3a      	ldr	r2, [r7, #32]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	61bb      	str	r3, [r7, #24]
   return(result);
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e6      	bne.n	80074e2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007514:	88fb      	ldrh	r3, [r7, #6]
 8007516:	461a      	mov	r2, r3
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fefe 	bl	800831c <UART_Start_Receive_IT>
 8007520:	4603      	mov	r3, r0
 8007522:	e000      	b.n	8007526 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007524:	2302      	movs	r3, #2
  }
}
 8007526:	4618      	mov	r0, r3
 8007528:	3728      	adds	r7, #40	; 0x28
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b0ba      	sub	sp, #232	; 0xe8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800755a:	f640 030f 	movw	r3, #2063	; 0x80f
 800755e:	4013      	ands	r3, r2
 8007560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d115      	bne.n	8007598 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00f      	beq.n	8007598 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 8297 	beq.w	8007abc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
      }
      return;
 8007596:	e291      	b.n	8007abc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8117 	beq.w	80077d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075b2:	4b85      	ldr	r3, [pc, #532]	; (80077c8 <HAL_UART_IRQHandler+0x298>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 810a 	beq.w	80077d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d011      	beq.n	80075ec <HAL_UART_IRQHandler+0xbc>
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2201      	movs	r2, #1
 80075da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e2:	f043 0201 	orr.w	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d011      	beq.n	800761c <HAL_UART_IRQHandler+0xec>
 80075f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2202      	movs	r2, #2
 800760a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007612:	f043 0204 	orr.w	r2, r3, #4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d011      	beq.n	800764c <HAL_UART_IRQHandler+0x11c>
 8007628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2204      	movs	r2, #4
 800763a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007642:	f043 0202 	orr.w	r2, r3, #2
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800764c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d017      	beq.n	8007688 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007668:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2208      	movs	r2, #8
 8007676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800767e:	f043 0208 	orr.w	r2, r3, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007690:	2b00      	cmp	r3, #0
 8007692:	d012      	beq.n	80076ba <HAL_UART_IRQHandler+0x18a>
 8007694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00c      	beq.n	80076ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b0:	f043 0220 	orr.w	r2, r3, #32
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 81fd 	beq.w	8007ac0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00d      	beq.n	80076ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d007      	beq.n	80076ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	d005      	beq.n	8007712 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800770a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800770e:	2b00      	cmp	r3, #0
 8007710:	d04f      	beq.n	80077b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fec8 	bl	80084a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d141      	bne.n	80077aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3308      	adds	r3, #8
 800772c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800773c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3308      	adds	r3, #8
 800774e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800775e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800776a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1d9      	bne.n	8007726 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007776:	2b00      	cmp	r3, #0
 8007778:	d013      	beq.n	80077a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777e:	4a13      	ldr	r2, [pc, #76]	; (80077cc <HAL_UART_IRQHandler+0x29c>)
 8007780:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007786:	4618      	mov	r0, r3
 8007788:	f7fc f979 	bl	8003a7e <HAL_DMA_Abort_IT>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d017      	beq.n	80077c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	e00f      	b.n	80077c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f9a0 	bl	8007ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a8:	e00b      	b.n	80077c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f99c 	bl	8007ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	e007      	b.n	80077c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f998 	bl	8007ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80077c0:	e17e      	b.n	8007ac0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c2:	bf00      	nop
    return;
 80077c4:	e17c      	b.n	8007ac0 <HAL_UART_IRQHandler+0x590>
 80077c6:	bf00      	nop
 80077c8:	04000120 	.word	0x04000120
 80077cc:	08008571 	.word	0x08008571

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	f040 814c 	bne.w	8007a72 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8145 	beq.w	8007a72 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 813e 	beq.w	8007a72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2210      	movs	r2, #16
 80077fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	f040 80b6 	bne.w	800797a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800781a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 8150 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800782a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800782e:	429a      	cmp	r2, r3
 8007830:	f080 8148 	bcs.w	8007ac4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800783a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007848:	f000 8086 	beq.w	8007958 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800787a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007882:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800788e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1da      	bne.n	800784c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e1      	bne.n	8007896 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e3      	bne.n	80078d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007928:	f023 0310 	bic.w	r3, r3, #16
 800792c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800793a:	65bb      	str	r3, [r7, #88]	; 0x58
 800793c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e4      	bne.n	8007918 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007952:	4618      	mov	r0, r3
 8007954:	f7fc f823 	bl	800399e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800796a:	b29b      	uxth	r3, r3
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	b29b      	uxth	r3, r3
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8c2 	bl	8007afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007978:	e0a4      	b.n	8007ac4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007986:	b29b      	uxth	r3, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 8096 	beq.w	8007ac8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800799c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8091 	beq.w	8007ac8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079c8:	647b      	str	r3, [r7, #68]	; 0x44
 80079ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e4      	bne.n	80079a6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	623b      	str	r3, [r7, #32]
   return(result);
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a00:	633a      	str	r2, [r7, #48]	; 0x30
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e3      	bne.n	80079dc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f023 0310 	bic.w	r3, r3, #16
 8007a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	69b9      	ldr	r1, [r7, #24]
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	617b      	str	r3, [r7, #20]
   return(result);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e4      	bne.n	8007a28 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f846 	bl	8007afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a70:	e02a      	b.n	8007ac8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00e      	beq.n	8007a9c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01c      	beq.n	8007acc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
    }
    return;
 8007a9a:	e017      	b.n	8007acc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d012      	beq.n	8007ace <HAL_UART_IRQHandler+0x59e>
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00c      	beq.n	8007ace <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fd71 	bl	800859c <UART_EndTransmit_IT>
    return;
 8007aba:	e008      	b.n	8007ace <HAL_UART_IRQHandler+0x59e>
      return;
 8007abc:	bf00      	nop
 8007abe:	e006      	b.n	8007ace <HAL_UART_IRQHandler+0x59e>
    return;
 8007ac0:	bf00      	nop
 8007ac2:	e004      	b.n	8007ace <HAL_UART_IRQHandler+0x59e>
      return;
 8007ac4:	bf00      	nop
 8007ac6:	e002      	b.n	8007ace <HAL_UART_IRQHandler+0x59e>
      return;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <HAL_UART_IRQHandler+0x59e>
    return;
 8007acc:	bf00      	nop
  }

}
 8007ace:	37e8      	adds	r7, #232	; 0xe8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	4ba6      	ldr	r3, [pc, #664]	; (8007dd8 <UART_SetConfig+0x2c4>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68da      	ldr	r2, [r3, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a94      	ldr	r2, [pc, #592]	; (8007ddc <UART_SetConfig+0x2c8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d120      	bne.n	8007bd2 <UART_SetConfig+0xbe>
 8007b90:	4b93      	ldr	r3, [pc, #588]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d816      	bhi.n	8007bcc <UART_SetConfig+0xb8>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <UART_SetConfig+0x90>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bb5 	.word	0x08007bb5
 8007ba8:	08007bc1 	.word	0x08007bc1
 8007bac:	08007bbb 	.word	0x08007bbb
 8007bb0:	08007bc7 	.word	0x08007bc7
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	e150      	b.n	8007e5c <UART_SetConfig+0x348>
 8007bba:	2302      	movs	r3, #2
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e14d      	b.n	8007e5c <UART_SetConfig+0x348>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e14a      	b.n	8007e5c <UART_SetConfig+0x348>
 8007bc6:	2308      	movs	r3, #8
 8007bc8:	77fb      	strb	r3, [r7, #31]
 8007bca:	e147      	b.n	8007e5c <UART_SetConfig+0x348>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e144      	b.n	8007e5c <UART_SetConfig+0x348>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a83      	ldr	r2, [pc, #524]	; (8007de4 <UART_SetConfig+0x2d0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d132      	bne.n	8007c42 <UART_SetConfig+0x12e>
 8007bdc:	4b80      	ldr	r3, [pc, #512]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be2:	f003 030c 	and.w	r3, r3, #12
 8007be6:	2b0c      	cmp	r3, #12
 8007be8:	d828      	bhi.n	8007c3c <UART_SetConfig+0x128>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <UART_SetConfig+0xdc>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c25 	.word	0x08007c25
 8007bf4:	08007c3d 	.word	0x08007c3d
 8007bf8:	08007c3d 	.word	0x08007c3d
 8007bfc:	08007c3d 	.word	0x08007c3d
 8007c00:	08007c31 	.word	0x08007c31
 8007c04:	08007c3d 	.word	0x08007c3d
 8007c08:	08007c3d 	.word	0x08007c3d
 8007c0c:	08007c3d 	.word	0x08007c3d
 8007c10:	08007c2b 	.word	0x08007c2b
 8007c14:	08007c3d 	.word	0x08007c3d
 8007c18:	08007c3d 	.word	0x08007c3d
 8007c1c:	08007c3d 	.word	0x08007c3d
 8007c20:	08007c37 	.word	0x08007c37
 8007c24:	2300      	movs	r3, #0
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e118      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	77fb      	strb	r3, [r7, #31]
 8007c2e:	e115      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c30:	2304      	movs	r3, #4
 8007c32:	77fb      	strb	r3, [r7, #31]
 8007c34:	e112      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c36:	2308      	movs	r3, #8
 8007c38:	77fb      	strb	r3, [r7, #31]
 8007c3a:	e10f      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e10c      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a68      	ldr	r2, [pc, #416]	; (8007de8 <UART_SetConfig+0x2d4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d120      	bne.n	8007c8e <UART_SetConfig+0x17a>
 8007c4c:	4b64      	ldr	r3, [pc, #400]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c56:	2b30      	cmp	r3, #48	; 0x30
 8007c58:	d013      	beq.n	8007c82 <UART_SetConfig+0x16e>
 8007c5a:	2b30      	cmp	r3, #48	; 0x30
 8007c5c:	d814      	bhi.n	8007c88 <UART_SetConfig+0x174>
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d009      	beq.n	8007c76 <UART_SetConfig+0x162>
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d810      	bhi.n	8007c88 <UART_SetConfig+0x174>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <UART_SetConfig+0x15c>
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d006      	beq.n	8007c7c <UART_SetConfig+0x168>
 8007c6e:	e00b      	b.n	8007c88 <UART_SetConfig+0x174>
 8007c70:	2300      	movs	r3, #0
 8007c72:	77fb      	strb	r3, [r7, #31]
 8007c74:	e0f2      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c76:	2302      	movs	r3, #2
 8007c78:	77fb      	strb	r3, [r7, #31]
 8007c7a:	e0ef      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	77fb      	strb	r3, [r7, #31]
 8007c80:	e0ec      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c82:	2308      	movs	r3, #8
 8007c84:	77fb      	strb	r3, [r7, #31]
 8007c86:	e0e9      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	77fb      	strb	r3, [r7, #31]
 8007c8c:	e0e6      	b.n	8007e5c <UART_SetConfig+0x348>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a56      	ldr	r2, [pc, #344]	; (8007dec <UART_SetConfig+0x2d8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d120      	bne.n	8007cda <UART_SetConfig+0x1c6>
 8007c98:	4b51      	ldr	r3, [pc, #324]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ca4:	d013      	beq.n	8007cce <UART_SetConfig+0x1ba>
 8007ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ca8:	d814      	bhi.n	8007cd4 <UART_SetConfig+0x1c0>
 8007caa:	2b80      	cmp	r3, #128	; 0x80
 8007cac:	d009      	beq.n	8007cc2 <UART_SetConfig+0x1ae>
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	d810      	bhi.n	8007cd4 <UART_SetConfig+0x1c0>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <UART_SetConfig+0x1a8>
 8007cb6:	2b40      	cmp	r3, #64	; 0x40
 8007cb8:	d006      	beq.n	8007cc8 <UART_SetConfig+0x1b4>
 8007cba:	e00b      	b.n	8007cd4 <UART_SetConfig+0x1c0>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	77fb      	strb	r3, [r7, #31]
 8007cc0:	e0cc      	b.n	8007e5c <UART_SetConfig+0x348>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	77fb      	strb	r3, [r7, #31]
 8007cc6:	e0c9      	b.n	8007e5c <UART_SetConfig+0x348>
 8007cc8:	2304      	movs	r3, #4
 8007cca:	77fb      	strb	r3, [r7, #31]
 8007ccc:	e0c6      	b.n	8007e5c <UART_SetConfig+0x348>
 8007cce:	2308      	movs	r3, #8
 8007cd0:	77fb      	strb	r3, [r7, #31]
 8007cd2:	e0c3      	b.n	8007e5c <UART_SetConfig+0x348>
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	77fb      	strb	r3, [r7, #31]
 8007cd8:	e0c0      	b.n	8007e5c <UART_SetConfig+0x348>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a44      	ldr	r2, [pc, #272]	; (8007df0 <UART_SetConfig+0x2dc>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d125      	bne.n	8007d30 <UART_SetConfig+0x21c>
 8007ce4:	4b3e      	ldr	r3, [pc, #248]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf2:	d017      	beq.n	8007d24 <UART_SetConfig+0x210>
 8007cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf8:	d817      	bhi.n	8007d2a <UART_SetConfig+0x216>
 8007cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cfe:	d00b      	beq.n	8007d18 <UART_SetConfig+0x204>
 8007d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d04:	d811      	bhi.n	8007d2a <UART_SetConfig+0x216>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <UART_SetConfig+0x1fe>
 8007d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d0e:	d006      	beq.n	8007d1e <UART_SetConfig+0x20a>
 8007d10:	e00b      	b.n	8007d2a <UART_SetConfig+0x216>
 8007d12:	2300      	movs	r3, #0
 8007d14:	77fb      	strb	r3, [r7, #31]
 8007d16:	e0a1      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	77fb      	strb	r3, [r7, #31]
 8007d1c:	e09e      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d1e:	2304      	movs	r3, #4
 8007d20:	77fb      	strb	r3, [r7, #31]
 8007d22:	e09b      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d24:	2308      	movs	r3, #8
 8007d26:	77fb      	strb	r3, [r7, #31]
 8007d28:	e098      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d2a:	2310      	movs	r3, #16
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e095      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a2f      	ldr	r2, [pc, #188]	; (8007df4 <UART_SetConfig+0x2e0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d125      	bne.n	8007d86 <UART_SetConfig+0x272>
 8007d3a:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d48:	d017      	beq.n	8007d7a <UART_SetConfig+0x266>
 8007d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d4e:	d817      	bhi.n	8007d80 <UART_SetConfig+0x26c>
 8007d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d54:	d00b      	beq.n	8007d6e <UART_SetConfig+0x25a>
 8007d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d5a:	d811      	bhi.n	8007d80 <UART_SetConfig+0x26c>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <UART_SetConfig+0x254>
 8007d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d64:	d006      	beq.n	8007d74 <UART_SetConfig+0x260>
 8007d66:	e00b      	b.n	8007d80 <UART_SetConfig+0x26c>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e076      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e073      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d74:	2304      	movs	r3, #4
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e070      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d7a:	2308      	movs	r3, #8
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e06d      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d80:	2310      	movs	r3, #16
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e06a      	b.n	8007e5c <UART_SetConfig+0x348>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <UART_SetConfig+0x2e4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d138      	bne.n	8007e02 <UART_SetConfig+0x2ee>
 8007d90:	4b13      	ldr	r3, [pc, #76]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d9e:	d017      	beq.n	8007dd0 <UART_SetConfig+0x2bc>
 8007da0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007da4:	d82a      	bhi.n	8007dfc <UART_SetConfig+0x2e8>
 8007da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007daa:	d00b      	beq.n	8007dc4 <UART_SetConfig+0x2b0>
 8007dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db0:	d824      	bhi.n	8007dfc <UART_SetConfig+0x2e8>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <UART_SetConfig+0x2aa>
 8007db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dba:	d006      	beq.n	8007dca <UART_SetConfig+0x2b6>
 8007dbc:	e01e      	b.n	8007dfc <UART_SetConfig+0x2e8>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	77fb      	strb	r3, [r7, #31]
 8007dc2:	e04b      	b.n	8007e5c <UART_SetConfig+0x348>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	77fb      	strb	r3, [r7, #31]
 8007dc8:	e048      	b.n	8007e5c <UART_SetConfig+0x348>
 8007dca:	2304      	movs	r3, #4
 8007dcc:	77fb      	strb	r3, [r7, #31]
 8007dce:	e045      	b.n	8007e5c <UART_SetConfig+0x348>
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	77fb      	strb	r3, [r7, #31]
 8007dd4:	e042      	b.n	8007e5c <UART_SetConfig+0x348>
 8007dd6:	bf00      	nop
 8007dd8:	efff69f3 	.word	0xefff69f3
 8007ddc:	40011000 	.word	0x40011000
 8007de0:	40023800 	.word	0x40023800
 8007de4:	40004400 	.word	0x40004400
 8007de8:	40004800 	.word	0x40004800
 8007dec:	40004c00 	.word	0x40004c00
 8007df0:	40005000 	.word	0x40005000
 8007df4:	40011400 	.word	0x40011400
 8007df8:	40007800 	.word	0x40007800
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e02c      	b.n	8007e5c <UART_SetConfig+0x348>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a72      	ldr	r2, [pc, #456]	; (8007fd0 <UART_SetConfig+0x4bc>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d125      	bne.n	8007e58 <UART_SetConfig+0x344>
 8007e0c:	4b71      	ldr	r3, [pc, #452]	; (8007fd4 <UART_SetConfig+0x4c0>)
 8007e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e1a:	d017      	beq.n	8007e4c <UART_SetConfig+0x338>
 8007e1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e20:	d817      	bhi.n	8007e52 <UART_SetConfig+0x33e>
 8007e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e26:	d00b      	beq.n	8007e40 <UART_SetConfig+0x32c>
 8007e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2c:	d811      	bhi.n	8007e52 <UART_SetConfig+0x33e>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <UART_SetConfig+0x326>
 8007e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e36:	d006      	beq.n	8007e46 <UART_SetConfig+0x332>
 8007e38:	e00b      	b.n	8007e52 <UART_SetConfig+0x33e>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	77fb      	strb	r3, [r7, #31]
 8007e3e:	e00d      	b.n	8007e5c <UART_SetConfig+0x348>
 8007e40:	2302      	movs	r3, #2
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e00a      	b.n	8007e5c <UART_SetConfig+0x348>
 8007e46:	2304      	movs	r3, #4
 8007e48:	77fb      	strb	r3, [r7, #31]
 8007e4a:	e007      	b.n	8007e5c <UART_SetConfig+0x348>
 8007e4c:	2308      	movs	r3, #8
 8007e4e:	77fb      	strb	r3, [r7, #31]
 8007e50:	e004      	b.n	8007e5c <UART_SetConfig+0x348>
 8007e52:	2310      	movs	r3, #16
 8007e54:	77fb      	strb	r3, [r7, #31]
 8007e56:	e001      	b.n	8007e5c <UART_SetConfig+0x348>
 8007e58:	2310      	movs	r3, #16
 8007e5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e64:	d15b      	bne.n	8007f1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e66:	7ffb      	ldrb	r3, [r7, #31]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d828      	bhi.n	8007ebe <UART_SetConfig+0x3aa>
 8007e6c:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <UART_SetConfig+0x360>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007e99 	.word	0x08007e99
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	08007ebf 	.word	0x08007ebf
 8007e84:	08007eaf 	.word	0x08007eaf
 8007e88:	08007ebf 	.word	0x08007ebf
 8007e8c:	08007ebf 	.word	0x08007ebf
 8007e90:	08007ebf 	.word	0x08007ebf
 8007e94:	08007eb7 	.word	0x08007eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e98:	f7fc fd00 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8007e9c:	61b8      	str	r0, [r7, #24]
        break;
 8007e9e:	e013      	b.n	8007ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea0:	f7fc fd10 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 8007ea4:	61b8      	str	r0, [r7, #24]
        break;
 8007ea6:	e00f      	b.n	8007ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea8:	4b4b      	ldr	r3, [pc, #300]	; (8007fd8 <UART_SetConfig+0x4c4>)
 8007eaa:	61bb      	str	r3, [r7, #24]
        break;
 8007eac:	e00c      	b.n	8007ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eae:	f7fc fbe3 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8007eb2:	61b8      	str	r0, [r7, #24]
        break;
 8007eb4:	e008      	b.n	8007ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eba:	61bb      	str	r3, [r7, #24]
        break;
 8007ebc:	e004      	b.n	8007ec8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	77bb      	strb	r3, [r7, #30]
        break;
 8007ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d074      	beq.n	8007fb8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	005a      	lsls	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	441a      	add	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d916      	bls.n	8007f18 <UART_SetConfig+0x404>
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef0:	d212      	bcs.n	8007f18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f023 030f 	bic.w	r3, r3, #15
 8007efa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	89fb      	ldrh	r3, [r7, #14]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	89fa      	ldrh	r2, [r7, #14]
 8007f14:	60da      	str	r2, [r3, #12]
 8007f16:	e04f      	b.n	8007fb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	77bb      	strb	r3, [r7, #30]
 8007f1c:	e04c      	b.n	8007fb8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f1e:	7ffb      	ldrb	r3, [r7, #31]
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d828      	bhi.n	8007f76 <UART_SetConfig+0x462>
 8007f24:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <UART_SetConfig+0x418>)
 8007f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2a:	bf00      	nop
 8007f2c:	08007f51 	.word	0x08007f51
 8007f30:	08007f59 	.word	0x08007f59
 8007f34:	08007f61 	.word	0x08007f61
 8007f38:	08007f77 	.word	0x08007f77
 8007f3c:	08007f67 	.word	0x08007f67
 8007f40:	08007f77 	.word	0x08007f77
 8007f44:	08007f77 	.word	0x08007f77
 8007f48:	08007f77 	.word	0x08007f77
 8007f4c:	08007f6f 	.word	0x08007f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f50:	f7fc fca4 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8007f54:	61b8      	str	r0, [r7, #24]
        break;
 8007f56:	e013      	b.n	8007f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f58:	f7fc fcb4 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 8007f5c:	61b8      	str	r0, [r7, #24]
        break;
 8007f5e:	e00f      	b.n	8007f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f60:	4b1d      	ldr	r3, [pc, #116]	; (8007fd8 <UART_SetConfig+0x4c4>)
 8007f62:	61bb      	str	r3, [r7, #24]
        break;
 8007f64:	e00c      	b.n	8007f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f66:	f7fc fb87 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8007f6a:	61b8      	str	r0, [r7, #24]
        break;
 8007f6c:	e008      	b.n	8007f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f72:	61bb      	str	r3, [r7, #24]
        break;
 8007f74:	e004      	b.n	8007f80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8007f7e:	bf00      	nop
    }

    if (pclk != 0U)
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d018      	beq.n	8007fb8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	085a      	lsrs	r2, r3, #1
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	441a      	add	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b0f      	cmp	r3, #15
 8007f9e:	d909      	bls.n	8007fb4 <UART_SetConfig+0x4a0>
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa6:	d205      	bcs.n	8007fb4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60da      	str	r2, [r3, #12]
 8007fb2:	e001      	b.n	8007fb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007fc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	40007c00 	.word	0x40007c00
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	00f42400 	.word	0x00f42400

08007fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d01a      	beq.n	80080f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080da:	d10a      	bne.n	80080f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
  }
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af02      	add	r7, sp, #8
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008130:	f7fb faf4 	bl	800371c <HAL_GetTick>
 8008134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b08      	cmp	r3, #8
 8008142:	d10e      	bne.n	8008162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f81b 	bl	800818e <UART_WaitOnFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e011      	b.n	8008186 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b09c      	sub	sp, #112	; 0x70
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	4613      	mov	r3, r2
 800819c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819e:	e0a7      	b.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a6:	f000 80a3 	beq.w	80082f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081aa:	f7fb fab7 	bl	800371c <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d302      	bcc.n	80081c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80081ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d13f      	bne.n	8008240 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081d4:	667b      	str	r3, [r7, #100]	; 0x64
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e6      	bne.n	80081c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3308      	adds	r3, #8
 80081f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	f023 0301 	bic.w	r3, r3, #1
 8008208:	663b      	str	r3, [r7, #96]	; 0x60
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3308      	adds	r3, #8
 8008210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008212:	64ba      	str	r2, [r7, #72]	; 0x48
 8008214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e5      	bne.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2220      	movs	r2, #32
 800822a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e068      	b.n	8008312 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d050      	beq.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800825c:	d148      	bne.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008266:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800827c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008286:	637b      	str	r3, [r7, #52]	; 0x34
 8008288:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800828c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	613b      	str	r3, [r7, #16]
   return(result);
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f023 0301 	bic.w	r3, r3, #1
 80082b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082ba:	623a      	str	r2, [r7, #32]
 80082bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	69f9      	ldr	r1, [r7, #28]
 80082c0:	6a3a      	ldr	r2, [r7, #32]
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e5      	bne.n	800829a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2220      	movs	r2, #32
 80082d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2220      	movs	r2, #32
 80082e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e010      	b.n	8008312 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69da      	ldr	r2, [r3, #28]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4013      	ands	r3, r2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	bf0c      	ite	eq
 8008300:	2301      	moveq	r3, #1
 8008302:	2300      	movne	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	429a      	cmp	r2, r3
 800830c:	f43f af48 	beq.w	80081a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3770      	adds	r7, #112	; 0x70
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800831c:	b480      	push	{r7}
 800831e:	b097      	sub	sp, #92	; 0x5c
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	88fa      	ldrh	r2, [r7, #6]
 8008334:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	88fa      	ldrh	r2, [r7, #6]
 800833c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834e:	d10e      	bne.n	800836e <UART_Start_Receive_IT+0x52>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d105      	bne.n	8008364 <UART_Start_Receive_IT+0x48>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800835e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008362:	e02d      	b.n	80083c0 <UART_Start_Receive_IT+0xa4>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	22ff      	movs	r2, #255	; 0xff
 8008368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800836c:	e028      	b.n	80083c0 <UART_Start_Receive_IT+0xa4>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10d      	bne.n	8008392 <UART_Start_Receive_IT+0x76>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d104      	bne.n	8008388 <UART_Start_Receive_IT+0x6c>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	22ff      	movs	r2, #255	; 0xff
 8008382:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008386:	e01b      	b.n	80083c0 <UART_Start_Receive_IT+0xa4>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	227f      	movs	r2, #127	; 0x7f
 800838c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008390:	e016      	b.n	80083c0 <UART_Start_Receive_IT+0xa4>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800839a:	d10d      	bne.n	80083b8 <UART_Start_Receive_IT+0x9c>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d104      	bne.n	80083ae <UART_Start_Receive_IT+0x92>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	227f      	movs	r2, #127	; 0x7f
 80083a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083ac:	e008      	b.n	80083c0 <UART_Start_Receive_IT+0xa4>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	223f      	movs	r2, #63	; 0x3f
 80083b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083b6:	e003      	b.n	80083c0 <UART_Start_Receive_IT+0xa4>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2222      	movs	r2, #34	; 0x22
 80083cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3308      	adds	r3, #8
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	657b      	str	r3, [r7, #84]	; 0x54
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3308      	adds	r3, #8
 80083ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80083f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e5      	bne.n	80083d0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840c:	d107      	bne.n	800841e <UART_Start_Receive_IT+0x102>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d103      	bne.n	800841e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4a21      	ldr	r2, [pc, #132]	; (80084a0 <UART_Start_Receive_IT+0x184>)
 800841a:	669a      	str	r2, [r3, #104]	; 0x68
 800841c:	e002      	b.n	8008424 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4a20      	ldr	r2, [pc, #128]	; (80084a4 <UART_Start_Receive_IT+0x188>)
 8008422:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d019      	beq.n	8008460 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	637b      	str	r3, [r7, #52]	; 0x34
 800844c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e6      	bne.n	800842c <UART_Start_Receive_IT+0x110>
 800845e:	e018      	b.n	8008492 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	613b      	str	r3, [r7, #16]
   return(result);
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f043 0320 	orr.w	r3, r3, #32
 8008474:	653b      	str	r3, [r7, #80]	; 0x50
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847e:	623b      	str	r3, [r7, #32]
 8008480:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	69f9      	ldr	r1, [r7, #28]
 8008484:	6a3a      	ldr	r2, [r7, #32]
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	61bb      	str	r3, [r7, #24]
   return(result);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e6      	bne.n	8008460 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	375c      	adds	r7, #92	; 0x5c
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	08008757 	.word	0x08008757
 80084a4:	080085f1 	.word	0x080085f1

080084a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b095      	sub	sp, #84	; 0x54
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ce:	643b      	str	r3, [r7, #64]	; 0x40
 80084d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e6      	bne.n	80084b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	f023 0301 	bic.w	r3, r3, #1
 80084f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e5      	bne.n	80084e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851a:	2b01      	cmp	r3, #1
 800851c:	d118      	bne.n	8008550 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	60bb      	str	r3, [r7, #8]
   return(result);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f023 0310 	bic.w	r3, r3, #16
 8008532:	647b      	str	r3, [r7, #68]	; 0x44
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800853c:	61bb      	str	r3, [r7, #24]
 800853e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6979      	ldr	r1, [r7, #20]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	613b      	str	r3, [r7, #16]
   return(result);
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e6      	bne.n	800851e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008564:	bf00      	nop
 8008566:	3754      	adds	r7, #84	; 0x54
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff faaa 	bl	8007ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b8:	61fb      	str	r3, [r7, #28]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	613b      	str	r3, [r7, #16]
   return(result);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e6      	bne.n	80085a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff fa76 	bl	8007ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e8:	bf00      	nop
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b096      	sub	sp, #88	; 0x58
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008608:	2b22      	cmp	r3, #34	; 0x22
 800860a:	f040 8098 	bne.w	800873e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008618:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800861c:	b2d9      	uxtb	r1, r3
 800861e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008622:	b2da      	uxtb	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008628:	400a      	ands	r2, r1
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800863e:	b29b      	uxth	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d17b      	bne.n	800874e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800866a:	653b      	str	r3, [r7, #80]	; 0x50
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008674:	647b      	str	r3, [r7, #68]	; 0x44
 8008676:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800867a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e6      	bne.n	8008656 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3308      	adds	r3, #8
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	623b      	str	r3, [r7, #32]
   return(result);
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	f023 0301 	bic.w	r3, r3, #1
 800869e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086a8:	633a      	str	r2, [r7, #48]	; 0x30
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e5      	bne.n	8008688 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2220      	movs	r2, #32
 80086c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d12e      	bne.n	8008736 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0310 	bic.w	r3, r3, #16
 80086f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fc:	61fb      	str	r3, [r7, #28]
 80086fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	69b9      	ldr	r1, [r7, #24]
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	617b      	str	r3, [r7, #20]
   return(result);
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e6      	bne.n	80086de <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b10      	cmp	r3, #16
 800871c:	d103      	bne.n	8008726 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2210      	movs	r2, #16
 8008724:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7ff f9e4 	bl	8007afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008734:	e00b      	b.n	800874e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7fa fa6c 	bl	8002c14 <HAL_UART_RxCpltCallback>
}
 800873c:	e007      	b.n	800874e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0208 	orr.w	r2, r2, #8
 800874c:	619a      	str	r2, [r3, #24]
}
 800874e:	bf00      	nop
 8008750:	3758      	adds	r7, #88	; 0x58
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b096      	sub	sp, #88	; 0x58
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008764:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800876e:	2b22      	cmp	r3, #34	; 0x22
 8008770:	f040 8098 	bne.w	80088a4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008782:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008784:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008788:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800878c:	4013      	ands	r3, r2
 800878e:	b29a      	uxth	r2, r3
 8008790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008792:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008798:	1c9a      	adds	r2, r3, #2
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d17b      	bne.n	80088b4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087da:	643b      	str	r3, [r7, #64]	; 0x40
 80087dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e6      	bne.n	80087bc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3308      	adds	r3, #8
 80087f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	f023 0301 	bic.w	r3, r3, #1
 8008804:	64bb      	str	r3, [r7, #72]	; 0x48
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3308      	adds	r3, #8
 800880c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800880e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e5      	bne.n	80087ee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883a:	2b01      	cmp	r3, #1
 800883c:	d12e      	bne.n	800889c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	60bb      	str	r3, [r7, #8]
   return(result);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f023 0310 	bic.w	r3, r3, #16
 8008858:	647b      	str	r3, [r7, #68]	; 0x44
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6979      	ldr	r1, [r7, #20]
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	613b      	str	r3, [r7, #16]
   return(result);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e6      	bne.n	8008844 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69db      	ldr	r3, [r3, #28]
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	2b10      	cmp	r3, #16
 8008882:	d103      	bne.n	800888c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2210      	movs	r2, #16
 800888a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff f931 	bl	8007afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800889a:	e00b      	b.n	80088b4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7fa f9b9 	bl	8002c14 <HAL_UART_RxCpltCallback>
}
 80088a2:	e007      	b.n	80088b4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699a      	ldr	r2, [r3, #24]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0208 	orr.w	r2, r2, #8
 80088b2:	619a      	str	r2, [r3, #24]
}
 80088b4:	bf00      	nop
 80088b6:	3758      	adds	r7, #88	; 0x58
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <arm_pid_init_f32>:
 80088bc:	ed90 7a08 	vldr	s14, [r0, #32]
 80088c0:	edd0 7a06 	vldr	s15, [r0, #24]
 80088c4:	ed90 6a07 	vldr	s12, [r0, #28]
 80088c8:	eef1 6a67 	vneg.f32	s13, s15
 80088cc:	ed80 7a02 	vstr	s14, [r0, #8]
 80088d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80088d4:	ee37 6a07 	vadd.f32	s12, s14, s14
 80088d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088dc:	ee36 7ac6 	vsub.f32	s14, s13, s12
 80088e0:	edc0 7a00 	vstr	s15, [r0]
 80088e4:	ed80 7a01 	vstr	s14, [r0, #4]
 80088e8:	b901      	cbnz	r1, 80088ec <arm_pid_init_f32+0x30>
 80088ea:	4770      	bx	lr
 80088ec:	2300      	movs	r3, #0
 80088ee:	60c3      	str	r3, [r0, #12]
 80088f0:	6103      	str	r3, [r0, #16]
 80088f2:	6143      	str	r3, [r0, #20]
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop

080088f8 <atof>:
 80088f8:	2100      	movs	r1, #0
 80088fa:	f000 be0d 	b.w	8009518 <strtod>

080088fe <sulp>:
 80088fe:	b570      	push	{r4, r5, r6, lr}
 8008900:	4604      	mov	r4, r0
 8008902:	460d      	mov	r5, r1
 8008904:	ec45 4b10 	vmov	d0, r4, r5
 8008908:	4616      	mov	r6, r2
 800890a:	f003 facd 	bl	800bea8 <__ulp>
 800890e:	ec51 0b10 	vmov	r0, r1, d0
 8008912:	b17e      	cbz	r6, 8008934 <sulp+0x36>
 8008914:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008918:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd09      	ble.n	8008934 <sulp+0x36>
 8008920:	051b      	lsls	r3, r3, #20
 8008922:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008926:	2400      	movs	r4, #0
 8008928:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800892c:	4622      	mov	r2, r4
 800892e:	462b      	mov	r3, r5
 8008930:	f7f7 fe82 	bl	8000638 <__aeabi_dmul>
 8008934:	bd70      	pop	{r4, r5, r6, pc}
	...

08008938 <_strtod_l>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	ed2d 8b02 	vpush	{d8}
 8008940:	b09b      	sub	sp, #108	; 0x6c
 8008942:	4604      	mov	r4, r0
 8008944:	9213      	str	r2, [sp, #76]	; 0x4c
 8008946:	2200      	movs	r2, #0
 8008948:	9216      	str	r2, [sp, #88]	; 0x58
 800894a:	460d      	mov	r5, r1
 800894c:	f04f 0800 	mov.w	r8, #0
 8008950:	f04f 0900 	mov.w	r9, #0
 8008954:	460a      	mov	r2, r1
 8008956:	9215      	str	r2, [sp, #84]	; 0x54
 8008958:	7811      	ldrb	r1, [r2, #0]
 800895a:	292b      	cmp	r1, #43	; 0x2b
 800895c:	d04c      	beq.n	80089f8 <_strtod_l+0xc0>
 800895e:	d83a      	bhi.n	80089d6 <_strtod_l+0x9e>
 8008960:	290d      	cmp	r1, #13
 8008962:	d834      	bhi.n	80089ce <_strtod_l+0x96>
 8008964:	2908      	cmp	r1, #8
 8008966:	d834      	bhi.n	80089d2 <_strtod_l+0x9a>
 8008968:	2900      	cmp	r1, #0
 800896a:	d03d      	beq.n	80089e8 <_strtod_l+0xb0>
 800896c:	2200      	movs	r2, #0
 800896e:	920a      	str	r2, [sp, #40]	; 0x28
 8008970:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008972:	7832      	ldrb	r2, [r6, #0]
 8008974:	2a30      	cmp	r2, #48	; 0x30
 8008976:	f040 80b4 	bne.w	8008ae2 <_strtod_l+0x1aa>
 800897a:	7872      	ldrb	r2, [r6, #1]
 800897c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008980:	2a58      	cmp	r2, #88	; 0x58
 8008982:	d170      	bne.n	8008a66 <_strtod_l+0x12e>
 8008984:	9302      	str	r3, [sp, #8]
 8008986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	ab16      	add	r3, sp, #88	; 0x58
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	4a8e      	ldr	r2, [pc, #568]	; (8008bc8 <_strtod_l+0x290>)
 8008990:	ab17      	add	r3, sp, #92	; 0x5c
 8008992:	a915      	add	r1, sp, #84	; 0x54
 8008994:	4620      	mov	r0, r4
 8008996:	f002 fb65 	bl	800b064 <__gethex>
 800899a:	f010 070f 	ands.w	r7, r0, #15
 800899e:	4605      	mov	r5, r0
 80089a0:	d005      	beq.n	80089ae <_strtod_l+0x76>
 80089a2:	2f06      	cmp	r7, #6
 80089a4:	d12a      	bne.n	80089fc <_strtod_l+0xc4>
 80089a6:	3601      	adds	r6, #1
 80089a8:	2300      	movs	r3, #0
 80089aa:	9615      	str	r6, [sp, #84]	; 0x54
 80089ac:	930a      	str	r3, [sp, #40]	; 0x28
 80089ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f040 857f 	bne.w	80094b4 <_strtod_l+0xb7c>
 80089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b8:	b1db      	cbz	r3, 80089f2 <_strtod_l+0xba>
 80089ba:	4642      	mov	r2, r8
 80089bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089c0:	ec43 2b10 	vmov	d0, r2, r3
 80089c4:	b01b      	add	sp, #108	; 0x6c
 80089c6:	ecbd 8b02 	vpop	{d8}
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	2920      	cmp	r1, #32
 80089d0:	d1cc      	bne.n	800896c <_strtod_l+0x34>
 80089d2:	3201      	adds	r2, #1
 80089d4:	e7bf      	b.n	8008956 <_strtod_l+0x1e>
 80089d6:	292d      	cmp	r1, #45	; 0x2d
 80089d8:	d1c8      	bne.n	800896c <_strtod_l+0x34>
 80089da:	2101      	movs	r1, #1
 80089dc:	910a      	str	r1, [sp, #40]	; 0x28
 80089de:	1c51      	adds	r1, r2, #1
 80089e0:	9115      	str	r1, [sp, #84]	; 0x54
 80089e2:	7852      	ldrb	r2, [r2, #1]
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	d1c3      	bne.n	8008970 <_strtod_l+0x38>
 80089e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089ea:	9515      	str	r5, [sp, #84]	; 0x54
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 855f 	bne.w	80094b0 <_strtod_l+0xb78>
 80089f2:	4642      	mov	r2, r8
 80089f4:	464b      	mov	r3, r9
 80089f6:	e7e3      	b.n	80089c0 <_strtod_l+0x88>
 80089f8:	2100      	movs	r1, #0
 80089fa:	e7ef      	b.n	80089dc <_strtod_l+0xa4>
 80089fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089fe:	b13a      	cbz	r2, 8008a10 <_strtod_l+0xd8>
 8008a00:	2135      	movs	r1, #53	; 0x35
 8008a02:	a818      	add	r0, sp, #96	; 0x60
 8008a04:	f003 fb4d 	bl	800c0a2 <__copybits>
 8008a08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f002 ff20 	bl	800b850 <_Bfree>
 8008a10:	3f01      	subs	r7, #1
 8008a12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a14:	2f04      	cmp	r7, #4
 8008a16:	d806      	bhi.n	8008a26 <_strtod_l+0xee>
 8008a18:	e8df f007 	tbb	[pc, r7]
 8008a1c:	201d0314 	.word	0x201d0314
 8008a20:	14          	.byte	0x14
 8008a21:	00          	.byte	0x00
 8008a22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008a26:	05e9      	lsls	r1, r5, #23
 8008a28:	bf48      	it	mi
 8008a2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008a2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a32:	0d1b      	lsrs	r3, r3, #20
 8008a34:	051b      	lsls	r3, r3, #20
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1b9      	bne.n	80089ae <_strtod_l+0x76>
 8008a3a:	f001 fba1 	bl	800a180 <__errno>
 8008a3e:	2322      	movs	r3, #34	; 0x22
 8008a40:	6003      	str	r3, [r0, #0]
 8008a42:	e7b4      	b.n	80089ae <_strtod_l+0x76>
 8008a44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008a48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a54:	e7e7      	b.n	8008a26 <_strtod_l+0xee>
 8008a56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008bd0 <_strtod_l+0x298>
 8008a5a:	e7e4      	b.n	8008a26 <_strtod_l+0xee>
 8008a5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a60:	f04f 38ff 	mov.w	r8, #4294967295
 8008a64:	e7df      	b.n	8008a26 <_strtod_l+0xee>
 8008a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	9215      	str	r2, [sp, #84]	; 0x54
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	2b30      	cmp	r3, #48	; 0x30
 8008a70:	d0f9      	beq.n	8008a66 <_strtod_l+0x12e>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d09b      	beq.n	80089ae <_strtod_l+0x76>
 8008a76:	2301      	movs	r3, #1
 8008a78:	f04f 0a00 	mov.w	sl, #0
 8008a7c:	9304      	str	r3, [sp, #16]
 8008a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008a86:	46d3      	mov	fp, sl
 8008a88:	220a      	movs	r2, #10
 8008a8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008a8c:	7806      	ldrb	r6, [r0, #0]
 8008a8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a92:	b2d9      	uxtb	r1, r3
 8008a94:	2909      	cmp	r1, #9
 8008a96:	d926      	bls.n	8008ae6 <_strtod_l+0x1ae>
 8008a98:	494c      	ldr	r1, [pc, #304]	; (8008bcc <_strtod_l+0x294>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f001 fb14 	bl	800a0c8 <strncmp>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d030      	beq.n	8008b06 <_strtod_l+0x1ce>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	4632      	mov	r2, r6
 8008aa8:	9005      	str	r0, [sp, #20]
 8008aaa:	465e      	mov	r6, fp
 8008aac:	4603      	mov	r3, r0
 8008aae:	2a65      	cmp	r2, #101	; 0x65
 8008ab0:	d001      	beq.n	8008ab6 <_strtod_l+0x17e>
 8008ab2:	2a45      	cmp	r2, #69	; 0x45
 8008ab4:	d113      	bne.n	8008ade <_strtod_l+0x1a6>
 8008ab6:	b91e      	cbnz	r6, 8008ac0 <_strtod_l+0x188>
 8008ab8:	9a04      	ldr	r2, [sp, #16]
 8008aba:	4302      	orrs	r2, r0
 8008abc:	d094      	beq.n	80089e8 <_strtod_l+0xb0>
 8008abe:	2600      	movs	r6, #0
 8008ac0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008ac2:	1c6a      	adds	r2, r5, #1
 8008ac4:	9215      	str	r2, [sp, #84]	; 0x54
 8008ac6:	786a      	ldrb	r2, [r5, #1]
 8008ac8:	2a2b      	cmp	r2, #43	; 0x2b
 8008aca:	d074      	beq.n	8008bb6 <_strtod_l+0x27e>
 8008acc:	2a2d      	cmp	r2, #45	; 0x2d
 8008ace:	d078      	beq.n	8008bc2 <_strtod_l+0x28a>
 8008ad0:	f04f 0c00 	mov.w	ip, #0
 8008ad4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008ad8:	2909      	cmp	r1, #9
 8008ada:	d97f      	bls.n	8008bdc <_strtod_l+0x2a4>
 8008adc:	9515      	str	r5, [sp, #84]	; 0x54
 8008ade:	2700      	movs	r7, #0
 8008ae0:	e09e      	b.n	8008c20 <_strtod_l+0x2e8>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e7c8      	b.n	8008a78 <_strtod_l+0x140>
 8008ae6:	f1bb 0f08 	cmp.w	fp, #8
 8008aea:	bfd8      	it	le
 8008aec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008aee:	f100 0001 	add.w	r0, r0, #1
 8008af2:	bfda      	itte	le
 8008af4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008af8:	9309      	strle	r3, [sp, #36]	; 0x24
 8008afa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008afe:	f10b 0b01 	add.w	fp, fp, #1
 8008b02:	9015      	str	r0, [sp, #84]	; 0x54
 8008b04:	e7c1      	b.n	8008a8a <_strtod_l+0x152>
 8008b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	9215      	str	r2, [sp, #84]	; 0x54
 8008b0c:	785a      	ldrb	r2, [r3, #1]
 8008b0e:	f1bb 0f00 	cmp.w	fp, #0
 8008b12:	d037      	beq.n	8008b84 <_strtod_l+0x24c>
 8008b14:	9005      	str	r0, [sp, #20]
 8008b16:	465e      	mov	r6, fp
 8008b18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b1c:	2b09      	cmp	r3, #9
 8008b1e:	d912      	bls.n	8008b46 <_strtod_l+0x20e>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e7c4      	b.n	8008aae <_strtod_l+0x176>
 8008b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	9215      	str	r2, [sp, #84]	; 0x54
 8008b2a:	785a      	ldrb	r2, [r3, #1]
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	2a30      	cmp	r2, #48	; 0x30
 8008b30:	d0f8      	beq.n	8008b24 <_strtod_l+0x1ec>
 8008b32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	f200 84c1 	bhi.w	80094be <_strtod_l+0xb86>
 8008b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b3e:	9005      	str	r0, [sp, #20]
 8008b40:	2000      	movs	r0, #0
 8008b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b44:	4606      	mov	r6, r0
 8008b46:	3a30      	subs	r2, #48	; 0x30
 8008b48:	f100 0301 	add.w	r3, r0, #1
 8008b4c:	d014      	beq.n	8008b78 <_strtod_l+0x240>
 8008b4e:	9905      	ldr	r1, [sp, #20]
 8008b50:	4419      	add	r1, r3
 8008b52:	9105      	str	r1, [sp, #20]
 8008b54:	4633      	mov	r3, r6
 8008b56:	eb00 0c06 	add.w	ip, r0, r6
 8008b5a:	210a      	movs	r1, #10
 8008b5c:	4563      	cmp	r3, ip
 8008b5e:	d113      	bne.n	8008b88 <_strtod_l+0x250>
 8008b60:	1833      	adds	r3, r6, r0
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	f106 0601 	add.w	r6, r6, #1
 8008b68:	4406      	add	r6, r0
 8008b6a:	dc1a      	bgt.n	8008ba2 <_strtod_l+0x26a>
 8008b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b6e:	230a      	movs	r3, #10
 8008b70:	fb03 2301 	mla	r3, r3, r1, r2
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	2300      	movs	r3, #0
 8008b78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b7a:	1c51      	adds	r1, r2, #1
 8008b7c:	9115      	str	r1, [sp, #84]	; 0x54
 8008b7e:	7852      	ldrb	r2, [r2, #1]
 8008b80:	4618      	mov	r0, r3
 8008b82:	e7c9      	b.n	8008b18 <_strtod_l+0x1e0>
 8008b84:	4658      	mov	r0, fp
 8008b86:	e7d2      	b.n	8008b2e <_strtod_l+0x1f6>
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	f103 0301 	add.w	r3, r3, #1
 8008b8e:	dc03      	bgt.n	8008b98 <_strtod_l+0x260>
 8008b90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b92:	434f      	muls	r7, r1
 8008b94:	9709      	str	r7, [sp, #36]	; 0x24
 8008b96:	e7e1      	b.n	8008b5c <_strtod_l+0x224>
 8008b98:	2b10      	cmp	r3, #16
 8008b9a:	bfd8      	it	le
 8008b9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008ba0:	e7dc      	b.n	8008b5c <_strtod_l+0x224>
 8008ba2:	2e10      	cmp	r6, #16
 8008ba4:	bfdc      	itt	le
 8008ba6:	230a      	movle	r3, #10
 8008ba8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008bac:	e7e3      	b.n	8008b76 <_strtod_l+0x23e>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e780      	b.n	8008ab8 <_strtod_l+0x180>
 8008bb6:	f04f 0c00 	mov.w	ip, #0
 8008bba:	1caa      	adds	r2, r5, #2
 8008bbc:	9215      	str	r2, [sp, #84]	; 0x54
 8008bbe:	78aa      	ldrb	r2, [r5, #2]
 8008bc0:	e788      	b.n	8008ad4 <_strtod_l+0x19c>
 8008bc2:	f04f 0c01 	mov.w	ip, #1
 8008bc6:	e7f8      	b.n	8008bba <_strtod_l+0x282>
 8008bc8:	0800cd04 	.word	0x0800cd04
 8008bcc:	0800cd00 	.word	0x0800cd00
 8008bd0:	7ff00000 	.word	0x7ff00000
 8008bd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bd6:	1c51      	adds	r1, r2, #1
 8008bd8:	9115      	str	r1, [sp, #84]	; 0x54
 8008bda:	7852      	ldrb	r2, [r2, #1]
 8008bdc:	2a30      	cmp	r2, #48	; 0x30
 8008bde:	d0f9      	beq.n	8008bd4 <_strtod_l+0x29c>
 8008be0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008be4:	2908      	cmp	r1, #8
 8008be6:	f63f af7a 	bhi.w	8008ade <_strtod_l+0x1a6>
 8008bea:	3a30      	subs	r2, #48	; 0x30
 8008bec:	9208      	str	r2, [sp, #32]
 8008bee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bf0:	920c      	str	r2, [sp, #48]	; 0x30
 8008bf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bf4:	1c57      	adds	r7, r2, #1
 8008bf6:	9715      	str	r7, [sp, #84]	; 0x54
 8008bf8:	7852      	ldrb	r2, [r2, #1]
 8008bfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008bfe:	f1be 0f09 	cmp.w	lr, #9
 8008c02:	d938      	bls.n	8008c76 <_strtod_l+0x33e>
 8008c04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c06:	1a7f      	subs	r7, r7, r1
 8008c08:	2f08      	cmp	r7, #8
 8008c0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c0e:	dc03      	bgt.n	8008c18 <_strtod_l+0x2e0>
 8008c10:	9908      	ldr	r1, [sp, #32]
 8008c12:	428f      	cmp	r7, r1
 8008c14:	bfa8      	it	ge
 8008c16:	460f      	movge	r7, r1
 8008c18:	f1bc 0f00 	cmp.w	ip, #0
 8008c1c:	d000      	beq.n	8008c20 <_strtod_l+0x2e8>
 8008c1e:	427f      	negs	r7, r7
 8008c20:	2e00      	cmp	r6, #0
 8008c22:	d14f      	bne.n	8008cc4 <_strtod_l+0x38c>
 8008c24:	9904      	ldr	r1, [sp, #16]
 8008c26:	4301      	orrs	r1, r0
 8008c28:	f47f aec1 	bne.w	80089ae <_strtod_l+0x76>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f47f aedb 	bne.w	80089e8 <_strtod_l+0xb0>
 8008c32:	2a69      	cmp	r2, #105	; 0x69
 8008c34:	d029      	beq.n	8008c8a <_strtod_l+0x352>
 8008c36:	dc26      	bgt.n	8008c86 <_strtod_l+0x34e>
 8008c38:	2a49      	cmp	r2, #73	; 0x49
 8008c3a:	d026      	beq.n	8008c8a <_strtod_l+0x352>
 8008c3c:	2a4e      	cmp	r2, #78	; 0x4e
 8008c3e:	f47f aed3 	bne.w	80089e8 <_strtod_l+0xb0>
 8008c42:	499b      	ldr	r1, [pc, #620]	; (8008eb0 <_strtod_l+0x578>)
 8008c44:	a815      	add	r0, sp, #84	; 0x54
 8008c46:	f002 fc4d 	bl	800b4e4 <__match>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f43f aecc 	beq.w	80089e8 <_strtod_l+0xb0>
 8008c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b28      	cmp	r3, #40	; 0x28
 8008c56:	d12f      	bne.n	8008cb8 <_strtod_l+0x380>
 8008c58:	4996      	ldr	r1, [pc, #600]	; (8008eb4 <_strtod_l+0x57c>)
 8008c5a:	aa18      	add	r2, sp, #96	; 0x60
 8008c5c:	a815      	add	r0, sp, #84	; 0x54
 8008c5e:	f002 fc55 	bl	800b50c <__hexnan>
 8008c62:	2805      	cmp	r0, #5
 8008c64:	d128      	bne.n	8008cb8 <_strtod_l+0x380>
 8008c66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c74:	e69b      	b.n	80089ae <_strtod_l+0x76>
 8008c76:	9f08      	ldr	r7, [sp, #32]
 8008c78:	210a      	movs	r1, #10
 8008c7a:	fb01 2107 	mla	r1, r1, r7, r2
 8008c7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c82:	9208      	str	r2, [sp, #32]
 8008c84:	e7b5      	b.n	8008bf2 <_strtod_l+0x2ba>
 8008c86:	2a6e      	cmp	r2, #110	; 0x6e
 8008c88:	e7d9      	b.n	8008c3e <_strtod_l+0x306>
 8008c8a:	498b      	ldr	r1, [pc, #556]	; (8008eb8 <_strtod_l+0x580>)
 8008c8c:	a815      	add	r0, sp, #84	; 0x54
 8008c8e:	f002 fc29 	bl	800b4e4 <__match>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	f43f aea8 	beq.w	80089e8 <_strtod_l+0xb0>
 8008c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c9a:	4988      	ldr	r1, [pc, #544]	; (8008ebc <_strtod_l+0x584>)
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	a815      	add	r0, sp, #84	; 0x54
 8008ca0:	9315      	str	r3, [sp, #84]	; 0x54
 8008ca2:	f002 fc1f 	bl	800b4e4 <__match>
 8008ca6:	b910      	cbnz	r0, 8008cae <_strtod_l+0x376>
 8008ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008caa:	3301      	adds	r3, #1
 8008cac:	9315      	str	r3, [sp, #84]	; 0x54
 8008cae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008ecc <_strtod_l+0x594>
 8008cb2:	f04f 0800 	mov.w	r8, #0
 8008cb6:	e67a      	b.n	80089ae <_strtod_l+0x76>
 8008cb8:	4881      	ldr	r0, [pc, #516]	; (8008ec0 <_strtod_l+0x588>)
 8008cba:	f001 fa9d 	bl	800a1f8 <nan>
 8008cbe:	ec59 8b10 	vmov	r8, r9, d0
 8008cc2:	e674      	b.n	80089ae <_strtod_l+0x76>
 8008cc4:	9b05      	ldr	r3, [sp, #20]
 8008cc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc8:	1afb      	subs	r3, r7, r3
 8008cca:	f1bb 0f00 	cmp.w	fp, #0
 8008cce:	bf08      	it	eq
 8008cd0:	46b3      	moveq	fp, r6
 8008cd2:	2e10      	cmp	r6, #16
 8008cd4:	9308      	str	r3, [sp, #32]
 8008cd6:	4635      	mov	r5, r6
 8008cd8:	bfa8      	it	ge
 8008cda:	2510      	movge	r5, #16
 8008cdc:	f7f7 fc32 	bl	8000544 <__aeabi_ui2d>
 8008ce0:	2e09      	cmp	r6, #9
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	4689      	mov	r9, r1
 8008ce6:	dd13      	ble.n	8008d10 <_strtod_l+0x3d8>
 8008ce8:	4b76      	ldr	r3, [pc, #472]	; (8008ec4 <_strtod_l+0x58c>)
 8008cea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008cee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008cf2:	f7f7 fca1 	bl	8000638 <__aeabi_dmul>
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	4689      	mov	r9, r1
 8008cfc:	f7f7 fc22 	bl	8000544 <__aeabi_ui2d>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4640      	mov	r0, r8
 8008d06:	4649      	mov	r1, r9
 8008d08:	f7f7 fae0 	bl	80002cc <__adddf3>
 8008d0c:	4680      	mov	r8, r0
 8008d0e:	4689      	mov	r9, r1
 8008d10:	2e0f      	cmp	r6, #15
 8008d12:	dc38      	bgt.n	8008d86 <_strtod_l+0x44e>
 8008d14:	9b08      	ldr	r3, [sp, #32]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f43f ae49 	beq.w	80089ae <_strtod_l+0x76>
 8008d1c:	dd24      	ble.n	8008d68 <_strtod_l+0x430>
 8008d1e:	2b16      	cmp	r3, #22
 8008d20:	dc0b      	bgt.n	8008d3a <_strtod_l+0x402>
 8008d22:	4968      	ldr	r1, [pc, #416]	; (8008ec4 <_strtod_l+0x58c>)
 8008d24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	464b      	mov	r3, r9
 8008d30:	f7f7 fc82 	bl	8000638 <__aeabi_dmul>
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	e639      	b.n	80089ae <_strtod_l+0x76>
 8008d3a:	9a08      	ldr	r2, [sp, #32]
 8008d3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008d40:	4293      	cmp	r3, r2
 8008d42:	db20      	blt.n	8008d86 <_strtod_l+0x44e>
 8008d44:	4c5f      	ldr	r4, [pc, #380]	; (8008ec4 <_strtod_l+0x58c>)
 8008d46:	f1c6 060f 	rsb	r6, r6, #15
 8008d4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008d4e:	4642      	mov	r2, r8
 8008d50:	464b      	mov	r3, r9
 8008d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d56:	f7f7 fc6f 	bl	8000638 <__aeabi_dmul>
 8008d5a:	9b08      	ldr	r3, [sp, #32]
 8008d5c:	1b9e      	subs	r6, r3, r6
 8008d5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008d62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d66:	e7e3      	b.n	8008d30 <_strtod_l+0x3f8>
 8008d68:	9b08      	ldr	r3, [sp, #32]
 8008d6a:	3316      	adds	r3, #22
 8008d6c:	db0b      	blt.n	8008d86 <_strtod_l+0x44e>
 8008d6e:	9b05      	ldr	r3, [sp, #20]
 8008d70:	1bdf      	subs	r7, r3, r7
 8008d72:	4b54      	ldr	r3, [pc, #336]	; (8008ec4 <_strtod_l+0x58c>)
 8008d74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	4649      	mov	r1, r9
 8008d80:	f7f7 fd84 	bl	800088c <__aeabi_ddiv>
 8008d84:	e7d6      	b.n	8008d34 <_strtod_l+0x3fc>
 8008d86:	9b08      	ldr	r3, [sp, #32]
 8008d88:	1b75      	subs	r5, r6, r5
 8008d8a:	441d      	add	r5, r3
 8008d8c:	2d00      	cmp	r5, #0
 8008d8e:	dd70      	ble.n	8008e72 <_strtod_l+0x53a>
 8008d90:	f015 030f 	ands.w	r3, r5, #15
 8008d94:	d00a      	beq.n	8008dac <_strtod_l+0x474>
 8008d96:	494b      	ldr	r1, [pc, #300]	; (8008ec4 <_strtod_l+0x58c>)
 8008d98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da4:	f7f7 fc48 	bl	8000638 <__aeabi_dmul>
 8008da8:	4680      	mov	r8, r0
 8008daa:	4689      	mov	r9, r1
 8008dac:	f035 050f 	bics.w	r5, r5, #15
 8008db0:	d04d      	beq.n	8008e4e <_strtod_l+0x516>
 8008db2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008db6:	dd22      	ble.n	8008dfe <_strtod_l+0x4c6>
 8008db8:	2500      	movs	r5, #0
 8008dba:	46ab      	mov	fp, r5
 8008dbc:	9509      	str	r5, [sp, #36]	; 0x24
 8008dbe:	9505      	str	r5, [sp, #20]
 8008dc0:	2322      	movs	r3, #34	; 0x22
 8008dc2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008ecc <_strtod_l+0x594>
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	f04f 0800 	mov.w	r8, #0
 8008dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f43f aded 	beq.w	80089ae <_strtod_l+0x76>
 8008dd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f002 fd3a 	bl	800b850 <_Bfree>
 8008ddc:	9905      	ldr	r1, [sp, #20]
 8008dde:	4620      	mov	r0, r4
 8008de0:	f002 fd36 	bl	800b850 <_Bfree>
 8008de4:	4659      	mov	r1, fp
 8008de6:	4620      	mov	r0, r4
 8008de8:	f002 fd32 	bl	800b850 <_Bfree>
 8008dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dee:	4620      	mov	r0, r4
 8008df0:	f002 fd2e 	bl	800b850 <_Bfree>
 8008df4:	4629      	mov	r1, r5
 8008df6:	4620      	mov	r0, r4
 8008df8:	f002 fd2a 	bl	800b850 <_Bfree>
 8008dfc:	e5d7      	b.n	80089ae <_strtod_l+0x76>
 8008dfe:	4b32      	ldr	r3, [pc, #200]	; (8008ec8 <_strtod_l+0x590>)
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	2300      	movs	r3, #0
 8008e04:	112d      	asrs	r5, r5, #4
 8008e06:	4640      	mov	r0, r8
 8008e08:	4649      	mov	r1, r9
 8008e0a:	469a      	mov	sl, r3
 8008e0c:	2d01      	cmp	r5, #1
 8008e0e:	dc21      	bgt.n	8008e54 <_strtod_l+0x51c>
 8008e10:	b10b      	cbz	r3, 8008e16 <_strtod_l+0x4de>
 8008e12:	4680      	mov	r8, r0
 8008e14:	4689      	mov	r9, r1
 8008e16:	492c      	ldr	r1, [pc, #176]	; (8008ec8 <_strtod_l+0x590>)
 8008e18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e20:	4642      	mov	r2, r8
 8008e22:	464b      	mov	r3, r9
 8008e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e28:	f7f7 fc06 	bl	8000638 <__aeabi_dmul>
 8008e2c:	4b27      	ldr	r3, [pc, #156]	; (8008ecc <_strtod_l+0x594>)
 8008e2e:	460a      	mov	r2, r1
 8008e30:	400b      	ands	r3, r1
 8008e32:	4927      	ldr	r1, [pc, #156]	; (8008ed0 <_strtod_l+0x598>)
 8008e34:	428b      	cmp	r3, r1
 8008e36:	4680      	mov	r8, r0
 8008e38:	d8be      	bhi.n	8008db8 <_strtod_l+0x480>
 8008e3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e3e:	428b      	cmp	r3, r1
 8008e40:	bf86      	itte	hi
 8008e42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008ed4 <_strtod_l+0x59c>
 8008e46:	f04f 38ff 	movhi.w	r8, #4294967295
 8008e4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	e07b      	b.n	8008f4c <_strtod_l+0x614>
 8008e54:	07ea      	lsls	r2, r5, #31
 8008e56:	d505      	bpl.n	8008e64 <_strtod_l+0x52c>
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fbeb 	bl	8000638 <__aeabi_dmul>
 8008e62:	2301      	movs	r3, #1
 8008e64:	9a04      	ldr	r2, [sp, #16]
 8008e66:	3208      	adds	r2, #8
 8008e68:	f10a 0a01 	add.w	sl, sl, #1
 8008e6c:	106d      	asrs	r5, r5, #1
 8008e6e:	9204      	str	r2, [sp, #16]
 8008e70:	e7cc      	b.n	8008e0c <_strtod_l+0x4d4>
 8008e72:	d0ec      	beq.n	8008e4e <_strtod_l+0x516>
 8008e74:	426d      	negs	r5, r5
 8008e76:	f015 020f 	ands.w	r2, r5, #15
 8008e7a:	d00a      	beq.n	8008e92 <_strtod_l+0x55a>
 8008e7c:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <_strtod_l+0x58c>)
 8008e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e82:	4640      	mov	r0, r8
 8008e84:	4649      	mov	r1, r9
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	f7f7 fcff 	bl	800088c <__aeabi_ddiv>
 8008e8e:	4680      	mov	r8, r0
 8008e90:	4689      	mov	r9, r1
 8008e92:	112d      	asrs	r5, r5, #4
 8008e94:	d0db      	beq.n	8008e4e <_strtod_l+0x516>
 8008e96:	2d1f      	cmp	r5, #31
 8008e98:	dd1e      	ble.n	8008ed8 <_strtod_l+0x5a0>
 8008e9a:	2500      	movs	r5, #0
 8008e9c:	46ab      	mov	fp, r5
 8008e9e:	9509      	str	r5, [sp, #36]	; 0x24
 8008ea0:	9505      	str	r5, [sp, #20]
 8008ea2:	2322      	movs	r3, #34	; 0x22
 8008ea4:	f04f 0800 	mov.w	r8, #0
 8008ea8:	f04f 0900 	mov.w	r9, #0
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	e78d      	b.n	8008dcc <_strtod_l+0x494>
 8008eb0:	0800ce66 	.word	0x0800ce66
 8008eb4:	0800cd18 	.word	0x0800cd18
 8008eb8:	0800ce5e 	.word	0x0800ce5e
 8008ebc:	0800ce98 	.word	0x0800ce98
 8008ec0:	0800d128 	.word	0x0800d128
 8008ec4:	0800d008 	.word	0x0800d008
 8008ec8:	0800cfe0 	.word	0x0800cfe0
 8008ecc:	7ff00000 	.word	0x7ff00000
 8008ed0:	7ca00000 	.word	0x7ca00000
 8008ed4:	7fefffff 	.word	0x7fefffff
 8008ed8:	f015 0310 	ands.w	r3, r5, #16
 8008edc:	bf18      	it	ne
 8008ede:	236a      	movne	r3, #106	; 0x6a
 8008ee0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009284 <_strtod_l+0x94c>
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	4649      	mov	r1, r9
 8008eea:	2300      	movs	r3, #0
 8008eec:	07ea      	lsls	r2, r5, #31
 8008eee:	d504      	bpl.n	8008efa <_strtod_l+0x5c2>
 8008ef0:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ef4:	f7f7 fba0 	bl	8000638 <__aeabi_dmul>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	106d      	asrs	r5, r5, #1
 8008efc:	f10a 0a08 	add.w	sl, sl, #8
 8008f00:	d1f4      	bne.n	8008eec <_strtod_l+0x5b4>
 8008f02:	b10b      	cbz	r3, 8008f08 <_strtod_l+0x5d0>
 8008f04:	4680      	mov	r8, r0
 8008f06:	4689      	mov	r9, r1
 8008f08:	9b04      	ldr	r3, [sp, #16]
 8008f0a:	b1bb      	cbz	r3, 8008f3c <_strtod_l+0x604>
 8008f0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	4649      	mov	r1, r9
 8008f18:	dd10      	ble.n	8008f3c <_strtod_l+0x604>
 8008f1a:	2b1f      	cmp	r3, #31
 8008f1c:	f340 811e 	ble.w	800915c <_strtod_l+0x824>
 8008f20:	2b34      	cmp	r3, #52	; 0x34
 8008f22:	bfde      	ittt	le
 8008f24:	f04f 33ff 	movle.w	r3, #4294967295
 8008f28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f2c:	4093      	lslle	r3, r2
 8008f2e:	f04f 0800 	mov.w	r8, #0
 8008f32:	bfcc      	ite	gt
 8008f34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008f38:	ea03 0901 	andle.w	r9, r3, r1
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	f7f7 fde0 	bl	8000b08 <__aeabi_dcmpeq>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d1a6      	bne.n	8008e9a <_strtod_l+0x562>
 8008f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f52:	4633      	mov	r3, r6
 8008f54:	465a      	mov	r2, fp
 8008f56:	4620      	mov	r0, r4
 8008f58:	f002 fce2 	bl	800b920 <__s2b>
 8008f5c:	9009      	str	r0, [sp, #36]	; 0x24
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f af2a 	beq.w	8008db8 <_strtod_l+0x480>
 8008f64:	9a08      	ldr	r2, [sp, #32]
 8008f66:	9b05      	ldr	r3, [sp, #20]
 8008f68:	2a00      	cmp	r2, #0
 8008f6a:	eba3 0307 	sub.w	r3, r3, r7
 8008f6e:	bfa8      	it	ge
 8008f70:	2300      	movge	r3, #0
 8008f72:	930c      	str	r3, [sp, #48]	; 0x30
 8008f74:	2500      	movs	r5, #0
 8008f76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f7a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f7c:	46ab      	mov	fp, r5
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	4620      	mov	r0, r4
 8008f82:	6859      	ldr	r1, [r3, #4]
 8008f84:	f002 fc24 	bl	800b7d0 <_Balloc>
 8008f88:	9005      	str	r0, [sp, #20]
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f43f af18 	beq.w	8008dc0 <_strtod_l+0x488>
 8008f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	3202      	adds	r2, #2
 8008f96:	f103 010c 	add.w	r1, r3, #12
 8008f9a:	0092      	lsls	r2, r2, #2
 8008f9c:	300c      	adds	r0, #12
 8008f9e:	f001 f91c 	bl	800a1da <memcpy>
 8008fa2:	ec49 8b10 	vmov	d0, r8, r9
 8008fa6:	aa18      	add	r2, sp, #96	; 0x60
 8008fa8:	a917      	add	r1, sp, #92	; 0x5c
 8008faa:	4620      	mov	r0, r4
 8008fac:	f002 ffec 	bl	800bf88 <__d2b>
 8008fb0:	ec49 8b18 	vmov	d8, r8, r9
 8008fb4:	9016      	str	r0, [sp, #88]	; 0x58
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f43f af02 	beq.w	8008dc0 <_strtod_l+0x488>
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f002 fd46 	bl	800ba50 <__i2b>
 8008fc4:	4683      	mov	fp, r0
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f43f aefa 	beq.w	8008dc0 <_strtod_l+0x488>
 8008fcc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008fce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	bfab      	itete	ge
 8008fd4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008fd6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008fd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008fda:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008fde:	bfac      	ite	ge
 8008fe0:	eb06 0a03 	addge.w	sl, r6, r3
 8008fe4:	1b9f      	sublt	r7, r3, r6
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	1af6      	subs	r6, r6, r3
 8008fea:	4416      	add	r6, r2
 8008fec:	4ba0      	ldr	r3, [pc, #640]	; (8009270 <_strtod_l+0x938>)
 8008fee:	3e01      	subs	r6, #1
 8008ff0:	429e      	cmp	r6, r3
 8008ff2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ff6:	f280 80c4 	bge.w	8009182 <_strtod_l+0x84a>
 8008ffa:	1b9b      	subs	r3, r3, r6
 8008ffc:	2b1f      	cmp	r3, #31
 8008ffe:	eba2 0203 	sub.w	r2, r2, r3
 8009002:	f04f 0101 	mov.w	r1, #1
 8009006:	f300 80b0 	bgt.w	800916a <_strtod_l+0x832>
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	930e      	str	r3, [sp, #56]	; 0x38
 8009010:	2300      	movs	r3, #0
 8009012:	930d      	str	r3, [sp, #52]	; 0x34
 8009014:	eb0a 0602 	add.w	r6, sl, r2
 8009018:	9b04      	ldr	r3, [sp, #16]
 800901a:	45b2      	cmp	sl, r6
 800901c:	4417      	add	r7, r2
 800901e:	441f      	add	r7, r3
 8009020:	4653      	mov	r3, sl
 8009022:	bfa8      	it	ge
 8009024:	4633      	movge	r3, r6
 8009026:	42bb      	cmp	r3, r7
 8009028:	bfa8      	it	ge
 800902a:	463b      	movge	r3, r7
 800902c:	2b00      	cmp	r3, #0
 800902e:	bfc2      	ittt	gt
 8009030:	1af6      	subgt	r6, r6, r3
 8009032:	1aff      	subgt	r7, r7, r3
 8009034:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800903a:	2b00      	cmp	r3, #0
 800903c:	dd17      	ble.n	800906e <_strtod_l+0x736>
 800903e:	4659      	mov	r1, fp
 8009040:	461a      	mov	r2, r3
 8009042:	4620      	mov	r0, r4
 8009044:	f002 fdc4 	bl	800bbd0 <__pow5mult>
 8009048:	4683      	mov	fp, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f aeb8 	beq.w	8008dc0 <_strtod_l+0x488>
 8009050:	4601      	mov	r1, r0
 8009052:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009054:	4620      	mov	r0, r4
 8009056:	f002 fd11 	bl	800ba7c <__multiply>
 800905a:	900b      	str	r0, [sp, #44]	; 0x2c
 800905c:	2800      	cmp	r0, #0
 800905e:	f43f aeaf 	beq.w	8008dc0 <_strtod_l+0x488>
 8009062:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009064:	4620      	mov	r0, r4
 8009066:	f002 fbf3 	bl	800b850 <_Bfree>
 800906a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800906c:	9316      	str	r3, [sp, #88]	; 0x58
 800906e:	2e00      	cmp	r6, #0
 8009070:	f300 808c 	bgt.w	800918c <_strtod_l+0x854>
 8009074:	9b08      	ldr	r3, [sp, #32]
 8009076:	2b00      	cmp	r3, #0
 8009078:	dd08      	ble.n	800908c <_strtod_l+0x754>
 800907a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800907c:	9905      	ldr	r1, [sp, #20]
 800907e:	4620      	mov	r0, r4
 8009080:	f002 fda6 	bl	800bbd0 <__pow5mult>
 8009084:	9005      	str	r0, [sp, #20]
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f ae9a 	beq.w	8008dc0 <_strtod_l+0x488>
 800908c:	2f00      	cmp	r7, #0
 800908e:	dd08      	ble.n	80090a2 <_strtod_l+0x76a>
 8009090:	9905      	ldr	r1, [sp, #20]
 8009092:	463a      	mov	r2, r7
 8009094:	4620      	mov	r0, r4
 8009096:	f002 fdf5 	bl	800bc84 <__lshift>
 800909a:	9005      	str	r0, [sp, #20]
 800909c:	2800      	cmp	r0, #0
 800909e:	f43f ae8f 	beq.w	8008dc0 <_strtod_l+0x488>
 80090a2:	f1ba 0f00 	cmp.w	sl, #0
 80090a6:	dd08      	ble.n	80090ba <_strtod_l+0x782>
 80090a8:	4659      	mov	r1, fp
 80090aa:	4652      	mov	r2, sl
 80090ac:	4620      	mov	r0, r4
 80090ae:	f002 fde9 	bl	800bc84 <__lshift>
 80090b2:	4683      	mov	fp, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f43f ae83 	beq.w	8008dc0 <_strtod_l+0x488>
 80090ba:	9a05      	ldr	r2, [sp, #20]
 80090bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090be:	4620      	mov	r0, r4
 80090c0:	f002 fe68 	bl	800bd94 <__mdiff>
 80090c4:	4605      	mov	r5, r0
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f43f ae7a 	beq.w	8008dc0 <_strtod_l+0x488>
 80090cc:	68c3      	ldr	r3, [r0, #12]
 80090ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80090d0:	2300      	movs	r3, #0
 80090d2:	60c3      	str	r3, [r0, #12]
 80090d4:	4659      	mov	r1, fp
 80090d6:	f002 fe41 	bl	800bd5c <__mcmp>
 80090da:	2800      	cmp	r0, #0
 80090dc:	da60      	bge.n	80091a0 <_strtod_l+0x868>
 80090de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e0:	ea53 0308 	orrs.w	r3, r3, r8
 80090e4:	f040 8084 	bne.w	80091f0 <_strtod_l+0x8b8>
 80090e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d17f      	bne.n	80091f0 <_strtod_l+0x8b8>
 80090f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090f4:	0d1b      	lsrs	r3, r3, #20
 80090f6:	051b      	lsls	r3, r3, #20
 80090f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090fc:	d978      	bls.n	80091f0 <_strtod_l+0x8b8>
 80090fe:	696b      	ldr	r3, [r5, #20]
 8009100:	b913      	cbnz	r3, 8009108 <_strtod_l+0x7d0>
 8009102:	692b      	ldr	r3, [r5, #16]
 8009104:	2b01      	cmp	r3, #1
 8009106:	dd73      	ble.n	80091f0 <_strtod_l+0x8b8>
 8009108:	4629      	mov	r1, r5
 800910a:	2201      	movs	r2, #1
 800910c:	4620      	mov	r0, r4
 800910e:	f002 fdb9 	bl	800bc84 <__lshift>
 8009112:	4659      	mov	r1, fp
 8009114:	4605      	mov	r5, r0
 8009116:	f002 fe21 	bl	800bd5c <__mcmp>
 800911a:	2800      	cmp	r0, #0
 800911c:	dd68      	ble.n	80091f0 <_strtod_l+0x8b8>
 800911e:	9904      	ldr	r1, [sp, #16]
 8009120:	4a54      	ldr	r2, [pc, #336]	; (8009274 <_strtod_l+0x93c>)
 8009122:	464b      	mov	r3, r9
 8009124:	2900      	cmp	r1, #0
 8009126:	f000 8084 	beq.w	8009232 <_strtod_l+0x8fa>
 800912a:	ea02 0109 	and.w	r1, r2, r9
 800912e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009132:	dc7e      	bgt.n	8009232 <_strtod_l+0x8fa>
 8009134:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009138:	f77f aeb3 	ble.w	8008ea2 <_strtod_l+0x56a>
 800913c:	4b4e      	ldr	r3, [pc, #312]	; (8009278 <_strtod_l+0x940>)
 800913e:	4640      	mov	r0, r8
 8009140:	4649      	mov	r1, r9
 8009142:	2200      	movs	r2, #0
 8009144:	f7f7 fa78 	bl	8000638 <__aeabi_dmul>
 8009148:	4b4a      	ldr	r3, [pc, #296]	; (8009274 <_strtod_l+0x93c>)
 800914a:	400b      	ands	r3, r1
 800914c:	4680      	mov	r8, r0
 800914e:	4689      	mov	r9, r1
 8009150:	2b00      	cmp	r3, #0
 8009152:	f47f ae3f 	bne.w	8008dd4 <_strtod_l+0x49c>
 8009156:	2322      	movs	r3, #34	; 0x22
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	e63b      	b.n	8008dd4 <_strtod_l+0x49c>
 800915c:	f04f 32ff 	mov.w	r2, #4294967295
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	ea03 0808 	and.w	r8, r3, r8
 8009168:	e6e8      	b.n	8008f3c <_strtod_l+0x604>
 800916a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800916e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009172:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009176:	36e2      	adds	r6, #226	; 0xe2
 8009178:	fa01 f306 	lsl.w	r3, r1, r6
 800917c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009180:	e748      	b.n	8009014 <_strtod_l+0x6dc>
 8009182:	2100      	movs	r1, #0
 8009184:	2301      	movs	r3, #1
 8009186:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800918a:	e743      	b.n	8009014 <_strtod_l+0x6dc>
 800918c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800918e:	4632      	mov	r2, r6
 8009190:	4620      	mov	r0, r4
 8009192:	f002 fd77 	bl	800bc84 <__lshift>
 8009196:	9016      	str	r0, [sp, #88]	; 0x58
 8009198:	2800      	cmp	r0, #0
 800919a:	f47f af6b 	bne.w	8009074 <_strtod_l+0x73c>
 800919e:	e60f      	b.n	8008dc0 <_strtod_l+0x488>
 80091a0:	46ca      	mov	sl, r9
 80091a2:	d171      	bne.n	8009288 <_strtod_l+0x950>
 80091a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091aa:	b352      	cbz	r2, 8009202 <_strtod_l+0x8ca>
 80091ac:	4a33      	ldr	r2, [pc, #204]	; (800927c <_strtod_l+0x944>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d12a      	bne.n	8009208 <_strtod_l+0x8d0>
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	4641      	mov	r1, r8
 80091b6:	b1fb      	cbz	r3, 80091f8 <_strtod_l+0x8c0>
 80091b8:	4b2e      	ldr	r3, [pc, #184]	; (8009274 <_strtod_l+0x93c>)
 80091ba:	ea09 0303 	and.w	r3, r9, r3
 80091be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295
 80091c6:	d81a      	bhi.n	80091fe <_strtod_l+0x8c6>
 80091c8:	0d1b      	lsrs	r3, r3, #20
 80091ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091ce:	fa02 f303 	lsl.w	r3, r2, r3
 80091d2:	4299      	cmp	r1, r3
 80091d4:	d118      	bne.n	8009208 <_strtod_l+0x8d0>
 80091d6:	4b2a      	ldr	r3, [pc, #168]	; (8009280 <_strtod_l+0x948>)
 80091d8:	459a      	cmp	sl, r3
 80091da:	d102      	bne.n	80091e2 <_strtod_l+0x8aa>
 80091dc:	3101      	adds	r1, #1
 80091de:	f43f adef 	beq.w	8008dc0 <_strtod_l+0x488>
 80091e2:	4b24      	ldr	r3, [pc, #144]	; (8009274 <_strtod_l+0x93c>)
 80091e4:	ea0a 0303 	and.w	r3, sl, r3
 80091e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80091ec:	f04f 0800 	mov.w	r8, #0
 80091f0:	9b04      	ldr	r3, [sp, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1a2      	bne.n	800913c <_strtod_l+0x804>
 80091f6:	e5ed      	b.n	8008dd4 <_strtod_l+0x49c>
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295
 80091fc:	e7e9      	b.n	80091d2 <_strtod_l+0x89a>
 80091fe:	4613      	mov	r3, r2
 8009200:	e7e7      	b.n	80091d2 <_strtod_l+0x89a>
 8009202:	ea53 0308 	orrs.w	r3, r3, r8
 8009206:	d08a      	beq.n	800911e <_strtod_l+0x7e6>
 8009208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800920a:	b1e3      	cbz	r3, 8009246 <_strtod_l+0x90e>
 800920c:	ea13 0f0a 	tst.w	r3, sl
 8009210:	d0ee      	beq.n	80091f0 <_strtod_l+0x8b8>
 8009212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009214:	9a04      	ldr	r2, [sp, #16]
 8009216:	4640      	mov	r0, r8
 8009218:	4649      	mov	r1, r9
 800921a:	b1c3      	cbz	r3, 800924e <_strtod_l+0x916>
 800921c:	f7ff fb6f 	bl	80088fe <sulp>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	ec51 0b18 	vmov	r0, r1, d8
 8009228:	f7f7 f850 	bl	80002cc <__adddf3>
 800922c:	4680      	mov	r8, r0
 800922e:	4689      	mov	r9, r1
 8009230:	e7de      	b.n	80091f0 <_strtod_l+0x8b8>
 8009232:	4013      	ands	r3, r2
 8009234:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009238:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800923c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009240:	f04f 38ff 	mov.w	r8, #4294967295
 8009244:	e7d4      	b.n	80091f0 <_strtod_l+0x8b8>
 8009246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009248:	ea13 0f08 	tst.w	r3, r8
 800924c:	e7e0      	b.n	8009210 <_strtod_l+0x8d8>
 800924e:	f7ff fb56 	bl	80088fe <sulp>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	ec51 0b18 	vmov	r0, r1, d8
 800925a:	f7f7 f835 	bl	80002c8 <__aeabi_dsub>
 800925e:	2200      	movs	r2, #0
 8009260:	2300      	movs	r3, #0
 8009262:	4680      	mov	r8, r0
 8009264:	4689      	mov	r9, r1
 8009266:	f7f7 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800926a:	2800      	cmp	r0, #0
 800926c:	d0c0      	beq.n	80091f0 <_strtod_l+0x8b8>
 800926e:	e618      	b.n	8008ea2 <_strtod_l+0x56a>
 8009270:	fffffc02 	.word	0xfffffc02
 8009274:	7ff00000 	.word	0x7ff00000
 8009278:	39500000 	.word	0x39500000
 800927c:	000fffff 	.word	0x000fffff
 8009280:	7fefffff 	.word	0x7fefffff
 8009284:	0800cd30 	.word	0x0800cd30
 8009288:	4659      	mov	r1, fp
 800928a:	4628      	mov	r0, r5
 800928c:	f002 fed6 	bl	800c03c <__ratio>
 8009290:	ec57 6b10 	vmov	r6, r7, d0
 8009294:	ee10 0a10 	vmov	r0, s0
 8009298:	2200      	movs	r2, #0
 800929a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800929e:	4639      	mov	r1, r7
 80092a0:	f7f7 fc46 	bl	8000b30 <__aeabi_dcmple>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d071      	beq.n	800938c <_strtod_l+0xa54>
 80092a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d17c      	bne.n	80093a8 <_strtod_l+0xa70>
 80092ae:	f1b8 0f00 	cmp.w	r8, #0
 80092b2:	d15a      	bne.n	800936a <_strtod_l+0xa32>
 80092b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d15d      	bne.n	8009378 <_strtod_l+0xa40>
 80092bc:	4b90      	ldr	r3, [pc, #576]	; (8009500 <_strtod_l+0xbc8>)
 80092be:	2200      	movs	r2, #0
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f7 fc2a 	bl	8000b1c <__aeabi_dcmplt>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d15c      	bne.n	8009386 <_strtod_l+0xa4e>
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	4b8c      	ldr	r3, [pc, #560]	; (8009504 <_strtod_l+0xbcc>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	f7f7 f9b0 	bl	8000638 <__aeabi_dmul>
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80092e0:	9606      	str	r6, [sp, #24]
 80092e2:	9307      	str	r3, [sp, #28]
 80092e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80092ec:	4b86      	ldr	r3, [pc, #536]	; (8009508 <_strtod_l+0xbd0>)
 80092ee:	ea0a 0303 	and.w	r3, sl, r3
 80092f2:	930d      	str	r3, [sp, #52]	; 0x34
 80092f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092f6:	4b85      	ldr	r3, [pc, #532]	; (800950c <_strtod_l+0xbd4>)
 80092f8:	429a      	cmp	r2, r3
 80092fa:	f040 8090 	bne.w	800941e <_strtod_l+0xae6>
 80092fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009302:	ec49 8b10 	vmov	d0, r8, r9
 8009306:	f002 fdcf 	bl	800bea8 <__ulp>
 800930a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800930e:	ec51 0b10 	vmov	r0, r1, d0
 8009312:	f7f7 f991 	bl	8000638 <__aeabi_dmul>
 8009316:	4642      	mov	r2, r8
 8009318:	464b      	mov	r3, r9
 800931a:	f7f6 ffd7 	bl	80002cc <__adddf3>
 800931e:	460b      	mov	r3, r1
 8009320:	4979      	ldr	r1, [pc, #484]	; (8009508 <_strtod_l+0xbd0>)
 8009322:	4a7b      	ldr	r2, [pc, #492]	; (8009510 <_strtod_l+0xbd8>)
 8009324:	4019      	ands	r1, r3
 8009326:	4291      	cmp	r1, r2
 8009328:	4680      	mov	r8, r0
 800932a:	d944      	bls.n	80093b6 <_strtod_l+0xa7e>
 800932c:	ee18 2a90 	vmov	r2, s17
 8009330:	4b78      	ldr	r3, [pc, #480]	; (8009514 <_strtod_l+0xbdc>)
 8009332:	429a      	cmp	r2, r3
 8009334:	d104      	bne.n	8009340 <_strtod_l+0xa08>
 8009336:	ee18 3a10 	vmov	r3, s16
 800933a:	3301      	adds	r3, #1
 800933c:	f43f ad40 	beq.w	8008dc0 <_strtod_l+0x488>
 8009340:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009514 <_strtod_l+0xbdc>
 8009344:	f04f 38ff 	mov.w	r8, #4294967295
 8009348:	9916      	ldr	r1, [sp, #88]	; 0x58
 800934a:	4620      	mov	r0, r4
 800934c:	f002 fa80 	bl	800b850 <_Bfree>
 8009350:	9905      	ldr	r1, [sp, #20]
 8009352:	4620      	mov	r0, r4
 8009354:	f002 fa7c 	bl	800b850 <_Bfree>
 8009358:	4659      	mov	r1, fp
 800935a:	4620      	mov	r0, r4
 800935c:	f002 fa78 	bl	800b850 <_Bfree>
 8009360:	4629      	mov	r1, r5
 8009362:	4620      	mov	r0, r4
 8009364:	f002 fa74 	bl	800b850 <_Bfree>
 8009368:	e609      	b.n	8008f7e <_strtod_l+0x646>
 800936a:	f1b8 0f01 	cmp.w	r8, #1
 800936e:	d103      	bne.n	8009378 <_strtod_l+0xa40>
 8009370:	f1b9 0f00 	cmp.w	r9, #0
 8009374:	f43f ad95 	beq.w	8008ea2 <_strtod_l+0x56a>
 8009378:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80094d0 <_strtod_l+0xb98>
 800937c:	4f60      	ldr	r7, [pc, #384]	; (8009500 <_strtod_l+0xbc8>)
 800937e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009382:	2600      	movs	r6, #0
 8009384:	e7ae      	b.n	80092e4 <_strtod_l+0x9ac>
 8009386:	4f5f      	ldr	r7, [pc, #380]	; (8009504 <_strtod_l+0xbcc>)
 8009388:	2600      	movs	r6, #0
 800938a:	e7a7      	b.n	80092dc <_strtod_l+0x9a4>
 800938c:	4b5d      	ldr	r3, [pc, #372]	; (8009504 <_strtod_l+0xbcc>)
 800938e:	4630      	mov	r0, r6
 8009390:	4639      	mov	r1, r7
 8009392:	2200      	movs	r2, #0
 8009394:	f7f7 f950 	bl	8000638 <__aeabi_dmul>
 8009398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d09c      	beq.n	80092dc <_strtod_l+0x9a4>
 80093a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093a6:	e79d      	b.n	80092e4 <_strtod_l+0x9ac>
 80093a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80094d8 <_strtod_l+0xba0>
 80093ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093b0:	ec57 6b17 	vmov	r6, r7, d7
 80093b4:	e796      	b.n	80092e4 <_strtod_l+0x9ac>
 80093b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	46ca      	mov	sl, r9
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1c2      	bne.n	8009348 <_strtod_l+0xa10>
 80093c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093c8:	0d1b      	lsrs	r3, r3, #20
 80093ca:	051b      	lsls	r3, r3, #20
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d1bb      	bne.n	8009348 <_strtod_l+0xa10>
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	f7f7 fc90 	bl	8000cf8 <__aeabi_d2lz>
 80093d8:	f7f7 f900 	bl	80005dc <__aeabi_l2d>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4630      	mov	r0, r6
 80093e2:	4639      	mov	r1, r7
 80093e4:	f7f6 ff70 	bl	80002c8 <__aeabi_dsub>
 80093e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093ee:	ea43 0308 	orr.w	r3, r3, r8
 80093f2:	4313      	orrs	r3, r2
 80093f4:	4606      	mov	r6, r0
 80093f6:	460f      	mov	r7, r1
 80093f8:	d054      	beq.n	80094a4 <_strtod_l+0xb6c>
 80093fa:	a339      	add	r3, pc, #228	; (adr r3, 80094e0 <_strtod_l+0xba8>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f7f7 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 8009404:	2800      	cmp	r0, #0
 8009406:	f47f ace5 	bne.w	8008dd4 <_strtod_l+0x49c>
 800940a:	a337      	add	r3, pc, #220	; (adr r3, 80094e8 <_strtod_l+0xbb0>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f7 fba0 	bl	8000b58 <__aeabi_dcmpgt>
 8009418:	2800      	cmp	r0, #0
 800941a:	d095      	beq.n	8009348 <_strtod_l+0xa10>
 800941c:	e4da      	b.n	8008dd4 <_strtod_l+0x49c>
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	b333      	cbz	r3, 8009470 <_strtod_l+0xb38>
 8009422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009424:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009428:	d822      	bhi.n	8009470 <_strtod_l+0xb38>
 800942a:	a331      	add	r3, pc, #196	; (adr r3, 80094f0 <_strtod_l+0xbb8>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	4630      	mov	r0, r6
 8009432:	4639      	mov	r1, r7
 8009434:	f7f7 fb7c 	bl	8000b30 <__aeabi_dcmple>
 8009438:	b1a0      	cbz	r0, 8009464 <_strtod_l+0xb2c>
 800943a:	4639      	mov	r1, r7
 800943c:	4630      	mov	r0, r6
 800943e:	f7f7 fbd3 	bl	8000be8 <__aeabi_d2uiz>
 8009442:	2801      	cmp	r0, #1
 8009444:	bf38      	it	cc
 8009446:	2001      	movcc	r0, #1
 8009448:	f7f7 f87c 	bl	8000544 <__aeabi_ui2d>
 800944c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944e:	4606      	mov	r6, r0
 8009450:	460f      	mov	r7, r1
 8009452:	bb23      	cbnz	r3, 800949e <_strtod_l+0xb66>
 8009454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009458:	9010      	str	r0, [sp, #64]	; 0x40
 800945a:	9311      	str	r3, [sp, #68]	; 0x44
 800945c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009460:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009468:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009470:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009474:	eeb0 0a48 	vmov.f32	s0, s16
 8009478:	eef0 0a68 	vmov.f32	s1, s17
 800947c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009480:	f002 fd12 	bl	800bea8 <__ulp>
 8009484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009488:	ec53 2b10 	vmov	r2, r3, d0
 800948c:	f7f7 f8d4 	bl	8000638 <__aeabi_dmul>
 8009490:	ec53 2b18 	vmov	r2, r3, d8
 8009494:	f7f6 ff1a 	bl	80002cc <__adddf3>
 8009498:	4680      	mov	r8, r0
 800949a:	4689      	mov	r9, r1
 800949c:	e78d      	b.n	80093ba <_strtod_l+0xa82>
 800949e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80094a2:	e7db      	b.n	800945c <_strtod_l+0xb24>
 80094a4:	a314      	add	r3, pc, #80	; (adr r3, 80094f8 <_strtod_l+0xbc0>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f7 fb37 	bl	8000b1c <__aeabi_dcmplt>
 80094ae:	e7b3      	b.n	8009418 <_strtod_l+0xae0>
 80094b0:	2300      	movs	r3, #0
 80094b2:	930a      	str	r3, [sp, #40]	; 0x28
 80094b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	f7ff ba7c 	b.w	80089b6 <_strtod_l+0x7e>
 80094be:	2a65      	cmp	r2, #101	; 0x65
 80094c0:	f43f ab75 	beq.w	8008bae <_strtod_l+0x276>
 80094c4:	2a45      	cmp	r2, #69	; 0x45
 80094c6:	f43f ab72 	beq.w	8008bae <_strtod_l+0x276>
 80094ca:	2301      	movs	r3, #1
 80094cc:	f7ff bbaa 	b.w	8008c24 <_strtod_l+0x2ec>
 80094d0:	00000000 	.word	0x00000000
 80094d4:	bff00000 	.word	0xbff00000
 80094d8:	00000000 	.word	0x00000000
 80094dc:	3ff00000 	.word	0x3ff00000
 80094e0:	94a03595 	.word	0x94a03595
 80094e4:	3fdfffff 	.word	0x3fdfffff
 80094e8:	35afe535 	.word	0x35afe535
 80094ec:	3fe00000 	.word	0x3fe00000
 80094f0:	ffc00000 	.word	0xffc00000
 80094f4:	41dfffff 	.word	0x41dfffff
 80094f8:	94a03595 	.word	0x94a03595
 80094fc:	3fcfffff 	.word	0x3fcfffff
 8009500:	3ff00000 	.word	0x3ff00000
 8009504:	3fe00000 	.word	0x3fe00000
 8009508:	7ff00000 	.word	0x7ff00000
 800950c:	7fe00000 	.word	0x7fe00000
 8009510:	7c9fffff 	.word	0x7c9fffff
 8009514:	7fefffff 	.word	0x7fefffff

08009518 <strtod>:
 8009518:	460a      	mov	r2, r1
 800951a:	4601      	mov	r1, r0
 800951c:	4802      	ldr	r0, [pc, #8]	; (8009528 <strtod+0x10>)
 800951e:	4b03      	ldr	r3, [pc, #12]	; (800952c <strtod+0x14>)
 8009520:	6800      	ldr	r0, [r0, #0]
 8009522:	f7ff ba09 	b.w	8008938 <_strtod_l>
 8009526:	bf00      	nop
 8009528:	20000224 	.word	0x20000224
 800952c:	2000006c 	.word	0x2000006c

08009530 <__cvt>:
 8009530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	ec55 4b10 	vmov	r4, r5, d0
 8009538:	2d00      	cmp	r5, #0
 800953a:	460e      	mov	r6, r1
 800953c:	4619      	mov	r1, r3
 800953e:	462b      	mov	r3, r5
 8009540:	bfbb      	ittet	lt
 8009542:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009546:	461d      	movlt	r5, r3
 8009548:	2300      	movge	r3, #0
 800954a:	232d      	movlt	r3, #45	; 0x2d
 800954c:	700b      	strb	r3, [r1, #0]
 800954e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009554:	4691      	mov	r9, r2
 8009556:	f023 0820 	bic.w	r8, r3, #32
 800955a:	bfbc      	itt	lt
 800955c:	4622      	movlt	r2, r4
 800955e:	4614      	movlt	r4, r2
 8009560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009564:	d005      	beq.n	8009572 <__cvt+0x42>
 8009566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800956a:	d100      	bne.n	800956e <__cvt+0x3e>
 800956c:	3601      	adds	r6, #1
 800956e:	2102      	movs	r1, #2
 8009570:	e000      	b.n	8009574 <__cvt+0x44>
 8009572:	2103      	movs	r1, #3
 8009574:	ab03      	add	r3, sp, #12
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	ab02      	add	r3, sp, #8
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	ec45 4b10 	vmov	d0, r4, r5
 8009580:	4653      	mov	r3, sl
 8009582:	4632      	mov	r2, r6
 8009584:	f000 fec8 	bl	800a318 <_dtoa_r>
 8009588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800958c:	4607      	mov	r7, r0
 800958e:	d102      	bne.n	8009596 <__cvt+0x66>
 8009590:	f019 0f01 	tst.w	r9, #1
 8009594:	d022      	beq.n	80095dc <__cvt+0xac>
 8009596:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800959a:	eb07 0906 	add.w	r9, r7, r6
 800959e:	d110      	bne.n	80095c2 <__cvt+0x92>
 80095a0:	783b      	ldrb	r3, [r7, #0]
 80095a2:	2b30      	cmp	r3, #48	; 0x30
 80095a4:	d10a      	bne.n	80095bc <__cvt+0x8c>
 80095a6:	2200      	movs	r2, #0
 80095a8:	2300      	movs	r3, #0
 80095aa:	4620      	mov	r0, r4
 80095ac:	4629      	mov	r1, r5
 80095ae:	f7f7 faab 	bl	8000b08 <__aeabi_dcmpeq>
 80095b2:	b918      	cbnz	r0, 80095bc <__cvt+0x8c>
 80095b4:	f1c6 0601 	rsb	r6, r6, #1
 80095b8:	f8ca 6000 	str.w	r6, [sl]
 80095bc:	f8da 3000 	ldr.w	r3, [sl]
 80095c0:	4499      	add	r9, r3
 80095c2:	2200      	movs	r2, #0
 80095c4:	2300      	movs	r3, #0
 80095c6:	4620      	mov	r0, r4
 80095c8:	4629      	mov	r1, r5
 80095ca:	f7f7 fa9d 	bl	8000b08 <__aeabi_dcmpeq>
 80095ce:	b108      	cbz	r0, 80095d4 <__cvt+0xa4>
 80095d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80095d4:	2230      	movs	r2, #48	; 0x30
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	454b      	cmp	r3, r9
 80095da:	d307      	bcc.n	80095ec <__cvt+0xbc>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095e0:	1bdb      	subs	r3, r3, r7
 80095e2:	4638      	mov	r0, r7
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	b004      	add	sp, #16
 80095e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ec:	1c59      	adds	r1, r3, #1
 80095ee:	9103      	str	r1, [sp, #12]
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e7f0      	b.n	80095d6 <__cvt+0xa6>

080095f4 <__exponent>:
 80095f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095f6:	4603      	mov	r3, r0
 80095f8:	2900      	cmp	r1, #0
 80095fa:	bfb8      	it	lt
 80095fc:	4249      	neglt	r1, r1
 80095fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009602:	bfb4      	ite	lt
 8009604:	222d      	movlt	r2, #45	; 0x2d
 8009606:	222b      	movge	r2, #43	; 0x2b
 8009608:	2909      	cmp	r1, #9
 800960a:	7042      	strb	r2, [r0, #1]
 800960c:	dd2a      	ble.n	8009664 <__exponent+0x70>
 800960e:	f10d 0207 	add.w	r2, sp, #7
 8009612:	4617      	mov	r7, r2
 8009614:	260a      	movs	r6, #10
 8009616:	4694      	mov	ip, r2
 8009618:	fb91 f5f6 	sdiv	r5, r1, r6
 800961c:	fb06 1415 	mls	r4, r6, r5, r1
 8009620:	3430      	adds	r4, #48	; 0x30
 8009622:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009626:	460c      	mov	r4, r1
 8009628:	2c63      	cmp	r4, #99	; 0x63
 800962a:	f102 32ff 	add.w	r2, r2, #4294967295
 800962e:	4629      	mov	r1, r5
 8009630:	dcf1      	bgt.n	8009616 <__exponent+0x22>
 8009632:	3130      	adds	r1, #48	; 0x30
 8009634:	f1ac 0402 	sub.w	r4, ip, #2
 8009638:	f802 1c01 	strb.w	r1, [r2, #-1]
 800963c:	1c41      	adds	r1, r0, #1
 800963e:	4622      	mov	r2, r4
 8009640:	42ba      	cmp	r2, r7
 8009642:	d30a      	bcc.n	800965a <__exponent+0x66>
 8009644:	f10d 0209 	add.w	r2, sp, #9
 8009648:	eba2 020c 	sub.w	r2, r2, ip
 800964c:	42bc      	cmp	r4, r7
 800964e:	bf88      	it	hi
 8009650:	2200      	movhi	r2, #0
 8009652:	4413      	add	r3, r2
 8009654:	1a18      	subs	r0, r3, r0
 8009656:	b003      	add	sp, #12
 8009658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800965e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009662:	e7ed      	b.n	8009640 <__exponent+0x4c>
 8009664:	2330      	movs	r3, #48	; 0x30
 8009666:	3130      	adds	r1, #48	; 0x30
 8009668:	7083      	strb	r3, [r0, #2]
 800966a:	70c1      	strb	r1, [r0, #3]
 800966c:	1d03      	adds	r3, r0, #4
 800966e:	e7f1      	b.n	8009654 <__exponent+0x60>

08009670 <_printf_float>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	ed2d 8b02 	vpush	{d8}
 8009678:	b08d      	sub	sp, #52	; 0x34
 800967a:	460c      	mov	r4, r1
 800967c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009680:	4616      	mov	r6, r2
 8009682:	461f      	mov	r7, r3
 8009684:	4605      	mov	r5, r0
 8009686:	f000 fd31 	bl	800a0ec <_localeconv_r>
 800968a:	f8d0 a000 	ldr.w	sl, [r0]
 800968e:	4650      	mov	r0, sl
 8009690:	f7f6 fe0e 	bl	80002b0 <strlen>
 8009694:	2300      	movs	r3, #0
 8009696:	930a      	str	r3, [sp, #40]	; 0x28
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	f8d8 3000 	ldr.w	r3, [r8]
 80096a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096a4:	3307      	adds	r3, #7
 80096a6:	f023 0307 	bic.w	r3, r3, #7
 80096aa:	f103 0208 	add.w	r2, r3, #8
 80096ae:	f8c8 2000 	str.w	r2, [r8]
 80096b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096ba:	9307      	str	r3, [sp, #28]
 80096bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80096c0:	ee08 0a10 	vmov	s16, r0
 80096c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80096c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096cc:	4b9e      	ldr	r3, [pc, #632]	; (8009948 <_printf_float+0x2d8>)
 80096ce:	f04f 32ff 	mov.w	r2, #4294967295
 80096d2:	f7f7 fa4b 	bl	8000b6c <__aeabi_dcmpun>
 80096d6:	bb88      	cbnz	r0, 800973c <_printf_float+0xcc>
 80096d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096dc:	4b9a      	ldr	r3, [pc, #616]	; (8009948 <_printf_float+0x2d8>)
 80096de:	f04f 32ff 	mov.w	r2, #4294967295
 80096e2:	f7f7 fa25 	bl	8000b30 <__aeabi_dcmple>
 80096e6:	bb48      	cbnz	r0, 800973c <_printf_float+0xcc>
 80096e8:	2200      	movs	r2, #0
 80096ea:	2300      	movs	r3, #0
 80096ec:	4640      	mov	r0, r8
 80096ee:	4649      	mov	r1, r9
 80096f0:	f7f7 fa14 	bl	8000b1c <__aeabi_dcmplt>
 80096f4:	b110      	cbz	r0, 80096fc <_printf_float+0x8c>
 80096f6:	232d      	movs	r3, #45	; 0x2d
 80096f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096fc:	4a93      	ldr	r2, [pc, #588]	; (800994c <_printf_float+0x2dc>)
 80096fe:	4b94      	ldr	r3, [pc, #592]	; (8009950 <_printf_float+0x2e0>)
 8009700:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009704:	bf94      	ite	ls
 8009706:	4690      	movls	r8, r2
 8009708:	4698      	movhi	r8, r3
 800970a:	2303      	movs	r3, #3
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	9b05      	ldr	r3, [sp, #20]
 8009710:	f023 0304 	bic.w	r3, r3, #4
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	f04f 0900 	mov.w	r9, #0
 800971a:	9700      	str	r7, [sp, #0]
 800971c:	4633      	mov	r3, r6
 800971e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009720:	4621      	mov	r1, r4
 8009722:	4628      	mov	r0, r5
 8009724:	f000 f9da 	bl	8009adc <_printf_common>
 8009728:	3001      	adds	r0, #1
 800972a:	f040 8090 	bne.w	800984e <_printf_float+0x1de>
 800972e:	f04f 30ff 	mov.w	r0, #4294967295
 8009732:	b00d      	add	sp, #52	; 0x34
 8009734:	ecbd 8b02 	vpop	{d8}
 8009738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973c:	4642      	mov	r2, r8
 800973e:	464b      	mov	r3, r9
 8009740:	4640      	mov	r0, r8
 8009742:	4649      	mov	r1, r9
 8009744:	f7f7 fa12 	bl	8000b6c <__aeabi_dcmpun>
 8009748:	b140      	cbz	r0, 800975c <_printf_float+0xec>
 800974a:	464b      	mov	r3, r9
 800974c:	2b00      	cmp	r3, #0
 800974e:	bfbc      	itt	lt
 8009750:	232d      	movlt	r3, #45	; 0x2d
 8009752:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009756:	4a7f      	ldr	r2, [pc, #508]	; (8009954 <_printf_float+0x2e4>)
 8009758:	4b7f      	ldr	r3, [pc, #508]	; (8009958 <_printf_float+0x2e8>)
 800975a:	e7d1      	b.n	8009700 <_printf_float+0x90>
 800975c:	6863      	ldr	r3, [r4, #4]
 800975e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009762:	9206      	str	r2, [sp, #24]
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	d13f      	bne.n	80097e8 <_printf_float+0x178>
 8009768:	2306      	movs	r3, #6
 800976a:	6063      	str	r3, [r4, #4]
 800976c:	9b05      	ldr	r3, [sp, #20]
 800976e:	6861      	ldr	r1, [r4, #4]
 8009770:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009774:	2300      	movs	r3, #0
 8009776:	9303      	str	r3, [sp, #12]
 8009778:	ab0a      	add	r3, sp, #40	; 0x28
 800977a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800977e:	ab09      	add	r3, sp, #36	; 0x24
 8009780:	ec49 8b10 	vmov	d0, r8, r9
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	6022      	str	r2, [r4, #0]
 8009788:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800978c:	4628      	mov	r0, r5
 800978e:	f7ff fecf 	bl	8009530 <__cvt>
 8009792:	9b06      	ldr	r3, [sp, #24]
 8009794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009796:	2b47      	cmp	r3, #71	; 0x47
 8009798:	4680      	mov	r8, r0
 800979a:	d108      	bne.n	80097ae <_printf_float+0x13e>
 800979c:	1cc8      	adds	r0, r1, #3
 800979e:	db02      	blt.n	80097a6 <_printf_float+0x136>
 80097a0:	6863      	ldr	r3, [r4, #4]
 80097a2:	4299      	cmp	r1, r3
 80097a4:	dd41      	ble.n	800982a <_printf_float+0x1ba>
 80097a6:	f1ab 0302 	sub.w	r3, fp, #2
 80097aa:	fa5f fb83 	uxtb.w	fp, r3
 80097ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097b2:	d820      	bhi.n	80097f6 <_printf_float+0x186>
 80097b4:	3901      	subs	r1, #1
 80097b6:	465a      	mov	r2, fp
 80097b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097bc:	9109      	str	r1, [sp, #36]	; 0x24
 80097be:	f7ff ff19 	bl	80095f4 <__exponent>
 80097c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097c4:	1813      	adds	r3, r2, r0
 80097c6:	2a01      	cmp	r2, #1
 80097c8:	4681      	mov	r9, r0
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	dc02      	bgt.n	80097d4 <_printf_float+0x164>
 80097ce:	6822      	ldr	r2, [r4, #0]
 80097d0:	07d2      	lsls	r2, r2, #31
 80097d2:	d501      	bpl.n	80097d8 <_printf_float+0x168>
 80097d4:	3301      	adds	r3, #1
 80097d6:	6123      	str	r3, [r4, #16]
 80097d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d09c      	beq.n	800971a <_printf_float+0xaa>
 80097e0:	232d      	movs	r3, #45	; 0x2d
 80097e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e6:	e798      	b.n	800971a <_printf_float+0xaa>
 80097e8:	9a06      	ldr	r2, [sp, #24]
 80097ea:	2a47      	cmp	r2, #71	; 0x47
 80097ec:	d1be      	bne.n	800976c <_printf_float+0xfc>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1bc      	bne.n	800976c <_printf_float+0xfc>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e7b9      	b.n	800976a <_printf_float+0xfa>
 80097f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097fa:	d118      	bne.n	800982e <_printf_float+0x1be>
 80097fc:	2900      	cmp	r1, #0
 80097fe:	6863      	ldr	r3, [r4, #4]
 8009800:	dd0b      	ble.n	800981a <_printf_float+0x1aa>
 8009802:	6121      	str	r1, [r4, #16]
 8009804:	b913      	cbnz	r3, 800980c <_printf_float+0x19c>
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	07d0      	lsls	r0, r2, #31
 800980a:	d502      	bpl.n	8009812 <_printf_float+0x1a2>
 800980c:	3301      	adds	r3, #1
 800980e:	440b      	add	r3, r1
 8009810:	6123      	str	r3, [r4, #16]
 8009812:	65a1      	str	r1, [r4, #88]	; 0x58
 8009814:	f04f 0900 	mov.w	r9, #0
 8009818:	e7de      	b.n	80097d8 <_printf_float+0x168>
 800981a:	b913      	cbnz	r3, 8009822 <_printf_float+0x1b2>
 800981c:	6822      	ldr	r2, [r4, #0]
 800981e:	07d2      	lsls	r2, r2, #31
 8009820:	d501      	bpl.n	8009826 <_printf_float+0x1b6>
 8009822:	3302      	adds	r3, #2
 8009824:	e7f4      	b.n	8009810 <_printf_float+0x1a0>
 8009826:	2301      	movs	r3, #1
 8009828:	e7f2      	b.n	8009810 <_printf_float+0x1a0>
 800982a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009830:	4299      	cmp	r1, r3
 8009832:	db05      	blt.n	8009840 <_printf_float+0x1d0>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	6121      	str	r1, [r4, #16]
 8009838:	07d8      	lsls	r0, r3, #31
 800983a:	d5ea      	bpl.n	8009812 <_printf_float+0x1a2>
 800983c:	1c4b      	adds	r3, r1, #1
 800983e:	e7e7      	b.n	8009810 <_printf_float+0x1a0>
 8009840:	2900      	cmp	r1, #0
 8009842:	bfd4      	ite	le
 8009844:	f1c1 0202 	rsble	r2, r1, #2
 8009848:	2201      	movgt	r2, #1
 800984a:	4413      	add	r3, r2
 800984c:	e7e0      	b.n	8009810 <_printf_float+0x1a0>
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	055a      	lsls	r2, r3, #21
 8009852:	d407      	bmi.n	8009864 <_printf_float+0x1f4>
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	4642      	mov	r2, r8
 8009858:	4631      	mov	r1, r6
 800985a:	4628      	mov	r0, r5
 800985c:	47b8      	blx	r7
 800985e:	3001      	adds	r0, #1
 8009860:	d12c      	bne.n	80098bc <_printf_float+0x24c>
 8009862:	e764      	b.n	800972e <_printf_float+0xbe>
 8009864:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009868:	f240 80e0 	bls.w	8009a2c <_printf_float+0x3bc>
 800986c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009870:	2200      	movs	r2, #0
 8009872:	2300      	movs	r3, #0
 8009874:	f7f7 f948 	bl	8000b08 <__aeabi_dcmpeq>
 8009878:	2800      	cmp	r0, #0
 800987a:	d034      	beq.n	80098e6 <_printf_float+0x276>
 800987c:	4a37      	ldr	r2, [pc, #220]	; (800995c <_printf_float+0x2ec>)
 800987e:	2301      	movs	r3, #1
 8009880:	4631      	mov	r1, r6
 8009882:	4628      	mov	r0, r5
 8009884:	47b8      	blx	r7
 8009886:	3001      	adds	r0, #1
 8009888:	f43f af51 	beq.w	800972e <_printf_float+0xbe>
 800988c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009890:	429a      	cmp	r2, r3
 8009892:	db02      	blt.n	800989a <_printf_float+0x22a>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	07d8      	lsls	r0, r3, #31
 8009898:	d510      	bpl.n	80098bc <_printf_float+0x24c>
 800989a:	ee18 3a10 	vmov	r3, s16
 800989e:	4652      	mov	r2, sl
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	f43f af41 	beq.w	800972e <_printf_float+0xbe>
 80098ac:	f04f 0800 	mov.w	r8, #0
 80098b0:	f104 091a 	add.w	r9, r4, #26
 80098b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b6:	3b01      	subs	r3, #1
 80098b8:	4543      	cmp	r3, r8
 80098ba:	dc09      	bgt.n	80098d0 <_printf_float+0x260>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	079b      	lsls	r3, r3, #30
 80098c0:	f100 8107 	bmi.w	8009ad2 <_printf_float+0x462>
 80098c4:	68e0      	ldr	r0, [r4, #12]
 80098c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098c8:	4298      	cmp	r0, r3
 80098ca:	bfb8      	it	lt
 80098cc:	4618      	movlt	r0, r3
 80098ce:	e730      	b.n	8009732 <_printf_float+0xc2>
 80098d0:	2301      	movs	r3, #1
 80098d2:	464a      	mov	r2, r9
 80098d4:	4631      	mov	r1, r6
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b8      	blx	r7
 80098da:	3001      	adds	r0, #1
 80098dc:	f43f af27 	beq.w	800972e <_printf_float+0xbe>
 80098e0:	f108 0801 	add.w	r8, r8, #1
 80098e4:	e7e6      	b.n	80098b4 <_printf_float+0x244>
 80098e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dc39      	bgt.n	8009960 <_printf_float+0x2f0>
 80098ec:	4a1b      	ldr	r2, [pc, #108]	; (800995c <_printf_float+0x2ec>)
 80098ee:	2301      	movs	r3, #1
 80098f0:	4631      	mov	r1, r6
 80098f2:	4628      	mov	r0, r5
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f af19 	beq.w	800972e <_printf_float+0xbe>
 80098fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009900:	4313      	orrs	r3, r2
 8009902:	d102      	bne.n	800990a <_printf_float+0x29a>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	07d9      	lsls	r1, r3, #31
 8009908:	d5d8      	bpl.n	80098bc <_printf_float+0x24c>
 800990a:	ee18 3a10 	vmov	r3, s16
 800990e:	4652      	mov	r2, sl
 8009910:	4631      	mov	r1, r6
 8009912:	4628      	mov	r0, r5
 8009914:	47b8      	blx	r7
 8009916:	3001      	adds	r0, #1
 8009918:	f43f af09 	beq.w	800972e <_printf_float+0xbe>
 800991c:	f04f 0900 	mov.w	r9, #0
 8009920:	f104 0a1a 	add.w	sl, r4, #26
 8009924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009926:	425b      	negs	r3, r3
 8009928:	454b      	cmp	r3, r9
 800992a:	dc01      	bgt.n	8009930 <_printf_float+0x2c0>
 800992c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992e:	e792      	b.n	8009856 <_printf_float+0x1e6>
 8009930:	2301      	movs	r3, #1
 8009932:	4652      	mov	r2, sl
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	f43f aef7 	beq.w	800972e <_printf_float+0xbe>
 8009940:	f109 0901 	add.w	r9, r9, #1
 8009944:	e7ee      	b.n	8009924 <_printf_float+0x2b4>
 8009946:	bf00      	nop
 8009948:	7fefffff 	.word	0x7fefffff
 800994c:	0800ce59 	.word	0x0800ce59
 8009950:	0800ce5d 	.word	0x0800ce5d
 8009954:	0800ce61 	.word	0x0800ce61
 8009958:	0800ce65 	.word	0x0800ce65
 800995c:	0800ce69 	.word	0x0800ce69
 8009960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009964:	429a      	cmp	r2, r3
 8009966:	bfa8      	it	ge
 8009968:	461a      	movge	r2, r3
 800996a:	2a00      	cmp	r2, #0
 800996c:	4691      	mov	r9, r2
 800996e:	dc37      	bgt.n	80099e0 <_printf_float+0x370>
 8009970:	f04f 0b00 	mov.w	fp, #0
 8009974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009978:	f104 021a 	add.w	r2, r4, #26
 800997c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800997e:	9305      	str	r3, [sp, #20]
 8009980:	eba3 0309 	sub.w	r3, r3, r9
 8009984:	455b      	cmp	r3, fp
 8009986:	dc33      	bgt.n	80099f0 <_printf_float+0x380>
 8009988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800998c:	429a      	cmp	r2, r3
 800998e:	db3b      	blt.n	8009a08 <_printf_float+0x398>
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	07da      	lsls	r2, r3, #31
 8009994:	d438      	bmi.n	8009a08 <_printf_float+0x398>
 8009996:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800999a:	eba2 0903 	sub.w	r9, r2, r3
 800999e:	9b05      	ldr	r3, [sp, #20]
 80099a0:	1ad2      	subs	r2, r2, r3
 80099a2:	4591      	cmp	r9, r2
 80099a4:	bfa8      	it	ge
 80099a6:	4691      	movge	r9, r2
 80099a8:	f1b9 0f00 	cmp.w	r9, #0
 80099ac:	dc35      	bgt.n	8009a1a <_printf_float+0x3aa>
 80099ae:	f04f 0800 	mov.w	r8, #0
 80099b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099b6:	f104 0a1a 	add.w	sl, r4, #26
 80099ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099be:	1a9b      	subs	r3, r3, r2
 80099c0:	eba3 0309 	sub.w	r3, r3, r9
 80099c4:	4543      	cmp	r3, r8
 80099c6:	f77f af79 	ble.w	80098bc <_printf_float+0x24c>
 80099ca:	2301      	movs	r3, #1
 80099cc:	4652      	mov	r2, sl
 80099ce:	4631      	mov	r1, r6
 80099d0:	4628      	mov	r0, r5
 80099d2:	47b8      	blx	r7
 80099d4:	3001      	adds	r0, #1
 80099d6:	f43f aeaa 	beq.w	800972e <_printf_float+0xbe>
 80099da:	f108 0801 	add.w	r8, r8, #1
 80099de:	e7ec      	b.n	80099ba <_printf_float+0x34a>
 80099e0:	4613      	mov	r3, r2
 80099e2:	4631      	mov	r1, r6
 80099e4:	4642      	mov	r2, r8
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	d1c0      	bne.n	8009970 <_printf_float+0x300>
 80099ee:	e69e      	b.n	800972e <_printf_float+0xbe>
 80099f0:	2301      	movs	r3, #1
 80099f2:	4631      	mov	r1, r6
 80099f4:	4628      	mov	r0, r5
 80099f6:	9205      	str	r2, [sp, #20]
 80099f8:	47b8      	blx	r7
 80099fa:	3001      	adds	r0, #1
 80099fc:	f43f ae97 	beq.w	800972e <_printf_float+0xbe>
 8009a00:	9a05      	ldr	r2, [sp, #20]
 8009a02:	f10b 0b01 	add.w	fp, fp, #1
 8009a06:	e7b9      	b.n	800997c <_printf_float+0x30c>
 8009a08:	ee18 3a10 	vmov	r3, s16
 8009a0c:	4652      	mov	r2, sl
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b8      	blx	r7
 8009a14:	3001      	adds	r0, #1
 8009a16:	d1be      	bne.n	8009996 <_printf_float+0x326>
 8009a18:	e689      	b.n	800972e <_printf_float+0xbe>
 8009a1a:	9a05      	ldr	r2, [sp, #20]
 8009a1c:	464b      	mov	r3, r9
 8009a1e:	4442      	add	r2, r8
 8009a20:	4631      	mov	r1, r6
 8009a22:	4628      	mov	r0, r5
 8009a24:	47b8      	blx	r7
 8009a26:	3001      	adds	r0, #1
 8009a28:	d1c1      	bne.n	80099ae <_printf_float+0x33e>
 8009a2a:	e680      	b.n	800972e <_printf_float+0xbe>
 8009a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a2e:	2a01      	cmp	r2, #1
 8009a30:	dc01      	bgt.n	8009a36 <_printf_float+0x3c6>
 8009a32:	07db      	lsls	r3, r3, #31
 8009a34:	d53a      	bpl.n	8009aac <_printf_float+0x43c>
 8009a36:	2301      	movs	r3, #1
 8009a38:	4642      	mov	r2, r8
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f ae74 	beq.w	800972e <_printf_float+0xbe>
 8009a46:	ee18 3a10 	vmov	r3, s16
 8009a4a:	4652      	mov	r2, sl
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	4628      	mov	r0, r5
 8009a50:	47b8      	blx	r7
 8009a52:	3001      	adds	r0, #1
 8009a54:	f43f ae6b 	beq.w	800972e <_printf_float+0xbe>
 8009a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009a64:	f7f7 f850 	bl	8000b08 <__aeabi_dcmpeq>
 8009a68:	b9d8      	cbnz	r0, 8009aa2 <_printf_float+0x432>
 8009a6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a6e:	f108 0201 	add.w	r2, r8, #1
 8009a72:	4631      	mov	r1, r6
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d10e      	bne.n	8009a9a <_printf_float+0x42a>
 8009a7c:	e657      	b.n	800972e <_printf_float+0xbe>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4652      	mov	r2, sl
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b8      	blx	r7
 8009a88:	3001      	adds	r0, #1
 8009a8a:	f43f ae50 	beq.w	800972e <_printf_float+0xbe>
 8009a8e:	f108 0801 	add.w	r8, r8, #1
 8009a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a94:	3b01      	subs	r3, #1
 8009a96:	4543      	cmp	r3, r8
 8009a98:	dcf1      	bgt.n	8009a7e <_printf_float+0x40e>
 8009a9a:	464b      	mov	r3, r9
 8009a9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009aa0:	e6da      	b.n	8009858 <_printf_float+0x1e8>
 8009aa2:	f04f 0800 	mov.w	r8, #0
 8009aa6:	f104 0a1a 	add.w	sl, r4, #26
 8009aaa:	e7f2      	b.n	8009a92 <_printf_float+0x422>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4642      	mov	r2, r8
 8009ab0:	e7df      	b.n	8009a72 <_printf_float+0x402>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	464a      	mov	r2, r9
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	f43f ae36 	beq.w	800972e <_printf_float+0xbe>
 8009ac2:	f108 0801 	add.w	r8, r8, #1
 8009ac6:	68e3      	ldr	r3, [r4, #12]
 8009ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aca:	1a5b      	subs	r3, r3, r1
 8009acc:	4543      	cmp	r3, r8
 8009ace:	dcf0      	bgt.n	8009ab2 <_printf_float+0x442>
 8009ad0:	e6f8      	b.n	80098c4 <_printf_float+0x254>
 8009ad2:	f04f 0800 	mov.w	r8, #0
 8009ad6:	f104 0919 	add.w	r9, r4, #25
 8009ada:	e7f4      	b.n	8009ac6 <_printf_float+0x456>

08009adc <_printf_common>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	4699      	mov	r9, r3
 8009ae4:	688a      	ldr	r2, [r1, #8]
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bfb8      	it	lt
 8009af0:	4613      	movlt	r3, r2
 8009af2:	6033      	str	r3, [r6, #0]
 8009af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009af8:	4607      	mov	r7, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	b10a      	cbz	r2, 8009b02 <_printf_common+0x26>
 8009afe:	3301      	adds	r3, #1
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	0699      	lsls	r1, r3, #26
 8009b06:	bf42      	ittt	mi
 8009b08:	6833      	ldrmi	r3, [r6, #0]
 8009b0a:	3302      	addmi	r3, #2
 8009b0c:	6033      	strmi	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	f015 0506 	ands.w	r5, r5, #6
 8009b14:	d106      	bne.n	8009b24 <_printf_common+0x48>
 8009b16:	f104 0a19 	add.w	sl, r4, #25
 8009b1a:	68e3      	ldr	r3, [r4, #12]
 8009b1c:	6832      	ldr	r2, [r6, #0]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	42ab      	cmp	r3, r5
 8009b22:	dc26      	bgt.n	8009b72 <_printf_common+0x96>
 8009b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b28:	1e13      	subs	r3, r2, #0
 8009b2a:	6822      	ldr	r2, [r4, #0]
 8009b2c:	bf18      	it	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	0692      	lsls	r2, r2, #26
 8009b32:	d42b      	bmi.n	8009b8c <_printf_common+0xb0>
 8009b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b38:	4649      	mov	r1, r9
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	47c0      	blx	r8
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d01e      	beq.n	8009b80 <_printf_common+0xa4>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	f003 0306 	and.w	r3, r3, #6
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	bf02      	ittt	eq
 8009b4e:	68e5      	ldreq	r5, [r4, #12]
 8009b50:	6833      	ldreq	r3, [r6, #0]
 8009b52:	1aed      	subeq	r5, r5, r3
 8009b54:	68a3      	ldr	r3, [r4, #8]
 8009b56:	bf0c      	ite	eq
 8009b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b5c:	2500      	movne	r5, #0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bfc4      	itt	gt
 8009b62:	1a9b      	subgt	r3, r3, r2
 8009b64:	18ed      	addgt	r5, r5, r3
 8009b66:	2600      	movs	r6, #0
 8009b68:	341a      	adds	r4, #26
 8009b6a:	42b5      	cmp	r5, r6
 8009b6c:	d11a      	bne.n	8009ba4 <_printf_common+0xc8>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e008      	b.n	8009b84 <_printf_common+0xa8>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4652      	mov	r2, sl
 8009b76:	4649      	mov	r1, r9
 8009b78:	4638      	mov	r0, r7
 8009b7a:	47c0      	blx	r8
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_printf_common+0xac>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b88:	3501      	adds	r5, #1
 8009b8a:	e7c6      	b.n	8009b1a <_printf_common+0x3e>
 8009b8c:	18e1      	adds	r1, r4, r3
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	2030      	movs	r0, #48	; 0x30
 8009b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b96:	4422      	add	r2, r4
 8009b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	e7c7      	b.n	8009b34 <_printf_common+0x58>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4649      	mov	r1, r9
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c0      	blx	r8
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d0e6      	beq.n	8009b80 <_printf_common+0xa4>
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7d9      	b.n	8009b6a <_printf_common+0x8e>
	...

08009bb8 <_printf_i>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	7e0f      	ldrb	r7, [r1, #24]
 8009bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bc0:	2f78      	cmp	r7, #120	; 0x78
 8009bc2:	4691      	mov	r9, r2
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	469a      	mov	sl, r3
 8009bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bce:	d807      	bhi.n	8009be0 <_printf_i+0x28>
 8009bd0:	2f62      	cmp	r7, #98	; 0x62
 8009bd2:	d80a      	bhi.n	8009bea <_printf_i+0x32>
 8009bd4:	2f00      	cmp	r7, #0
 8009bd6:	f000 80d4 	beq.w	8009d82 <_printf_i+0x1ca>
 8009bda:	2f58      	cmp	r7, #88	; 0x58
 8009bdc:	f000 80c0 	beq.w	8009d60 <_printf_i+0x1a8>
 8009be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009be8:	e03a      	b.n	8009c60 <_printf_i+0xa8>
 8009bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bee:	2b15      	cmp	r3, #21
 8009bf0:	d8f6      	bhi.n	8009be0 <_printf_i+0x28>
 8009bf2:	a101      	add	r1, pc, #4	; (adr r1, 8009bf8 <_printf_i+0x40>)
 8009bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009be1 	.word	0x08009be1
 8009c04:	08009be1 	.word	0x08009be1
 8009c08:	08009be1 	.word	0x08009be1
 8009c0c:	08009be1 	.word	0x08009be1
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009be1 	.word	0x08009be1
 8009c18:	08009be1 	.word	0x08009be1
 8009c1c:	08009be1 	.word	0x08009be1
 8009c20:	08009be1 	.word	0x08009be1
 8009c24:	08009d69 	.word	0x08009d69
 8009c28:	08009c91 	.word	0x08009c91
 8009c2c:	08009d23 	.word	0x08009d23
 8009c30:	08009be1 	.word	0x08009be1
 8009c34:	08009be1 	.word	0x08009be1
 8009c38:	08009d8b 	.word	0x08009d8b
 8009c3c:	08009be1 	.word	0x08009be1
 8009c40:	08009c91 	.word	0x08009c91
 8009c44:	08009be1 	.word	0x08009be1
 8009c48:	08009be1 	.word	0x08009be1
 8009c4c:	08009d2b 	.word	0x08009d2b
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	1d1a      	adds	r2, r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	602a      	str	r2, [r5, #0]
 8009c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c60:	2301      	movs	r3, #1
 8009c62:	e09f      	b.n	8009da4 <_printf_i+0x1ec>
 8009c64:	6820      	ldr	r0, [r4, #0]
 8009c66:	682b      	ldr	r3, [r5, #0]
 8009c68:	0607      	lsls	r7, r0, #24
 8009c6a:	f103 0104 	add.w	r1, r3, #4
 8009c6e:	6029      	str	r1, [r5, #0]
 8009c70:	d501      	bpl.n	8009c76 <_printf_i+0xbe>
 8009c72:	681e      	ldr	r6, [r3, #0]
 8009c74:	e003      	b.n	8009c7e <_printf_i+0xc6>
 8009c76:	0646      	lsls	r6, r0, #25
 8009c78:	d5fb      	bpl.n	8009c72 <_printf_i+0xba>
 8009c7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	da03      	bge.n	8009c8a <_printf_i+0xd2>
 8009c82:	232d      	movs	r3, #45	; 0x2d
 8009c84:	4276      	negs	r6, r6
 8009c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c8a:	485a      	ldr	r0, [pc, #360]	; (8009df4 <_printf_i+0x23c>)
 8009c8c:	230a      	movs	r3, #10
 8009c8e:	e012      	b.n	8009cb6 <_printf_i+0xfe>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	6820      	ldr	r0, [r4, #0]
 8009c94:	1d19      	adds	r1, r3, #4
 8009c96:	6029      	str	r1, [r5, #0]
 8009c98:	0605      	lsls	r5, r0, #24
 8009c9a:	d501      	bpl.n	8009ca0 <_printf_i+0xe8>
 8009c9c:	681e      	ldr	r6, [r3, #0]
 8009c9e:	e002      	b.n	8009ca6 <_printf_i+0xee>
 8009ca0:	0641      	lsls	r1, r0, #25
 8009ca2:	d5fb      	bpl.n	8009c9c <_printf_i+0xe4>
 8009ca4:	881e      	ldrh	r6, [r3, #0]
 8009ca6:	4853      	ldr	r0, [pc, #332]	; (8009df4 <_printf_i+0x23c>)
 8009ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8009caa:	bf0c      	ite	eq
 8009cac:	2308      	moveq	r3, #8
 8009cae:	230a      	movne	r3, #10
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cb6:	6865      	ldr	r5, [r4, #4]
 8009cb8:	60a5      	str	r5, [r4, #8]
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	bfa2      	ittt	ge
 8009cbe:	6821      	ldrge	r1, [r4, #0]
 8009cc0:	f021 0104 	bicge.w	r1, r1, #4
 8009cc4:	6021      	strge	r1, [r4, #0]
 8009cc6:	b90e      	cbnz	r6, 8009ccc <_printf_i+0x114>
 8009cc8:	2d00      	cmp	r5, #0
 8009cca:	d04b      	beq.n	8009d64 <_printf_i+0x1ac>
 8009ccc:	4615      	mov	r5, r2
 8009cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8009cd6:	5dc7      	ldrb	r7, [r0, r7]
 8009cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cdc:	4637      	mov	r7, r6
 8009cde:	42bb      	cmp	r3, r7
 8009ce0:	460e      	mov	r6, r1
 8009ce2:	d9f4      	bls.n	8009cce <_printf_i+0x116>
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d10b      	bne.n	8009d00 <_printf_i+0x148>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	07de      	lsls	r6, r3, #31
 8009cec:	d508      	bpl.n	8009d00 <_printf_i+0x148>
 8009cee:	6923      	ldr	r3, [r4, #16]
 8009cf0:	6861      	ldr	r1, [r4, #4]
 8009cf2:	4299      	cmp	r1, r3
 8009cf4:	bfde      	ittt	le
 8009cf6:	2330      	movle	r3, #48	; 0x30
 8009cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d00:	1b52      	subs	r2, r2, r5
 8009d02:	6122      	str	r2, [r4, #16]
 8009d04:	f8cd a000 	str.w	sl, [sp]
 8009d08:	464b      	mov	r3, r9
 8009d0a:	aa03      	add	r2, sp, #12
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4640      	mov	r0, r8
 8009d10:	f7ff fee4 	bl	8009adc <_printf_common>
 8009d14:	3001      	adds	r0, #1
 8009d16:	d14a      	bne.n	8009dae <_printf_i+0x1f6>
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	b004      	add	sp, #16
 8009d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	f043 0320 	orr.w	r3, r3, #32
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	4833      	ldr	r0, [pc, #204]	; (8009df8 <_printf_i+0x240>)
 8009d2c:	2778      	movs	r7, #120	; 0x78
 8009d2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	6829      	ldr	r1, [r5, #0]
 8009d36:	061f      	lsls	r7, r3, #24
 8009d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d3c:	d402      	bmi.n	8009d44 <_printf_i+0x18c>
 8009d3e:	065f      	lsls	r7, r3, #25
 8009d40:	bf48      	it	mi
 8009d42:	b2b6      	uxthmi	r6, r6
 8009d44:	07df      	lsls	r7, r3, #31
 8009d46:	bf48      	it	mi
 8009d48:	f043 0320 	orrmi.w	r3, r3, #32
 8009d4c:	6029      	str	r1, [r5, #0]
 8009d4e:	bf48      	it	mi
 8009d50:	6023      	strmi	r3, [r4, #0]
 8009d52:	b91e      	cbnz	r6, 8009d5c <_printf_i+0x1a4>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	f023 0320 	bic.w	r3, r3, #32
 8009d5a:	6023      	str	r3, [r4, #0]
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	e7a7      	b.n	8009cb0 <_printf_i+0xf8>
 8009d60:	4824      	ldr	r0, [pc, #144]	; (8009df4 <_printf_i+0x23c>)
 8009d62:	e7e4      	b.n	8009d2e <_printf_i+0x176>
 8009d64:	4615      	mov	r5, r2
 8009d66:	e7bd      	b.n	8009ce4 <_printf_i+0x12c>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	6826      	ldr	r6, [r4, #0]
 8009d6c:	6961      	ldr	r1, [r4, #20]
 8009d6e:	1d18      	adds	r0, r3, #4
 8009d70:	6028      	str	r0, [r5, #0]
 8009d72:	0635      	lsls	r5, r6, #24
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	d501      	bpl.n	8009d7c <_printf_i+0x1c4>
 8009d78:	6019      	str	r1, [r3, #0]
 8009d7a:	e002      	b.n	8009d82 <_printf_i+0x1ca>
 8009d7c:	0670      	lsls	r0, r6, #25
 8009d7e:	d5fb      	bpl.n	8009d78 <_printf_i+0x1c0>
 8009d80:	8019      	strh	r1, [r3, #0]
 8009d82:	2300      	movs	r3, #0
 8009d84:	6123      	str	r3, [r4, #16]
 8009d86:	4615      	mov	r5, r2
 8009d88:	e7bc      	b.n	8009d04 <_printf_i+0x14c>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	1d1a      	adds	r2, r3, #4
 8009d8e:	602a      	str	r2, [r5, #0]
 8009d90:	681d      	ldr	r5, [r3, #0]
 8009d92:	6862      	ldr	r2, [r4, #4]
 8009d94:	2100      	movs	r1, #0
 8009d96:	4628      	mov	r0, r5
 8009d98:	f7f6 fa3a 	bl	8000210 <memchr>
 8009d9c:	b108      	cbz	r0, 8009da2 <_printf_i+0x1ea>
 8009d9e:	1b40      	subs	r0, r0, r5
 8009da0:	6060      	str	r0, [r4, #4]
 8009da2:	6863      	ldr	r3, [r4, #4]
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	2300      	movs	r3, #0
 8009da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dac:	e7aa      	b.n	8009d04 <_printf_i+0x14c>
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	462a      	mov	r2, r5
 8009db2:	4649      	mov	r1, r9
 8009db4:	4640      	mov	r0, r8
 8009db6:	47d0      	blx	sl
 8009db8:	3001      	adds	r0, #1
 8009dba:	d0ad      	beq.n	8009d18 <_printf_i+0x160>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	079b      	lsls	r3, r3, #30
 8009dc0:	d413      	bmi.n	8009dea <_printf_i+0x232>
 8009dc2:	68e0      	ldr	r0, [r4, #12]
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	4298      	cmp	r0, r3
 8009dc8:	bfb8      	it	lt
 8009dca:	4618      	movlt	r0, r3
 8009dcc:	e7a6      	b.n	8009d1c <_printf_i+0x164>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	47d0      	blx	sl
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d09d      	beq.n	8009d18 <_printf_i+0x160>
 8009ddc:	3501      	adds	r5, #1
 8009dde:	68e3      	ldr	r3, [r4, #12]
 8009de0:	9903      	ldr	r1, [sp, #12]
 8009de2:	1a5b      	subs	r3, r3, r1
 8009de4:	42ab      	cmp	r3, r5
 8009de6:	dcf2      	bgt.n	8009dce <_printf_i+0x216>
 8009de8:	e7eb      	b.n	8009dc2 <_printf_i+0x20a>
 8009dea:	2500      	movs	r5, #0
 8009dec:	f104 0619 	add.w	r6, r4, #25
 8009df0:	e7f5      	b.n	8009dde <_printf_i+0x226>
 8009df2:	bf00      	nop
 8009df4:	0800ce6b 	.word	0x0800ce6b
 8009df8:	0800ce7c 	.word	0x0800ce7c

08009dfc <std>:
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	b510      	push	{r4, lr}
 8009e00:	4604      	mov	r4, r0
 8009e02:	e9c0 3300 	strd	r3, r3, [r0]
 8009e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e0a:	6083      	str	r3, [r0, #8]
 8009e0c:	8181      	strh	r1, [r0, #12]
 8009e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e10:	81c2      	strh	r2, [r0, #14]
 8009e12:	6183      	str	r3, [r0, #24]
 8009e14:	4619      	mov	r1, r3
 8009e16:	2208      	movs	r2, #8
 8009e18:	305c      	adds	r0, #92	; 0x5c
 8009e1a:	f000 f94d 	bl	800a0b8 <memset>
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <std+0x58>)
 8009e20:	6263      	str	r3, [r4, #36]	; 0x24
 8009e22:	4b0d      	ldr	r3, [pc, #52]	; (8009e58 <std+0x5c>)
 8009e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e26:	4b0d      	ldr	r3, [pc, #52]	; (8009e5c <std+0x60>)
 8009e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <std+0x64>)
 8009e2c:	6323      	str	r3, [r4, #48]	; 0x30
 8009e2e:	4b0d      	ldr	r3, [pc, #52]	; (8009e64 <std+0x68>)
 8009e30:	6224      	str	r4, [r4, #32]
 8009e32:	429c      	cmp	r4, r3
 8009e34:	d006      	beq.n	8009e44 <std+0x48>
 8009e36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009e3a:	4294      	cmp	r4, r2
 8009e3c:	d002      	beq.n	8009e44 <std+0x48>
 8009e3e:	33d0      	adds	r3, #208	; 0xd0
 8009e40:	429c      	cmp	r4, r3
 8009e42:	d105      	bne.n	8009e50 <std+0x54>
 8009e44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e4c:	f000 b9c2 	b.w	800a1d4 <__retarget_lock_init_recursive>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	bf00      	nop
 8009e54:	08009fc1 	.word	0x08009fc1
 8009e58:	08009fe3 	.word	0x08009fe3
 8009e5c:	0800a01b 	.word	0x0800a01b
 8009e60:	0800a03f 	.word	0x0800a03f
 8009e64:	200005b8 	.word	0x200005b8

08009e68 <stdio_exit_handler>:
 8009e68:	4a02      	ldr	r2, [pc, #8]	; (8009e74 <stdio_exit_handler+0xc>)
 8009e6a:	4903      	ldr	r1, [pc, #12]	; (8009e78 <stdio_exit_handler+0x10>)
 8009e6c:	4803      	ldr	r0, [pc, #12]	; (8009e7c <stdio_exit_handler+0x14>)
 8009e6e:	f000 b869 	b.w	8009f44 <_fwalk_sglue>
 8009e72:	bf00      	nop
 8009e74:	20000060 	.word	0x20000060
 8009e78:	0800c501 	.word	0x0800c501
 8009e7c:	200001d8 	.word	0x200001d8

08009e80 <cleanup_stdio>:
 8009e80:	6841      	ldr	r1, [r0, #4]
 8009e82:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <cleanup_stdio+0x34>)
 8009e84:	4299      	cmp	r1, r3
 8009e86:	b510      	push	{r4, lr}
 8009e88:	4604      	mov	r4, r0
 8009e8a:	d001      	beq.n	8009e90 <cleanup_stdio+0x10>
 8009e8c:	f002 fb38 	bl	800c500 <_fflush_r>
 8009e90:	68a1      	ldr	r1, [r4, #8]
 8009e92:	4b09      	ldr	r3, [pc, #36]	; (8009eb8 <cleanup_stdio+0x38>)
 8009e94:	4299      	cmp	r1, r3
 8009e96:	d002      	beq.n	8009e9e <cleanup_stdio+0x1e>
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f002 fb31 	bl	800c500 <_fflush_r>
 8009e9e:	68e1      	ldr	r1, [r4, #12]
 8009ea0:	4b06      	ldr	r3, [pc, #24]	; (8009ebc <cleanup_stdio+0x3c>)
 8009ea2:	4299      	cmp	r1, r3
 8009ea4:	d004      	beq.n	8009eb0 <cleanup_stdio+0x30>
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eac:	f002 bb28 	b.w	800c500 <_fflush_r>
 8009eb0:	bd10      	pop	{r4, pc}
 8009eb2:	bf00      	nop
 8009eb4:	200005b8 	.word	0x200005b8
 8009eb8:	20000620 	.word	0x20000620
 8009ebc:	20000688 	.word	0x20000688

08009ec0 <global_stdio_init.part.0>:
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <global_stdio_init.part.0+0x30>)
 8009ec4:	4c0b      	ldr	r4, [pc, #44]	; (8009ef4 <global_stdio_init.part.0+0x34>)
 8009ec6:	4a0c      	ldr	r2, [pc, #48]	; (8009ef8 <global_stdio_init.part.0+0x38>)
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2104      	movs	r1, #4
 8009ed0:	f7ff ff94 	bl	8009dfc <std>
 8009ed4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ed8:	2201      	movs	r2, #1
 8009eda:	2109      	movs	r1, #9
 8009edc:	f7ff ff8e 	bl	8009dfc <std>
 8009ee0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eea:	2112      	movs	r1, #18
 8009eec:	f7ff bf86 	b.w	8009dfc <std>
 8009ef0:	200006f0 	.word	0x200006f0
 8009ef4:	200005b8 	.word	0x200005b8
 8009ef8:	08009e69 	.word	0x08009e69

08009efc <__sfp_lock_acquire>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__sfp_lock_acquire+0x8>)
 8009efe:	f000 b96a 	b.w	800a1d6 <__retarget_lock_acquire_recursive>
 8009f02:	bf00      	nop
 8009f04:	200006f9 	.word	0x200006f9

08009f08 <__sfp_lock_release>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__sfp_lock_release+0x8>)
 8009f0a:	f000 b965 	b.w	800a1d8 <__retarget_lock_release_recursive>
 8009f0e:	bf00      	nop
 8009f10:	200006f9 	.word	0x200006f9

08009f14 <__sinit>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	4604      	mov	r4, r0
 8009f18:	f7ff fff0 	bl	8009efc <__sfp_lock_acquire>
 8009f1c:	6a23      	ldr	r3, [r4, #32]
 8009f1e:	b11b      	cbz	r3, 8009f28 <__sinit+0x14>
 8009f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f24:	f7ff bff0 	b.w	8009f08 <__sfp_lock_release>
 8009f28:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <__sinit+0x28>)
 8009f2a:	6223      	str	r3, [r4, #32]
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <__sinit+0x2c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1f5      	bne.n	8009f20 <__sinit+0xc>
 8009f34:	f7ff ffc4 	bl	8009ec0 <global_stdio_init.part.0>
 8009f38:	e7f2      	b.n	8009f20 <__sinit+0xc>
 8009f3a:	bf00      	nop
 8009f3c:	08009e81 	.word	0x08009e81
 8009f40:	200006f0 	.word	0x200006f0

08009f44 <_fwalk_sglue>:
 8009f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f48:	4607      	mov	r7, r0
 8009f4a:	4688      	mov	r8, r1
 8009f4c:	4614      	mov	r4, r2
 8009f4e:	2600      	movs	r6, #0
 8009f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f54:	f1b9 0901 	subs.w	r9, r9, #1
 8009f58:	d505      	bpl.n	8009f66 <_fwalk_sglue+0x22>
 8009f5a:	6824      	ldr	r4, [r4, #0]
 8009f5c:	2c00      	cmp	r4, #0
 8009f5e:	d1f7      	bne.n	8009f50 <_fwalk_sglue+0xc>
 8009f60:	4630      	mov	r0, r6
 8009f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d907      	bls.n	8009f7c <_fwalk_sglue+0x38>
 8009f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f70:	3301      	adds	r3, #1
 8009f72:	d003      	beq.n	8009f7c <_fwalk_sglue+0x38>
 8009f74:	4629      	mov	r1, r5
 8009f76:	4638      	mov	r0, r7
 8009f78:	47c0      	blx	r8
 8009f7a:	4306      	orrs	r6, r0
 8009f7c:	3568      	adds	r5, #104	; 0x68
 8009f7e:	e7e9      	b.n	8009f54 <_fwalk_sglue+0x10>

08009f80 <siprintf>:
 8009f80:	b40e      	push	{r1, r2, r3}
 8009f82:	b500      	push	{lr}
 8009f84:	b09c      	sub	sp, #112	; 0x70
 8009f86:	ab1d      	add	r3, sp, #116	; 0x74
 8009f88:	9002      	str	r0, [sp, #8]
 8009f8a:	9006      	str	r0, [sp, #24]
 8009f8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f90:	4809      	ldr	r0, [pc, #36]	; (8009fb8 <siprintf+0x38>)
 8009f92:	9107      	str	r1, [sp, #28]
 8009f94:	9104      	str	r1, [sp, #16]
 8009f96:	4909      	ldr	r1, [pc, #36]	; (8009fbc <siprintf+0x3c>)
 8009f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f9c:	9105      	str	r1, [sp, #20]
 8009f9e:	6800      	ldr	r0, [r0, #0]
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	a902      	add	r1, sp, #8
 8009fa4:	f002 f928 	bl	800c1f8 <_svfiprintf_r>
 8009fa8:	9b02      	ldr	r3, [sp, #8]
 8009faa:	2200      	movs	r2, #0
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	b01c      	add	sp, #112	; 0x70
 8009fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb4:	b003      	add	sp, #12
 8009fb6:	4770      	bx	lr
 8009fb8:	20000224 	.word	0x20000224
 8009fbc:	ffff0208 	.word	0xffff0208

08009fc0 <__sread>:
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc8:	f000 f8b6 	bl	800a138 <_read_r>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	bfab      	itete	ge
 8009fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009fd4:	181b      	addge	r3, r3, r0
 8009fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fda:	bfac      	ite	ge
 8009fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fde:	81a3      	strhlt	r3, [r4, #12]
 8009fe0:	bd10      	pop	{r4, pc}

08009fe2 <__swrite>:
 8009fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe6:	461f      	mov	r7, r3
 8009fe8:	898b      	ldrh	r3, [r1, #12]
 8009fea:	05db      	lsls	r3, r3, #23
 8009fec:	4605      	mov	r5, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	d505      	bpl.n	800a000 <__swrite+0x1e>
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f000 f88a 	bl	800a114 <_lseek_r>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	4632      	mov	r2, r6
 800a00e:	463b      	mov	r3, r7
 800a010:	4628      	mov	r0, r5
 800a012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a016:	f000 b8a1 	b.w	800a15c <_write_r>

0800a01a <__sseek>:
 800a01a:	b510      	push	{r4, lr}
 800a01c:	460c      	mov	r4, r1
 800a01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a022:	f000 f877 	bl	800a114 <_lseek_r>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	bf15      	itete	ne
 800a02c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a02e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a036:	81a3      	strheq	r3, [r4, #12]
 800a038:	bf18      	it	ne
 800a03a:	81a3      	strhne	r3, [r4, #12]
 800a03c:	bd10      	pop	{r4, pc}

0800a03e <__sclose>:
 800a03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a042:	f000 b857 	b.w	800a0f4 <_close_r>

0800a046 <_vsniprintf_r>:
 800a046:	b530      	push	{r4, r5, lr}
 800a048:	4614      	mov	r4, r2
 800a04a:	2c00      	cmp	r4, #0
 800a04c:	b09b      	sub	sp, #108	; 0x6c
 800a04e:	4605      	mov	r5, r0
 800a050:	461a      	mov	r2, r3
 800a052:	da05      	bge.n	800a060 <_vsniprintf_r+0x1a>
 800a054:	238b      	movs	r3, #139	; 0x8b
 800a056:	6003      	str	r3, [r0, #0]
 800a058:	f04f 30ff 	mov.w	r0, #4294967295
 800a05c:	b01b      	add	sp, #108	; 0x6c
 800a05e:	bd30      	pop	{r4, r5, pc}
 800a060:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a064:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a068:	bf14      	ite	ne
 800a06a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a06e:	4623      	moveq	r3, r4
 800a070:	9302      	str	r3, [sp, #8]
 800a072:	9305      	str	r3, [sp, #20]
 800a074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a078:	9100      	str	r1, [sp, #0]
 800a07a:	9104      	str	r1, [sp, #16]
 800a07c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a080:	4669      	mov	r1, sp
 800a082:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a084:	f002 f8b8 	bl	800c1f8 <_svfiprintf_r>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	bfbc      	itt	lt
 800a08c:	238b      	movlt	r3, #139	; 0x8b
 800a08e:	602b      	strlt	r3, [r5, #0]
 800a090:	2c00      	cmp	r4, #0
 800a092:	d0e3      	beq.n	800a05c <_vsniprintf_r+0x16>
 800a094:	9b00      	ldr	r3, [sp, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	e7df      	b.n	800a05c <_vsniprintf_r+0x16>

0800a09c <vsniprintf>:
 800a09c:	b507      	push	{r0, r1, r2, lr}
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	460a      	mov	r2, r1
 800a0a4:	4601      	mov	r1, r0
 800a0a6:	4803      	ldr	r0, [pc, #12]	; (800a0b4 <vsniprintf+0x18>)
 800a0a8:	6800      	ldr	r0, [r0, #0]
 800a0aa:	f7ff ffcc 	bl	800a046 <_vsniprintf_r>
 800a0ae:	b003      	add	sp, #12
 800a0b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0b4:	20000224 	.word	0x20000224

0800a0b8 <memset>:
 800a0b8:	4402      	add	r2, r0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d100      	bne.n	800a0c2 <memset+0xa>
 800a0c0:	4770      	bx	lr
 800a0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0c6:	e7f9      	b.n	800a0bc <memset+0x4>

0800a0c8 <strncmp>:
 800a0c8:	b510      	push	{r4, lr}
 800a0ca:	b16a      	cbz	r2, 800a0e8 <strncmp+0x20>
 800a0cc:	3901      	subs	r1, #1
 800a0ce:	1884      	adds	r4, r0, r2
 800a0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d103      	bne.n	800a0e4 <strncmp+0x1c>
 800a0dc:	42a0      	cmp	r0, r4
 800a0de:	d001      	beq.n	800a0e4 <strncmp+0x1c>
 800a0e0:	2a00      	cmp	r2, #0
 800a0e2:	d1f5      	bne.n	800a0d0 <strncmp+0x8>
 800a0e4:	1ad0      	subs	r0, r2, r3
 800a0e6:	bd10      	pop	{r4, pc}
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	e7fc      	b.n	800a0e6 <strncmp+0x1e>

0800a0ec <_localeconv_r>:
 800a0ec:	4800      	ldr	r0, [pc, #0]	; (800a0f0 <_localeconv_r+0x4>)
 800a0ee:	4770      	bx	lr
 800a0f0:	2000015c 	.word	0x2000015c

0800a0f4 <_close_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d06      	ldr	r5, [pc, #24]	; (800a110 <_close_r+0x1c>)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	602b      	str	r3, [r5, #0]
 800a100:	f7f8 ffdf 	bl	80030c2 <_close>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_close_r+0x1a>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_close_r+0x1a>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	200006f4 	.word	0x200006f4

0800a114 <_lseek_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d07      	ldr	r5, [pc, #28]	; (800a134 <_lseek_r+0x20>)
 800a118:	4604      	mov	r4, r0
 800a11a:	4608      	mov	r0, r1
 800a11c:	4611      	mov	r1, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	602a      	str	r2, [r5, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	f7f8 fff4 	bl	8003110 <_lseek>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_lseek_r+0x1e>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_lseek_r+0x1e>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	200006f4 	.word	0x200006f4

0800a138 <_read_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_read_r+0x20>)
 800a13c:	4604      	mov	r4, r0
 800a13e:	4608      	mov	r0, r1
 800a140:	4611      	mov	r1, r2
 800a142:	2200      	movs	r2, #0
 800a144:	602a      	str	r2, [r5, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f7f8 ff82 	bl	8003050 <_read>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_read_r+0x1e>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_read_r+0x1e>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	200006f4 	.word	0x200006f4

0800a15c <_write_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d07      	ldr	r5, [pc, #28]	; (800a17c <_write_r+0x20>)
 800a160:	4604      	mov	r4, r0
 800a162:	4608      	mov	r0, r1
 800a164:	4611      	mov	r1, r2
 800a166:	2200      	movs	r2, #0
 800a168:	602a      	str	r2, [r5, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f7f8 ff8d 	bl	800308a <_write>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_write_r+0x1e>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_write_r+0x1e>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	200006f4 	.word	0x200006f4

0800a180 <__errno>:
 800a180:	4b01      	ldr	r3, [pc, #4]	; (800a188 <__errno+0x8>)
 800a182:	6818      	ldr	r0, [r3, #0]
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	20000224 	.word	0x20000224

0800a18c <__libc_init_array>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	4d0d      	ldr	r5, [pc, #52]	; (800a1c4 <__libc_init_array+0x38>)
 800a190:	4c0d      	ldr	r4, [pc, #52]	; (800a1c8 <__libc_init_array+0x3c>)
 800a192:	1b64      	subs	r4, r4, r5
 800a194:	10a4      	asrs	r4, r4, #2
 800a196:	2600      	movs	r6, #0
 800a198:	42a6      	cmp	r6, r4
 800a19a:	d109      	bne.n	800a1b0 <__libc_init_array+0x24>
 800a19c:	4d0b      	ldr	r5, [pc, #44]	; (800a1cc <__libc_init_array+0x40>)
 800a19e:	4c0c      	ldr	r4, [pc, #48]	; (800a1d0 <__libc_init_array+0x44>)
 800a1a0:	f002 fd26 	bl	800cbf0 <_init>
 800a1a4:	1b64      	subs	r4, r4, r5
 800a1a6:	10a4      	asrs	r4, r4, #2
 800a1a8:	2600      	movs	r6, #0
 800a1aa:	42a6      	cmp	r6, r4
 800a1ac:	d105      	bne.n	800a1ba <__libc_init_array+0x2e>
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b4:	4798      	blx	r3
 800a1b6:	3601      	adds	r6, #1
 800a1b8:	e7ee      	b.n	800a198 <__libc_init_array+0xc>
 800a1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1be:	4798      	blx	r3
 800a1c0:	3601      	adds	r6, #1
 800a1c2:	e7f2      	b.n	800a1aa <__libc_init_array+0x1e>
 800a1c4:	0800d134 	.word	0x0800d134
 800a1c8:	0800d134 	.word	0x0800d134
 800a1cc:	0800d134 	.word	0x0800d134
 800a1d0:	0800d138 	.word	0x0800d138

0800a1d4 <__retarget_lock_init_recursive>:
 800a1d4:	4770      	bx	lr

0800a1d6 <__retarget_lock_acquire_recursive>:
 800a1d6:	4770      	bx	lr

0800a1d8 <__retarget_lock_release_recursive>:
 800a1d8:	4770      	bx	lr

0800a1da <memcpy>:
 800a1da:	440a      	add	r2, r1
 800a1dc:	4291      	cmp	r1, r2
 800a1de:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1e2:	d100      	bne.n	800a1e6 <memcpy+0xc>
 800a1e4:	4770      	bx	lr
 800a1e6:	b510      	push	{r4, lr}
 800a1e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1f0:	4291      	cmp	r1, r2
 800a1f2:	d1f9      	bne.n	800a1e8 <memcpy+0xe>
 800a1f4:	bd10      	pop	{r4, pc}
	...

0800a1f8 <nan>:
 800a1f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a200 <nan+0x8>
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	00000000 	.word	0x00000000
 800a204:	7ff80000 	.word	0x7ff80000

0800a208 <quorem>:
 800a208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	6903      	ldr	r3, [r0, #16]
 800a20e:	690c      	ldr	r4, [r1, #16]
 800a210:	42a3      	cmp	r3, r4
 800a212:	4607      	mov	r7, r0
 800a214:	db7e      	blt.n	800a314 <quorem+0x10c>
 800a216:	3c01      	subs	r4, #1
 800a218:	f101 0814 	add.w	r8, r1, #20
 800a21c:	f100 0514 	add.w	r5, r0, #20
 800a220:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a22a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a22e:	3301      	adds	r3, #1
 800a230:	429a      	cmp	r2, r3
 800a232:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a236:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a23a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a23e:	d331      	bcc.n	800a2a4 <quorem+0x9c>
 800a240:	f04f 0e00 	mov.w	lr, #0
 800a244:	4640      	mov	r0, r8
 800a246:	46ac      	mov	ip, r5
 800a248:	46f2      	mov	sl, lr
 800a24a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a24e:	b293      	uxth	r3, r2
 800a250:	fb06 e303 	mla	r3, r6, r3, lr
 800a254:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a258:	0c1a      	lsrs	r2, r3, #16
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	ebaa 0303 	sub.w	r3, sl, r3
 800a260:	f8dc a000 	ldr.w	sl, [ip]
 800a264:	fa13 f38a 	uxtah	r3, r3, sl
 800a268:	fb06 220e 	mla	r2, r6, lr, r2
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	9b00      	ldr	r3, [sp, #0]
 800a270:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a274:	b292      	uxth	r2, r2
 800a276:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a27a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a27e:	f8bd 3000 	ldrh.w	r3, [sp]
 800a282:	4581      	cmp	r9, r0
 800a284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a288:	f84c 3b04 	str.w	r3, [ip], #4
 800a28c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a290:	d2db      	bcs.n	800a24a <quorem+0x42>
 800a292:	f855 300b 	ldr.w	r3, [r5, fp]
 800a296:	b92b      	cbnz	r3, 800a2a4 <quorem+0x9c>
 800a298:	9b01      	ldr	r3, [sp, #4]
 800a29a:	3b04      	subs	r3, #4
 800a29c:	429d      	cmp	r5, r3
 800a29e:	461a      	mov	r2, r3
 800a2a0:	d32c      	bcc.n	800a2fc <quorem+0xf4>
 800a2a2:	613c      	str	r4, [r7, #16]
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f001 fd59 	bl	800bd5c <__mcmp>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	db22      	blt.n	800a2f4 <quorem+0xec>
 800a2ae:	3601      	adds	r6, #1
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2b8:	f8d1 c000 	ldr.w	ip, [r1]
 800a2bc:	b293      	uxth	r3, r2
 800a2be:	1ac3      	subs	r3, r0, r3
 800a2c0:	0c12      	lsrs	r2, r2, #16
 800a2c2:	fa13 f38c 	uxtah	r3, r3, ip
 800a2c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a2ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2d4:	45c1      	cmp	r9, r8
 800a2d6:	f841 3b04 	str.w	r3, [r1], #4
 800a2da:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a2de:	d2e9      	bcs.n	800a2b4 <quorem+0xac>
 800a2e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2e8:	b922      	cbnz	r2, 800a2f4 <quorem+0xec>
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	429d      	cmp	r5, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	d30a      	bcc.n	800a308 <quorem+0x100>
 800a2f2:	613c      	str	r4, [r7, #16]
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	b003      	add	sp, #12
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	6812      	ldr	r2, [r2, #0]
 800a2fe:	3b04      	subs	r3, #4
 800a300:	2a00      	cmp	r2, #0
 800a302:	d1ce      	bne.n	800a2a2 <quorem+0x9a>
 800a304:	3c01      	subs	r4, #1
 800a306:	e7c9      	b.n	800a29c <quorem+0x94>
 800a308:	6812      	ldr	r2, [r2, #0]
 800a30a:	3b04      	subs	r3, #4
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	d1f0      	bne.n	800a2f2 <quorem+0xea>
 800a310:	3c01      	subs	r4, #1
 800a312:	e7eb      	b.n	800a2ec <quorem+0xe4>
 800a314:	2000      	movs	r0, #0
 800a316:	e7ee      	b.n	800a2f6 <quorem+0xee>

0800a318 <_dtoa_r>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	ed2d 8b04 	vpush	{d8-d9}
 800a320:	69c5      	ldr	r5, [r0, #28]
 800a322:	b093      	sub	sp, #76	; 0x4c
 800a324:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a328:	ec57 6b10 	vmov	r6, r7, d0
 800a32c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a330:	9107      	str	r1, [sp, #28]
 800a332:	4604      	mov	r4, r0
 800a334:	920a      	str	r2, [sp, #40]	; 0x28
 800a336:	930d      	str	r3, [sp, #52]	; 0x34
 800a338:	b975      	cbnz	r5, 800a358 <_dtoa_r+0x40>
 800a33a:	2010      	movs	r0, #16
 800a33c:	f001 f982 	bl	800b644 <malloc>
 800a340:	4602      	mov	r2, r0
 800a342:	61e0      	str	r0, [r4, #28]
 800a344:	b920      	cbnz	r0, 800a350 <_dtoa_r+0x38>
 800a346:	4bae      	ldr	r3, [pc, #696]	; (800a600 <_dtoa_r+0x2e8>)
 800a348:	21ef      	movs	r1, #239	; 0xef
 800a34a:	48ae      	ldr	r0, [pc, #696]	; (800a604 <_dtoa_r+0x2ec>)
 800a34c:	f002 f92a 	bl	800c5a4 <__assert_func>
 800a350:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a354:	6005      	str	r5, [r0, #0]
 800a356:	60c5      	str	r5, [r0, #12]
 800a358:	69e3      	ldr	r3, [r4, #28]
 800a35a:	6819      	ldr	r1, [r3, #0]
 800a35c:	b151      	cbz	r1, 800a374 <_dtoa_r+0x5c>
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	604a      	str	r2, [r1, #4]
 800a362:	2301      	movs	r3, #1
 800a364:	4093      	lsls	r3, r2
 800a366:	608b      	str	r3, [r1, #8]
 800a368:	4620      	mov	r0, r4
 800a36a:	f001 fa71 	bl	800b850 <_Bfree>
 800a36e:	69e3      	ldr	r3, [r4, #28]
 800a370:	2200      	movs	r2, #0
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	1e3b      	subs	r3, r7, #0
 800a376:	bfbb      	ittet	lt
 800a378:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a37c:	9303      	strlt	r3, [sp, #12]
 800a37e:	2300      	movge	r3, #0
 800a380:	2201      	movlt	r2, #1
 800a382:	bfac      	ite	ge
 800a384:	f8c8 3000 	strge.w	r3, [r8]
 800a388:	f8c8 2000 	strlt.w	r2, [r8]
 800a38c:	4b9e      	ldr	r3, [pc, #632]	; (800a608 <_dtoa_r+0x2f0>)
 800a38e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a392:	ea33 0308 	bics.w	r3, r3, r8
 800a396:	d11b      	bne.n	800a3d0 <_dtoa_r+0xb8>
 800a398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a39a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a3a4:	4333      	orrs	r3, r6
 800a3a6:	f000 8593 	beq.w	800aed0 <_dtoa_r+0xbb8>
 800a3aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ac:	b963      	cbnz	r3, 800a3c8 <_dtoa_r+0xb0>
 800a3ae:	4b97      	ldr	r3, [pc, #604]	; (800a60c <_dtoa_r+0x2f4>)
 800a3b0:	e027      	b.n	800a402 <_dtoa_r+0xea>
 800a3b2:	4b97      	ldr	r3, [pc, #604]	; (800a610 <_dtoa_r+0x2f8>)
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3ba:	6013      	str	r3, [r2, #0]
 800a3bc:	9800      	ldr	r0, [sp, #0]
 800a3be:	b013      	add	sp, #76	; 0x4c
 800a3c0:	ecbd 8b04 	vpop	{d8-d9}
 800a3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c8:	4b90      	ldr	r3, [pc, #576]	; (800a60c <_dtoa_r+0x2f4>)
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	3303      	adds	r3, #3
 800a3ce:	e7f3      	b.n	800a3b8 <_dtoa_r+0xa0>
 800a3d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	ec51 0b17 	vmov	r0, r1, d7
 800a3da:	eeb0 8a47 	vmov.f32	s16, s14
 800a3de:	eef0 8a67 	vmov.f32	s17, s15
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f7f6 fb90 	bl	8000b08 <__aeabi_dcmpeq>
 800a3e8:	4681      	mov	r9, r0
 800a3ea:	b160      	cbz	r0, 800a406 <_dtoa_r+0xee>
 800a3ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 8568 	beq.w	800aeca <_dtoa_r+0xbb2>
 800a3fa:	4b86      	ldr	r3, [pc, #536]	; (800a614 <_dtoa_r+0x2fc>)
 800a3fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3fe:	6013      	str	r3, [r2, #0]
 800a400:	3b01      	subs	r3, #1
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	e7da      	b.n	800a3bc <_dtoa_r+0xa4>
 800a406:	aa10      	add	r2, sp, #64	; 0x40
 800a408:	a911      	add	r1, sp, #68	; 0x44
 800a40a:	4620      	mov	r0, r4
 800a40c:	eeb0 0a48 	vmov.f32	s0, s16
 800a410:	eef0 0a68 	vmov.f32	s1, s17
 800a414:	f001 fdb8 	bl	800bf88 <__d2b>
 800a418:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a41c:	4682      	mov	sl, r0
 800a41e:	2d00      	cmp	r5, #0
 800a420:	d07f      	beq.n	800a522 <_dtoa_r+0x20a>
 800a422:	ee18 3a90 	vmov	r3, s17
 800a426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a42a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a42e:	ec51 0b18 	vmov	r0, r1, d8
 800a432:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a43a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a43e:	4619      	mov	r1, r3
 800a440:	2200      	movs	r2, #0
 800a442:	4b75      	ldr	r3, [pc, #468]	; (800a618 <_dtoa_r+0x300>)
 800a444:	f7f5 ff40 	bl	80002c8 <__aeabi_dsub>
 800a448:	a367      	add	r3, pc, #412	; (adr r3, 800a5e8 <_dtoa_r+0x2d0>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f6 f8f3 	bl	8000638 <__aeabi_dmul>
 800a452:	a367      	add	r3, pc, #412	; (adr r3, 800a5f0 <_dtoa_r+0x2d8>)
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f7f5 ff38 	bl	80002cc <__adddf3>
 800a45c:	4606      	mov	r6, r0
 800a45e:	4628      	mov	r0, r5
 800a460:	460f      	mov	r7, r1
 800a462:	f7f6 f87f 	bl	8000564 <__aeabi_i2d>
 800a466:	a364      	add	r3, pc, #400	; (adr r3, 800a5f8 <_dtoa_r+0x2e0>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f6 f8e4 	bl	8000638 <__aeabi_dmul>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4630      	mov	r0, r6
 800a476:	4639      	mov	r1, r7
 800a478:	f7f5 ff28 	bl	80002cc <__adddf3>
 800a47c:	4606      	mov	r6, r0
 800a47e:	460f      	mov	r7, r1
 800a480:	f7f6 fb8a 	bl	8000b98 <__aeabi_d2iz>
 800a484:	2200      	movs	r2, #0
 800a486:	4683      	mov	fp, r0
 800a488:	2300      	movs	r3, #0
 800a48a:	4630      	mov	r0, r6
 800a48c:	4639      	mov	r1, r7
 800a48e:	f7f6 fb45 	bl	8000b1c <__aeabi_dcmplt>
 800a492:	b148      	cbz	r0, 800a4a8 <_dtoa_r+0x190>
 800a494:	4658      	mov	r0, fp
 800a496:	f7f6 f865 	bl	8000564 <__aeabi_i2d>
 800a49a:	4632      	mov	r2, r6
 800a49c:	463b      	mov	r3, r7
 800a49e:	f7f6 fb33 	bl	8000b08 <__aeabi_dcmpeq>
 800a4a2:	b908      	cbnz	r0, 800a4a8 <_dtoa_r+0x190>
 800a4a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4a8:	f1bb 0f16 	cmp.w	fp, #22
 800a4ac:	d857      	bhi.n	800a55e <_dtoa_r+0x246>
 800a4ae:	4b5b      	ldr	r3, [pc, #364]	; (800a61c <_dtoa_r+0x304>)
 800a4b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	ec51 0b18 	vmov	r0, r1, d8
 800a4bc:	f7f6 fb2e 	bl	8000b1c <__aeabi_dcmplt>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d04e      	beq.n	800a562 <_dtoa_r+0x24a>
 800a4c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a4cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4ce:	1b5b      	subs	r3, r3, r5
 800a4d0:	1e5a      	subs	r2, r3, #1
 800a4d2:	bf45      	ittet	mi
 800a4d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a4d8:	9305      	strmi	r3, [sp, #20]
 800a4da:	2300      	movpl	r3, #0
 800a4dc:	2300      	movmi	r3, #0
 800a4de:	9206      	str	r2, [sp, #24]
 800a4e0:	bf54      	ite	pl
 800a4e2:	9305      	strpl	r3, [sp, #20]
 800a4e4:	9306      	strmi	r3, [sp, #24]
 800a4e6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ea:	db3c      	blt.n	800a566 <_dtoa_r+0x24e>
 800a4ec:	9b06      	ldr	r3, [sp, #24]
 800a4ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a4f2:	445b      	add	r3, fp
 800a4f4:	9306      	str	r3, [sp, #24]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	9308      	str	r3, [sp, #32]
 800a4fa:	9b07      	ldr	r3, [sp, #28]
 800a4fc:	2b09      	cmp	r3, #9
 800a4fe:	d868      	bhi.n	800a5d2 <_dtoa_r+0x2ba>
 800a500:	2b05      	cmp	r3, #5
 800a502:	bfc4      	itt	gt
 800a504:	3b04      	subgt	r3, #4
 800a506:	9307      	strgt	r3, [sp, #28]
 800a508:	9b07      	ldr	r3, [sp, #28]
 800a50a:	f1a3 0302 	sub.w	r3, r3, #2
 800a50e:	bfcc      	ite	gt
 800a510:	2500      	movgt	r5, #0
 800a512:	2501      	movle	r5, #1
 800a514:	2b03      	cmp	r3, #3
 800a516:	f200 8085 	bhi.w	800a624 <_dtoa_r+0x30c>
 800a51a:	e8df f003 	tbb	[pc, r3]
 800a51e:	3b2e      	.short	0x3b2e
 800a520:	5839      	.short	0x5839
 800a522:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a526:	441d      	add	r5, r3
 800a528:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	bfc1      	itttt	gt
 800a530:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a534:	fa08 f803 	lslgt.w	r8, r8, r3
 800a538:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a53c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a540:	bfd6      	itet	le
 800a542:	f1c3 0320 	rsble	r3, r3, #32
 800a546:	ea48 0003 	orrgt.w	r0, r8, r3
 800a54a:	fa06 f003 	lslle.w	r0, r6, r3
 800a54e:	f7f5 fff9 	bl	8000544 <__aeabi_ui2d>
 800a552:	2201      	movs	r2, #1
 800a554:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a558:	3d01      	subs	r5, #1
 800a55a:	920e      	str	r2, [sp, #56]	; 0x38
 800a55c:	e76f      	b.n	800a43e <_dtoa_r+0x126>
 800a55e:	2301      	movs	r3, #1
 800a560:	e7b3      	b.n	800a4ca <_dtoa_r+0x1b2>
 800a562:	900c      	str	r0, [sp, #48]	; 0x30
 800a564:	e7b2      	b.n	800a4cc <_dtoa_r+0x1b4>
 800a566:	9b05      	ldr	r3, [sp, #20]
 800a568:	eba3 030b 	sub.w	r3, r3, fp
 800a56c:	9305      	str	r3, [sp, #20]
 800a56e:	f1cb 0300 	rsb	r3, fp, #0
 800a572:	9308      	str	r3, [sp, #32]
 800a574:	2300      	movs	r3, #0
 800a576:	930b      	str	r3, [sp, #44]	; 0x2c
 800a578:	e7bf      	b.n	800a4fa <_dtoa_r+0x1e2>
 800a57a:	2300      	movs	r3, #0
 800a57c:	9309      	str	r3, [sp, #36]	; 0x24
 800a57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a580:	2b00      	cmp	r3, #0
 800a582:	dc52      	bgt.n	800a62a <_dtoa_r+0x312>
 800a584:	2301      	movs	r3, #1
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	461a      	mov	r2, r3
 800a58c:	920a      	str	r2, [sp, #40]	; 0x28
 800a58e:	e00b      	b.n	800a5a8 <_dtoa_r+0x290>
 800a590:	2301      	movs	r3, #1
 800a592:	e7f3      	b.n	800a57c <_dtoa_r+0x264>
 800a594:	2300      	movs	r3, #0
 800a596:	9309      	str	r3, [sp, #36]	; 0x24
 800a598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a59a:	445b      	add	r3, fp
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	bfb8      	it	lt
 800a5a6:	2301      	movlt	r3, #1
 800a5a8:	69e0      	ldr	r0, [r4, #28]
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	2204      	movs	r2, #4
 800a5ae:	f102 0614 	add.w	r6, r2, #20
 800a5b2:	429e      	cmp	r6, r3
 800a5b4:	d93d      	bls.n	800a632 <_dtoa_r+0x31a>
 800a5b6:	6041      	str	r1, [r0, #4]
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f001 f909 	bl	800b7d0 <_Balloc>
 800a5be:	9000      	str	r0, [sp, #0]
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d139      	bne.n	800a638 <_dtoa_r+0x320>
 800a5c4:	4b16      	ldr	r3, [pc, #88]	; (800a620 <_dtoa_r+0x308>)
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	f240 11af 	movw	r1, #431	; 0x1af
 800a5cc:	e6bd      	b.n	800a34a <_dtoa_r+0x32>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e7e1      	b.n	800a596 <_dtoa_r+0x27e>
 800a5d2:	2501      	movs	r5, #1
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	9307      	str	r3, [sp, #28]
 800a5d8:	9509      	str	r5, [sp, #36]	; 0x24
 800a5da:	f04f 33ff 	mov.w	r3, #4294967295
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	9304      	str	r3, [sp, #16]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2312      	movs	r3, #18
 800a5e6:	e7d1      	b.n	800a58c <_dtoa_r+0x274>
 800a5e8:	636f4361 	.word	0x636f4361
 800a5ec:	3fd287a7 	.word	0x3fd287a7
 800a5f0:	8b60c8b3 	.word	0x8b60c8b3
 800a5f4:	3fc68a28 	.word	0x3fc68a28
 800a5f8:	509f79fb 	.word	0x509f79fb
 800a5fc:	3fd34413 	.word	0x3fd34413
 800a600:	0800cea2 	.word	0x0800cea2
 800a604:	0800ceb9 	.word	0x0800ceb9
 800a608:	7ff00000 	.word	0x7ff00000
 800a60c:	0800ce9e 	.word	0x0800ce9e
 800a610:	0800ce95 	.word	0x0800ce95
 800a614:	0800ce6a 	.word	0x0800ce6a
 800a618:	3ff80000 	.word	0x3ff80000
 800a61c:	0800d008 	.word	0x0800d008
 800a620:	0800cf11 	.word	0x0800cf11
 800a624:	2301      	movs	r3, #1
 800a626:	9309      	str	r3, [sp, #36]	; 0x24
 800a628:	e7d7      	b.n	800a5da <_dtoa_r+0x2c2>
 800a62a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a62c:	9301      	str	r3, [sp, #4]
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	e7ba      	b.n	800a5a8 <_dtoa_r+0x290>
 800a632:	3101      	adds	r1, #1
 800a634:	0052      	lsls	r2, r2, #1
 800a636:	e7ba      	b.n	800a5ae <_dtoa_r+0x296>
 800a638:	69e3      	ldr	r3, [r4, #28]
 800a63a:	9a00      	ldr	r2, [sp, #0]
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	9b04      	ldr	r3, [sp, #16]
 800a640:	2b0e      	cmp	r3, #14
 800a642:	f200 80a8 	bhi.w	800a796 <_dtoa_r+0x47e>
 800a646:	2d00      	cmp	r5, #0
 800a648:	f000 80a5 	beq.w	800a796 <_dtoa_r+0x47e>
 800a64c:	f1bb 0f00 	cmp.w	fp, #0
 800a650:	dd38      	ble.n	800a6c4 <_dtoa_r+0x3ac>
 800a652:	4bc0      	ldr	r3, [pc, #768]	; (800a954 <_dtoa_r+0x63c>)
 800a654:	f00b 020f 	and.w	r2, fp, #15
 800a658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a65c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a660:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a664:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a668:	d019      	beq.n	800a69e <_dtoa_r+0x386>
 800a66a:	4bbb      	ldr	r3, [pc, #748]	; (800a958 <_dtoa_r+0x640>)
 800a66c:	ec51 0b18 	vmov	r0, r1, d8
 800a670:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a674:	f7f6 f90a 	bl	800088c <__aeabi_ddiv>
 800a678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a67c:	f008 080f 	and.w	r8, r8, #15
 800a680:	2503      	movs	r5, #3
 800a682:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a958 <_dtoa_r+0x640>
 800a686:	f1b8 0f00 	cmp.w	r8, #0
 800a68a:	d10a      	bne.n	800a6a2 <_dtoa_r+0x38a>
 800a68c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a690:	4632      	mov	r2, r6
 800a692:	463b      	mov	r3, r7
 800a694:	f7f6 f8fa 	bl	800088c <__aeabi_ddiv>
 800a698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a69c:	e02b      	b.n	800a6f6 <_dtoa_r+0x3de>
 800a69e:	2502      	movs	r5, #2
 800a6a0:	e7ef      	b.n	800a682 <_dtoa_r+0x36a>
 800a6a2:	f018 0f01 	tst.w	r8, #1
 800a6a6:	d008      	beq.n	800a6ba <_dtoa_r+0x3a2>
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a6b0:	f7f5 ffc2 	bl	8000638 <__aeabi_dmul>
 800a6b4:	3501      	adds	r5, #1
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a6be:	f109 0908 	add.w	r9, r9, #8
 800a6c2:	e7e0      	b.n	800a686 <_dtoa_r+0x36e>
 800a6c4:	f000 809f 	beq.w	800a806 <_dtoa_r+0x4ee>
 800a6c8:	f1cb 0600 	rsb	r6, fp, #0
 800a6cc:	4ba1      	ldr	r3, [pc, #644]	; (800a954 <_dtoa_r+0x63c>)
 800a6ce:	4fa2      	ldr	r7, [pc, #648]	; (800a958 <_dtoa_r+0x640>)
 800a6d0:	f006 020f 	and.w	r2, r6, #15
 800a6d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6dc:	ec51 0b18 	vmov	r0, r1, d8
 800a6e0:	f7f5 ffaa 	bl	8000638 <__aeabi_dmul>
 800a6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6e8:	1136      	asrs	r6, r6, #4
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2502      	movs	r5, #2
 800a6ee:	2e00      	cmp	r6, #0
 800a6f0:	d17e      	bne.n	800a7f0 <_dtoa_r+0x4d8>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1d0      	bne.n	800a698 <_dtoa_r+0x380>
 800a6f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8084 	beq.w	800a80a <_dtoa_r+0x4f2>
 800a702:	4b96      	ldr	r3, [pc, #600]	; (800a95c <_dtoa_r+0x644>)
 800a704:	2200      	movs	r2, #0
 800a706:	4640      	mov	r0, r8
 800a708:	4649      	mov	r1, r9
 800a70a:	f7f6 fa07 	bl	8000b1c <__aeabi_dcmplt>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d07b      	beq.n	800a80a <_dtoa_r+0x4f2>
 800a712:	9b04      	ldr	r3, [sp, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d078      	beq.n	800a80a <_dtoa_r+0x4f2>
 800a718:	9b01      	ldr	r3, [sp, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dd39      	ble.n	800a792 <_dtoa_r+0x47a>
 800a71e:	4b90      	ldr	r3, [pc, #576]	; (800a960 <_dtoa_r+0x648>)
 800a720:	2200      	movs	r2, #0
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f5 ff87 	bl	8000638 <__aeabi_dmul>
 800a72a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a72e:	9e01      	ldr	r6, [sp, #4]
 800a730:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a734:	3501      	adds	r5, #1
 800a736:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a73a:	4628      	mov	r0, r5
 800a73c:	f7f5 ff12 	bl	8000564 <__aeabi_i2d>
 800a740:	4642      	mov	r2, r8
 800a742:	464b      	mov	r3, r9
 800a744:	f7f5 ff78 	bl	8000638 <__aeabi_dmul>
 800a748:	4b86      	ldr	r3, [pc, #536]	; (800a964 <_dtoa_r+0x64c>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	f7f5 fdbe 	bl	80002cc <__adddf3>
 800a750:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a758:	9303      	str	r3, [sp, #12]
 800a75a:	2e00      	cmp	r6, #0
 800a75c:	d158      	bne.n	800a810 <_dtoa_r+0x4f8>
 800a75e:	4b82      	ldr	r3, [pc, #520]	; (800a968 <_dtoa_r+0x650>)
 800a760:	2200      	movs	r2, #0
 800a762:	4640      	mov	r0, r8
 800a764:	4649      	mov	r1, r9
 800a766:	f7f5 fdaf 	bl	80002c8 <__aeabi_dsub>
 800a76a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a76e:	4680      	mov	r8, r0
 800a770:	4689      	mov	r9, r1
 800a772:	f7f6 f9f1 	bl	8000b58 <__aeabi_dcmpgt>
 800a776:	2800      	cmp	r0, #0
 800a778:	f040 8296 	bne.w	800aca8 <_dtoa_r+0x990>
 800a77c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a780:	4640      	mov	r0, r8
 800a782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a786:	4649      	mov	r1, r9
 800a788:	f7f6 f9c8 	bl	8000b1c <__aeabi_dcmplt>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	f040 8289 	bne.w	800aca4 <_dtoa_r+0x98c>
 800a792:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f2c0 814e 	blt.w	800aa3a <_dtoa_r+0x722>
 800a79e:	f1bb 0f0e 	cmp.w	fp, #14
 800a7a2:	f300 814a 	bgt.w	800aa3a <_dtoa_r+0x722>
 800a7a6:	4b6b      	ldr	r3, [pc, #428]	; (800a954 <_dtoa_r+0x63c>)
 800a7a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a7ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f280 80dc 	bge.w	800a970 <_dtoa_r+0x658>
 800a7b8:	9b04      	ldr	r3, [sp, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f300 80d8 	bgt.w	800a970 <_dtoa_r+0x658>
 800a7c0:	f040 826f 	bne.w	800aca2 <_dtoa_r+0x98a>
 800a7c4:	4b68      	ldr	r3, [pc, #416]	; (800a968 <_dtoa_r+0x650>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	f7f5 ff34 	bl	8000638 <__aeabi_dmul>
 800a7d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d4:	f7f6 f9b6 	bl	8000b44 <__aeabi_dcmpge>
 800a7d8:	9e04      	ldr	r6, [sp, #16]
 800a7da:	4637      	mov	r7, r6
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f040 8245 	bne.w	800ac6c <_dtoa_r+0x954>
 800a7e2:	9d00      	ldr	r5, [sp, #0]
 800a7e4:	2331      	movs	r3, #49	; 0x31
 800a7e6:	f805 3b01 	strb.w	r3, [r5], #1
 800a7ea:	f10b 0b01 	add.w	fp, fp, #1
 800a7ee:	e241      	b.n	800ac74 <_dtoa_r+0x95c>
 800a7f0:	07f2      	lsls	r2, r6, #31
 800a7f2:	d505      	bpl.n	800a800 <_dtoa_r+0x4e8>
 800a7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7f8:	f7f5 ff1e 	bl	8000638 <__aeabi_dmul>
 800a7fc:	3501      	adds	r5, #1
 800a7fe:	2301      	movs	r3, #1
 800a800:	1076      	asrs	r6, r6, #1
 800a802:	3708      	adds	r7, #8
 800a804:	e773      	b.n	800a6ee <_dtoa_r+0x3d6>
 800a806:	2502      	movs	r5, #2
 800a808:	e775      	b.n	800a6f6 <_dtoa_r+0x3de>
 800a80a:	9e04      	ldr	r6, [sp, #16]
 800a80c:	465f      	mov	r7, fp
 800a80e:	e792      	b.n	800a736 <_dtoa_r+0x41e>
 800a810:	9900      	ldr	r1, [sp, #0]
 800a812:	4b50      	ldr	r3, [pc, #320]	; (800a954 <_dtoa_r+0x63c>)
 800a814:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a818:	4431      	add	r1, r6
 800a81a:	9102      	str	r1, [sp, #8]
 800a81c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a81e:	eeb0 9a47 	vmov.f32	s18, s14
 800a822:	eef0 9a67 	vmov.f32	s19, s15
 800a826:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a82a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a82e:	2900      	cmp	r1, #0
 800a830:	d044      	beq.n	800a8bc <_dtoa_r+0x5a4>
 800a832:	494e      	ldr	r1, [pc, #312]	; (800a96c <_dtoa_r+0x654>)
 800a834:	2000      	movs	r0, #0
 800a836:	f7f6 f829 	bl	800088c <__aeabi_ddiv>
 800a83a:	ec53 2b19 	vmov	r2, r3, d9
 800a83e:	f7f5 fd43 	bl	80002c8 <__aeabi_dsub>
 800a842:	9d00      	ldr	r5, [sp, #0]
 800a844:	ec41 0b19 	vmov	d9, r0, r1
 800a848:	4649      	mov	r1, r9
 800a84a:	4640      	mov	r0, r8
 800a84c:	f7f6 f9a4 	bl	8000b98 <__aeabi_d2iz>
 800a850:	4606      	mov	r6, r0
 800a852:	f7f5 fe87 	bl	8000564 <__aeabi_i2d>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	4640      	mov	r0, r8
 800a85c:	4649      	mov	r1, r9
 800a85e:	f7f5 fd33 	bl	80002c8 <__aeabi_dsub>
 800a862:	3630      	adds	r6, #48	; 0x30
 800a864:	f805 6b01 	strb.w	r6, [r5], #1
 800a868:	ec53 2b19 	vmov	r2, r3, d9
 800a86c:	4680      	mov	r8, r0
 800a86e:	4689      	mov	r9, r1
 800a870:	f7f6 f954 	bl	8000b1c <__aeabi_dcmplt>
 800a874:	2800      	cmp	r0, #0
 800a876:	d164      	bne.n	800a942 <_dtoa_r+0x62a>
 800a878:	4642      	mov	r2, r8
 800a87a:	464b      	mov	r3, r9
 800a87c:	4937      	ldr	r1, [pc, #220]	; (800a95c <_dtoa_r+0x644>)
 800a87e:	2000      	movs	r0, #0
 800a880:	f7f5 fd22 	bl	80002c8 <__aeabi_dsub>
 800a884:	ec53 2b19 	vmov	r2, r3, d9
 800a888:	f7f6 f948 	bl	8000b1c <__aeabi_dcmplt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f040 80b6 	bne.w	800a9fe <_dtoa_r+0x6e6>
 800a892:	9b02      	ldr	r3, [sp, #8]
 800a894:	429d      	cmp	r5, r3
 800a896:	f43f af7c 	beq.w	800a792 <_dtoa_r+0x47a>
 800a89a:	4b31      	ldr	r3, [pc, #196]	; (800a960 <_dtoa_r+0x648>)
 800a89c:	ec51 0b19 	vmov	r0, r1, d9
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f7f5 fec9 	bl	8000638 <__aeabi_dmul>
 800a8a6:	4b2e      	ldr	r3, [pc, #184]	; (800a960 <_dtoa_r+0x648>)
 800a8a8:	ec41 0b19 	vmov	d9, r0, r1
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	f7f5 fec1 	bl	8000638 <__aeabi_dmul>
 800a8b6:	4680      	mov	r8, r0
 800a8b8:	4689      	mov	r9, r1
 800a8ba:	e7c5      	b.n	800a848 <_dtoa_r+0x530>
 800a8bc:	ec51 0b17 	vmov	r0, r1, d7
 800a8c0:	f7f5 feba 	bl	8000638 <__aeabi_dmul>
 800a8c4:	9b02      	ldr	r3, [sp, #8]
 800a8c6:	9d00      	ldr	r5, [sp, #0]
 800a8c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8ca:	ec41 0b19 	vmov	d9, r0, r1
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	f7f6 f961 	bl	8000b98 <__aeabi_d2iz>
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	f7f5 fe44 	bl	8000564 <__aeabi_i2d>
 800a8dc:	3630      	adds	r6, #48	; 0x30
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	f7f5 fcef 	bl	80002c8 <__aeabi_dsub>
 800a8ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a8ee:	9b02      	ldr	r3, [sp, #8]
 800a8f0:	429d      	cmp	r5, r3
 800a8f2:	4680      	mov	r8, r0
 800a8f4:	4689      	mov	r9, r1
 800a8f6:	f04f 0200 	mov.w	r2, #0
 800a8fa:	d124      	bne.n	800a946 <_dtoa_r+0x62e>
 800a8fc:	4b1b      	ldr	r3, [pc, #108]	; (800a96c <_dtoa_r+0x654>)
 800a8fe:	ec51 0b19 	vmov	r0, r1, d9
 800a902:	f7f5 fce3 	bl	80002cc <__adddf3>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4640      	mov	r0, r8
 800a90c:	4649      	mov	r1, r9
 800a90e:	f7f6 f923 	bl	8000b58 <__aeabi_dcmpgt>
 800a912:	2800      	cmp	r0, #0
 800a914:	d173      	bne.n	800a9fe <_dtoa_r+0x6e6>
 800a916:	ec53 2b19 	vmov	r2, r3, d9
 800a91a:	4914      	ldr	r1, [pc, #80]	; (800a96c <_dtoa_r+0x654>)
 800a91c:	2000      	movs	r0, #0
 800a91e:	f7f5 fcd3 	bl	80002c8 <__aeabi_dsub>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4640      	mov	r0, r8
 800a928:	4649      	mov	r1, r9
 800a92a:	f7f6 f8f7 	bl	8000b1c <__aeabi_dcmplt>
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f af2f 	beq.w	800a792 <_dtoa_r+0x47a>
 800a934:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a936:	1e6b      	subs	r3, r5, #1
 800a938:	930f      	str	r3, [sp, #60]	; 0x3c
 800a93a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a93e:	2b30      	cmp	r3, #48	; 0x30
 800a940:	d0f8      	beq.n	800a934 <_dtoa_r+0x61c>
 800a942:	46bb      	mov	fp, r7
 800a944:	e04a      	b.n	800a9dc <_dtoa_r+0x6c4>
 800a946:	4b06      	ldr	r3, [pc, #24]	; (800a960 <_dtoa_r+0x648>)
 800a948:	f7f5 fe76 	bl	8000638 <__aeabi_dmul>
 800a94c:	4680      	mov	r8, r0
 800a94e:	4689      	mov	r9, r1
 800a950:	e7bd      	b.n	800a8ce <_dtoa_r+0x5b6>
 800a952:	bf00      	nop
 800a954:	0800d008 	.word	0x0800d008
 800a958:	0800cfe0 	.word	0x0800cfe0
 800a95c:	3ff00000 	.word	0x3ff00000
 800a960:	40240000 	.word	0x40240000
 800a964:	401c0000 	.word	0x401c0000
 800a968:	40140000 	.word	0x40140000
 800a96c:	3fe00000 	.word	0x3fe00000
 800a970:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a974:	9d00      	ldr	r5, [sp, #0]
 800a976:	4642      	mov	r2, r8
 800a978:	464b      	mov	r3, r9
 800a97a:	4630      	mov	r0, r6
 800a97c:	4639      	mov	r1, r7
 800a97e:	f7f5 ff85 	bl	800088c <__aeabi_ddiv>
 800a982:	f7f6 f909 	bl	8000b98 <__aeabi_d2iz>
 800a986:	9001      	str	r0, [sp, #4]
 800a988:	f7f5 fdec 	bl	8000564 <__aeabi_i2d>
 800a98c:	4642      	mov	r2, r8
 800a98e:	464b      	mov	r3, r9
 800a990:	f7f5 fe52 	bl	8000638 <__aeabi_dmul>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f5 fc94 	bl	80002c8 <__aeabi_dsub>
 800a9a0:	9e01      	ldr	r6, [sp, #4]
 800a9a2:	9f04      	ldr	r7, [sp, #16]
 800a9a4:	3630      	adds	r6, #48	; 0x30
 800a9a6:	f805 6b01 	strb.w	r6, [r5], #1
 800a9aa:	9e00      	ldr	r6, [sp, #0]
 800a9ac:	1bae      	subs	r6, r5, r6
 800a9ae:	42b7      	cmp	r7, r6
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	d134      	bne.n	800aa20 <_dtoa_r+0x708>
 800a9b6:	f7f5 fc89 	bl	80002cc <__adddf3>
 800a9ba:	4642      	mov	r2, r8
 800a9bc:	464b      	mov	r3, r9
 800a9be:	4606      	mov	r6, r0
 800a9c0:	460f      	mov	r7, r1
 800a9c2:	f7f6 f8c9 	bl	8000b58 <__aeabi_dcmpgt>
 800a9c6:	b9c8      	cbnz	r0, 800a9fc <_dtoa_r+0x6e4>
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	464b      	mov	r3, r9
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	4639      	mov	r1, r7
 800a9d0:	f7f6 f89a 	bl	8000b08 <__aeabi_dcmpeq>
 800a9d4:	b110      	cbz	r0, 800a9dc <_dtoa_r+0x6c4>
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	07db      	lsls	r3, r3, #31
 800a9da:	d40f      	bmi.n	800a9fc <_dtoa_r+0x6e4>
 800a9dc:	4651      	mov	r1, sl
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 ff36 	bl	800b850 <_Bfree>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9e8:	702b      	strb	r3, [r5, #0]
 800a9ea:	f10b 0301 	add.w	r3, fp, #1
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f43f ace2 	beq.w	800a3bc <_dtoa_r+0xa4>
 800a9f8:	601d      	str	r5, [r3, #0]
 800a9fa:	e4df      	b.n	800a3bc <_dtoa_r+0xa4>
 800a9fc:	465f      	mov	r7, fp
 800a9fe:	462b      	mov	r3, r5
 800aa00:	461d      	mov	r5, r3
 800aa02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa06:	2a39      	cmp	r2, #57	; 0x39
 800aa08:	d106      	bne.n	800aa18 <_dtoa_r+0x700>
 800aa0a:	9a00      	ldr	r2, [sp, #0]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d1f7      	bne.n	800aa00 <_dtoa_r+0x6e8>
 800aa10:	9900      	ldr	r1, [sp, #0]
 800aa12:	2230      	movs	r2, #48	; 0x30
 800aa14:	3701      	adds	r7, #1
 800aa16:	700a      	strb	r2, [r1, #0]
 800aa18:	781a      	ldrb	r2, [r3, #0]
 800aa1a:	3201      	adds	r2, #1
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	e790      	b.n	800a942 <_dtoa_r+0x62a>
 800aa20:	4ba3      	ldr	r3, [pc, #652]	; (800acb0 <_dtoa_r+0x998>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	f7f5 fe08 	bl	8000638 <__aeabi_dmul>
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	460f      	mov	r7, r1
 800aa30:	f7f6 f86a 	bl	8000b08 <__aeabi_dcmpeq>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d09e      	beq.n	800a976 <_dtoa_r+0x65e>
 800aa38:	e7d0      	b.n	800a9dc <_dtoa_r+0x6c4>
 800aa3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa3c:	2a00      	cmp	r2, #0
 800aa3e:	f000 80ca 	beq.w	800abd6 <_dtoa_r+0x8be>
 800aa42:	9a07      	ldr	r2, [sp, #28]
 800aa44:	2a01      	cmp	r2, #1
 800aa46:	f300 80ad 	bgt.w	800aba4 <_dtoa_r+0x88c>
 800aa4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa4c:	2a00      	cmp	r2, #0
 800aa4e:	f000 80a5 	beq.w	800ab9c <_dtoa_r+0x884>
 800aa52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa56:	9e08      	ldr	r6, [sp, #32]
 800aa58:	9d05      	ldr	r5, [sp, #20]
 800aa5a:	9a05      	ldr	r2, [sp, #20]
 800aa5c:	441a      	add	r2, r3
 800aa5e:	9205      	str	r2, [sp, #20]
 800aa60:	9a06      	ldr	r2, [sp, #24]
 800aa62:	2101      	movs	r1, #1
 800aa64:	441a      	add	r2, r3
 800aa66:	4620      	mov	r0, r4
 800aa68:	9206      	str	r2, [sp, #24]
 800aa6a:	f000 fff1 	bl	800ba50 <__i2b>
 800aa6e:	4607      	mov	r7, r0
 800aa70:	b165      	cbz	r5, 800aa8c <_dtoa_r+0x774>
 800aa72:	9b06      	ldr	r3, [sp, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd09      	ble.n	800aa8c <_dtoa_r+0x774>
 800aa78:	42ab      	cmp	r3, r5
 800aa7a:	9a05      	ldr	r2, [sp, #20]
 800aa7c:	bfa8      	it	ge
 800aa7e:	462b      	movge	r3, r5
 800aa80:	1ad2      	subs	r2, r2, r3
 800aa82:	9205      	str	r2, [sp, #20]
 800aa84:	9a06      	ldr	r2, [sp, #24]
 800aa86:	1aed      	subs	r5, r5, r3
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	9306      	str	r3, [sp, #24]
 800aa8c:	9b08      	ldr	r3, [sp, #32]
 800aa8e:	b1f3      	cbz	r3, 800aace <_dtoa_r+0x7b6>
 800aa90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80a3 	beq.w	800abde <_dtoa_r+0x8c6>
 800aa98:	2e00      	cmp	r6, #0
 800aa9a:	dd10      	ble.n	800aabe <_dtoa_r+0x7a6>
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f001 f895 	bl	800bbd0 <__pow5mult>
 800aaa6:	4652      	mov	r2, sl
 800aaa8:	4601      	mov	r1, r0
 800aaaa:	4607      	mov	r7, r0
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 ffe5 	bl	800ba7c <__multiply>
 800aab2:	4651      	mov	r1, sl
 800aab4:	4680      	mov	r8, r0
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 feca 	bl	800b850 <_Bfree>
 800aabc:	46c2      	mov	sl, r8
 800aabe:	9b08      	ldr	r3, [sp, #32]
 800aac0:	1b9a      	subs	r2, r3, r6
 800aac2:	d004      	beq.n	800aace <_dtoa_r+0x7b6>
 800aac4:	4651      	mov	r1, sl
 800aac6:	4620      	mov	r0, r4
 800aac8:	f001 f882 	bl	800bbd0 <__pow5mult>
 800aacc:	4682      	mov	sl, r0
 800aace:	2101      	movs	r1, #1
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 ffbd 	bl	800ba50 <__i2b>
 800aad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	4606      	mov	r6, r0
 800aadc:	f340 8081 	ble.w	800abe2 <_dtoa_r+0x8ca>
 800aae0:	461a      	mov	r2, r3
 800aae2:	4601      	mov	r1, r0
 800aae4:	4620      	mov	r0, r4
 800aae6:	f001 f873 	bl	800bbd0 <__pow5mult>
 800aaea:	9b07      	ldr	r3, [sp, #28]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	4606      	mov	r6, r0
 800aaf0:	dd7a      	ble.n	800abe8 <_dtoa_r+0x8d0>
 800aaf2:	f04f 0800 	mov.w	r8, #0
 800aaf6:	6933      	ldr	r3, [r6, #16]
 800aaf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aafc:	6918      	ldr	r0, [r3, #16]
 800aafe:	f000 ff59 	bl	800b9b4 <__hi0bits>
 800ab02:	f1c0 0020 	rsb	r0, r0, #32
 800ab06:	9b06      	ldr	r3, [sp, #24]
 800ab08:	4418      	add	r0, r3
 800ab0a:	f010 001f 	ands.w	r0, r0, #31
 800ab0e:	f000 8094 	beq.w	800ac3a <_dtoa_r+0x922>
 800ab12:	f1c0 0320 	rsb	r3, r0, #32
 800ab16:	2b04      	cmp	r3, #4
 800ab18:	f340 8085 	ble.w	800ac26 <_dtoa_r+0x90e>
 800ab1c:	9b05      	ldr	r3, [sp, #20]
 800ab1e:	f1c0 001c 	rsb	r0, r0, #28
 800ab22:	4403      	add	r3, r0
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	9b06      	ldr	r3, [sp, #24]
 800ab28:	4403      	add	r3, r0
 800ab2a:	4405      	add	r5, r0
 800ab2c:	9306      	str	r3, [sp, #24]
 800ab2e:	9b05      	ldr	r3, [sp, #20]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dd05      	ble.n	800ab40 <_dtoa_r+0x828>
 800ab34:	4651      	mov	r1, sl
 800ab36:	461a      	mov	r2, r3
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f001 f8a3 	bl	800bc84 <__lshift>
 800ab3e:	4682      	mov	sl, r0
 800ab40:	9b06      	ldr	r3, [sp, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	dd05      	ble.n	800ab52 <_dtoa_r+0x83a>
 800ab46:	4631      	mov	r1, r6
 800ab48:	461a      	mov	r2, r3
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f001 f89a 	bl	800bc84 <__lshift>
 800ab50:	4606      	mov	r6, r0
 800ab52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d072      	beq.n	800ac3e <_dtoa_r+0x926>
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4650      	mov	r0, sl
 800ab5c:	f001 f8fe 	bl	800bd5c <__mcmp>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	da6c      	bge.n	800ac3e <_dtoa_r+0x926>
 800ab64:	2300      	movs	r3, #0
 800ab66:	4651      	mov	r1, sl
 800ab68:	220a      	movs	r2, #10
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 fe92 	bl	800b894 <__multadd>
 800ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab76:	4682      	mov	sl, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 81b0 	beq.w	800aede <_dtoa_r+0xbc6>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	4639      	mov	r1, r7
 800ab82:	220a      	movs	r2, #10
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 fe85 	bl	800b894 <__multadd>
 800ab8a:	9b01      	ldr	r3, [sp, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	4607      	mov	r7, r0
 800ab90:	f300 8096 	bgt.w	800acc0 <_dtoa_r+0x9a8>
 800ab94:	9b07      	ldr	r3, [sp, #28]
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	dc59      	bgt.n	800ac4e <_dtoa_r+0x936>
 800ab9a:	e091      	b.n	800acc0 <_dtoa_r+0x9a8>
 800ab9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aba2:	e758      	b.n	800aa56 <_dtoa_r+0x73e>
 800aba4:	9b04      	ldr	r3, [sp, #16]
 800aba6:	1e5e      	subs	r6, r3, #1
 800aba8:	9b08      	ldr	r3, [sp, #32]
 800abaa:	42b3      	cmp	r3, r6
 800abac:	bfbf      	itttt	lt
 800abae:	9b08      	ldrlt	r3, [sp, #32]
 800abb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800abb2:	9608      	strlt	r6, [sp, #32]
 800abb4:	1af3      	sublt	r3, r6, r3
 800abb6:	bfb4      	ite	lt
 800abb8:	18d2      	addlt	r2, r2, r3
 800abba:	1b9e      	subge	r6, r3, r6
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	bfbc      	itt	lt
 800abc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800abc2:	2600      	movlt	r6, #0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bfb7      	itett	lt
 800abc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800abcc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800abd0:	1a9d      	sublt	r5, r3, r2
 800abd2:	2300      	movlt	r3, #0
 800abd4:	e741      	b.n	800aa5a <_dtoa_r+0x742>
 800abd6:	9e08      	ldr	r6, [sp, #32]
 800abd8:	9d05      	ldr	r5, [sp, #20]
 800abda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800abdc:	e748      	b.n	800aa70 <_dtoa_r+0x758>
 800abde:	9a08      	ldr	r2, [sp, #32]
 800abe0:	e770      	b.n	800aac4 <_dtoa_r+0x7ac>
 800abe2:	9b07      	ldr	r3, [sp, #28]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	dc19      	bgt.n	800ac1c <_dtoa_r+0x904>
 800abe8:	9b02      	ldr	r3, [sp, #8]
 800abea:	b9bb      	cbnz	r3, 800ac1c <_dtoa_r+0x904>
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abf2:	b99b      	cbnz	r3, 800ac1c <_dtoa_r+0x904>
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abfa:	0d1b      	lsrs	r3, r3, #20
 800abfc:	051b      	lsls	r3, r3, #20
 800abfe:	b183      	cbz	r3, 800ac22 <_dtoa_r+0x90a>
 800ac00:	9b05      	ldr	r3, [sp, #20]
 800ac02:	3301      	adds	r3, #1
 800ac04:	9305      	str	r3, [sp, #20]
 800ac06:	9b06      	ldr	r3, [sp, #24]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	9306      	str	r3, [sp, #24]
 800ac0c:	f04f 0801 	mov.w	r8, #1
 800ac10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f47f af6f 	bne.w	800aaf6 <_dtoa_r+0x7de>
 800ac18:	2001      	movs	r0, #1
 800ac1a:	e774      	b.n	800ab06 <_dtoa_r+0x7ee>
 800ac1c:	f04f 0800 	mov.w	r8, #0
 800ac20:	e7f6      	b.n	800ac10 <_dtoa_r+0x8f8>
 800ac22:	4698      	mov	r8, r3
 800ac24:	e7f4      	b.n	800ac10 <_dtoa_r+0x8f8>
 800ac26:	d082      	beq.n	800ab2e <_dtoa_r+0x816>
 800ac28:	9a05      	ldr	r2, [sp, #20]
 800ac2a:	331c      	adds	r3, #28
 800ac2c:	441a      	add	r2, r3
 800ac2e:	9205      	str	r2, [sp, #20]
 800ac30:	9a06      	ldr	r2, [sp, #24]
 800ac32:	441a      	add	r2, r3
 800ac34:	441d      	add	r5, r3
 800ac36:	9206      	str	r2, [sp, #24]
 800ac38:	e779      	b.n	800ab2e <_dtoa_r+0x816>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	e7f4      	b.n	800ac28 <_dtoa_r+0x910>
 800ac3e:	9b04      	ldr	r3, [sp, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	dc37      	bgt.n	800acb4 <_dtoa_r+0x99c>
 800ac44:	9b07      	ldr	r3, [sp, #28]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	dd34      	ble.n	800acb4 <_dtoa_r+0x99c>
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	b963      	cbnz	r3, 800ac6c <_dtoa_r+0x954>
 800ac52:	4631      	mov	r1, r6
 800ac54:	2205      	movs	r2, #5
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 fe1c 	bl	800b894 <__multadd>
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	4606      	mov	r6, r0
 800ac60:	4650      	mov	r0, sl
 800ac62:	f001 f87b 	bl	800bd5c <__mcmp>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f73f adbb 	bgt.w	800a7e2 <_dtoa_r+0x4ca>
 800ac6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6e:	9d00      	ldr	r5, [sp, #0]
 800ac70:	ea6f 0b03 	mvn.w	fp, r3
 800ac74:	f04f 0800 	mov.w	r8, #0
 800ac78:	4631      	mov	r1, r6
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fde8 	bl	800b850 <_Bfree>
 800ac80:	2f00      	cmp	r7, #0
 800ac82:	f43f aeab 	beq.w	800a9dc <_dtoa_r+0x6c4>
 800ac86:	f1b8 0f00 	cmp.w	r8, #0
 800ac8a:	d005      	beq.n	800ac98 <_dtoa_r+0x980>
 800ac8c:	45b8      	cmp	r8, r7
 800ac8e:	d003      	beq.n	800ac98 <_dtoa_r+0x980>
 800ac90:	4641      	mov	r1, r8
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fddc 	bl	800b850 <_Bfree>
 800ac98:	4639      	mov	r1, r7
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f000 fdd8 	bl	800b850 <_Bfree>
 800aca0:	e69c      	b.n	800a9dc <_dtoa_r+0x6c4>
 800aca2:	2600      	movs	r6, #0
 800aca4:	4637      	mov	r7, r6
 800aca6:	e7e1      	b.n	800ac6c <_dtoa_r+0x954>
 800aca8:	46bb      	mov	fp, r7
 800acaa:	4637      	mov	r7, r6
 800acac:	e599      	b.n	800a7e2 <_dtoa_r+0x4ca>
 800acae:	bf00      	nop
 800acb0:	40240000 	.word	0x40240000
 800acb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80c8 	beq.w	800ae4c <_dtoa_r+0xb34>
 800acbc:	9b04      	ldr	r3, [sp, #16]
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	2d00      	cmp	r5, #0
 800acc2:	dd05      	ble.n	800acd0 <_dtoa_r+0x9b8>
 800acc4:	4639      	mov	r1, r7
 800acc6:	462a      	mov	r2, r5
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 ffdb 	bl	800bc84 <__lshift>
 800acce:	4607      	mov	r7, r0
 800acd0:	f1b8 0f00 	cmp.w	r8, #0
 800acd4:	d05b      	beq.n	800ad8e <_dtoa_r+0xa76>
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 fd79 	bl	800b7d0 <_Balloc>
 800acde:	4605      	mov	r5, r0
 800ace0:	b928      	cbnz	r0, 800acee <_dtoa_r+0x9d6>
 800ace2:	4b83      	ldr	r3, [pc, #524]	; (800aef0 <_dtoa_r+0xbd8>)
 800ace4:	4602      	mov	r2, r0
 800ace6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800acea:	f7ff bb2e 	b.w	800a34a <_dtoa_r+0x32>
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	3202      	adds	r2, #2
 800acf2:	0092      	lsls	r2, r2, #2
 800acf4:	f107 010c 	add.w	r1, r7, #12
 800acf8:	300c      	adds	r0, #12
 800acfa:	f7ff fa6e 	bl	800a1da <memcpy>
 800acfe:	2201      	movs	r2, #1
 800ad00:	4629      	mov	r1, r5
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 ffbe 	bl	800bc84 <__lshift>
 800ad08:	9b00      	ldr	r3, [sp, #0]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad12:	4413      	add	r3, r2
 800ad14:	9308      	str	r3, [sp, #32]
 800ad16:	9b02      	ldr	r3, [sp, #8]
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	46b8      	mov	r8, r7
 800ad1e:	9306      	str	r3, [sp, #24]
 800ad20:	4607      	mov	r7, r0
 800ad22:	9b04      	ldr	r3, [sp, #16]
 800ad24:	4631      	mov	r1, r6
 800ad26:	3b01      	subs	r3, #1
 800ad28:	4650      	mov	r0, sl
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	f7ff fa6c 	bl	800a208 <quorem>
 800ad30:	4641      	mov	r1, r8
 800ad32:	9002      	str	r0, [sp, #8]
 800ad34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad38:	4650      	mov	r0, sl
 800ad3a:	f001 f80f 	bl	800bd5c <__mcmp>
 800ad3e:	463a      	mov	r2, r7
 800ad40:	9005      	str	r0, [sp, #20]
 800ad42:	4631      	mov	r1, r6
 800ad44:	4620      	mov	r0, r4
 800ad46:	f001 f825 	bl	800bd94 <__mdiff>
 800ad4a:	68c2      	ldr	r2, [r0, #12]
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	bb02      	cbnz	r2, 800ad92 <_dtoa_r+0xa7a>
 800ad50:	4601      	mov	r1, r0
 800ad52:	4650      	mov	r0, sl
 800ad54:	f001 f802 	bl	800bd5c <__mcmp>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad60:	f000 fd76 	bl	800b850 <_Bfree>
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad68:	9d04      	ldr	r5, [sp, #16]
 800ad6a:	ea43 0102 	orr.w	r1, r3, r2
 800ad6e:	9b06      	ldr	r3, [sp, #24]
 800ad70:	4319      	orrs	r1, r3
 800ad72:	d110      	bne.n	800ad96 <_dtoa_r+0xa7e>
 800ad74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad78:	d029      	beq.n	800adce <_dtoa_r+0xab6>
 800ad7a:	9b05      	ldr	r3, [sp, #20]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dd02      	ble.n	800ad86 <_dtoa_r+0xa6e>
 800ad80:	9b02      	ldr	r3, [sp, #8]
 800ad82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ad86:	9b01      	ldr	r3, [sp, #4]
 800ad88:	f883 9000 	strb.w	r9, [r3]
 800ad8c:	e774      	b.n	800ac78 <_dtoa_r+0x960>
 800ad8e:	4638      	mov	r0, r7
 800ad90:	e7ba      	b.n	800ad08 <_dtoa_r+0x9f0>
 800ad92:	2201      	movs	r2, #1
 800ad94:	e7e1      	b.n	800ad5a <_dtoa_r+0xa42>
 800ad96:	9b05      	ldr	r3, [sp, #20]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	db04      	blt.n	800ada6 <_dtoa_r+0xa8e>
 800ad9c:	9907      	ldr	r1, [sp, #28]
 800ad9e:	430b      	orrs	r3, r1
 800ada0:	9906      	ldr	r1, [sp, #24]
 800ada2:	430b      	orrs	r3, r1
 800ada4:	d120      	bne.n	800ade8 <_dtoa_r+0xad0>
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	dded      	ble.n	800ad86 <_dtoa_r+0xa6e>
 800adaa:	4651      	mov	r1, sl
 800adac:	2201      	movs	r2, #1
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 ff68 	bl	800bc84 <__lshift>
 800adb4:	4631      	mov	r1, r6
 800adb6:	4682      	mov	sl, r0
 800adb8:	f000 ffd0 	bl	800bd5c <__mcmp>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	dc03      	bgt.n	800adc8 <_dtoa_r+0xab0>
 800adc0:	d1e1      	bne.n	800ad86 <_dtoa_r+0xa6e>
 800adc2:	f019 0f01 	tst.w	r9, #1
 800adc6:	d0de      	beq.n	800ad86 <_dtoa_r+0xa6e>
 800adc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800adcc:	d1d8      	bne.n	800ad80 <_dtoa_r+0xa68>
 800adce:	9a01      	ldr	r2, [sp, #4]
 800add0:	2339      	movs	r3, #57	; 0x39
 800add2:	7013      	strb	r3, [r2, #0]
 800add4:	462b      	mov	r3, r5
 800add6:	461d      	mov	r5, r3
 800add8:	3b01      	subs	r3, #1
 800adda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adde:	2a39      	cmp	r2, #57	; 0x39
 800ade0:	d06c      	beq.n	800aebc <_dtoa_r+0xba4>
 800ade2:	3201      	adds	r2, #1
 800ade4:	701a      	strb	r2, [r3, #0]
 800ade6:	e747      	b.n	800ac78 <_dtoa_r+0x960>
 800ade8:	2a00      	cmp	r2, #0
 800adea:	dd07      	ble.n	800adfc <_dtoa_r+0xae4>
 800adec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800adf0:	d0ed      	beq.n	800adce <_dtoa_r+0xab6>
 800adf2:	9a01      	ldr	r2, [sp, #4]
 800adf4:	f109 0301 	add.w	r3, r9, #1
 800adf8:	7013      	strb	r3, [r2, #0]
 800adfa:	e73d      	b.n	800ac78 <_dtoa_r+0x960>
 800adfc:	9b04      	ldr	r3, [sp, #16]
 800adfe:	9a08      	ldr	r2, [sp, #32]
 800ae00:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d043      	beq.n	800ae90 <_dtoa_r+0xb78>
 800ae08:	4651      	mov	r1, sl
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	220a      	movs	r2, #10
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 fd40 	bl	800b894 <__multadd>
 800ae14:	45b8      	cmp	r8, r7
 800ae16:	4682      	mov	sl, r0
 800ae18:	f04f 0300 	mov.w	r3, #0
 800ae1c:	f04f 020a 	mov.w	r2, #10
 800ae20:	4641      	mov	r1, r8
 800ae22:	4620      	mov	r0, r4
 800ae24:	d107      	bne.n	800ae36 <_dtoa_r+0xb1e>
 800ae26:	f000 fd35 	bl	800b894 <__multadd>
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	3301      	adds	r3, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	e775      	b.n	800ad22 <_dtoa_r+0xa0a>
 800ae36:	f000 fd2d 	bl	800b894 <__multadd>
 800ae3a:	4639      	mov	r1, r7
 800ae3c:	4680      	mov	r8, r0
 800ae3e:	2300      	movs	r3, #0
 800ae40:	220a      	movs	r2, #10
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 fd26 	bl	800b894 <__multadd>
 800ae48:	4607      	mov	r7, r0
 800ae4a:	e7f0      	b.n	800ae2e <_dtoa_r+0xb16>
 800ae4c:	9b04      	ldr	r3, [sp, #16]
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	9d00      	ldr	r5, [sp, #0]
 800ae52:	4631      	mov	r1, r6
 800ae54:	4650      	mov	r0, sl
 800ae56:	f7ff f9d7 	bl	800a208 <quorem>
 800ae5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae5e:	9b00      	ldr	r3, [sp, #0]
 800ae60:	f805 9b01 	strb.w	r9, [r5], #1
 800ae64:	1aea      	subs	r2, r5, r3
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	dd07      	ble.n	800ae7c <_dtoa_r+0xb64>
 800ae6c:	4651      	mov	r1, sl
 800ae6e:	2300      	movs	r3, #0
 800ae70:	220a      	movs	r2, #10
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 fd0e 	bl	800b894 <__multadd>
 800ae78:	4682      	mov	sl, r0
 800ae7a:	e7ea      	b.n	800ae52 <_dtoa_r+0xb3a>
 800ae7c:	9b01      	ldr	r3, [sp, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfc8      	it	gt
 800ae82:	461d      	movgt	r5, r3
 800ae84:	9b00      	ldr	r3, [sp, #0]
 800ae86:	bfd8      	it	le
 800ae88:	2501      	movle	r5, #1
 800ae8a:	441d      	add	r5, r3
 800ae8c:	f04f 0800 	mov.w	r8, #0
 800ae90:	4651      	mov	r1, sl
 800ae92:	2201      	movs	r2, #1
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 fef5 	bl	800bc84 <__lshift>
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	4682      	mov	sl, r0
 800ae9e:	f000 ff5d 	bl	800bd5c <__mcmp>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	dc96      	bgt.n	800add4 <_dtoa_r+0xabc>
 800aea6:	d102      	bne.n	800aeae <_dtoa_r+0xb96>
 800aea8:	f019 0f01 	tst.w	r9, #1
 800aeac:	d192      	bne.n	800add4 <_dtoa_r+0xabc>
 800aeae:	462b      	mov	r3, r5
 800aeb0:	461d      	mov	r5, r3
 800aeb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeb6:	2a30      	cmp	r2, #48	; 0x30
 800aeb8:	d0fa      	beq.n	800aeb0 <_dtoa_r+0xb98>
 800aeba:	e6dd      	b.n	800ac78 <_dtoa_r+0x960>
 800aebc:	9a00      	ldr	r2, [sp, #0]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d189      	bne.n	800add6 <_dtoa_r+0xabe>
 800aec2:	f10b 0b01 	add.w	fp, fp, #1
 800aec6:	2331      	movs	r3, #49	; 0x31
 800aec8:	e796      	b.n	800adf8 <_dtoa_r+0xae0>
 800aeca:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <_dtoa_r+0xbdc>)
 800aecc:	f7ff ba99 	b.w	800a402 <_dtoa_r+0xea>
 800aed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f47f aa6d 	bne.w	800a3b2 <_dtoa_r+0x9a>
 800aed8:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <_dtoa_r+0xbe0>)
 800aeda:	f7ff ba92 	b.w	800a402 <_dtoa_r+0xea>
 800aede:	9b01      	ldr	r3, [sp, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dcb5      	bgt.n	800ae50 <_dtoa_r+0xb38>
 800aee4:	9b07      	ldr	r3, [sp, #28]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	f73f aeb1 	bgt.w	800ac4e <_dtoa_r+0x936>
 800aeec:	e7b0      	b.n	800ae50 <_dtoa_r+0xb38>
 800aeee:	bf00      	nop
 800aef0:	0800cf11 	.word	0x0800cf11
 800aef4:	0800ce69 	.word	0x0800ce69
 800aef8:	0800ce95 	.word	0x0800ce95

0800aefc <_free_r>:
 800aefc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aefe:	2900      	cmp	r1, #0
 800af00:	d044      	beq.n	800af8c <_free_r+0x90>
 800af02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af06:	9001      	str	r0, [sp, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f1a1 0404 	sub.w	r4, r1, #4
 800af0e:	bfb8      	it	lt
 800af10:	18e4      	addlt	r4, r4, r3
 800af12:	f000 fc51 	bl	800b7b8 <__malloc_lock>
 800af16:	4a1e      	ldr	r2, [pc, #120]	; (800af90 <_free_r+0x94>)
 800af18:	9801      	ldr	r0, [sp, #4]
 800af1a:	6813      	ldr	r3, [r2, #0]
 800af1c:	b933      	cbnz	r3, 800af2c <_free_r+0x30>
 800af1e:	6063      	str	r3, [r4, #4]
 800af20:	6014      	str	r4, [r2, #0]
 800af22:	b003      	add	sp, #12
 800af24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af28:	f000 bc4c 	b.w	800b7c4 <__malloc_unlock>
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	d908      	bls.n	800af42 <_free_r+0x46>
 800af30:	6825      	ldr	r5, [r4, #0]
 800af32:	1961      	adds	r1, r4, r5
 800af34:	428b      	cmp	r3, r1
 800af36:	bf01      	itttt	eq
 800af38:	6819      	ldreq	r1, [r3, #0]
 800af3a:	685b      	ldreq	r3, [r3, #4]
 800af3c:	1949      	addeq	r1, r1, r5
 800af3e:	6021      	streq	r1, [r4, #0]
 800af40:	e7ed      	b.n	800af1e <_free_r+0x22>
 800af42:	461a      	mov	r2, r3
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	b10b      	cbz	r3, 800af4c <_free_r+0x50>
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d9fa      	bls.n	800af42 <_free_r+0x46>
 800af4c:	6811      	ldr	r1, [r2, #0]
 800af4e:	1855      	adds	r5, r2, r1
 800af50:	42a5      	cmp	r5, r4
 800af52:	d10b      	bne.n	800af6c <_free_r+0x70>
 800af54:	6824      	ldr	r4, [r4, #0]
 800af56:	4421      	add	r1, r4
 800af58:	1854      	adds	r4, r2, r1
 800af5a:	42a3      	cmp	r3, r4
 800af5c:	6011      	str	r1, [r2, #0]
 800af5e:	d1e0      	bne.n	800af22 <_free_r+0x26>
 800af60:	681c      	ldr	r4, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	6053      	str	r3, [r2, #4]
 800af66:	440c      	add	r4, r1
 800af68:	6014      	str	r4, [r2, #0]
 800af6a:	e7da      	b.n	800af22 <_free_r+0x26>
 800af6c:	d902      	bls.n	800af74 <_free_r+0x78>
 800af6e:	230c      	movs	r3, #12
 800af70:	6003      	str	r3, [r0, #0]
 800af72:	e7d6      	b.n	800af22 <_free_r+0x26>
 800af74:	6825      	ldr	r5, [r4, #0]
 800af76:	1961      	adds	r1, r4, r5
 800af78:	428b      	cmp	r3, r1
 800af7a:	bf04      	itt	eq
 800af7c:	6819      	ldreq	r1, [r3, #0]
 800af7e:	685b      	ldreq	r3, [r3, #4]
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	bf04      	itt	eq
 800af84:	1949      	addeq	r1, r1, r5
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	6054      	str	r4, [r2, #4]
 800af8a:	e7ca      	b.n	800af22 <_free_r+0x26>
 800af8c:	b003      	add	sp, #12
 800af8e:	bd30      	pop	{r4, r5, pc}
 800af90:	200006fc 	.word	0x200006fc

0800af94 <rshift>:
 800af94:	6903      	ldr	r3, [r0, #16]
 800af96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afa2:	f100 0414 	add.w	r4, r0, #20
 800afa6:	dd45      	ble.n	800b034 <rshift+0xa0>
 800afa8:	f011 011f 	ands.w	r1, r1, #31
 800afac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afb4:	d10c      	bne.n	800afd0 <rshift+0x3c>
 800afb6:	f100 0710 	add.w	r7, r0, #16
 800afba:	4629      	mov	r1, r5
 800afbc:	42b1      	cmp	r1, r6
 800afbe:	d334      	bcc.n	800b02a <rshift+0x96>
 800afc0:	1a9b      	subs	r3, r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	1eea      	subs	r2, r5, #3
 800afc6:	4296      	cmp	r6, r2
 800afc8:	bf38      	it	cc
 800afca:	2300      	movcc	r3, #0
 800afcc:	4423      	add	r3, r4
 800afce:	e015      	b.n	800affc <rshift+0x68>
 800afd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800afd4:	f1c1 0820 	rsb	r8, r1, #32
 800afd8:	40cf      	lsrs	r7, r1
 800afda:	f105 0e04 	add.w	lr, r5, #4
 800afde:	46a1      	mov	r9, r4
 800afe0:	4576      	cmp	r6, lr
 800afe2:	46f4      	mov	ip, lr
 800afe4:	d815      	bhi.n	800b012 <rshift+0x7e>
 800afe6:	1a9a      	subs	r2, r3, r2
 800afe8:	0092      	lsls	r2, r2, #2
 800afea:	3a04      	subs	r2, #4
 800afec:	3501      	adds	r5, #1
 800afee:	42ae      	cmp	r6, r5
 800aff0:	bf38      	it	cc
 800aff2:	2200      	movcc	r2, #0
 800aff4:	18a3      	adds	r3, r4, r2
 800aff6:	50a7      	str	r7, [r4, r2]
 800aff8:	b107      	cbz	r7, 800affc <rshift+0x68>
 800affa:	3304      	adds	r3, #4
 800affc:	1b1a      	subs	r2, r3, r4
 800affe:	42a3      	cmp	r3, r4
 800b000:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b004:	bf08      	it	eq
 800b006:	2300      	moveq	r3, #0
 800b008:	6102      	str	r2, [r0, #16]
 800b00a:	bf08      	it	eq
 800b00c:	6143      	streq	r3, [r0, #20]
 800b00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b012:	f8dc c000 	ldr.w	ip, [ip]
 800b016:	fa0c fc08 	lsl.w	ip, ip, r8
 800b01a:	ea4c 0707 	orr.w	r7, ip, r7
 800b01e:	f849 7b04 	str.w	r7, [r9], #4
 800b022:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b026:	40cf      	lsrs	r7, r1
 800b028:	e7da      	b.n	800afe0 <rshift+0x4c>
 800b02a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b02e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b032:	e7c3      	b.n	800afbc <rshift+0x28>
 800b034:	4623      	mov	r3, r4
 800b036:	e7e1      	b.n	800affc <rshift+0x68>

0800b038 <__hexdig_fun>:
 800b038:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	d802      	bhi.n	800b046 <__hexdig_fun+0xe>
 800b040:	3820      	subs	r0, #32
 800b042:	b2c0      	uxtb	r0, r0
 800b044:	4770      	bx	lr
 800b046:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b04a:	2b05      	cmp	r3, #5
 800b04c:	d801      	bhi.n	800b052 <__hexdig_fun+0x1a>
 800b04e:	3847      	subs	r0, #71	; 0x47
 800b050:	e7f7      	b.n	800b042 <__hexdig_fun+0xa>
 800b052:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b056:	2b05      	cmp	r3, #5
 800b058:	d801      	bhi.n	800b05e <__hexdig_fun+0x26>
 800b05a:	3827      	subs	r0, #39	; 0x27
 800b05c:	e7f1      	b.n	800b042 <__hexdig_fun+0xa>
 800b05e:	2000      	movs	r0, #0
 800b060:	4770      	bx	lr
	...

0800b064 <__gethex>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	4617      	mov	r7, r2
 800b06a:	680a      	ldr	r2, [r1, #0]
 800b06c:	b085      	sub	sp, #20
 800b06e:	f102 0b02 	add.w	fp, r2, #2
 800b072:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b076:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b07a:	4681      	mov	r9, r0
 800b07c:	468a      	mov	sl, r1
 800b07e:	9302      	str	r3, [sp, #8]
 800b080:	32fe      	adds	r2, #254	; 0xfe
 800b082:	eb02 030b 	add.w	r3, r2, fp
 800b086:	46d8      	mov	r8, fp
 800b088:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	2830      	cmp	r0, #48	; 0x30
 800b090:	d0f7      	beq.n	800b082 <__gethex+0x1e>
 800b092:	f7ff ffd1 	bl	800b038 <__hexdig_fun>
 800b096:	4604      	mov	r4, r0
 800b098:	2800      	cmp	r0, #0
 800b09a:	d138      	bne.n	800b10e <__gethex+0xaa>
 800b09c:	49a7      	ldr	r1, [pc, #668]	; (800b33c <__gethex+0x2d8>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	f7ff f811 	bl	800a0c8 <strncmp>
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d169      	bne.n	800b180 <__gethex+0x11c>
 800b0ac:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b0b0:	465d      	mov	r5, fp
 800b0b2:	f7ff ffc1 	bl	800b038 <__hexdig_fun>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d064      	beq.n	800b184 <__gethex+0x120>
 800b0ba:	465a      	mov	r2, fp
 800b0bc:	7810      	ldrb	r0, [r2, #0]
 800b0be:	2830      	cmp	r0, #48	; 0x30
 800b0c0:	4690      	mov	r8, r2
 800b0c2:	f102 0201 	add.w	r2, r2, #1
 800b0c6:	d0f9      	beq.n	800b0bc <__gethex+0x58>
 800b0c8:	f7ff ffb6 	bl	800b038 <__hexdig_fun>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	fab0 f480 	clz	r4, r0
 800b0d2:	0964      	lsrs	r4, r4, #5
 800b0d4:	465e      	mov	r6, fp
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	4642      	mov	r2, r8
 800b0da:	4615      	mov	r5, r2
 800b0dc:	3201      	adds	r2, #1
 800b0de:	7828      	ldrb	r0, [r5, #0]
 800b0e0:	f7ff ffaa 	bl	800b038 <__hexdig_fun>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d1f8      	bne.n	800b0da <__gethex+0x76>
 800b0e8:	4994      	ldr	r1, [pc, #592]	; (800b33c <__gethex+0x2d8>)
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f7fe ffeb 	bl	800a0c8 <strncmp>
 800b0f2:	b978      	cbnz	r0, 800b114 <__gethex+0xb0>
 800b0f4:	b946      	cbnz	r6, 800b108 <__gethex+0xa4>
 800b0f6:	1c6e      	adds	r6, r5, #1
 800b0f8:	4632      	mov	r2, r6
 800b0fa:	4615      	mov	r5, r2
 800b0fc:	3201      	adds	r2, #1
 800b0fe:	7828      	ldrb	r0, [r5, #0]
 800b100:	f7ff ff9a 	bl	800b038 <__hexdig_fun>
 800b104:	2800      	cmp	r0, #0
 800b106:	d1f8      	bne.n	800b0fa <__gethex+0x96>
 800b108:	1b73      	subs	r3, r6, r5
 800b10a:	009e      	lsls	r6, r3, #2
 800b10c:	e004      	b.n	800b118 <__gethex+0xb4>
 800b10e:	2400      	movs	r4, #0
 800b110:	4626      	mov	r6, r4
 800b112:	e7e1      	b.n	800b0d8 <__gethex+0x74>
 800b114:	2e00      	cmp	r6, #0
 800b116:	d1f7      	bne.n	800b108 <__gethex+0xa4>
 800b118:	782b      	ldrb	r3, [r5, #0]
 800b11a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b11e:	2b50      	cmp	r3, #80	; 0x50
 800b120:	d13d      	bne.n	800b19e <__gethex+0x13a>
 800b122:	786b      	ldrb	r3, [r5, #1]
 800b124:	2b2b      	cmp	r3, #43	; 0x2b
 800b126:	d02f      	beq.n	800b188 <__gethex+0x124>
 800b128:	2b2d      	cmp	r3, #45	; 0x2d
 800b12a:	d031      	beq.n	800b190 <__gethex+0x12c>
 800b12c:	1c69      	adds	r1, r5, #1
 800b12e:	f04f 0b00 	mov.w	fp, #0
 800b132:	7808      	ldrb	r0, [r1, #0]
 800b134:	f7ff ff80 	bl	800b038 <__hexdig_fun>
 800b138:	1e42      	subs	r2, r0, #1
 800b13a:	b2d2      	uxtb	r2, r2
 800b13c:	2a18      	cmp	r2, #24
 800b13e:	d82e      	bhi.n	800b19e <__gethex+0x13a>
 800b140:	f1a0 0210 	sub.w	r2, r0, #16
 800b144:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b148:	f7ff ff76 	bl	800b038 <__hexdig_fun>
 800b14c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b150:	fa5f fc8c 	uxtb.w	ip, ip
 800b154:	f1bc 0f18 	cmp.w	ip, #24
 800b158:	d91d      	bls.n	800b196 <__gethex+0x132>
 800b15a:	f1bb 0f00 	cmp.w	fp, #0
 800b15e:	d000      	beq.n	800b162 <__gethex+0xfe>
 800b160:	4252      	negs	r2, r2
 800b162:	4416      	add	r6, r2
 800b164:	f8ca 1000 	str.w	r1, [sl]
 800b168:	b1dc      	cbz	r4, 800b1a2 <__gethex+0x13e>
 800b16a:	9b01      	ldr	r3, [sp, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	bf14      	ite	ne
 800b170:	f04f 0800 	movne.w	r8, #0
 800b174:	f04f 0806 	moveq.w	r8, #6
 800b178:	4640      	mov	r0, r8
 800b17a:	b005      	add	sp, #20
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b180:	4645      	mov	r5, r8
 800b182:	4626      	mov	r6, r4
 800b184:	2401      	movs	r4, #1
 800b186:	e7c7      	b.n	800b118 <__gethex+0xb4>
 800b188:	f04f 0b00 	mov.w	fp, #0
 800b18c:	1ca9      	adds	r1, r5, #2
 800b18e:	e7d0      	b.n	800b132 <__gethex+0xce>
 800b190:	f04f 0b01 	mov.w	fp, #1
 800b194:	e7fa      	b.n	800b18c <__gethex+0x128>
 800b196:	230a      	movs	r3, #10
 800b198:	fb03 0002 	mla	r0, r3, r2, r0
 800b19c:	e7d0      	b.n	800b140 <__gethex+0xdc>
 800b19e:	4629      	mov	r1, r5
 800b1a0:	e7e0      	b.n	800b164 <__gethex+0x100>
 800b1a2:	eba5 0308 	sub.w	r3, r5, r8
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	2b07      	cmp	r3, #7
 800b1ac:	dc0a      	bgt.n	800b1c4 <__gethex+0x160>
 800b1ae:	4648      	mov	r0, r9
 800b1b0:	f000 fb0e 	bl	800b7d0 <_Balloc>
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	b940      	cbnz	r0, 800b1ca <__gethex+0x166>
 800b1b8:	4b61      	ldr	r3, [pc, #388]	; (800b340 <__gethex+0x2dc>)
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	21e4      	movs	r1, #228	; 0xe4
 800b1be:	4861      	ldr	r0, [pc, #388]	; (800b344 <__gethex+0x2e0>)
 800b1c0:	f001 f9f0 	bl	800c5a4 <__assert_func>
 800b1c4:	3101      	adds	r1, #1
 800b1c6:	105b      	asrs	r3, r3, #1
 800b1c8:	e7ef      	b.n	800b1aa <__gethex+0x146>
 800b1ca:	f100 0a14 	add.w	sl, r0, #20
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	495a      	ldr	r1, [pc, #360]	; (800b33c <__gethex+0x2d8>)
 800b1d2:	f8cd a004 	str.w	sl, [sp, #4]
 800b1d6:	469b      	mov	fp, r3
 800b1d8:	45a8      	cmp	r8, r5
 800b1da:	d342      	bcc.n	800b262 <__gethex+0x1fe>
 800b1dc:	9801      	ldr	r0, [sp, #4]
 800b1de:	f840 bb04 	str.w	fp, [r0], #4
 800b1e2:	eba0 000a 	sub.w	r0, r0, sl
 800b1e6:	1080      	asrs	r0, r0, #2
 800b1e8:	6120      	str	r0, [r4, #16]
 800b1ea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b1ee:	4658      	mov	r0, fp
 800b1f0:	f000 fbe0 	bl	800b9b4 <__hi0bits>
 800b1f4:	683d      	ldr	r5, [r7, #0]
 800b1f6:	eba8 0000 	sub.w	r0, r8, r0
 800b1fa:	42a8      	cmp	r0, r5
 800b1fc:	dd59      	ble.n	800b2b2 <__gethex+0x24e>
 800b1fe:	eba0 0805 	sub.w	r8, r0, r5
 800b202:	4641      	mov	r1, r8
 800b204:	4620      	mov	r0, r4
 800b206:	f000 ff6f 	bl	800c0e8 <__any_on>
 800b20a:	4683      	mov	fp, r0
 800b20c:	b1b8      	cbz	r0, 800b23e <__gethex+0x1da>
 800b20e:	f108 33ff 	add.w	r3, r8, #4294967295
 800b212:	1159      	asrs	r1, r3, #5
 800b214:	f003 021f 	and.w	r2, r3, #31
 800b218:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b21c:	f04f 0b01 	mov.w	fp, #1
 800b220:	fa0b f202 	lsl.w	r2, fp, r2
 800b224:	420a      	tst	r2, r1
 800b226:	d00a      	beq.n	800b23e <__gethex+0x1da>
 800b228:	455b      	cmp	r3, fp
 800b22a:	dd06      	ble.n	800b23a <__gethex+0x1d6>
 800b22c:	f1a8 0102 	sub.w	r1, r8, #2
 800b230:	4620      	mov	r0, r4
 800b232:	f000 ff59 	bl	800c0e8 <__any_on>
 800b236:	2800      	cmp	r0, #0
 800b238:	d138      	bne.n	800b2ac <__gethex+0x248>
 800b23a:	f04f 0b02 	mov.w	fp, #2
 800b23e:	4641      	mov	r1, r8
 800b240:	4620      	mov	r0, r4
 800b242:	f7ff fea7 	bl	800af94 <rshift>
 800b246:	4446      	add	r6, r8
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	42b3      	cmp	r3, r6
 800b24c:	da41      	bge.n	800b2d2 <__gethex+0x26e>
 800b24e:	4621      	mov	r1, r4
 800b250:	4648      	mov	r0, r9
 800b252:	f000 fafd 	bl	800b850 <_Bfree>
 800b256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b258:	2300      	movs	r3, #0
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b260:	e78a      	b.n	800b178 <__gethex+0x114>
 800b262:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b266:	2a2e      	cmp	r2, #46	; 0x2e
 800b268:	d014      	beq.n	800b294 <__gethex+0x230>
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	d106      	bne.n	800b27c <__gethex+0x218>
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	f843 bb04 	str.w	fp, [r3], #4
 800b274:	f04f 0b00 	mov.w	fp, #0
 800b278:	9301      	str	r3, [sp, #4]
 800b27a:	465b      	mov	r3, fp
 800b27c:	7828      	ldrb	r0, [r5, #0]
 800b27e:	9303      	str	r3, [sp, #12]
 800b280:	f7ff feda 	bl	800b038 <__hexdig_fun>
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	f000 000f 	and.w	r0, r0, #15
 800b28a:	4098      	lsls	r0, r3
 800b28c:	ea4b 0b00 	orr.w	fp, fp, r0
 800b290:	3304      	adds	r3, #4
 800b292:	e7a1      	b.n	800b1d8 <__gethex+0x174>
 800b294:	45a8      	cmp	r8, r5
 800b296:	d8e8      	bhi.n	800b26a <__gethex+0x206>
 800b298:	2201      	movs	r2, #1
 800b29a:	4628      	mov	r0, r5
 800b29c:	9303      	str	r3, [sp, #12]
 800b29e:	f7fe ff13 	bl	800a0c8 <strncmp>
 800b2a2:	4926      	ldr	r1, [pc, #152]	; (800b33c <__gethex+0x2d8>)
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d1df      	bne.n	800b26a <__gethex+0x206>
 800b2aa:	e795      	b.n	800b1d8 <__gethex+0x174>
 800b2ac:	f04f 0b03 	mov.w	fp, #3
 800b2b0:	e7c5      	b.n	800b23e <__gethex+0x1da>
 800b2b2:	da0b      	bge.n	800b2cc <__gethex+0x268>
 800b2b4:	eba5 0800 	sub.w	r8, r5, r0
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	4642      	mov	r2, r8
 800b2bc:	4648      	mov	r0, r9
 800b2be:	f000 fce1 	bl	800bc84 <__lshift>
 800b2c2:	eba6 0608 	sub.w	r6, r6, r8
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	f100 0a14 	add.w	sl, r0, #20
 800b2cc:	f04f 0b00 	mov.w	fp, #0
 800b2d0:	e7ba      	b.n	800b248 <__gethex+0x1e4>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	42b3      	cmp	r3, r6
 800b2d6:	dd73      	ble.n	800b3c0 <__gethex+0x35c>
 800b2d8:	1b9e      	subs	r6, r3, r6
 800b2da:	42b5      	cmp	r5, r6
 800b2dc:	dc34      	bgt.n	800b348 <__gethex+0x2e4>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d023      	beq.n	800b32c <__gethex+0x2c8>
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d025      	beq.n	800b334 <__gethex+0x2d0>
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d115      	bne.n	800b318 <__gethex+0x2b4>
 800b2ec:	42b5      	cmp	r5, r6
 800b2ee:	d113      	bne.n	800b318 <__gethex+0x2b4>
 800b2f0:	2d01      	cmp	r5, #1
 800b2f2:	d10b      	bne.n	800b30c <__gethex+0x2a8>
 800b2f4:	9a02      	ldr	r2, [sp, #8]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	6123      	str	r3, [r4, #16]
 800b2fe:	f8ca 3000 	str.w	r3, [sl]
 800b302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b304:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b308:	601c      	str	r4, [r3, #0]
 800b30a:	e735      	b.n	800b178 <__gethex+0x114>
 800b30c:	1e69      	subs	r1, r5, #1
 800b30e:	4620      	mov	r0, r4
 800b310:	f000 feea 	bl	800c0e8 <__any_on>
 800b314:	2800      	cmp	r0, #0
 800b316:	d1ed      	bne.n	800b2f4 <__gethex+0x290>
 800b318:	4621      	mov	r1, r4
 800b31a:	4648      	mov	r0, r9
 800b31c:	f000 fa98 	bl	800b850 <_Bfree>
 800b320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b322:	2300      	movs	r3, #0
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b32a:	e725      	b.n	800b178 <__gethex+0x114>
 800b32c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1f2      	bne.n	800b318 <__gethex+0x2b4>
 800b332:	e7df      	b.n	800b2f4 <__gethex+0x290>
 800b334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1dc      	bne.n	800b2f4 <__gethex+0x290>
 800b33a:	e7ed      	b.n	800b318 <__gethex+0x2b4>
 800b33c:	0800cd00 	.word	0x0800cd00
 800b340:	0800cf11 	.word	0x0800cf11
 800b344:	0800cf22 	.word	0x0800cf22
 800b348:	f106 38ff 	add.w	r8, r6, #4294967295
 800b34c:	f1bb 0f00 	cmp.w	fp, #0
 800b350:	d133      	bne.n	800b3ba <__gethex+0x356>
 800b352:	f1b8 0f00 	cmp.w	r8, #0
 800b356:	d004      	beq.n	800b362 <__gethex+0x2fe>
 800b358:	4641      	mov	r1, r8
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fec4 	bl	800c0e8 <__any_on>
 800b360:	4683      	mov	fp, r0
 800b362:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b366:	2301      	movs	r3, #1
 800b368:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b36c:	f008 081f 	and.w	r8, r8, #31
 800b370:	fa03 f308 	lsl.w	r3, r3, r8
 800b374:	4213      	tst	r3, r2
 800b376:	4631      	mov	r1, r6
 800b378:	4620      	mov	r0, r4
 800b37a:	bf18      	it	ne
 800b37c:	f04b 0b02 	orrne.w	fp, fp, #2
 800b380:	1bad      	subs	r5, r5, r6
 800b382:	f7ff fe07 	bl	800af94 <rshift>
 800b386:	687e      	ldr	r6, [r7, #4]
 800b388:	f04f 0802 	mov.w	r8, #2
 800b38c:	f1bb 0f00 	cmp.w	fp, #0
 800b390:	d04a      	beq.n	800b428 <__gethex+0x3c4>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2b02      	cmp	r3, #2
 800b396:	d016      	beq.n	800b3c6 <__gethex+0x362>
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d018      	beq.n	800b3ce <__gethex+0x36a>
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d109      	bne.n	800b3b4 <__gethex+0x350>
 800b3a0:	f01b 0f02 	tst.w	fp, #2
 800b3a4:	d006      	beq.n	800b3b4 <__gethex+0x350>
 800b3a6:	f8da 3000 	ldr.w	r3, [sl]
 800b3aa:	ea4b 0b03 	orr.w	fp, fp, r3
 800b3ae:	f01b 0f01 	tst.w	fp, #1
 800b3b2:	d10f      	bne.n	800b3d4 <__gethex+0x370>
 800b3b4:	f048 0810 	orr.w	r8, r8, #16
 800b3b8:	e036      	b.n	800b428 <__gethex+0x3c4>
 800b3ba:	f04f 0b01 	mov.w	fp, #1
 800b3be:	e7d0      	b.n	800b362 <__gethex+0x2fe>
 800b3c0:	f04f 0801 	mov.w	r8, #1
 800b3c4:	e7e2      	b.n	800b38c <__gethex+0x328>
 800b3c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3c8:	f1c3 0301 	rsb	r3, r3, #1
 800b3cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d0ef      	beq.n	800b3b4 <__gethex+0x350>
 800b3d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3d8:	f104 0214 	add.w	r2, r4, #20
 800b3dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4694      	mov	ip, r2
 800b3ea:	f852 1b04 	ldr.w	r1, [r2], #4
 800b3ee:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b3f2:	d01e      	beq.n	800b432 <__gethex+0x3ce>
 800b3f4:	3101      	adds	r1, #1
 800b3f6:	f8cc 1000 	str.w	r1, [ip]
 800b3fa:	f1b8 0f02 	cmp.w	r8, #2
 800b3fe:	f104 0214 	add.w	r2, r4, #20
 800b402:	d13d      	bne.n	800b480 <__gethex+0x41c>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	3b01      	subs	r3, #1
 800b408:	42ab      	cmp	r3, r5
 800b40a:	d10b      	bne.n	800b424 <__gethex+0x3c0>
 800b40c:	1169      	asrs	r1, r5, #5
 800b40e:	2301      	movs	r3, #1
 800b410:	f005 051f 	and.w	r5, r5, #31
 800b414:	fa03 f505 	lsl.w	r5, r3, r5
 800b418:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b41c:	421d      	tst	r5, r3
 800b41e:	bf18      	it	ne
 800b420:	f04f 0801 	movne.w	r8, #1
 800b424:	f048 0820 	orr.w	r8, r8, #32
 800b428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b42a:	601c      	str	r4, [r3, #0]
 800b42c:	9b02      	ldr	r3, [sp, #8]
 800b42e:	601e      	str	r6, [r3, #0]
 800b430:	e6a2      	b.n	800b178 <__gethex+0x114>
 800b432:	4290      	cmp	r0, r2
 800b434:	f842 3c04 	str.w	r3, [r2, #-4]
 800b438:	d8d6      	bhi.n	800b3e8 <__gethex+0x384>
 800b43a:	68a2      	ldr	r2, [r4, #8]
 800b43c:	4593      	cmp	fp, r2
 800b43e:	db17      	blt.n	800b470 <__gethex+0x40c>
 800b440:	6861      	ldr	r1, [r4, #4]
 800b442:	4648      	mov	r0, r9
 800b444:	3101      	adds	r1, #1
 800b446:	f000 f9c3 	bl	800b7d0 <_Balloc>
 800b44a:	4682      	mov	sl, r0
 800b44c:	b918      	cbnz	r0, 800b456 <__gethex+0x3f2>
 800b44e:	4b1b      	ldr	r3, [pc, #108]	; (800b4bc <__gethex+0x458>)
 800b450:	4602      	mov	r2, r0
 800b452:	2184      	movs	r1, #132	; 0x84
 800b454:	e6b3      	b.n	800b1be <__gethex+0x15a>
 800b456:	6922      	ldr	r2, [r4, #16]
 800b458:	3202      	adds	r2, #2
 800b45a:	f104 010c 	add.w	r1, r4, #12
 800b45e:	0092      	lsls	r2, r2, #2
 800b460:	300c      	adds	r0, #12
 800b462:	f7fe feba 	bl	800a1da <memcpy>
 800b466:	4621      	mov	r1, r4
 800b468:	4648      	mov	r0, r9
 800b46a:	f000 f9f1 	bl	800b850 <_Bfree>
 800b46e:	4654      	mov	r4, sl
 800b470:	6922      	ldr	r2, [r4, #16]
 800b472:	1c51      	adds	r1, r2, #1
 800b474:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b478:	6121      	str	r1, [r4, #16]
 800b47a:	2101      	movs	r1, #1
 800b47c:	6151      	str	r1, [r2, #20]
 800b47e:	e7bc      	b.n	800b3fa <__gethex+0x396>
 800b480:	6921      	ldr	r1, [r4, #16]
 800b482:	4559      	cmp	r1, fp
 800b484:	dd0b      	ble.n	800b49e <__gethex+0x43a>
 800b486:	2101      	movs	r1, #1
 800b488:	4620      	mov	r0, r4
 800b48a:	f7ff fd83 	bl	800af94 <rshift>
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	3601      	adds	r6, #1
 800b492:	42b3      	cmp	r3, r6
 800b494:	f6ff aedb 	blt.w	800b24e <__gethex+0x1ea>
 800b498:	f04f 0801 	mov.w	r8, #1
 800b49c:	e7c2      	b.n	800b424 <__gethex+0x3c0>
 800b49e:	f015 051f 	ands.w	r5, r5, #31
 800b4a2:	d0f9      	beq.n	800b498 <__gethex+0x434>
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	441a      	add	r2, r3
 800b4a8:	f1c5 0520 	rsb	r5, r5, #32
 800b4ac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b4b0:	f000 fa80 	bl	800b9b4 <__hi0bits>
 800b4b4:	42a8      	cmp	r0, r5
 800b4b6:	dbe6      	blt.n	800b486 <__gethex+0x422>
 800b4b8:	e7ee      	b.n	800b498 <__gethex+0x434>
 800b4ba:	bf00      	nop
 800b4bc:	0800cf11 	.word	0x0800cf11

0800b4c0 <L_shift>:
 800b4c0:	f1c2 0208 	rsb	r2, r2, #8
 800b4c4:	0092      	lsls	r2, r2, #2
 800b4c6:	b570      	push	{r4, r5, r6, lr}
 800b4c8:	f1c2 0620 	rsb	r6, r2, #32
 800b4cc:	6843      	ldr	r3, [r0, #4]
 800b4ce:	6804      	ldr	r4, [r0, #0]
 800b4d0:	fa03 f506 	lsl.w	r5, r3, r6
 800b4d4:	432c      	orrs	r4, r5
 800b4d6:	40d3      	lsrs	r3, r2
 800b4d8:	6004      	str	r4, [r0, #0]
 800b4da:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4de:	4288      	cmp	r0, r1
 800b4e0:	d3f4      	bcc.n	800b4cc <L_shift+0xc>
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}

0800b4e4 <__match>:
 800b4e4:	b530      	push	{r4, r5, lr}
 800b4e6:	6803      	ldr	r3, [r0, #0]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ee:	b914      	cbnz	r4, 800b4f6 <__match+0x12>
 800b4f0:	6003      	str	r3, [r0, #0]
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	bd30      	pop	{r4, r5, pc}
 800b4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b4fe:	2d19      	cmp	r5, #25
 800b500:	bf98      	it	ls
 800b502:	3220      	addls	r2, #32
 800b504:	42a2      	cmp	r2, r4
 800b506:	d0f0      	beq.n	800b4ea <__match+0x6>
 800b508:	2000      	movs	r0, #0
 800b50a:	e7f3      	b.n	800b4f4 <__match+0x10>

0800b50c <__hexnan>:
 800b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	680b      	ldr	r3, [r1, #0]
 800b512:	6801      	ldr	r1, [r0, #0]
 800b514:	115e      	asrs	r6, r3, #5
 800b516:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b51a:	f013 031f 	ands.w	r3, r3, #31
 800b51e:	b087      	sub	sp, #28
 800b520:	bf18      	it	ne
 800b522:	3604      	addne	r6, #4
 800b524:	2500      	movs	r5, #0
 800b526:	1f37      	subs	r7, r6, #4
 800b528:	4682      	mov	sl, r0
 800b52a:	4690      	mov	r8, r2
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b532:	46b9      	mov	r9, r7
 800b534:	463c      	mov	r4, r7
 800b536:	9502      	str	r5, [sp, #8]
 800b538:	46ab      	mov	fp, r5
 800b53a:	784a      	ldrb	r2, [r1, #1]
 800b53c:	1c4b      	adds	r3, r1, #1
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	b342      	cbz	r2, 800b594 <__hexnan+0x88>
 800b542:	4610      	mov	r0, r2
 800b544:	9105      	str	r1, [sp, #20]
 800b546:	9204      	str	r2, [sp, #16]
 800b548:	f7ff fd76 	bl	800b038 <__hexdig_fun>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d14f      	bne.n	800b5f0 <__hexnan+0xe4>
 800b550:	9a04      	ldr	r2, [sp, #16]
 800b552:	9905      	ldr	r1, [sp, #20]
 800b554:	2a20      	cmp	r2, #32
 800b556:	d818      	bhi.n	800b58a <__hexnan+0x7e>
 800b558:	9b02      	ldr	r3, [sp, #8]
 800b55a:	459b      	cmp	fp, r3
 800b55c:	dd13      	ble.n	800b586 <__hexnan+0x7a>
 800b55e:	454c      	cmp	r4, r9
 800b560:	d206      	bcs.n	800b570 <__hexnan+0x64>
 800b562:	2d07      	cmp	r5, #7
 800b564:	dc04      	bgt.n	800b570 <__hexnan+0x64>
 800b566:	462a      	mov	r2, r5
 800b568:	4649      	mov	r1, r9
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7ff ffa8 	bl	800b4c0 <L_shift>
 800b570:	4544      	cmp	r4, r8
 800b572:	d950      	bls.n	800b616 <__hexnan+0x10a>
 800b574:	2300      	movs	r3, #0
 800b576:	f1a4 0904 	sub.w	r9, r4, #4
 800b57a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b57e:	f8cd b008 	str.w	fp, [sp, #8]
 800b582:	464c      	mov	r4, r9
 800b584:	461d      	mov	r5, r3
 800b586:	9903      	ldr	r1, [sp, #12]
 800b588:	e7d7      	b.n	800b53a <__hexnan+0x2e>
 800b58a:	2a29      	cmp	r2, #41	; 0x29
 800b58c:	d155      	bne.n	800b63a <__hexnan+0x12e>
 800b58e:	3102      	adds	r1, #2
 800b590:	f8ca 1000 	str.w	r1, [sl]
 800b594:	f1bb 0f00 	cmp.w	fp, #0
 800b598:	d04f      	beq.n	800b63a <__hexnan+0x12e>
 800b59a:	454c      	cmp	r4, r9
 800b59c:	d206      	bcs.n	800b5ac <__hexnan+0xa0>
 800b59e:	2d07      	cmp	r5, #7
 800b5a0:	dc04      	bgt.n	800b5ac <__hexnan+0xa0>
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f7ff ff8a 	bl	800b4c0 <L_shift>
 800b5ac:	4544      	cmp	r4, r8
 800b5ae:	d934      	bls.n	800b61a <__hexnan+0x10e>
 800b5b0:	f1a8 0204 	sub.w	r2, r8, #4
 800b5b4:	4623      	mov	r3, r4
 800b5b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5be:	429f      	cmp	r7, r3
 800b5c0:	d2f9      	bcs.n	800b5b6 <__hexnan+0xaa>
 800b5c2:	1b3b      	subs	r3, r7, r4
 800b5c4:	f023 0303 	bic.w	r3, r3, #3
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	3e03      	subs	r6, #3
 800b5cc:	3401      	adds	r4, #1
 800b5ce:	42a6      	cmp	r6, r4
 800b5d0:	bf38      	it	cc
 800b5d2:	2304      	movcc	r3, #4
 800b5d4:	4443      	add	r3, r8
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f843 2b04 	str.w	r2, [r3], #4
 800b5dc:	429f      	cmp	r7, r3
 800b5de:	d2fb      	bcs.n	800b5d8 <__hexnan+0xcc>
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	b91b      	cbnz	r3, 800b5ec <__hexnan+0xe0>
 800b5e4:	4547      	cmp	r7, r8
 800b5e6:	d126      	bne.n	800b636 <__hexnan+0x12a>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	2005      	movs	r0, #5
 800b5ee:	e025      	b.n	800b63c <__hexnan+0x130>
 800b5f0:	3501      	adds	r5, #1
 800b5f2:	2d08      	cmp	r5, #8
 800b5f4:	f10b 0b01 	add.w	fp, fp, #1
 800b5f8:	dd06      	ble.n	800b608 <__hexnan+0xfc>
 800b5fa:	4544      	cmp	r4, r8
 800b5fc:	d9c3      	bls.n	800b586 <__hexnan+0x7a>
 800b5fe:	2300      	movs	r3, #0
 800b600:	f844 3c04 	str.w	r3, [r4, #-4]
 800b604:	2501      	movs	r5, #1
 800b606:	3c04      	subs	r4, #4
 800b608:	6822      	ldr	r2, [r4, #0]
 800b60a:	f000 000f 	and.w	r0, r0, #15
 800b60e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b612:	6020      	str	r0, [r4, #0]
 800b614:	e7b7      	b.n	800b586 <__hexnan+0x7a>
 800b616:	2508      	movs	r5, #8
 800b618:	e7b5      	b.n	800b586 <__hexnan+0x7a>
 800b61a:	9b01      	ldr	r3, [sp, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d0df      	beq.n	800b5e0 <__hexnan+0xd4>
 800b620:	f1c3 0320 	rsb	r3, r3, #32
 800b624:	f04f 32ff 	mov.w	r2, #4294967295
 800b628:	40da      	lsrs	r2, r3
 800b62a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b62e:	4013      	ands	r3, r2
 800b630:	f846 3c04 	str.w	r3, [r6, #-4]
 800b634:	e7d4      	b.n	800b5e0 <__hexnan+0xd4>
 800b636:	3f04      	subs	r7, #4
 800b638:	e7d2      	b.n	800b5e0 <__hexnan+0xd4>
 800b63a:	2004      	movs	r0, #4
 800b63c:	b007      	add	sp, #28
 800b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b644 <malloc>:
 800b644:	4b02      	ldr	r3, [pc, #8]	; (800b650 <malloc+0xc>)
 800b646:	4601      	mov	r1, r0
 800b648:	6818      	ldr	r0, [r3, #0]
 800b64a:	f000 b823 	b.w	800b694 <_malloc_r>
 800b64e:	bf00      	nop
 800b650:	20000224 	.word	0x20000224

0800b654 <sbrk_aligned>:
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	4e0e      	ldr	r6, [pc, #56]	; (800b690 <sbrk_aligned+0x3c>)
 800b658:	460c      	mov	r4, r1
 800b65a:	6831      	ldr	r1, [r6, #0]
 800b65c:	4605      	mov	r5, r0
 800b65e:	b911      	cbnz	r1, 800b666 <sbrk_aligned+0x12>
 800b660:	f000 ff90 	bl	800c584 <_sbrk_r>
 800b664:	6030      	str	r0, [r6, #0]
 800b666:	4621      	mov	r1, r4
 800b668:	4628      	mov	r0, r5
 800b66a:	f000 ff8b 	bl	800c584 <_sbrk_r>
 800b66e:	1c43      	adds	r3, r0, #1
 800b670:	d00a      	beq.n	800b688 <sbrk_aligned+0x34>
 800b672:	1cc4      	adds	r4, r0, #3
 800b674:	f024 0403 	bic.w	r4, r4, #3
 800b678:	42a0      	cmp	r0, r4
 800b67a:	d007      	beq.n	800b68c <sbrk_aligned+0x38>
 800b67c:	1a21      	subs	r1, r4, r0
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 ff80 	bl	800c584 <_sbrk_r>
 800b684:	3001      	adds	r0, #1
 800b686:	d101      	bne.n	800b68c <sbrk_aligned+0x38>
 800b688:	f04f 34ff 	mov.w	r4, #4294967295
 800b68c:	4620      	mov	r0, r4
 800b68e:	bd70      	pop	{r4, r5, r6, pc}
 800b690:	20000700 	.word	0x20000700

0800b694 <_malloc_r>:
 800b694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b698:	1ccd      	adds	r5, r1, #3
 800b69a:	f025 0503 	bic.w	r5, r5, #3
 800b69e:	3508      	adds	r5, #8
 800b6a0:	2d0c      	cmp	r5, #12
 800b6a2:	bf38      	it	cc
 800b6a4:	250c      	movcc	r5, #12
 800b6a6:	2d00      	cmp	r5, #0
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	db01      	blt.n	800b6b0 <_malloc_r+0x1c>
 800b6ac:	42a9      	cmp	r1, r5
 800b6ae:	d905      	bls.n	800b6bc <_malloc_r+0x28>
 800b6b0:	230c      	movs	r3, #12
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	2600      	movs	r6, #0
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b790 <_malloc_r+0xfc>
 800b6c0:	f000 f87a 	bl	800b7b8 <__malloc_lock>
 800b6c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b6c8:	461c      	mov	r4, r3
 800b6ca:	bb5c      	cbnz	r4, 800b724 <_malloc_r+0x90>
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	f7ff ffc0 	bl	800b654 <sbrk_aligned>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	d155      	bne.n	800b786 <_malloc_r+0xf2>
 800b6da:	f8d8 4000 	ldr.w	r4, [r8]
 800b6de:	4626      	mov	r6, r4
 800b6e0:	2e00      	cmp	r6, #0
 800b6e2:	d145      	bne.n	800b770 <_malloc_r+0xdc>
 800b6e4:	2c00      	cmp	r4, #0
 800b6e6:	d048      	beq.n	800b77a <_malloc_r+0xe6>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	eb04 0903 	add.w	r9, r4, r3
 800b6f2:	f000 ff47 	bl	800c584 <_sbrk_r>
 800b6f6:	4581      	cmp	r9, r0
 800b6f8:	d13f      	bne.n	800b77a <_malloc_r+0xe6>
 800b6fa:	6821      	ldr	r1, [r4, #0]
 800b6fc:	1a6d      	subs	r5, r5, r1
 800b6fe:	4629      	mov	r1, r5
 800b700:	4638      	mov	r0, r7
 800b702:	f7ff ffa7 	bl	800b654 <sbrk_aligned>
 800b706:	3001      	adds	r0, #1
 800b708:	d037      	beq.n	800b77a <_malloc_r+0xe6>
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	442b      	add	r3, r5
 800b70e:	6023      	str	r3, [r4, #0]
 800b710:	f8d8 3000 	ldr.w	r3, [r8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d038      	beq.n	800b78a <_malloc_r+0xf6>
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	42a2      	cmp	r2, r4
 800b71c:	d12b      	bne.n	800b776 <_malloc_r+0xe2>
 800b71e:	2200      	movs	r2, #0
 800b720:	605a      	str	r2, [r3, #4]
 800b722:	e00f      	b.n	800b744 <_malloc_r+0xb0>
 800b724:	6822      	ldr	r2, [r4, #0]
 800b726:	1b52      	subs	r2, r2, r5
 800b728:	d41f      	bmi.n	800b76a <_malloc_r+0xd6>
 800b72a:	2a0b      	cmp	r2, #11
 800b72c:	d917      	bls.n	800b75e <_malloc_r+0xca>
 800b72e:	1961      	adds	r1, r4, r5
 800b730:	42a3      	cmp	r3, r4
 800b732:	6025      	str	r5, [r4, #0]
 800b734:	bf18      	it	ne
 800b736:	6059      	strne	r1, [r3, #4]
 800b738:	6863      	ldr	r3, [r4, #4]
 800b73a:	bf08      	it	eq
 800b73c:	f8c8 1000 	streq.w	r1, [r8]
 800b740:	5162      	str	r2, [r4, r5]
 800b742:	604b      	str	r3, [r1, #4]
 800b744:	4638      	mov	r0, r7
 800b746:	f104 060b 	add.w	r6, r4, #11
 800b74a:	f000 f83b 	bl	800b7c4 <__malloc_unlock>
 800b74e:	f026 0607 	bic.w	r6, r6, #7
 800b752:	1d23      	adds	r3, r4, #4
 800b754:	1af2      	subs	r2, r6, r3
 800b756:	d0ae      	beq.n	800b6b6 <_malloc_r+0x22>
 800b758:	1b9b      	subs	r3, r3, r6
 800b75a:	50a3      	str	r3, [r4, r2]
 800b75c:	e7ab      	b.n	800b6b6 <_malloc_r+0x22>
 800b75e:	42a3      	cmp	r3, r4
 800b760:	6862      	ldr	r2, [r4, #4]
 800b762:	d1dd      	bne.n	800b720 <_malloc_r+0x8c>
 800b764:	f8c8 2000 	str.w	r2, [r8]
 800b768:	e7ec      	b.n	800b744 <_malloc_r+0xb0>
 800b76a:	4623      	mov	r3, r4
 800b76c:	6864      	ldr	r4, [r4, #4]
 800b76e:	e7ac      	b.n	800b6ca <_malloc_r+0x36>
 800b770:	4634      	mov	r4, r6
 800b772:	6876      	ldr	r6, [r6, #4]
 800b774:	e7b4      	b.n	800b6e0 <_malloc_r+0x4c>
 800b776:	4613      	mov	r3, r2
 800b778:	e7cc      	b.n	800b714 <_malloc_r+0x80>
 800b77a:	230c      	movs	r3, #12
 800b77c:	603b      	str	r3, [r7, #0]
 800b77e:	4638      	mov	r0, r7
 800b780:	f000 f820 	bl	800b7c4 <__malloc_unlock>
 800b784:	e797      	b.n	800b6b6 <_malloc_r+0x22>
 800b786:	6025      	str	r5, [r4, #0]
 800b788:	e7dc      	b.n	800b744 <_malloc_r+0xb0>
 800b78a:	605b      	str	r3, [r3, #4]
 800b78c:	deff      	udf	#255	; 0xff
 800b78e:	bf00      	nop
 800b790:	200006fc 	.word	0x200006fc

0800b794 <__ascii_mbtowc>:
 800b794:	b082      	sub	sp, #8
 800b796:	b901      	cbnz	r1, 800b79a <__ascii_mbtowc+0x6>
 800b798:	a901      	add	r1, sp, #4
 800b79a:	b142      	cbz	r2, 800b7ae <__ascii_mbtowc+0x1a>
 800b79c:	b14b      	cbz	r3, 800b7b2 <__ascii_mbtowc+0x1e>
 800b79e:	7813      	ldrb	r3, [r2, #0]
 800b7a0:	600b      	str	r3, [r1, #0]
 800b7a2:	7812      	ldrb	r2, [r2, #0]
 800b7a4:	1e10      	subs	r0, r2, #0
 800b7a6:	bf18      	it	ne
 800b7a8:	2001      	movne	r0, #1
 800b7aa:	b002      	add	sp, #8
 800b7ac:	4770      	bx	lr
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	e7fb      	b.n	800b7aa <__ascii_mbtowc+0x16>
 800b7b2:	f06f 0001 	mvn.w	r0, #1
 800b7b6:	e7f8      	b.n	800b7aa <__ascii_mbtowc+0x16>

0800b7b8 <__malloc_lock>:
 800b7b8:	4801      	ldr	r0, [pc, #4]	; (800b7c0 <__malloc_lock+0x8>)
 800b7ba:	f7fe bd0c 	b.w	800a1d6 <__retarget_lock_acquire_recursive>
 800b7be:	bf00      	nop
 800b7c0:	200006f8 	.word	0x200006f8

0800b7c4 <__malloc_unlock>:
 800b7c4:	4801      	ldr	r0, [pc, #4]	; (800b7cc <__malloc_unlock+0x8>)
 800b7c6:	f7fe bd07 	b.w	800a1d8 <__retarget_lock_release_recursive>
 800b7ca:	bf00      	nop
 800b7cc:	200006f8 	.word	0x200006f8

0800b7d0 <_Balloc>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	69c6      	ldr	r6, [r0, #28]
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	460d      	mov	r5, r1
 800b7d8:	b976      	cbnz	r6, 800b7f8 <_Balloc+0x28>
 800b7da:	2010      	movs	r0, #16
 800b7dc:	f7ff ff32 	bl	800b644 <malloc>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	61e0      	str	r0, [r4, #28]
 800b7e4:	b920      	cbnz	r0, 800b7f0 <_Balloc+0x20>
 800b7e6:	4b18      	ldr	r3, [pc, #96]	; (800b848 <_Balloc+0x78>)
 800b7e8:	4818      	ldr	r0, [pc, #96]	; (800b84c <_Balloc+0x7c>)
 800b7ea:	216b      	movs	r1, #107	; 0x6b
 800b7ec:	f000 feda 	bl	800c5a4 <__assert_func>
 800b7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f4:	6006      	str	r6, [r0, #0]
 800b7f6:	60c6      	str	r6, [r0, #12]
 800b7f8:	69e6      	ldr	r6, [r4, #28]
 800b7fa:	68f3      	ldr	r3, [r6, #12]
 800b7fc:	b183      	cbz	r3, 800b820 <_Balloc+0x50>
 800b7fe:	69e3      	ldr	r3, [r4, #28]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b806:	b9b8      	cbnz	r0, 800b838 <_Balloc+0x68>
 800b808:	2101      	movs	r1, #1
 800b80a:	fa01 f605 	lsl.w	r6, r1, r5
 800b80e:	1d72      	adds	r2, r6, #5
 800b810:	0092      	lsls	r2, r2, #2
 800b812:	4620      	mov	r0, r4
 800b814:	f000 fee4 	bl	800c5e0 <_calloc_r>
 800b818:	b160      	cbz	r0, 800b834 <_Balloc+0x64>
 800b81a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b81e:	e00e      	b.n	800b83e <_Balloc+0x6e>
 800b820:	2221      	movs	r2, #33	; 0x21
 800b822:	2104      	movs	r1, #4
 800b824:	4620      	mov	r0, r4
 800b826:	f000 fedb 	bl	800c5e0 <_calloc_r>
 800b82a:	69e3      	ldr	r3, [r4, #28]
 800b82c:	60f0      	str	r0, [r6, #12]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1e4      	bne.n	800b7fe <_Balloc+0x2e>
 800b834:	2000      	movs	r0, #0
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	6802      	ldr	r2, [r0, #0]
 800b83a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b83e:	2300      	movs	r3, #0
 800b840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b844:	e7f7      	b.n	800b836 <_Balloc+0x66>
 800b846:	bf00      	nop
 800b848:	0800cea2 	.word	0x0800cea2
 800b84c:	0800cf82 	.word	0x0800cf82

0800b850 <_Bfree>:
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	69c6      	ldr	r6, [r0, #28]
 800b854:	4605      	mov	r5, r0
 800b856:	460c      	mov	r4, r1
 800b858:	b976      	cbnz	r6, 800b878 <_Bfree+0x28>
 800b85a:	2010      	movs	r0, #16
 800b85c:	f7ff fef2 	bl	800b644 <malloc>
 800b860:	4602      	mov	r2, r0
 800b862:	61e8      	str	r0, [r5, #28]
 800b864:	b920      	cbnz	r0, 800b870 <_Bfree+0x20>
 800b866:	4b09      	ldr	r3, [pc, #36]	; (800b88c <_Bfree+0x3c>)
 800b868:	4809      	ldr	r0, [pc, #36]	; (800b890 <_Bfree+0x40>)
 800b86a:	218f      	movs	r1, #143	; 0x8f
 800b86c:	f000 fe9a 	bl	800c5a4 <__assert_func>
 800b870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b874:	6006      	str	r6, [r0, #0]
 800b876:	60c6      	str	r6, [r0, #12]
 800b878:	b13c      	cbz	r4, 800b88a <_Bfree+0x3a>
 800b87a:	69eb      	ldr	r3, [r5, #28]
 800b87c:	6862      	ldr	r2, [r4, #4]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b884:	6021      	str	r1, [r4, #0]
 800b886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	0800cea2 	.word	0x0800cea2
 800b890:	0800cf82 	.word	0x0800cf82

0800b894 <__multadd>:
 800b894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b898:	690d      	ldr	r5, [r1, #16]
 800b89a:	4607      	mov	r7, r0
 800b89c:	460c      	mov	r4, r1
 800b89e:	461e      	mov	r6, r3
 800b8a0:	f101 0c14 	add.w	ip, r1, #20
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800b8aa:	b299      	uxth	r1, r3
 800b8ac:	fb02 6101 	mla	r1, r2, r1, r6
 800b8b0:	0c1e      	lsrs	r6, r3, #16
 800b8b2:	0c0b      	lsrs	r3, r1, #16
 800b8b4:	fb02 3306 	mla	r3, r2, r6, r3
 800b8b8:	b289      	uxth	r1, r1
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8c0:	4285      	cmp	r5, r0
 800b8c2:	f84c 1b04 	str.w	r1, [ip], #4
 800b8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8ca:	dcec      	bgt.n	800b8a6 <__multadd+0x12>
 800b8cc:	b30e      	cbz	r6, 800b912 <__multadd+0x7e>
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	42ab      	cmp	r3, r5
 800b8d2:	dc19      	bgt.n	800b908 <__multadd+0x74>
 800b8d4:	6861      	ldr	r1, [r4, #4]
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	3101      	adds	r1, #1
 800b8da:	f7ff ff79 	bl	800b7d0 <_Balloc>
 800b8de:	4680      	mov	r8, r0
 800b8e0:	b928      	cbnz	r0, 800b8ee <__multadd+0x5a>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	4b0c      	ldr	r3, [pc, #48]	; (800b918 <__multadd+0x84>)
 800b8e6:	480d      	ldr	r0, [pc, #52]	; (800b91c <__multadd+0x88>)
 800b8e8:	21ba      	movs	r1, #186	; 0xba
 800b8ea:	f000 fe5b 	bl	800c5a4 <__assert_func>
 800b8ee:	6922      	ldr	r2, [r4, #16]
 800b8f0:	3202      	adds	r2, #2
 800b8f2:	f104 010c 	add.w	r1, r4, #12
 800b8f6:	0092      	lsls	r2, r2, #2
 800b8f8:	300c      	adds	r0, #12
 800b8fa:	f7fe fc6e 	bl	800a1da <memcpy>
 800b8fe:	4621      	mov	r1, r4
 800b900:	4638      	mov	r0, r7
 800b902:	f7ff ffa5 	bl	800b850 <_Bfree>
 800b906:	4644      	mov	r4, r8
 800b908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b90c:	3501      	adds	r5, #1
 800b90e:	615e      	str	r6, [r3, #20]
 800b910:	6125      	str	r5, [r4, #16]
 800b912:	4620      	mov	r0, r4
 800b914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b918:	0800cf11 	.word	0x0800cf11
 800b91c:	0800cf82 	.word	0x0800cf82

0800b920 <__s2b>:
 800b920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b924:	460c      	mov	r4, r1
 800b926:	4615      	mov	r5, r2
 800b928:	461f      	mov	r7, r3
 800b92a:	2209      	movs	r2, #9
 800b92c:	3308      	adds	r3, #8
 800b92e:	4606      	mov	r6, r0
 800b930:	fb93 f3f2 	sdiv	r3, r3, r2
 800b934:	2100      	movs	r1, #0
 800b936:	2201      	movs	r2, #1
 800b938:	429a      	cmp	r2, r3
 800b93a:	db09      	blt.n	800b950 <__s2b+0x30>
 800b93c:	4630      	mov	r0, r6
 800b93e:	f7ff ff47 	bl	800b7d0 <_Balloc>
 800b942:	b940      	cbnz	r0, 800b956 <__s2b+0x36>
 800b944:	4602      	mov	r2, r0
 800b946:	4b19      	ldr	r3, [pc, #100]	; (800b9ac <__s2b+0x8c>)
 800b948:	4819      	ldr	r0, [pc, #100]	; (800b9b0 <__s2b+0x90>)
 800b94a:	21d3      	movs	r1, #211	; 0xd3
 800b94c:	f000 fe2a 	bl	800c5a4 <__assert_func>
 800b950:	0052      	lsls	r2, r2, #1
 800b952:	3101      	adds	r1, #1
 800b954:	e7f0      	b.n	800b938 <__s2b+0x18>
 800b956:	9b08      	ldr	r3, [sp, #32]
 800b958:	6143      	str	r3, [r0, #20]
 800b95a:	2d09      	cmp	r5, #9
 800b95c:	f04f 0301 	mov.w	r3, #1
 800b960:	6103      	str	r3, [r0, #16]
 800b962:	dd16      	ble.n	800b992 <__s2b+0x72>
 800b964:	f104 0909 	add.w	r9, r4, #9
 800b968:	46c8      	mov	r8, r9
 800b96a:	442c      	add	r4, r5
 800b96c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b970:	4601      	mov	r1, r0
 800b972:	3b30      	subs	r3, #48	; 0x30
 800b974:	220a      	movs	r2, #10
 800b976:	4630      	mov	r0, r6
 800b978:	f7ff ff8c 	bl	800b894 <__multadd>
 800b97c:	45a0      	cmp	r8, r4
 800b97e:	d1f5      	bne.n	800b96c <__s2b+0x4c>
 800b980:	f1a5 0408 	sub.w	r4, r5, #8
 800b984:	444c      	add	r4, r9
 800b986:	1b2d      	subs	r5, r5, r4
 800b988:	1963      	adds	r3, r4, r5
 800b98a:	42bb      	cmp	r3, r7
 800b98c:	db04      	blt.n	800b998 <__s2b+0x78>
 800b98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b992:	340a      	adds	r4, #10
 800b994:	2509      	movs	r5, #9
 800b996:	e7f6      	b.n	800b986 <__s2b+0x66>
 800b998:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b99c:	4601      	mov	r1, r0
 800b99e:	3b30      	subs	r3, #48	; 0x30
 800b9a0:	220a      	movs	r2, #10
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff ff76 	bl	800b894 <__multadd>
 800b9a8:	e7ee      	b.n	800b988 <__s2b+0x68>
 800b9aa:	bf00      	nop
 800b9ac:	0800cf11 	.word	0x0800cf11
 800b9b0:	0800cf82 	.word	0x0800cf82

0800b9b4 <__hi0bits>:
 800b9b4:	0c03      	lsrs	r3, r0, #16
 800b9b6:	041b      	lsls	r3, r3, #16
 800b9b8:	b9d3      	cbnz	r3, 800b9f0 <__hi0bits+0x3c>
 800b9ba:	0400      	lsls	r0, r0, #16
 800b9bc:	2310      	movs	r3, #16
 800b9be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9c2:	bf04      	itt	eq
 800b9c4:	0200      	lsleq	r0, r0, #8
 800b9c6:	3308      	addeq	r3, #8
 800b9c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9cc:	bf04      	itt	eq
 800b9ce:	0100      	lsleq	r0, r0, #4
 800b9d0:	3304      	addeq	r3, #4
 800b9d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9d6:	bf04      	itt	eq
 800b9d8:	0080      	lsleq	r0, r0, #2
 800b9da:	3302      	addeq	r3, #2
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	db05      	blt.n	800b9ec <__hi0bits+0x38>
 800b9e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9e4:	f103 0301 	add.w	r3, r3, #1
 800b9e8:	bf08      	it	eq
 800b9ea:	2320      	moveq	r3, #32
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	4770      	bx	lr
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	e7e4      	b.n	800b9be <__hi0bits+0xa>

0800b9f4 <__lo0bits>:
 800b9f4:	6803      	ldr	r3, [r0, #0]
 800b9f6:	f013 0207 	ands.w	r2, r3, #7
 800b9fa:	d00c      	beq.n	800ba16 <__lo0bits+0x22>
 800b9fc:	07d9      	lsls	r1, r3, #31
 800b9fe:	d422      	bmi.n	800ba46 <__lo0bits+0x52>
 800ba00:	079a      	lsls	r2, r3, #30
 800ba02:	bf49      	itett	mi
 800ba04:	085b      	lsrmi	r3, r3, #1
 800ba06:	089b      	lsrpl	r3, r3, #2
 800ba08:	6003      	strmi	r3, [r0, #0]
 800ba0a:	2201      	movmi	r2, #1
 800ba0c:	bf5c      	itt	pl
 800ba0e:	6003      	strpl	r3, [r0, #0]
 800ba10:	2202      	movpl	r2, #2
 800ba12:	4610      	mov	r0, r2
 800ba14:	4770      	bx	lr
 800ba16:	b299      	uxth	r1, r3
 800ba18:	b909      	cbnz	r1, 800ba1e <__lo0bits+0x2a>
 800ba1a:	0c1b      	lsrs	r3, r3, #16
 800ba1c:	2210      	movs	r2, #16
 800ba1e:	b2d9      	uxtb	r1, r3
 800ba20:	b909      	cbnz	r1, 800ba26 <__lo0bits+0x32>
 800ba22:	3208      	adds	r2, #8
 800ba24:	0a1b      	lsrs	r3, r3, #8
 800ba26:	0719      	lsls	r1, r3, #28
 800ba28:	bf04      	itt	eq
 800ba2a:	091b      	lsreq	r3, r3, #4
 800ba2c:	3204      	addeq	r2, #4
 800ba2e:	0799      	lsls	r1, r3, #30
 800ba30:	bf04      	itt	eq
 800ba32:	089b      	lsreq	r3, r3, #2
 800ba34:	3202      	addeq	r2, #2
 800ba36:	07d9      	lsls	r1, r3, #31
 800ba38:	d403      	bmi.n	800ba42 <__lo0bits+0x4e>
 800ba3a:	085b      	lsrs	r3, r3, #1
 800ba3c:	f102 0201 	add.w	r2, r2, #1
 800ba40:	d003      	beq.n	800ba4a <__lo0bits+0x56>
 800ba42:	6003      	str	r3, [r0, #0]
 800ba44:	e7e5      	b.n	800ba12 <__lo0bits+0x1e>
 800ba46:	2200      	movs	r2, #0
 800ba48:	e7e3      	b.n	800ba12 <__lo0bits+0x1e>
 800ba4a:	2220      	movs	r2, #32
 800ba4c:	e7e1      	b.n	800ba12 <__lo0bits+0x1e>
	...

0800ba50 <__i2b>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	460c      	mov	r4, r1
 800ba54:	2101      	movs	r1, #1
 800ba56:	f7ff febb 	bl	800b7d0 <_Balloc>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	b928      	cbnz	r0, 800ba6a <__i2b+0x1a>
 800ba5e:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <__i2b+0x24>)
 800ba60:	4805      	ldr	r0, [pc, #20]	; (800ba78 <__i2b+0x28>)
 800ba62:	f240 1145 	movw	r1, #325	; 0x145
 800ba66:	f000 fd9d 	bl	800c5a4 <__assert_func>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	6144      	str	r4, [r0, #20]
 800ba6e:	6103      	str	r3, [r0, #16]
 800ba70:	bd10      	pop	{r4, pc}
 800ba72:	bf00      	nop
 800ba74:	0800cf11 	.word	0x0800cf11
 800ba78:	0800cf82 	.word	0x0800cf82

0800ba7c <__multiply>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	4691      	mov	r9, r2
 800ba82:	690a      	ldr	r2, [r1, #16]
 800ba84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	bfb8      	it	lt
 800ba8c:	460b      	movlt	r3, r1
 800ba8e:	460c      	mov	r4, r1
 800ba90:	bfbc      	itt	lt
 800ba92:	464c      	movlt	r4, r9
 800ba94:	4699      	movlt	r9, r3
 800ba96:	6927      	ldr	r7, [r4, #16]
 800ba98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba9c:	68a3      	ldr	r3, [r4, #8]
 800ba9e:	6861      	ldr	r1, [r4, #4]
 800baa0:	eb07 060a 	add.w	r6, r7, sl
 800baa4:	42b3      	cmp	r3, r6
 800baa6:	b085      	sub	sp, #20
 800baa8:	bfb8      	it	lt
 800baaa:	3101      	addlt	r1, #1
 800baac:	f7ff fe90 	bl	800b7d0 <_Balloc>
 800bab0:	b930      	cbnz	r0, 800bac0 <__multiply+0x44>
 800bab2:	4602      	mov	r2, r0
 800bab4:	4b44      	ldr	r3, [pc, #272]	; (800bbc8 <__multiply+0x14c>)
 800bab6:	4845      	ldr	r0, [pc, #276]	; (800bbcc <__multiply+0x150>)
 800bab8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800babc:	f000 fd72 	bl	800c5a4 <__assert_func>
 800bac0:	f100 0514 	add.w	r5, r0, #20
 800bac4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bac8:	462b      	mov	r3, r5
 800baca:	2200      	movs	r2, #0
 800bacc:	4543      	cmp	r3, r8
 800bace:	d321      	bcc.n	800bb14 <__multiply+0x98>
 800bad0:	f104 0314 	add.w	r3, r4, #20
 800bad4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bad8:	f109 0314 	add.w	r3, r9, #20
 800badc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bae0:	9202      	str	r2, [sp, #8]
 800bae2:	1b3a      	subs	r2, r7, r4
 800bae4:	3a15      	subs	r2, #21
 800bae6:	f022 0203 	bic.w	r2, r2, #3
 800baea:	3204      	adds	r2, #4
 800baec:	f104 0115 	add.w	r1, r4, #21
 800baf0:	428f      	cmp	r7, r1
 800baf2:	bf38      	it	cc
 800baf4:	2204      	movcc	r2, #4
 800baf6:	9201      	str	r2, [sp, #4]
 800baf8:	9a02      	ldr	r2, [sp, #8]
 800bafa:	9303      	str	r3, [sp, #12]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d80c      	bhi.n	800bb1a <__multiply+0x9e>
 800bb00:	2e00      	cmp	r6, #0
 800bb02:	dd03      	ble.n	800bb0c <__multiply+0x90>
 800bb04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d05b      	beq.n	800bbc4 <__multiply+0x148>
 800bb0c:	6106      	str	r6, [r0, #16]
 800bb0e:	b005      	add	sp, #20
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	f843 2b04 	str.w	r2, [r3], #4
 800bb18:	e7d8      	b.n	800bacc <__multiply+0x50>
 800bb1a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb1e:	f1ba 0f00 	cmp.w	sl, #0
 800bb22:	d024      	beq.n	800bb6e <__multiply+0xf2>
 800bb24:	f104 0e14 	add.w	lr, r4, #20
 800bb28:	46a9      	mov	r9, r5
 800bb2a:	f04f 0c00 	mov.w	ip, #0
 800bb2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb32:	f8d9 1000 	ldr.w	r1, [r9]
 800bb36:	fa1f fb82 	uxth.w	fp, r2
 800bb3a:	b289      	uxth	r1, r1
 800bb3c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb44:	f8d9 2000 	ldr.w	r2, [r9]
 800bb48:	4461      	add	r1, ip
 800bb4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb4e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb56:	b289      	uxth	r1, r1
 800bb58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb5c:	4577      	cmp	r7, lr
 800bb5e:	f849 1b04 	str.w	r1, [r9], #4
 800bb62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb66:	d8e2      	bhi.n	800bb2e <__multiply+0xb2>
 800bb68:	9a01      	ldr	r2, [sp, #4]
 800bb6a:	f845 c002 	str.w	ip, [r5, r2]
 800bb6e:	9a03      	ldr	r2, [sp, #12]
 800bb70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb74:	3304      	adds	r3, #4
 800bb76:	f1b9 0f00 	cmp.w	r9, #0
 800bb7a:	d021      	beq.n	800bbc0 <__multiply+0x144>
 800bb7c:	6829      	ldr	r1, [r5, #0]
 800bb7e:	f104 0c14 	add.w	ip, r4, #20
 800bb82:	46ae      	mov	lr, r5
 800bb84:	f04f 0a00 	mov.w	sl, #0
 800bb88:	f8bc b000 	ldrh.w	fp, [ip]
 800bb8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb90:	fb09 220b 	mla	r2, r9, fp, r2
 800bb94:	4452      	add	r2, sl
 800bb96:	b289      	uxth	r1, r1
 800bb98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb9c:	f84e 1b04 	str.w	r1, [lr], #4
 800bba0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bba4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bba8:	f8be 1000 	ldrh.w	r1, [lr]
 800bbac:	fb09 110a 	mla	r1, r9, sl, r1
 800bbb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bbb4:	4567      	cmp	r7, ip
 800bbb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbba:	d8e5      	bhi.n	800bb88 <__multiply+0x10c>
 800bbbc:	9a01      	ldr	r2, [sp, #4]
 800bbbe:	50a9      	str	r1, [r5, r2]
 800bbc0:	3504      	adds	r5, #4
 800bbc2:	e799      	b.n	800baf8 <__multiply+0x7c>
 800bbc4:	3e01      	subs	r6, #1
 800bbc6:	e79b      	b.n	800bb00 <__multiply+0x84>
 800bbc8:	0800cf11 	.word	0x0800cf11
 800bbcc:	0800cf82 	.word	0x0800cf82

0800bbd0 <__pow5mult>:
 800bbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd4:	4615      	mov	r5, r2
 800bbd6:	f012 0203 	ands.w	r2, r2, #3
 800bbda:	4606      	mov	r6, r0
 800bbdc:	460f      	mov	r7, r1
 800bbde:	d007      	beq.n	800bbf0 <__pow5mult+0x20>
 800bbe0:	4c25      	ldr	r4, [pc, #148]	; (800bc78 <__pow5mult+0xa8>)
 800bbe2:	3a01      	subs	r2, #1
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbea:	f7ff fe53 	bl	800b894 <__multadd>
 800bbee:	4607      	mov	r7, r0
 800bbf0:	10ad      	asrs	r5, r5, #2
 800bbf2:	d03d      	beq.n	800bc70 <__pow5mult+0xa0>
 800bbf4:	69f4      	ldr	r4, [r6, #28]
 800bbf6:	b97c      	cbnz	r4, 800bc18 <__pow5mult+0x48>
 800bbf8:	2010      	movs	r0, #16
 800bbfa:	f7ff fd23 	bl	800b644 <malloc>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	61f0      	str	r0, [r6, #28]
 800bc02:	b928      	cbnz	r0, 800bc10 <__pow5mult+0x40>
 800bc04:	4b1d      	ldr	r3, [pc, #116]	; (800bc7c <__pow5mult+0xac>)
 800bc06:	481e      	ldr	r0, [pc, #120]	; (800bc80 <__pow5mult+0xb0>)
 800bc08:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bc0c:	f000 fcca 	bl	800c5a4 <__assert_func>
 800bc10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc14:	6004      	str	r4, [r0, #0]
 800bc16:	60c4      	str	r4, [r0, #12]
 800bc18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bc1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc20:	b94c      	cbnz	r4, 800bc36 <__pow5mult+0x66>
 800bc22:	f240 2171 	movw	r1, #625	; 0x271
 800bc26:	4630      	mov	r0, r6
 800bc28:	f7ff ff12 	bl	800ba50 <__i2b>
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc32:	4604      	mov	r4, r0
 800bc34:	6003      	str	r3, [r0, #0]
 800bc36:	f04f 0900 	mov.w	r9, #0
 800bc3a:	07eb      	lsls	r3, r5, #31
 800bc3c:	d50a      	bpl.n	800bc54 <__pow5mult+0x84>
 800bc3e:	4639      	mov	r1, r7
 800bc40:	4622      	mov	r2, r4
 800bc42:	4630      	mov	r0, r6
 800bc44:	f7ff ff1a 	bl	800ba7c <__multiply>
 800bc48:	4639      	mov	r1, r7
 800bc4a:	4680      	mov	r8, r0
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f7ff fdff 	bl	800b850 <_Bfree>
 800bc52:	4647      	mov	r7, r8
 800bc54:	106d      	asrs	r5, r5, #1
 800bc56:	d00b      	beq.n	800bc70 <__pow5mult+0xa0>
 800bc58:	6820      	ldr	r0, [r4, #0]
 800bc5a:	b938      	cbnz	r0, 800bc6c <__pow5mult+0x9c>
 800bc5c:	4622      	mov	r2, r4
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7ff ff0b 	bl	800ba7c <__multiply>
 800bc66:	6020      	str	r0, [r4, #0]
 800bc68:	f8c0 9000 	str.w	r9, [r0]
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	e7e4      	b.n	800bc3a <__pow5mult+0x6a>
 800bc70:	4638      	mov	r0, r7
 800bc72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc76:	bf00      	nop
 800bc78:	0800d0d0 	.word	0x0800d0d0
 800bc7c:	0800cea2 	.word	0x0800cea2
 800bc80:	0800cf82 	.word	0x0800cf82

0800bc84 <__lshift>:
 800bc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	460c      	mov	r4, r1
 800bc8a:	6849      	ldr	r1, [r1, #4]
 800bc8c:	6923      	ldr	r3, [r4, #16]
 800bc8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc92:	68a3      	ldr	r3, [r4, #8]
 800bc94:	4607      	mov	r7, r0
 800bc96:	4691      	mov	r9, r2
 800bc98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc9c:	f108 0601 	add.w	r6, r8, #1
 800bca0:	42b3      	cmp	r3, r6
 800bca2:	db0b      	blt.n	800bcbc <__lshift+0x38>
 800bca4:	4638      	mov	r0, r7
 800bca6:	f7ff fd93 	bl	800b7d0 <_Balloc>
 800bcaa:	4605      	mov	r5, r0
 800bcac:	b948      	cbnz	r0, 800bcc2 <__lshift+0x3e>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	4b28      	ldr	r3, [pc, #160]	; (800bd54 <__lshift+0xd0>)
 800bcb2:	4829      	ldr	r0, [pc, #164]	; (800bd58 <__lshift+0xd4>)
 800bcb4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bcb8:	f000 fc74 	bl	800c5a4 <__assert_func>
 800bcbc:	3101      	adds	r1, #1
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	e7ee      	b.n	800bca0 <__lshift+0x1c>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	f100 0114 	add.w	r1, r0, #20
 800bcc8:	f100 0210 	add.w	r2, r0, #16
 800bccc:	4618      	mov	r0, r3
 800bcce:	4553      	cmp	r3, sl
 800bcd0:	db33      	blt.n	800bd3a <__lshift+0xb6>
 800bcd2:	6920      	ldr	r0, [r4, #16]
 800bcd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcd8:	f104 0314 	add.w	r3, r4, #20
 800bcdc:	f019 091f 	ands.w	r9, r9, #31
 800bce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bce4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bce8:	d02b      	beq.n	800bd42 <__lshift+0xbe>
 800bcea:	f1c9 0e20 	rsb	lr, r9, #32
 800bcee:	468a      	mov	sl, r1
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	6818      	ldr	r0, [r3, #0]
 800bcf4:	fa00 f009 	lsl.w	r0, r0, r9
 800bcf8:	4310      	orrs	r0, r2
 800bcfa:	f84a 0b04 	str.w	r0, [sl], #4
 800bcfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd02:	459c      	cmp	ip, r3
 800bd04:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd08:	d8f3      	bhi.n	800bcf2 <__lshift+0x6e>
 800bd0a:	ebac 0304 	sub.w	r3, ip, r4
 800bd0e:	3b15      	subs	r3, #21
 800bd10:	f023 0303 	bic.w	r3, r3, #3
 800bd14:	3304      	adds	r3, #4
 800bd16:	f104 0015 	add.w	r0, r4, #21
 800bd1a:	4584      	cmp	ip, r0
 800bd1c:	bf38      	it	cc
 800bd1e:	2304      	movcc	r3, #4
 800bd20:	50ca      	str	r2, [r1, r3]
 800bd22:	b10a      	cbz	r2, 800bd28 <__lshift+0xa4>
 800bd24:	f108 0602 	add.w	r6, r8, #2
 800bd28:	3e01      	subs	r6, #1
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	612e      	str	r6, [r5, #16]
 800bd2e:	4621      	mov	r1, r4
 800bd30:	f7ff fd8e 	bl	800b850 <_Bfree>
 800bd34:	4628      	mov	r0, r5
 800bd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd3e:	3301      	adds	r3, #1
 800bd40:	e7c5      	b.n	800bcce <__lshift+0x4a>
 800bd42:	3904      	subs	r1, #4
 800bd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd48:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd4c:	459c      	cmp	ip, r3
 800bd4e:	d8f9      	bhi.n	800bd44 <__lshift+0xc0>
 800bd50:	e7ea      	b.n	800bd28 <__lshift+0xa4>
 800bd52:	bf00      	nop
 800bd54:	0800cf11 	.word	0x0800cf11
 800bd58:	0800cf82 	.word	0x0800cf82

0800bd5c <__mcmp>:
 800bd5c:	b530      	push	{r4, r5, lr}
 800bd5e:	6902      	ldr	r2, [r0, #16]
 800bd60:	690c      	ldr	r4, [r1, #16]
 800bd62:	1b12      	subs	r2, r2, r4
 800bd64:	d10e      	bne.n	800bd84 <__mcmp+0x28>
 800bd66:	f100 0314 	add.w	r3, r0, #20
 800bd6a:	3114      	adds	r1, #20
 800bd6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd7c:	42a5      	cmp	r5, r4
 800bd7e:	d003      	beq.n	800bd88 <__mcmp+0x2c>
 800bd80:	d305      	bcc.n	800bd8e <__mcmp+0x32>
 800bd82:	2201      	movs	r2, #1
 800bd84:	4610      	mov	r0, r2
 800bd86:	bd30      	pop	{r4, r5, pc}
 800bd88:	4283      	cmp	r3, r0
 800bd8a:	d3f3      	bcc.n	800bd74 <__mcmp+0x18>
 800bd8c:	e7fa      	b.n	800bd84 <__mcmp+0x28>
 800bd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd92:	e7f7      	b.n	800bd84 <__mcmp+0x28>

0800bd94 <__mdiff>:
 800bd94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd98:	460c      	mov	r4, r1
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4690      	mov	r8, r2
 800bda2:	f7ff ffdb 	bl	800bd5c <__mcmp>
 800bda6:	1e05      	subs	r5, r0, #0
 800bda8:	d110      	bne.n	800bdcc <__mdiff+0x38>
 800bdaa:	4629      	mov	r1, r5
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff fd0f 	bl	800b7d0 <_Balloc>
 800bdb2:	b930      	cbnz	r0, 800bdc2 <__mdiff+0x2e>
 800bdb4:	4b3a      	ldr	r3, [pc, #232]	; (800bea0 <__mdiff+0x10c>)
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	f240 2137 	movw	r1, #567	; 0x237
 800bdbc:	4839      	ldr	r0, [pc, #228]	; (800bea4 <__mdiff+0x110>)
 800bdbe:	f000 fbf1 	bl	800c5a4 <__assert_func>
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdcc:	bfa4      	itt	ge
 800bdce:	4643      	movge	r3, r8
 800bdd0:	46a0      	movge	r8, r4
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bdd8:	bfa6      	itte	ge
 800bdda:	461c      	movge	r4, r3
 800bddc:	2500      	movge	r5, #0
 800bdde:	2501      	movlt	r5, #1
 800bde0:	f7ff fcf6 	bl	800b7d0 <_Balloc>
 800bde4:	b920      	cbnz	r0, 800bdf0 <__mdiff+0x5c>
 800bde6:	4b2e      	ldr	r3, [pc, #184]	; (800bea0 <__mdiff+0x10c>)
 800bde8:	4602      	mov	r2, r0
 800bdea:	f240 2145 	movw	r1, #581	; 0x245
 800bdee:	e7e5      	b.n	800bdbc <__mdiff+0x28>
 800bdf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdf4:	6926      	ldr	r6, [r4, #16]
 800bdf6:	60c5      	str	r5, [r0, #12]
 800bdf8:	f104 0914 	add.w	r9, r4, #20
 800bdfc:	f108 0514 	add.w	r5, r8, #20
 800be00:	f100 0e14 	add.w	lr, r0, #20
 800be04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800be08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be0c:	f108 0210 	add.w	r2, r8, #16
 800be10:	46f2      	mov	sl, lr
 800be12:	2100      	movs	r1, #0
 800be14:	f859 3b04 	ldr.w	r3, [r9], #4
 800be18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be1c:	fa11 f88b 	uxtah	r8, r1, fp
 800be20:	b299      	uxth	r1, r3
 800be22:	0c1b      	lsrs	r3, r3, #16
 800be24:	eba8 0801 	sub.w	r8, r8, r1
 800be28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be30:	fa1f f888 	uxth.w	r8, r8
 800be34:	1419      	asrs	r1, r3, #16
 800be36:	454e      	cmp	r6, r9
 800be38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be3c:	f84a 3b04 	str.w	r3, [sl], #4
 800be40:	d8e8      	bhi.n	800be14 <__mdiff+0x80>
 800be42:	1b33      	subs	r3, r6, r4
 800be44:	3b15      	subs	r3, #21
 800be46:	f023 0303 	bic.w	r3, r3, #3
 800be4a:	3304      	adds	r3, #4
 800be4c:	3415      	adds	r4, #21
 800be4e:	42a6      	cmp	r6, r4
 800be50:	bf38      	it	cc
 800be52:	2304      	movcc	r3, #4
 800be54:	441d      	add	r5, r3
 800be56:	4473      	add	r3, lr
 800be58:	469e      	mov	lr, r3
 800be5a:	462e      	mov	r6, r5
 800be5c:	4566      	cmp	r6, ip
 800be5e:	d30e      	bcc.n	800be7e <__mdiff+0xea>
 800be60:	f10c 0203 	add.w	r2, ip, #3
 800be64:	1b52      	subs	r2, r2, r5
 800be66:	f022 0203 	bic.w	r2, r2, #3
 800be6a:	3d03      	subs	r5, #3
 800be6c:	45ac      	cmp	ip, r5
 800be6e:	bf38      	it	cc
 800be70:	2200      	movcc	r2, #0
 800be72:	4413      	add	r3, r2
 800be74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800be78:	b17a      	cbz	r2, 800be9a <__mdiff+0x106>
 800be7a:	6107      	str	r7, [r0, #16]
 800be7c:	e7a4      	b.n	800bdc8 <__mdiff+0x34>
 800be7e:	f856 8b04 	ldr.w	r8, [r6], #4
 800be82:	fa11 f288 	uxtah	r2, r1, r8
 800be86:	1414      	asrs	r4, r2, #16
 800be88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be8c:	b292      	uxth	r2, r2
 800be8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be92:	f84e 2b04 	str.w	r2, [lr], #4
 800be96:	1421      	asrs	r1, r4, #16
 800be98:	e7e0      	b.n	800be5c <__mdiff+0xc8>
 800be9a:	3f01      	subs	r7, #1
 800be9c:	e7ea      	b.n	800be74 <__mdiff+0xe0>
 800be9e:	bf00      	nop
 800bea0:	0800cf11 	.word	0x0800cf11
 800bea4:	0800cf82 	.word	0x0800cf82

0800bea8 <__ulp>:
 800bea8:	b082      	sub	sp, #8
 800beaa:	ed8d 0b00 	vstr	d0, [sp]
 800beae:	9a01      	ldr	r2, [sp, #4]
 800beb0:	4b0f      	ldr	r3, [pc, #60]	; (800bef0 <__ulp+0x48>)
 800beb2:	4013      	ands	r3, r2
 800beb4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	dc08      	bgt.n	800bece <__ulp+0x26>
 800bebc:	425b      	negs	r3, r3
 800bebe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bec2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bec6:	da04      	bge.n	800bed2 <__ulp+0x2a>
 800bec8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800becc:	4113      	asrs	r3, r2
 800bece:	2200      	movs	r2, #0
 800bed0:	e008      	b.n	800bee4 <__ulp+0x3c>
 800bed2:	f1a2 0314 	sub.w	r3, r2, #20
 800bed6:	2b1e      	cmp	r3, #30
 800bed8:	bfda      	itte	le
 800beda:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bede:	40da      	lsrle	r2, r3
 800bee0:	2201      	movgt	r2, #1
 800bee2:	2300      	movs	r3, #0
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	ec41 0b10 	vmov	d0, r0, r1
 800beec:	b002      	add	sp, #8
 800beee:	4770      	bx	lr
 800bef0:	7ff00000 	.word	0x7ff00000

0800bef4 <__b2d>:
 800bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef8:	6906      	ldr	r6, [r0, #16]
 800befa:	f100 0814 	add.w	r8, r0, #20
 800befe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bf02:	1f37      	subs	r7, r6, #4
 800bf04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf08:	4610      	mov	r0, r2
 800bf0a:	f7ff fd53 	bl	800b9b4 <__hi0bits>
 800bf0e:	f1c0 0320 	rsb	r3, r0, #32
 800bf12:	280a      	cmp	r0, #10
 800bf14:	600b      	str	r3, [r1, #0]
 800bf16:	491b      	ldr	r1, [pc, #108]	; (800bf84 <__b2d+0x90>)
 800bf18:	dc15      	bgt.n	800bf46 <__b2d+0x52>
 800bf1a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bf1e:	fa22 f30c 	lsr.w	r3, r2, ip
 800bf22:	45b8      	cmp	r8, r7
 800bf24:	ea43 0501 	orr.w	r5, r3, r1
 800bf28:	bf34      	ite	cc
 800bf2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf2e:	2300      	movcs	r3, #0
 800bf30:	3015      	adds	r0, #21
 800bf32:	fa02 f000 	lsl.w	r0, r2, r0
 800bf36:	fa23 f30c 	lsr.w	r3, r3, ip
 800bf3a:	4303      	orrs	r3, r0
 800bf3c:	461c      	mov	r4, r3
 800bf3e:	ec45 4b10 	vmov	d0, r4, r5
 800bf42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf46:	45b8      	cmp	r8, r7
 800bf48:	bf3a      	itte	cc
 800bf4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf4e:	f1a6 0708 	subcc.w	r7, r6, #8
 800bf52:	2300      	movcs	r3, #0
 800bf54:	380b      	subs	r0, #11
 800bf56:	d012      	beq.n	800bf7e <__b2d+0x8a>
 800bf58:	f1c0 0120 	rsb	r1, r0, #32
 800bf5c:	fa23 f401 	lsr.w	r4, r3, r1
 800bf60:	4082      	lsls	r2, r0
 800bf62:	4322      	orrs	r2, r4
 800bf64:	4547      	cmp	r7, r8
 800bf66:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bf6a:	bf8c      	ite	hi
 800bf6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf70:	2200      	movls	r2, #0
 800bf72:	4083      	lsls	r3, r0
 800bf74:	40ca      	lsrs	r2, r1
 800bf76:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	e7de      	b.n	800bf3c <__b2d+0x48>
 800bf7e:	ea42 0501 	orr.w	r5, r2, r1
 800bf82:	e7db      	b.n	800bf3c <__b2d+0x48>
 800bf84:	3ff00000 	.word	0x3ff00000

0800bf88 <__d2b>:
 800bf88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	460f      	mov	r7, r1
 800bf8e:	2101      	movs	r1, #1
 800bf90:	ec59 8b10 	vmov	r8, r9, d0
 800bf94:	4616      	mov	r6, r2
 800bf96:	f7ff fc1b 	bl	800b7d0 <_Balloc>
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	b930      	cbnz	r0, 800bfac <__d2b+0x24>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	4b24      	ldr	r3, [pc, #144]	; (800c034 <__d2b+0xac>)
 800bfa2:	4825      	ldr	r0, [pc, #148]	; (800c038 <__d2b+0xb0>)
 800bfa4:	f240 310f 	movw	r1, #783	; 0x30f
 800bfa8:	f000 fafc 	bl	800c5a4 <__assert_func>
 800bfac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfb4:	bb2d      	cbnz	r5, 800c002 <__d2b+0x7a>
 800bfb6:	9301      	str	r3, [sp, #4]
 800bfb8:	f1b8 0300 	subs.w	r3, r8, #0
 800bfbc:	d026      	beq.n	800c00c <__d2b+0x84>
 800bfbe:	4668      	mov	r0, sp
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	f7ff fd17 	bl	800b9f4 <__lo0bits>
 800bfc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfca:	b1e8      	cbz	r0, 800c008 <__d2b+0x80>
 800bfcc:	f1c0 0320 	rsb	r3, r0, #32
 800bfd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	40c2      	lsrs	r2, r0
 800bfd8:	6163      	str	r3, [r4, #20]
 800bfda:	9201      	str	r2, [sp, #4]
 800bfdc:	9b01      	ldr	r3, [sp, #4]
 800bfde:	61a3      	str	r3, [r4, #24]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bf14      	ite	ne
 800bfe4:	2202      	movne	r2, #2
 800bfe6:	2201      	moveq	r2, #1
 800bfe8:	6122      	str	r2, [r4, #16]
 800bfea:	b1bd      	cbz	r5, 800c01c <__d2b+0x94>
 800bfec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bff0:	4405      	add	r5, r0
 800bff2:	603d      	str	r5, [r7, #0]
 800bff4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bff8:	6030      	str	r0, [r6, #0]
 800bffa:	4620      	mov	r0, r4
 800bffc:	b003      	add	sp, #12
 800bffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c006:	e7d6      	b.n	800bfb6 <__d2b+0x2e>
 800c008:	6161      	str	r1, [r4, #20]
 800c00a:	e7e7      	b.n	800bfdc <__d2b+0x54>
 800c00c:	a801      	add	r0, sp, #4
 800c00e:	f7ff fcf1 	bl	800b9f4 <__lo0bits>
 800c012:	9b01      	ldr	r3, [sp, #4]
 800c014:	6163      	str	r3, [r4, #20]
 800c016:	3020      	adds	r0, #32
 800c018:	2201      	movs	r2, #1
 800c01a:	e7e5      	b.n	800bfe8 <__d2b+0x60>
 800c01c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c020:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c024:	6038      	str	r0, [r7, #0]
 800c026:	6918      	ldr	r0, [r3, #16]
 800c028:	f7ff fcc4 	bl	800b9b4 <__hi0bits>
 800c02c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c030:	e7e2      	b.n	800bff8 <__d2b+0x70>
 800c032:	bf00      	nop
 800c034:	0800cf11 	.word	0x0800cf11
 800c038:	0800cf82 	.word	0x0800cf82

0800c03c <__ratio>:
 800c03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	4688      	mov	r8, r1
 800c042:	4669      	mov	r1, sp
 800c044:	4681      	mov	r9, r0
 800c046:	f7ff ff55 	bl	800bef4 <__b2d>
 800c04a:	a901      	add	r1, sp, #4
 800c04c:	4640      	mov	r0, r8
 800c04e:	ec55 4b10 	vmov	r4, r5, d0
 800c052:	f7ff ff4f 	bl	800bef4 <__b2d>
 800c056:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c05a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c05e:	eba3 0c02 	sub.w	ip, r3, r2
 800c062:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c066:	1a9b      	subs	r3, r3, r2
 800c068:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c06c:	ec51 0b10 	vmov	r0, r1, d0
 800c070:	2b00      	cmp	r3, #0
 800c072:	bfd6      	itet	le
 800c074:	460a      	movle	r2, r1
 800c076:	462a      	movgt	r2, r5
 800c078:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c07c:	468b      	mov	fp, r1
 800c07e:	462f      	mov	r7, r5
 800c080:	bfd4      	ite	le
 800c082:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c086:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c08a:	4620      	mov	r0, r4
 800c08c:	ee10 2a10 	vmov	r2, s0
 800c090:	465b      	mov	r3, fp
 800c092:	4639      	mov	r1, r7
 800c094:	f7f4 fbfa 	bl	800088c <__aeabi_ddiv>
 800c098:	ec41 0b10 	vmov	d0, r0, r1
 800c09c:	b003      	add	sp, #12
 800c09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0a2 <__copybits>:
 800c0a2:	3901      	subs	r1, #1
 800c0a4:	b570      	push	{r4, r5, r6, lr}
 800c0a6:	1149      	asrs	r1, r1, #5
 800c0a8:	6914      	ldr	r4, [r2, #16]
 800c0aa:	3101      	adds	r1, #1
 800c0ac:	f102 0314 	add.w	r3, r2, #20
 800c0b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0b8:	1f05      	subs	r5, r0, #4
 800c0ba:	42a3      	cmp	r3, r4
 800c0bc:	d30c      	bcc.n	800c0d8 <__copybits+0x36>
 800c0be:	1aa3      	subs	r3, r4, r2
 800c0c0:	3b11      	subs	r3, #17
 800c0c2:	f023 0303 	bic.w	r3, r3, #3
 800c0c6:	3211      	adds	r2, #17
 800c0c8:	42a2      	cmp	r2, r4
 800c0ca:	bf88      	it	hi
 800c0cc:	2300      	movhi	r3, #0
 800c0ce:	4418      	add	r0, r3
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4288      	cmp	r0, r1
 800c0d4:	d305      	bcc.n	800c0e2 <__copybits+0x40>
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}
 800c0d8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c0dc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c0e0:	e7eb      	b.n	800c0ba <__copybits+0x18>
 800c0e2:	f840 3b04 	str.w	r3, [r0], #4
 800c0e6:	e7f4      	b.n	800c0d2 <__copybits+0x30>

0800c0e8 <__any_on>:
 800c0e8:	f100 0214 	add.w	r2, r0, #20
 800c0ec:	6900      	ldr	r0, [r0, #16]
 800c0ee:	114b      	asrs	r3, r1, #5
 800c0f0:	4298      	cmp	r0, r3
 800c0f2:	b510      	push	{r4, lr}
 800c0f4:	db11      	blt.n	800c11a <__any_on+0x32>
 800c0f6:	dd0a      	ble.n	800c10e <__any_on+0x26>
 800c0f8:	f011 011f 	ands.w	r1, r1, #31
 800c0fc:	d007      	beq.n	800c10e <__any_on+0x26>
 800c0fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c102:	fa24 f001 	lsr.w	r0, r4, r1
 800c106:	fa00 f101 	lsl.w	r1, r0, r1
 800c10a:	428c      	cmp	r4, r1
 800c10c:	d10b      	bne.n	800c126 <__any_on+0x3e>
 800c10e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c112:	4293      	cmp	r3, r2
 800c114:	d803      	bhi.n	800c11e <__any_on+0x36>
 800c116:	2000      	movs	r0, #0
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	4603      	mov	r3, r0
 800c11c:	e7f7      	b.n	800c10e <__any_on+0x26>
 800c11e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c122:	2900      	cmp	r1, #0
 800c124:	d0f5      	beq.n	800c112 <__any_on+0x2a>
 800c126:	2001      	movs	r0, #1
 800c128:	e7f6      	b.n	800c118 <__any_on+0x30>

0800c12a <__ascii_wctomb>:
 800c12a:	b149      	cbz	r1, 800c140 <__ascii_wctomb+0x16>
 800c12c:	2aff      	cmp	r2, #255	; 0xff
 800c12e:	bf85      	ittet	hi
 800c130:	238a      	movhi	r3, #138	; 0x8a
 800c132:	6003      	strhi	r3, [r0, #0]
 800c134:	700a      	strbls	r2, [r1, #0]
 800c136:	f04f 30ff 	movhi.w	r0, #4294967295
 800c13a:	bf98      	it	ls
 800c13c:	2001      	movls	r0, #1
 800c13e:	4770      	bx	lr
 800c140:	4608      	mov	r0, r1
 800c142:	4770      	bx	lr

0800c144 <__ssputs_r>:
 800c144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c148:	688e      	ldr	r6, [r1, #8]
 800c14a:	461f      	mov	r7, r3
 800c14c:	42be      	cmp	r6, r7
 800c14e:	680b      	ldr	r3, [r1, #0]
 800c150:	4682      	mov	sl, r0
 800c152:	460c      	mov	r4, r1
 800c154:	4690      	mov	r8, r2
 800c156:	d82c      	bhi.n	800c1b2 <__ssputs_r+0x6e>
 800c158:	898a      	ldrh	r2, [r1, #12]
 800c15a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c15e:	d026      	beq.n	800c1ae <__ssputs_r+0x6a>
 800c160:	6965      	ldr	r5, [r4, #20]
 800c162:	6909      	ldr	r1, [r1, #16]
 800c164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c168:	eba3 0901 	sub.w	r9, r3, r1
 800c16c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c170:	1c7b      	adds	r3, r7, #1
 800c172:	444b      	add	r3, r9
 800c174:	106d      	asrs	r5, r5, #1
 800c176:	429d      	cmp	r5, r3
 800c178:	bf38      	it	cc
 800c17a:	461d      	movcc	r5, r3
 800c17c:	0553      	lsls	r3, r2, #21
 800c17e:	d527      	bpl.n	800c1d0 <__ssputs_r+0x8c>
 800c180:	4629      	mov	r1, r5
 800c182:	f7ff fa87 	bl	800b694 <_malloc_r>
 800c186:	4606      	mov	r6, r0
 800c188:	b360      	cbz	r0, 800c1e4 <__ssputs_r+0xa0>
 800c18a:	6921      	ldr	r1, [r4, #16]
 800c18c:	464a      	mov	r2, r9
 800c18e:	f7fe f824 	bl	800a1da <memcpy>
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	6126      	str	r6, [r4, #16]
 800c1a0:	6165      	str	r5, [r4, #20]
 800c1a2:	444e      	add	r6, r9
 800c1a4:	eba5 0509 	sub.w	r5, r5, r9
 800c1a8:	6026      	str	r6, [r4, #0]
 800c1aa:	60a5      	str	r5, [r4, #8]
 800c1ac:	463e      	mov	r6, r7
 800c1ae:	42be      	cmp	r6, r7
 800c1b0:	d900      	bls.n	800c1b4 <__ssputs_r+0x70>
 800c1b2:	463e      	mov	r6, r7
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	4632      	mov	r2, r6
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	f000 f9c9 	bl	800c550 <memmove>
 800c1be:	68a3      	ldr	r3, [r4, #8]
 800c1c0:	1b9b      	subs	r3, r3, r6
 800c1c2:	60a3      	str	r3, [r4, #8]
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	4433      	add	r3, r6
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d0:	462a      	mov	r2, r5
 800c1d2:	f000 fa1b 	bl	800c60c <_realloc_r>
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d1e0      	bne.n	800c19e <__ssputs_r+0x5a>
 800c1dc:	6921      	ldr	r1, [r4, #16]
 800c1de:	4650      	mov	r0, sl
 800c1e0:	f7fe fe8c 	bl	800aefc <_free_r>
 800c1e4:	230c      	movs	r3, #12
 800c1e6:	f8ca 3000 	str.w	r3, [sl]
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f0:	81a3      	strh	r3, [r4, #12]
 800c1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f6:	e7e9      	b.n	800c1cc <__ssputs_r+0x88>

0800c1f8 <_svfiprintf_r>:
 800c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fc:	4698      	mov	r8, r3
 800c1fe:	898b      	ldrh	r3, [r1, #12]
 800c200:	061b      	lsls	r3, r3, #24
 800c202:	b09d      	sub	sp, #116	; 0x74
 800c204:	4607      	mov	r7, r0
 800c206:	460d      	mov	r5, r1
 800c208:	4614      	mov	r4, r2
 800c20a:	d50e      	bpl.n	800c22a <_svfiprintf_r+0x32>
 800c20c:	690b      	ldr	r3, [r1, #16]
 800c20e:	b963      	cbnz	r3, 800c22a <_svfiprintf_r+0x32>
 800c210:	2140      	movs	r1, #64	; 0x40
 800c212:	f7ff fa3f 	bl	800b694 <_malloc_r>
 800c216:	6028      	str	r0, [r5, #0]
 800c218:	6128      	str	r0, [r5, #16]
 800c21a:	b920      	cbnz	r0, 800c226 <_svfiprintf_r+0x2e>
 800c21c:	230c      	movs	r3, #12
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	f04f 30ff 	mov.w	r0, #4294967295
 800c224:	e0d0      	b.n	800c3c8 <_svfiprintf_r+0x1d0>
 800c226:	2340      	movs	r3, #64	; 0x40
 800c228:	616b      	str	r3, [r5, #20]
 800c22a:	2300      	movs	r3, #0
 800c22c:	9309      	str	r3, [sp, #36]	; 0x24
 800c22e:	2320      	movs	r3, #32
 800c230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c234:	f8cd 800c 	str.w	r8, [sp, #12]
 800c238:	2330      	movs	r3, #48	; 0x30
 800c23a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c3e0 <_svfiprintf_r+0x1e8>
 800c23e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c242:	f04f 0901 	mov.w	r9, #1
 800c246:	4623      	mov	r3, r4
 800c248:	469a      	mov	sl, r3
 800c24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c24e:	b10a      	cbz	r2, 800c254 <_svfiprintf_r+0x5c>
 800c250:	2a25      	cmp	r2, #37	; 0x25
 800c252:	d1f9      	bne.n	800c248 <_svfiprintf_r+0x50>
 800c254:	ebba 0b04 	subs.w	fp, sl, r4
 800c258:	d00b      	beq.n	800c272 <_svfiprintf_r+0x7a>
 800c25a:	465b      	mov	r3, fp
 800c25c:	4622      	mov	r2, r4
 800c25e:	4629      	mov	r1, r5
 800c260:	4638      	mov	r0, r7
 800c262:	f7ff ff6f 	bl	800c144 <__ssputs_r>
 800c266:	3001      	adds	r0, #1
 800c268:	f000 80a9 	beq.w	800c3be <_svfiprintf_r+0x1c6>
 800c26c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c26e:	445a      	add	r2, fp
 800c270:	9209      	str	r2, [sp, #36]	; 0x24
 800c272:	f89a 3000 	ldrb.w	r3, [sl]
 800c276:	2b00      	cmp	r3, #0
 800c278:	f000 80a1 	beq.w	800c3be <_svfiprintf_r+0x1c6>
 800c27c:	2300      	movs	r3, #0
 800c27e:	f04f 32ff 	mov.w	r2, #4294967295
 800c282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c286:	f10a 0a01 	add.w	sl, sl, #1
 800c28a:	9304      	str	r3, [sp, #16]
 800c28c:	9307      	str	r3, [sp, #28]
 800c28e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c292:	931a      	str	r3, [sp, #104]	; 0x68
 800c294:	4654      	mov	r4, sl
 800c296:	2205      	movs	r2, #5
 800c298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c29c:	4850      	ldr	r0, [pc, #320]	; (800c3e0 <_svfiprintf_r+0x1e8>)
 800c29e:	f7f3 ffb7 	bl	8000210 <memchr>
 800c2a2:	9a04      	ldr	r2, [sp, #16]
 800c2a4:	b9d8      	cbnz	r0, 800c2de <_svfiprintf_r+0xe6>
 800c2a6:	06d0      	lsls	r0, r2, #27
 800c2a8:	bf44      	itt	mi
 800c2aa:	2320      	movmi	r3, #32
 800c2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2b0:	0711      	lsls	r1, r2, #28
 800c2b2:	bf44      	itt	mi
 800c2b4:	232b      	movmi	r3, #43	; 0x2b
 800c2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c2be:	2b2a      	cmp	r3, #42	; 0x2a
 800c2c0:	d015      	beq.n	800c2ee <_svfiprintf_r+0xf6>
 800c2c2:	9a07      	ldr	r2, [sp, #28]
 800c2c4:	4654      	mov	r4, sl
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	f04f 0c0a 	mov.w	ip, #10
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2d2:	3b30      	subs	r3, #48	; 0x30
 800c2d4:	2b09      	cmp	r3, #9
 800c2d6:	d94d      	bls.n	800c374 <_svfiprintf_r+0x17c>
 800c2d8:	b1b0      	cbz	r0, 800c308 <_svfiprintf_r+0x110>
 800c2da:	9207      	str	r2, [sp, #28]
 800c2dc:	e014      	b.n	800c308 <_svfiprintf_r+0x110>
 800c2de:	eba0 0308 	sub.w	r3, r0, r8
 800c2e2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	9304      	str	r3, [sp, #16]
 800c2ea:	46a2      	mov	sl, r4
 800c2ec:	e7d2      	b.n	800c294 <_svfiprintf_r+0x9c>
 800c2ee:	9b03      	ldr	r3, [sp, #12]
 800c2f0:	1d19      	adds	r1, r3, #4
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	9103      	str	r1, [sp, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	bfbb      	ittet	lt
 800c2fa:	425b      	neglt	r3, r3
 800c2fc:	f042 0202 	orrlt.w	r2, r2, #2
 800c300:	9307      	strge	r3, [sp, #28]
 800c302:	9307      	strlt	r3, [sp, #28]
 800c304:	bfb8      	it	lt
 800c306:	9204      	strlt	r2, [sp, #16]
 800c308:	7823      	ldrb	r3, [r4, #0]
 800c30a:	2b2e      	cmp	r3, #46	; 0x2e
 800c30c:	d10c      	bne.n	800c328 <_svfiprintf_r+0x130>
 800c30e:	7863      	ldrb	r3, [r4, #1]
 800c310:	2b2a      	cmp	r3, #42	; 0x2a
 800c312:	d134      	bne.n	800c37e <_svfiprintf_r+0x186>
 800c314:	9b03      	ldr	r3, [sp, #12]
 800c316:	1d1a      	adds	r2, r3, #4
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	9203      	str	r2, [sp, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	bfb8      	it	lt
 800c320:	f04f 33ff 	movlt.w	r3, #4294967295
 800c324:	3402      	adds	r4, #2
 800c326:	9305      	str	r3, [sp, #20]
 800c328:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c3f0 <_svfiprintf_r+0x1f8>
 800c32c:	7821      	ldrb	r1, [r4, #0]
 800c32e:	2203      	movs	r2, #3
 800c330:	4650      	mov	r0, sl
 800c332:	f7f3 ff6d 	bl	8000210 <memchr>
 800c336:	b138      	cbz	r0, 800c348 <_svfiprintf_r+0x150>
 800c338:	9b04      	ldr	r3, [sp, #16]
 800c33a:	eba0 000a 	sub.w	r0, r0, sl
 800c33e:	2240      	movs	r2, #64	; 0x40
 800c340:	4082      	lsls	r2, r0
 800c342:	4313      	orrs	r3, r2
 800c344:	3401      	adds	r4, #1
 800c346:	9304      	str	r3, [sp, #16]
 800c348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34c:	4825      	ldr	r0, [pc, #148]	; (800c3e4 <_svfiprintf_r+0x1ec>)
 800c34e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c352:	2206      	movs	r2, #6
 800c354:	f7f3 ff5c 	bl	8000210 <memchr>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d038      	beq.n	800c3ce <_svfiprintf_r+0x1d6>
 800c35c:	4b22      	ldr	r3, [pc, #136]	; (800c3e8 <_svfiprintf_r+0x1f0>)
 800c35e:	bb1b      	cbnz	r3, 800c3a8 <_svfiprintf_r+0x1b0>
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	3307      	adds	r3, #7
 800c364:	f023 0307 	bic.w	r3, r3, #7
 800c368:	3308      	adds	r3, #8
 800c36a:	9303      	str	r3, [sp, #12]
 800c36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c36e:	4433      	add	r3, r6
 800c370:	9309      	str	r3, [sp, #36]	; 0x24
 800c372:	e768      	b.n	800c246 <_svfiprintf_r+0x4e>
 800c374:	fb0c 3202 	mla	r2, ip, r2, r3
 800c378:	460c      	mov	r4, r1
 800c37a:	2001      	movs	r0, #1
 800c37c:	e7a6      	b.n	800c2cc <_svfiprintf_r+0xd4>
 800c37e:	2300      	movs	r3, #0
 800c380:	3401      	adds	r4, #1
 800c382:	9305      	str	r3, [sp, #20]
 800c384:	4619      	mov	r1, r3
 800c386:	f04f 0c0a 	mov.w	ip, #10
 800c38a:	4620      	mov	r0, r4
 800c38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c390:	3a30      	subs	r2, #48	; 0x30
 800c392:	2a09      	cmp	r2, #9
 800c394:	d903      	bls.n	800c39e <_svfiprintf_r+0x1a6>
 800c396:	2b00      	cmp	r3, #0
 800c398:	d0c6      	beq.n	800c328 <_svfiprintf_r+0x130>
 800c39a:	9105      	str	r1, [sp, #20]
 800c39c:	e7c4      	b.n	800c328 <_svfiprintf_r+0x130>
 800c39e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e7f0      	b.n	800c38a <_svfiprintf_r+0x192>
 800c3a8:	ab03      	add	r3, sp, #12
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	462a      	mov	r2, r5
 800c3ae:	4b0f      	ldr	r3, [pc, #60]	; (800c3ec <_svfiprintf_r+0x1f4>)
 800c3b0:	a904      	add	r1, sp, #16
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f7fd f95c 	bl	8009670 <_printf_float>
 800c3b8:	1c42      	adds	r2, r0, #1
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	d1d6      	bne.n	800c36c <_svfiprintf_r+0x174>
 800c3be:	89ab      	ldrh	r3, [r5, #12]
 800c3c0:	065b      	lsls	r3, r3, #25
 800c3c2:	f53f af2d 	bmi.w	800c220 <_svfiprintf_r+0x28>
 800c3c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3c8:	b01d      	add	sp, #116	; 0x74
 800c3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ce:	ab03      	add	r3, sp, #12
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	462a      	mov	r2, r5
 800c3d4:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <_svfiprintf_r+0x1f4>)
 800c3d6:	a904      	add	r1, sp, #16
 800c3d8:	4638      	mov	r0, r7
 800c3da:	f7fd fbed 	bl	8009bb8 <_printf_i>
 800c3de:	e7eb      	b.n	800c3b8 <_svfiprintf_r+0x1c0>
 800c3e0:	0800d0dc 	.word	0x0800d0dc
 800c3e4:	0800d0e6 	.word	0x0800d0e6
 800c3e8:	08009671 	.word	0x08009671
 800c3ec:	0800c145 	.word	0x0800c145
 800c3f0:	0800d0e2 	.word	0x0800d0e2

0800c3f4 <__sflush_r>:
 800c3f4:	898a      	ldrh	r2, [r1, #12]
 800c3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	0710      	lsls	r0, r2, #28
 800c3fe:	460c      	mov	r4, r1
 800c400:	d458      	bmi.n	800c4b4 <__sflush_r+0xc0>
 800c402:	684b      	ldr	r3, [r1, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	dc05      	bgt.n	800c414 <__sflush_r+0x20>
 800c408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	dc02      	bgt.n	800c414 <__sflush_r+0x20>
 800c40e:	2000      	movs	r0, #0
 800c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c416:	2e00      	cmp	r6, #0
 800c418:	d0f9      	beq.n	800c40e <__sflush_r+0x1a>
 800c41a:	2300      	movs	r3, #0
 800c41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c420:	682f      	ldr	r7, [r5, #0]
 800c422:	6a21      	ldr	r1, [r4, #32]
 800c424:	602b      	str	r3, [r5, #0]
 800c426:	d032      	beq.n	800c48e <__sflush_r+0x9a>
 800c428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c42a:	89a3      	ldrh	r3, [r4, #12]
 800c42c:	075a      	lsls	r2, r3, #29
 800c42e:	d505      	bpl.n	800c43c <__sflush_r+0x48>
 800c430:	6863      	ldr	r3, [r4, #4]
 800c432:	1ac0      	subs	r0, r0, r3
 800c434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c436:	b10b      	cbz	r3, 800c43c <__sflush_r+0x48>
 800c438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c43a:	1ac0      	subs	r0, r0, r3
 800c43c:	2300      	movs	r3, #0
 800c43e:	4602      	mov	r2, r0
 800c440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c442:	6a21      	ldr	r1, [r4, #32]
 800c444:	4628      	mov	r0, r5
 800c446:	47b0      	blx	r6
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	d106      	bne.n	800c45c <__sflush_r+0x68>
 800c44e:	6829      	ldr	r1, [r5, #0]
 800c450:	291d      	cmp	r1, #29
 800c452:	d82b      	bhi.n	800c4ac <__sflush_r+0xb8>
 800c454:	4a29      	ldr	r2, [pc, #164]	; (800c4fc <__sflush_r+0x108>)
 800c456:	410a      	asrs	r2, r1
 800c458:	07d6      	lsls	r6, r2, #31
 800c45a:	d427      	bmi.n	800c4ac <__sflush_r+0xb8>
 800c45c:	2200      	movs	r2, #0
 800c45e:	6062      	str	r2, [r4, #4]
 800c460:	04d9      	lsls	r1, r3, #19
 800c462:	6922      	ldr	r2, [r4, #16]
 800c464:	6022      	str	r2, [r4, #0]
 800c466:	d504      	bpl.n	800c472 <__sflush_r+0x7e>
 800c468:	1c42      	adds	r2, r0, #1
 800c46a:	d101      	bne.n	800c470 <__sflush_r+0x7c>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	b903      	cbnz	r3, 800c472 <__sflush_r+0x7e>
 800c470:	6560      	str	r0, [r4, #84]	; 0x54
 800c472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c474:	602f      	str	r7, [r5, #0]
 800c476:	2900      	cmp	r1, #0
 800c478:	d0c9      	beq.n	800c40e <__sflush_r+0x1a>
 800c47a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c47e:	4299      	cmp	r1, r3
 800c480:	d002      	beq.n	800c488 <__sflush_r+0x94>
 800c482:	4628      	mov	r0, r5
 800c484:	f7fe fd3a 	bl	800aefc <_free_r>
 800c488:	2000      	movs	r0, #0
 800c48a:	6360      	str	r0, [r4, #52]	; 0x34
 800c48c:	e7c0      	b.n	800c410 <__sflush_r+0x1c>
 800c48e:	2301      	movs	r3, #1
 800c490:	4628      	mov	r0, r5
 800c492:	47b0      	blx	r6
 800c494:	1c41      	adds	r1, r0, #1
 800c496:	d1c8      	bne.n	800c42a <__sflush_r+0x36>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0c5      	beq.n	800c42a <__sflush_r+0x36>
 800c49e:	2b1d      	cmp	r3, #29
 800c4a0:	d001      	beq.n	800c4a6 <__sflush_r+0xb2>
 800c4a2:	2b16      	cmp	r3, #22
 800c4a4:	d101      	bne.n	800c4aa <__sflush_r+0xb6>
 800c4a6:	602f      	str	r7, [r5, #0]
 800c4a8:	e7b1      	b.n	800c40e <__sflush_r+0x1a>
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	e7ad      	b.n	800c410 <__sflush_r+0x1c>
 800c4b4:	690f      	ldr	r7, [r1, #16]
 800c4b6:	2f00      	cmp	r7, #0
 800c4b8:	d0a9      	beq.n	800c40e <__sflush_r+0x1a>
 800c4ba:	0793      	lsls	r3, r2, #30
 800c4bc:	680e      	ldr	r6, [r1, #0]
 800c4be:	bf08      	it	eq
 800c4c0:	694b      	ldreq	r3, [r1, #20]
 800c4c2:	600f      	str	r7, [r1, #0]
 800c4c4:	bf18      	it	ne
 800c4c6:	2300      	movne	r3, #0
 800c4c8:	eba6 0807 	sub.w	r8, r6, r7
 800c4cc:	608b      	str	r3, [r1, #8]
 800c4ce:	f1b8 0f00 	cmp.w	r8, #0
 800c4d2:	dd9c      	ble.n	800c40e <__sflush_r+0x1a>
 800c4d4:	6a21      	ldr	r1, [r4, #32]
 800c4d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4d8:	4643      	mov	r3, r8
 800c4da:	463a      	mov	r2, r7
 800c4dc:	4628      	mov	r0, r5
 800c4de:	47b0      	blx	r6
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	dc06      	bgt.n	800c4f2 <__sflush_r+0xfe>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ea:	81a3      	strh	r3, [r4, #12]
 800c4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f0:	e78e      	b.n	800c410 <__sflush_r+0x1c>
 800c4f2:	4407      	add	r7, r0
 800c4f4:	eba8 0800 	sub.w	r8, r8, r0
 800c4f8:	e7e9      	b.n	800c4ce <__sflush_r+0xda>
 800c4fa:	bf00      	nop
 800c4fc:	dfbffffe 	.word	0xdfbffffe

0800c500 <_fflush_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	690b      	ldr	r3, [r1, #16]
 800c504:	4605      	mov	r5, r0
 800c506:	460c      	mov	r4, r1
 800c508:	b913      	cbnz	r3, 800c510 <_fflush_r+0x10>
 800c50a:	2500      	movs	r5, #0
 800c50c:	4628      	mov	r0, r5
 800c50e:	bd38      	pop	{r3, r4, r5, pc}
 800c510:	b118      	cbz	r0, 800c51a <_fflush_r+0x1a>
 800c512:	6a03      	ldr	r3, [r0, #32]
 800c514:	b90b      	cbnz	r3, 800c51a <_fflush_r+0x1a>
 800c516:	f7fd fcfd 	bl	8009f14 <__sinit>
 800c51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0f3      	beq.n	800c50a <_fflush_r+0xa>
 800c522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c524:	07d0      	lsls	r0, r2, #31
 800c526:	d404      	bmi.n	800c532 <_fflush_r+0x32>
 800c528:	0599      	lsls	r1, r3, #22
 800c52a:	d402      	bmi.n	800c532 <_fflush_r+0x32>
 800c52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c52e:	f7fd fe52 	bl	800a1d6 <__retarget_lock_acquire_recursive>
 800c532:	4628      	mov	r0, r5
 800c534:	4621      	mov	r1, r4
 800c536:	f7ff ff5d 	bl	800c3f4 <__sflush_r>
 800c53a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c53c:	07da      	lsls	r2, r3, #31
 800c53e:	4605      	mov	r5, r0
 800c540:	d4e4      	bmi.n	800c50c <_fflush_r+0xc>
 800c542:	89a3      	ldrh	r3, [r4, #12]
 800c544:	059b      	lsls	r3, r3, #22
 800c546:	d4e1      	bmi.n	800c50c <_fflush_r+0xc>
 800c548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c54a:	f7fd fe45 	bl	800a1d8 <__retarget_lock_release_recursive>
 800c54e:	e7dd      	b.n	800c50c <_fflush_r+0xc>

0800c550 <memmove>:
 800c550:	4288      	cmp	r0, r1
 800c552:	b510      	push	{r4, lr}
 800c554:	eb01 0402 	add.w	r4, r1, r2
 800c558:	d902      	bls.n	800c560 <memmove+0x10>
 800c55a:	4284      	cmp	r4, r0
 800c55c:	4623      	mov	r3, r4
 800c55e:	d807      	bhi.n	800c570 <memmove+0x20>
 800c560:	1e43      	subs	r3, r0, #1
 800c562:	42a1      	cmp	r1, r4
 800c564:	d008      	beq.n	800c578 <memmove+0x28>
 800c566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c56a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c56e:	e7f8      	b.n	800c562 <memmove+0x12>
 800c570:	4402      	add	r2, r0
 800c572:	4601      	mov	r1, r0
 800c574:	428a      	cmp	r2, r1
 800c576:	d100      	bne.n	800c57a <memmove+0x2a>
 800c578:	bd10      	pop	{r4, pc}
 800c57a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c57e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c582:	e7f7      	b.n	800c574 <memmove+0x24>

0800c584 <_sbrk_r>:
 800c584:	b538      	push	{r3, r4, r5, lr}
 800c586:	4d06      	ldr	r5, [pc, #24]	; (800c5a0 <_sbrk_r+0x1c>)
 800c588:	2300      	movs	r3, #0
 800c58a:	4604      	mov	r4, r0
 800c58c:	4608      	mov	r0, r1
 800c58e:	602b      	str	r3, [r5, #0]
 800c590:	f7f6 fdcc 	bl	800312c <_sbrk>
 800c594:	1c43      	adds	r3, r0, #1
 800c596:	d102      	bne.n	800c59e <_sbrk_r+0x1a>
 800c598:	682b      	ldr	r3, [r5, #0]
 800c59a:	b103      	cbz	r3, 800c59e <_sbrk_r+0x1a>
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	bd38      	pop	{r3, r4, r5, pc}
 800c5a0:	200006f4 	.word	0x200006f4

0800c5a4 <__assert_func>:
 800c5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5a6:	4614      	mov	r4, r2
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	4b09      	ldr	r3, [pc, #36]	; (800c5d0 <__assert_func+0x2c>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	68d8      	ldr	r0, [r3, #12]
 800c5b2:	b14c      	cbz	r4, 800c5c8 <__assert_func+0x24>
 800c5b4:	4b07      	ldr	r3, [pc, #28]	; (800c5d4 <__assert_func+0x30>)
 800c5b6:	9100      	str	r1, [sp, #0]
 800c5b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5bc:	4906      	ldr	r1, [pc, #24]	; (800c5d8 <__assert_func+0x34>)
 800c5be:	462b      	mov	r3, r5
 800c5c0:	f000 f854 	bl	800c66c <fiprintf>
 800c5c4:	f000 f864 	bl	800c690 <abort>
 800c5c8:	4b04      	ldr	r3, [pc, #16]	; (800c5dc <__assert_func+0x38>)
 800c5ca:	461c      	mov	r4, r3
 800c5cc:	e7f3      	b.n	800c5b6 <__assert_func+0x12>
 800c5ce:	bf00      	nop
 800c5d0:	20000224 	.word	0x20000224
 800c5d4:	0800d0ed 	.word	0x0800d0ed
 800c5d8:	0800d0fa 	.word	0x0800d0fa
 800c5dc:	0800d128 	.word	0x0800d128

0800c5e0 <_calloc_r>:
 800c5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5e2:	fba1 2402 	umull	r2, r4, r1, r2
 800c5e6:	b94c      	cbnz	r4, 800c5fc <_calloc_r+0x1c>
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	9201      	str	r2, [sp, #4]
 800c5ec:	f7ff f852 	bl	800b694 <_malloc_r>
 800c5f0:	9a01      	ldr	r2, [sp, #4]
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	b930      	cbnz	r0, 800c604 <_calloc_r+0x24>
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	b003      	add	sp, #12
 800c5fa:	bd30      	pop	{r4, r5, pc}
 800c5fc:	220c      	movs	r2, #12
 800c5fe:	6002      	str	r2, [r0, #0]
 800c600:	2500      	movs	r5, #0
 800c602:	e7f8      	b.n	800c5f6 <_calloc_r+0x16>
 800c604:	4621      	mov	r1, r4
 800c606:	f7fd fd57 	bl	800a0b8 <memset>
 800c60a:	e7f4      	b.n	800c5f6 <_calloc_r+0x16>

0800c60c <_realloc_r>:
 800c60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c610:	4680      	mov	r8, r0
 800c612:	4614      	mov	r4, r2
 800c614:	460e      	mov	r6, r1
 800c616:	b921      	cbnz	r1, 800c622 <_realloc_r+0x16>
 800c618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	4611      	mov	r1, r2
 800c61e:	f7ff b839 	b.w	800b694 <_malloc_r>
 800c622:	b92a      	cbnz	r2, 800c630 <_realloc_r+0x24>
 800c624:	f7fe fc6a 	bl	800aefc <_free_r>
 800c628:	4625      	mov	r5, r4
 800c62a:	4628      	mov	r0, r5
 800c62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c630:	f000 f835 	bl	800c69e <_malloc_usable_size_r>
 800c634:	4284      	cmp	r4, r0
 800c636:	4607      	mov	r7, r0
 800c638:	d802      	bhi.n	800c640 <_realloc_r+0x34>
 800c63a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c63e:	d812      	bhi.n	800c666 <_realloc_r+0x5a>
 800c640:	4621      	mov	r1, r4
 800c642:	4640      	mov	r0, r8
 800c644:	f7ff f826 	bl	800b694 <_malloc_r>
 800c648:	4605      	mov	r5, r0
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d0ed      	beq.n	800c62a <_realloc_r+0x1e>
 800c64e:	42bc      	cmp	r4, r7
 800c650:	4622      	mov	r2, r4
 800c652:	4631      	mov	r1, r6
 800c654:	bf28      	it	cs
 800c656:	463a      	movcs	r2, r7
 800c658:	f7fd fdbf 	bl	800a1da <memcpy>
 800c65c:	4631      	mov	r1, r6
 800c65e:	4640      	mov	r0, r8
 800c660:	f7fe fc4c 	bl	800aefc <_free_r>
 800c664:	e7e1      	b.n	800c62a <_realloc_r+0x1e>
 800c666:	4635      	mov	r5, r6
 800c668:	e7df      	b.n	800c62a <_realloc_r+0x1e>
	...

0800c66c <fiprintf>:
 800c66c:	b40e      	push	{r1, r2, r3}
 800c66e:	b503      	push	{r0, r1, lr}
 800c670:	4601      	mov	r1, r0
 800c672:	ab03      	add	r3, sp, #12
 800c674:	4805      	ldr	r0, [pc, #20]	; (800c68c <fiprintf+0x20>)
 800c676:	f853 2b04 	ldr.w	r2, [r3], #4
 800c67a:	6800      	ldr	r0, [r0, #0]
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	f000 f83f 	bl	800c700 <_vfiprintf_r>
 800c682:	b002      	add	sp, #8
 800c684:	f85d eb04 	ldr.w	lr, [sp], #4
 800c688:	b003      	add	sp, #12
 800c68a:	4770      	bx	lr
 800c68c:	20000224 	.word	0x20000224

0800c690 <abort>:
 800c690:	b508      	push	{r3, lr}
 800c692:	2006      	movs	r0, #6
 800c694:	f000 fa0c 	bl	800cab0 <raise>
 800c698:	2001      	movs	r0, #1
 800c69a:	f7f6 fccf 	bl	800303c <_exit>

0800c69e <_malloc_usable_size_r>:
 800c69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a2:	1f18      	subs	r0, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bfbc      	itt	lt
 800c6a8:	580b      	ldrlt	r3, [r1, r0]
 800c6aa:	18c0      	addlt	r0, r0, r3
 800c6ac:	4770      	bx	lr

0800c6ae <__sfputc_r>:
 800c6ae:	6893      	ldr	r3, [r2, #8]
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	b410      	push	{r4}
 800c6b6:	6093      	str	r3, [r2, #8]
 800c6b8:	da08      	bge.n	800c6cc <__sfputc_r+0x1e>
 800c6ba:	6994      	ldr	r4, [r2, #24]
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	db01      	blt.n	800c6c4 <__sfputc_r+0x16>
 800c6c0:	290a      	cmp	r1, #10
 800c6c2:	d103      	bne.n	800c6cc <__sfputc_r+0x1e>
 800c6c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c8:	f000 b934 	b.w	800c934 <__swbuf_r>
 800c6cc:	6813      	ldr	r3, [r2, #0]
 800c6ce:	1c58      	adds	r0, r3, #1
 800c6d0:	6010      	str	r0, [r2, #0]
 800c6d2:	7019      	strb	r1, [r3, #0]
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <__sfputs_r>:
 800c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6de:	4606      	mov	r6, r0
 800c6e0:	460f      	mov	r7, r1
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	18d5      	adds	r5, r2, r3
 800c6e6:	42ac      	cmp	r4, r5
 800c6e8:	d101      	bne.n	800c6ee <__sfputs_r+0x12>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e007      	b.n	800c6fe <__sfputs_r+0x22>
 800c6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f2:	463a      	mov	r2, r7
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7ff ffda 	bl	800c6ae <__sfputc_r>
 800c6fa:	1c43      	adds	r3, r0, #1
 800c6fc:	d1f3      	bne.n	800c6e6 <__sfputs_r+0xa>
 800c6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c700 <_vfiprintf_r>:
 800c700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	460d      	mov	r5, r1
 800c706:	b09d      	sub	sp, #116	; 0x74
 800c708:	4614      	mov	r4, r2
 800c70a:	4698      	mov	r8, r3
 800c70c:	4606      	mov	r6, r0
 800c70e:	b118      	cbz	r0, 800c718 <_vfiprintf_r+0x18>
 800c710:	6a03      	ldr	r3, [r0, #32]
 800c712:	b90b      	cbnz	r3, 800c718 <_vfiprintf_r+0x18>
 800c714:	f7fd fbfe 	bl	8009f14 <__sinit>
 800c718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c71a:	07d9      	lsls	r1, r3, #31
 800c71c:	d405      	bmi.n	800c72a <_vfiprintf_r+0x2a>
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	059a      	lsls	r2, r3, #22
 800c722:	d402      	bmi.n	800c72a <_vfiprintf_r+0x2a>
 800c724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c726:	f7fd fd56 	bl	800a1d6 <__retarget_lock_acquire_recursive>
 800c72a:	89ab      	ldrh	r3, [r5, #12]
 800c72c:	071b      	lsls	r3, r3, #28
 800c72e:	d501      	bpl.n	800c734 <_vfiprintf_r+0x34>
 800c730:	692b      	ldr	r3, [r5, #16]
 800c732:	b99b      	cbnz	r3, 800c75c <_vfiprintf_r+0x5c>
 800c734:	4629      	mov	r1, r5
 800c736:	4630      	mov	r0, r6
 800c738:	f000 f93a 	bl	800c9b0 <__swsetup_r>
 800c73c:	b170      	cbz	r0, 800c75c <_vfiprintf_r+0x5c>
 800c73e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c740:	07dc      	lsls	r4, r3, #31
 800c742:	d504      	bpl.n	800c74e <_vfiprintf_r+0x4e>
 800c744:	f04f 30ff 	mov.w	r0, #4294967295
 800c748:	b01d      	add	sp, #116	; 0x74
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	0598      	lsls	r0, r3, #22
 800c752:	d4f7      	bmi.n	800c744 <_vfiprintf_r+0x44>
 800c754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c756:	f7fd fd3f 	bl	800a1d8 <__retarget_lock_release_recursive>
 800c75a:	e7f3      	b.n	800c744 <_vfiprintf_r+0x44>
 800c75c:	2300      	movs	r3, #0
 800c75e:	9309      	str	r3, [sp, #36]	; 0x24
 800c760:	2320      	movs	r3, #32
 800c762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c766:	f8cd 800c 	str.w	r8, [sp, #12]
 800c76a:	2330      	movs	r3, #48	; 0x30
 800c76c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c920 <_vfiprintf_r+0x220>
 800c770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c774:	f04f 0901 	mov.w	r9, #1
 800c778:	4623      	mov	r3, r4
 800c77a:	469a      	mov	sl, r3
 800c77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c780:	b10a      	cbz	r2, 800c786 <_vfiprintf_r+0x86>
 800c782:	2a25      	cmp	r2, #37	; 0x25
 800c784:	d1f9      	bne.n	800c77a <_vfiprintf_r+0x7a>
 800c786:	ebba 0b04 	subs.w	fp, sl, r4
 800c78a:	d00b      	beq.n	800c7a4 <_vfiprintf_r+0xa4>
 800c78c:	465b      	mov	r3, fp
 800c78e:	4622      	mov	r2, r4
 800c790:	4629      	mov	r1, r5
 800c792:	4630      	mov	r0, r6
 800c794:	f7ff ffa2 	bl	800c6dc <__sfputs_r>
 800c798:	3001      	adds	r0, #1
 800c79a:	f000 80a9 	beq.w	800c8f0 <_vfiprintf_r+0x1f0>
 800c79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a0:	445a      	add	r2, fp
 800c7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 80a1 	beq.w	800c8f0 <_vfiprintf_r+0x1f0>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7b8:	f10a 0a01 	add.w	sl, sl, #1
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	9307      	str	r3, [sp, #28]
 800c7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c7c6:	4654      	mov	r4, sl
 800c7c8:	2205      	movs	r2, #5
 800c7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ce:	4854      	ldr	r0, [pc, #336]	; (800c920 <_vfiprintf_r+0x220>)
 800c7d0:	f7f3 fd1e 	bl	8000210 <memchr>
 800c7d4:	9a04      	ldr	r2, [sp, #16]
 800c7d6:	b9d8      	cbnz	r0, 800c810 <_vfiprintf_r+0x110>
 800c7d8:	06d1      	lsls	r1, r2, #27
 800c7da:	bf44      	itt	mi
 800c7dc:	2320      	movmi	r3, #32
 800c7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e2:	0713      	lsls	r3, r2, #28
 800c7e4:	bf44      	itt	mi
 800c7e6:	232b      	movmi	r3, #43	; 0x2b
 800c7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f2:	d015      	beq.n	800c820 <_vfiprintf_r+0x120>
 800c7f4:	9a07      	ldr	r2, [sp, #28]
 800c7f6:	4654      	mov	r4, sl
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	f04f 0c0a 	mov.w	ip, #10
 800c7fe:	4621      	mov	r1, r4
 800c800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c804:	3b30      	subs	r3, #48	; 0x30
 800c806:	2b09      	cmp	r3, #9
 800c808:	d94d      	bls.n	800c8a6 <_vfiprintf_r+0x1a6>
 800c80a:	b1b0      	cbz	r0, 800c83a <_vfiprintf_r+0x13a>
 800c80c:	9207      	str	r2, [sp, #28]
 800c80e:	e014      	b.n	800c83a <_vfiprintf_r+0x13a>
 800c810:	eba0 0308 	sub.w	r3, r0, r8
 800c814:	fa09 f303 	lsl.w	r3, r9, r3
 800c818:	4313      	orrs	r3, r2
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	46a2      	mov	sl, r4
 800c81e:	e7d2      	b.n	800c7c6 <_vfiprintf_r+0xc6>
 800c820:	9b03      	ldr	r3, [sp, #12]
 800c822:	1d19      	adds	r1, r3, #4
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	9103      	str	r1, [sp, #12]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	bfbb      	ittet	lt
 800c82c:	425b      	neglt	r3, r3
 800c82e:	f042 0202 	orrlt.w	r2, r2, #2
 800c832:	9307      	strge	r3, [sp, #28]
 800c834:	9307      	strlt	r3, [sp, #28]
 800c836:	bfb8      	it	lt
 800c838:	9204      	strlt	r2, [sp, #16]
 800c83a:	7823      	ldrb	r3, [r4, #0]
 800c83c:	2b2e      	cmp	r3, #46	; 0x2e
 800c83e:	d10c      	bne.n	800c85a <_vfiprintf_r+0x15a>
 800c840:	7863      	ldrb	r3, [r4, #1]
 800c842:	2b2a      	cmp	r3, #42	; 0x2a
 800c844:	d134      	bne.n	800c8b0 <_vfiprintf_r+0x1b0>
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	1d1a      	adds	r2, r3, #4
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	9203      	str	r2, [sp, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfb8      	it	lt
 800c852:	f04f 33ff 	movlt.w	r3, #4294967295
 800c856:	3402      	adds	r4, #2
 800c858:	9305      	str	r3, [sp, #20]
 800c85a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c930 <_vfiprintf_r+0x230>
 800c85e:	7821      	ldrb	r1, [r4, #0]
 800c860:	2203      	movs	r2, #3
 800c862:	4650      	mov	r0, sl
 800c864:	f7f3 fcd4 	bl	8000210 <memchr>
 800c868:	b138      	cbz	r0, 800c87a <_vfiprintf_r+0x17a>
 800c86a:	9b04      	ldr	r3, [sp, #16]
 800c86c:	eba0 000a 	sub.w	r0, r0, sl
 800c870:	2240      	movs	r2, #64	; 0x40
 800c872:	4082      	lsls	r2, r0
 800c874:	4313      	orrs	r3, r2
 800c876:	3401      	adds	r4, #1
 800c878:	9304      	str	r3, [sp, #16]
 800c87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c87e:	4829      	ldr	r0, [pc, #164]	; (800c924 <_vfiprintf_r+0x224>)
 800c880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c884:	2206      	movs	r2, #6
 800c886:	f7f3 fcc3 	bl	8000210 <memchr>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d03f      	beq.n	800c90e <_vfiprintf_r+0x20e>
 800c88e:	4b26      	ldr	r3, [pc, #152]	; (800c928 <_vfiprintf_r+0x228>)
 800c890:	bb1b      	cbnz	r3, 800c8da <_vfiprintf_r+0x1da>
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	3307      	adds	r3, #7
 800c896:	f023 0307 	bic.w	r3, r3, #7
 800c89a:	3308      	adds	r3, #8
 800c89c:	9303      	str	r3, [sp, #12]
 800c89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a0:	443b      	add	r3, r7
 800c8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8a4:	e768      	b.n	800c778 <_vfiprintf_r+0x78>
 800c8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	2001      	movs	r0, #1
 800c8ae:	e7a6      	b.n	800c7fe <_vfiprintf_r+0xfe>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	3401      	adds	r4, #1
 800c8b4:	9305      	str	r3, [sp, #20]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	f04f 0c0a 	mov.w	ip, #10
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8c2:	3a30      	subs	r2, #48	; 0x30
 800c8c4:	2a09      	cmp	r2, #9
 800c8c6:	d903      	bls.n	800c8d0 <_vfiprintf_r+0x1d0>
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d0c6      	beq.n	800c85a <_vfiprintf_r+0x15a>
 800c8cc:	9105      	str	r1, [sp, #20]
 800c8ce:	e7c4      	b.n	800c85a <_vfiprintf_r+0x15a>
 800c8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e7f0      	b.n	800c8bc <_vfiprintf_r+0x1bc>
 800c8da:	ab03      	add	r3, sp, #12
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	462a      	mov	r2, r5
 800c8e0:	4b12      	ldr	r3, [pc, #72]	; (800c92c <_vfiprintf_r+0x22c>)
 800c8e2:	a904      	add	r1, sp, #16
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7fc fec3 	bl	8009670 <_printf_float>
 800c8ea:	4607      	mov	r7, r0
 800c8ec:	1c78      	adds	r0, r7, #1
 800c8ee:	d1d6      	bne.n	800c89e <_vfiprintf_r+0x19e>
 800c8f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f2:	07d9      	lsls	r1, r3, #31
 800c8f4:	d405      	bmi.n	800c902 <_vfiprintf_r+0x202>
 800c8f6:	89ab      	ldrh	r3, [r5, #12]
 800c8f8:	059a      	lsls	r2, r3, #22
 800c8fa:	d402      	bmi.n	800c902 <_vfiprintf_r+0x202>
 800c8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8fe:	f7fd fc6b 	bl	800a1d8 <__retarget_lock_release_recursive>
 800c902:	89ab      	ldrh	r3, [r5, #12]
 800c904:	065b      	lsls	r3, r3, #25
 800c906:	f53f af1d 	bmi.w	800c744 <_vfiprintf_r+0x44>
 800c90a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c90c:	e71c      	b.n	800c748 <_vfiprintf_r+0x48>
 800c90e:	ab03      	add	r3, sp, #12
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	462a      	mov	r2, r5
 800c914:	4b05      	ldr	r3, [pc, #20]	; (800c92c <_vfiprintf_r+0x22c>)
 800c916:	a904      	add	r1, sp, #16
 800c918:	4630      	mov	r0, r6
 800c91a:	f7fd f94d 	bl	8009bb8 <_printf_i>
 800c91e:	e7e4      	b.n	800c8ea <_vfiprintf_r+0x1ea>
 800c920:	0800d0dc 	.word	0x0800d0dc
 800c924:	0800d0e6 	.word	0x0800d0e6
 800c928:	08009671 	.word	0x08009671
 800c92c:	0800c6dd 	.word	0x0800c6dd
 800c930:	0800d0e2 	.word	0x0800d0e2

0800c934 <__swbuf_r>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	460e      	mov	r6, r1
 800c938:	4614      	mov	r4, r2
 800c93a:	4605      	mov	r5, r0
 800c93c:	b118      	cbz	r0, 800c946 <__swbuf_r+0x12>
 800c93e:	6a03      	ldr	r3, [r0, #32]
 800c940:	b90b      	cbnz	r3, 800c946 <__swbuf_r+0x12>
 800c942:	f7fd fae7 	bl	8009f14 <__sinit>
 800c946:	69a3      	ldr	r3, [r4, #24]
 800c948:	60a3      	str	r3, [r4, #8]
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	071a      	lsls	r2, r3, #28
 800c94e:	d525      	bpl.n	800c99c <__swbuf_r+0x68>
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	b31b      	cbz	r3, 800c99c <__swbuf_r+0x68>
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	6922      	ldr	r2, [r4, #16]
 800c958:	1a98      	subs	r0, r3, r2
 800c95a:	6963      	ldr	r3, [r4, #20]
 800c95c:	b2f6      	uxtb	r6, r6
 800c95e:	4283      	cmp	r3, r0
 800c960:	4637      	mov	r7, r6
 800c962:	dc04      	bgt.n	800c96e <__swbuf_r+0x3a>
 800c964:	4621      	mov	r1, r4
 800c966:	4628      	mov	r0, r5
 800c968:	f7ff fdca 	bl	800c500 <_fflush_r>
 800c96c:	b9e0      	cbnz	r0, 800c9a8 <__swbuf_r+0x74>
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	3b01      	subs	r3, #1
 800c972:	60a3      	str	r3, [r4, #8]
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	6022      	str	r2, [r4, #0]
 800c97a:	701e      	strb	r6, [r3, #0]
 800c97c:	6962      	ldr	r2, [r4, #20]
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	429a      	cmp	r2, r3
 800c982:	d004      	beq.n	800c98e <__swbuf_r+0x5a>
 800c984:	89a3      	ldrh	r3, [r4, #12]
 800c986:	07db      	lsls	r3, r3, #31
 800c988:	d506      	bpl.n	800c998 <__swbuf_r+0x64>
 800c98a:	2e0a      	cmp	r6, #10
 800c98c:	d104      	bne.n	800c998 <__swbuf_r+0x64>
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f7ff fdb5 	bl	800c500 <_fflush_r>
 800c996:	b938      	cbnz	r0, 800c9a8 <__swbuf_r+0x74>
 800c998:	4638      	mov	r0, r7
 800c99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99c:	4621      	mov	r1, r4
 800c99e:	4628      	mov	r0, r5
 800c9a0:	f000 f806 	bl	800c9b0 <__swsetup_r>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d0d5      	beq.n	800c954 <__swbuf_r+0x20>
 800c9a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c9ac:	e7f4      	b.n	800c998 <__swbuf_r+0x64>
	...

0800c9b0 <__swsetup_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4b2a      	ldr	r3, [pc, #168]	; (800ca5c <__swsetup_r+0xac>)
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	b118      	cbz	r0, 800c9c4 <__swsetup_r+0x14>
 800c9bc:	6a03      	ldr	r3, [r0, #32]
 800c9be:	b90b      	cbnz	r3, 800c9c4 <__swsetup_r+0x14>
 800c9c0:	f7fd faa8 	bl	8009f14 <__sinit>
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9ca:	0718      	lsls	r0, r3, #28
 800c9cc:	d422      	bmi.n	800ca14 <__swsetup_r+0x64>
 800c9ce:	06d9      	lsls	r1, r3, #27
 800c9d0:	d407      	bmi.n	800c9e2 <__swsetup_r+0x32>
 800c9d2:	2309      	movs	r3, #9
 800c9d4:	602b      	str	r3, [r5, #0]
 800c9d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	e034      	b.n	800ca4c <__swsetup_r+0x9c>
 800c9e2:	0758      	lsls	r0, r3, #29
 800c9e4:	d512      	bpl.n	800ca0c <__swsetup_r+0x5c>
 800c9e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9e8:	b141      	cbz	r1, 800c9fc <__swsetup_r+0x4c>
 800c9ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9ee:	4299      	cmp	r1, r3
 800c9f0:	d002      	beq.n	800c9f8 <__swsetup_r+0x48>
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f7fe fa82 	bl	800aefc <_free_r>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	6363      	str	r3, [r4, #52]	; 0x34
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca02:	81a3      	strh	r3, [r4, #12]
 800ca04:	2300      	movs	r3, #0
 800ca06:	6063      	str	r3, [r4, #4]
 800ca08:	6923      	ldr	r3, [r4, #16]
 800ca0a:	6023      	str	r3, [r4, #0]
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f043 0308 	orr.w	r3, r3, #8
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	b94b      	cbnz	r3, 800ca2c <__swsetup_r+0x7c>
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca22:	d003      	beq.n	800ca2c <__swsetup_r+0x7c>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4628      	mov	r0, r5
 800ca28:	f000 f884 	bl	800cb34 <__smakebuf_r>
 800ca2c:	89a0      	ldrh	r0, [r4, #12]
 800ca2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca32:	f010 0301 	ands.w	r3, r0, #1
 800ca36:	d00a      	beq.n	800ca4e <__swsetup_r+0x9e>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60a3      	str	r3, [r4, #8]
 800ca3c:	6963      	ldr	r3, [r4, #20]
 800ca3e:	425b      	negs	r3, r3
 800ca40:	61a3      	str	r3, [r4, #24]
 800ca42:	6923      	ldr	r3, [r4, #16]
 800ca44:	b943      	cbnz	r3, 800ca58 <__swsetup_r+0xa8>
 800ca46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca4a:	d1c4      	bne.n	800c9d6 <__swsetup_r+0x26>
 800ca4c:	bd38      	pop	{r3, r4, r5, pc}
 800ca4e:	0781      	lsls	r1, r0, #30
 800ca50:	bf58      	it	pl
 800ca52:	6963      	ldrpl	r3, [r4, #20]
 800ca54:	60a3      	str	r3, [r4, #8]
 800ca56:	e7f4      	b.n	800ca42 <__swsetup_r+0x92>
 800ca58:	2000      	movs	r0, #0
 800ca5a:	e7f7      	b.n	800ca4c <__swsetup_r+0x9c>
 800ca5c:	20000224 	.word	0x20000224

0800ca60 <_raise_r>:
 800ca60:	291f      	cmp	r1, #31
 800ca62:	b538      	push	{r3, r4, r5, lr}
 800ca64:	4604      	mov	r4, r0
 800ca66:	460d      	mov	r5, r1
 800ca68:	d904      	bls.n	800ca74 <_raise_r+0x14>
 800ca6a:	2316      	movs	r3, #22
 800ca6c:	6003      	str	r3, [r0, #0]
 800ca6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca72:	bd38      	pop	{r3, r4, r5, pc}
 800ca74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca76:	b112      	cbz	r2, 800ca7e <_raise_r+0x1e>
 800ca78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca7c:	b94b      	cbnz	r3, 800ca92 <_raise_r+0x32>
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 f830 	bl	800cae4 <_getpid_r>
 800ca84:	462a      	mov	r2, r5
 800ca86:	4601      	mov	r1, r0
 800ca88:	4620      	mov	r0, r4
 800ca8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca8e:	f000 b817 	b.w	800cac0 <_kill_r>
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d00a      	beq.n	800caac <_raise_r+0x4c>
 800ca96:	1c59      	adds	r1, r3, #1
 800ca98:	d103      	bne.n	800caa2 <_raise_r+0x42>
 800ca9a:	2316      	movs	r3, #22
 800ca9c:	6003      	str	r3, [r0, #0]
 800ca9e:	2001      	movs	r0, #1
 800caa0:	e7e7      	b.n	800ca72 <_raise_r+0x12>
 800caa2:	2400      	movs	r4, #0
 800caa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800caa8:	4628      	mov	r0, r5
 800caaa:	4798      	blx	r3
 800caac:	2000      	movs	r0, #0
 800caae:	e7e0      	b.n	800ca72 <_raise_r+0x12>

0800cab0 <raise>:
 800cab0:	4b02      	ldr	r3, [pc, #8]	; (800cabc <raise+0xc>)
 800cab2:	4601      	mov	r1, r0
 800cab4:	6818      	ldr	r0, [r3, #0]
 800cab6:	f7ff bfd3 	b.w	800ca60 <_raise_r>
 800caba:	bf00      	nop
 800cabc:	20000224 	.word	0x20000224

0800cac0 <_kill_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4d07      	ldr	r5, [pc, #28]	; (800cae0 <_kill_r+0x20>)
 800cac4:	2300      	movs	r3, #0
 800cac6:	4604      	mov	r4, r0
 800cac8:	4608      	mov	r0, r1
 800caca:	4611      	mov	r1, r2
 800cacc:	602b      	str	r3, [r5, #0]
 800cace:	f7f6 faa5 	bl	800301c <_kill>
 800cad2:	1c43      	adds	r3, r0, #1
 800cad4:	d102      	bne.n	800cadc <_kill_r+0x1c>
 800cad6:	682b      	ldr	r3, [r5, #0]
 800cad8:	b103      	cbz	r3, 800cadc <_kill_r+0x1c>
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	bf00      	nop
 800cae0:	200006f4 	.word	0x200006f4

0800cae4 <_getpid_r>:
 800cae4:	f7f6 ba92 	b.w	800300c <_getpid>

0800cae8 <__swhatbuf_r>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	460c      	mov	r4, r1
 800caec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf0:	2900      	cmp	r1, #0
 800caf2:	b096      	sub	sp, #88	; 0x58
 800caf4:	4615      	mov	r5, r2
 800caf6:	461e      	mov	r6, r3
 800caf8:	da0d      	bge.n	800cb16 <__swhatbuf_r+0x2e>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb00:	f04f 0100 	mov.w	r1, #0
 800cb04:	bf0c      	ite	eq
 800cb06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb0a:	2340      	movne	r3, #64	; 0x40
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	6031      	str	r1, [r6, #0]
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	b016      	add	sp, #88	; 0x58
 800cb14:	bd70      	pop	{r4, r5, r6, pc}
 800cb16:	466a      	mov	r2, sp
 800cb18:	f000 f848 	bl	800cbac <_fstat_r>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	dbec      	blt.n	800cafa <__swhatbuf_r+0x12>
 800cb20:	9901      	ldr	r1, [sp, #4]
 800cb22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb2a:	4259      	negs	r1, r3
 800cb2c:	4159      	adcs	r1, r3
 800cb2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb32:	e7eb      	b.n	800cb0c <__swhatbuf_r+0x24>

0800cb34 <__smakebuf_r>:
 800cb34:	898b      	ldrh	r3, [r1, #12]
 800cb36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb38:	079d      	lsls	r5, r3, #30
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	d507      	bpl.n	800cb50 <__smakebuf_r+0x1c>
 800cb40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6163      	str	r3, [r4, #20]
 800cb4c:	b002      	add	sp, #8
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	ab01      	add	r3, sp, #4
 800cb52:	466a      	mov	r2, sp
 800cb54:	f7ff ffc8 	bl	800cae8 <__swhatbuf_r>
 800cb58:	9900      	ldr	r1, [sp, #0]
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7fe fd99 	bl	800b694 <_malloc_r>
 800cb62:	b948      	cbnz	r0, 800cb78 <__smakebuf_r+0x44>
 800cb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb68:	059a      	lsls	r2, r3, #22
 800cb6a:	d4ef      	bmi.n	800cb4c <__smakebuf_r+0x18>
 800cb6c:	f023 0303 	bic.w	r3, r3, #3
 800cb70:	f043 0302 	orr.w	r3, r3, #2
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	e7e3      	b.n	800cb40 <__smakebuf_r+0xc>
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	6020      	str	r0, [r4, #0]
 800cb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	9b00      	ldr	r3, [sp, #0]
 800cb84:	6163      	str	r3, [r4, #20]
 800cb86:	9b01      	ldr	r3, [sp, #4]
 800cb88:	6120      	str	r0, [r4, #16]
 800cb8a:	b15b      	cbz	r3, 800cba4 <__smakebuf_r+0x70>
 800cb8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb90:	4630      	mov	r0, r6
 800cb92:	f000 f81d 	bl	800cbd0 <_isatty_r>
 800cb96:	b128      	cbz	r0, 800cba4 <__smakebuf_r+0x70>
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	f023 0303 	bic.w	r3, r3, #3
 800cb9e:	f043 0301 	orr.w	r3, r3, #1
 800cba2:	81a3      	strh	r3, [r4, #12]
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	431d      	orrs	r5, r3
 800cba8:	81a5      	strh	r5, [r4, #12]
 800cbaa:	e7cf      	b.n	800cb4c <__smakebuf_r+0x18>

0800cbac <_fstat_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4d07      	ldr	r5, [pc, #28]	; (800cbcc <_fstat_r+0x20>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	602b      	str	r3, [r5, #0]
 800cbba:	f7f6 fa8e 	bl	80030da <_fstat>
 800cbbe:	1c43      	adds	r3, r0, #1
 800cbc0:	d102      	bne.n	800cbc8 <_fstat_r+0x1c>
 800cbc2:	682b      	ldr	r3, [r5, #0]
 800cbc4:	b103      	cbz	r3, 800cbc8 <_fstat_r+0x1c>
 800cbc6:	6023      	str	r3, [r4, #0]
 800cbc8:	bd38      	pop	{r3, r4, r5, pc}
 800cbca:	bf00      	nop
 800cbcc:	200006f4 	.word	0x200006f4

0800cbd0 <_isatty_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4d06      	ldr	r5, [pc, #24]	; (800cbec <_isatty_r+0x1c>)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	4608      	mov	r0, r1
 800cbda:	602b      	str	r3, [r5, #0]
 800cbdc:	f7f6 fa8d 	bl	80030fa <_isatty>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_isatty_r+0x1a>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_isatty_r+0x1a>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	200006f4 	.word	0x200006f4

0800cbf0 <_init>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr

0800cbfc <_fini>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr
