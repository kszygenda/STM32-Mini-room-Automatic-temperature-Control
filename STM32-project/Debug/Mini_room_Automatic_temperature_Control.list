
Mini_room_Automatic_temperature_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010398  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  08010568  08010568  00020568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fe4  08010fe4  00030240  2**0
                  CONTENTS
  4 .ARM          00000008  08010fe4  08010fe4  00020fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fec  08010fec  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fec  08010fec  00020fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ff0  08010ff0  00020ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08010ff4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002be4  20000240  08011234  00030240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e24  08011234  00032e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab67  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040aa  00000000  00000000  0004ae93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0004ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112b  00000000  00000000  000505a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b591  00000000  00000000  000516cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000204b7  00000000  00000000  0007cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbac5  00000000  00000000  0009d113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007050  00000000  00000000  00198bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  0019fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0019fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010550 	.word	0x08010550

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	08010550 	.word	0x08010550

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <software_delay>:
#include <stdint.h>
#include <ctype.h>
//#include "bmp280_defs.h"
//#include "bmp280.h"
static void software_delay(uint32_t tick)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint32_t delay;
	while(tick-->0)
 8001038:	e00c      	b.n	8001054 <software_delay+0x24>
	{
		for(delay=5; delay>0; delay--){
 800103a:	2305      	movs	r3, #5
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e006      	b.n	800104e <software_delay+0x1e>
			asm("nop");
 8001040:	bf00      	nop
			asm("nop");
 8001042:	bf00      	nop
			asm("nop");
 8001044:	bf00      	nop
			asm("nop");
 8001046:	bf00      	nop
		for(delay=5; delay>0; delay--){
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f5      	bne.n	8001040 <software_delay+0x10>
	while(tick-->0)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1ed      	bne.n	800103a <software_delay+0xa>
		}
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LCD_init>:

void LCD_init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
	software_delay(1000000);
 8001072:	4849      	ldr	r0, [pc, #292]	; (8001198 <LCD_init+0x12c>)
 8001074:	f7ff ffdc 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f89d 	bl	80011bc <LCD_send_4bits>
 8001082:	4845      	ldr	r0, [pc, #276]	; (8001198 <LCD_init+0x12c>)
 8001084:	f7ff ffd4 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f895 	bl	80011bc <LCD_send_4bits>
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <LCD_init+0x12c>)
 8001094:	f7ff ffcc 	bl	8001030 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(400000);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f88d 	bl	80011bc <LCD_send_4bits>
 80010a2:	483e      	ldr	r0, [pc, #248]	; (800119c <LCD_init+0x130>)
 80010a4:	f7ff ffc4 	bl	8001030 <software_delay>
	//Set 4-bit
	LCD_send_4bits(0x02,0,0);	software_delay(400000);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 f885 	bl	80011bc <LCD_send_4bits>
 80010b2:	483a      	ldr	r0, [pc, #232]	; (800119c <LCD_init+0x130>)
 80010b4:	f7ff ffbc 	bl	8001030 <software_delay>

	//Function SET
	LCD_write_command(LCD_FUNCTION_INSTRUCTION | LCD_FUNCTION_DL_4BIT | LCD_FUNCTION_LINE_NUMBER_2 | LCD_FUNCTION_FONT_5x8); software_delay(50000);
 80010b8:	2028      	movs	r0, #40	; 0x28
 80010ba:	f000 f914 	bl	80012e6 <LCD_write_command>
 80010be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010c2:	f7ff ffb5 	bl	8001030 <software_delay>
	//Display on
	LCD_write_command(LCD_DISPLAY_INSTRUCTION | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR_OFF | LCD_DISPLAY_BLINK_OFF);software_delay(100000);
 80010c6:	200c      	movs	r0, #12
 80010c8:	f000 f90d 	bl	80012e6 <LCD_write_command>
 80010cc:	4834      	ldr	r0, [pc, #208]	; (80011a0 <LCD_init+0x134>)
 80010ce:	f7ff ffaf 	bl	8001030 <software_delay>
	//Display clear
	LCD_write_command(LCD_CLEAR_INSTRUCTION);software_delay(100000);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 f907 	bl	80012e6 <LCD_write_command>
 80010d8:	4831      	ldr	r0, [pc, #196]	; (80011a0 <LCD_init+0x134>)
 80010da:	f7ff ffa9 	bl	8001030 <software_delay>

	//Entry mode
	LCD_write_command(LCD_ENTRY_MODE_INSTRUCTION | LCD_ENTRY_MODE_INCREMENT | LCD_ENTRY_MODE_SHIFT_DISPLAY_OFF);software_delay(100000);
 80010de:	2006      	movs	r0, #6
 80010e0:	f000 f901 	bl	80012e6 <LCD_write_command>
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <LCD_init+0x134>)
 80010e6:	f7ff ffa3 	bl	8001030 <software_delay>
	//Init end

	//Return home
	LCD_write_command(LCD_HOME_INSTRUCTION);	software_delay(100000);
 80010ea:	2002      	movs	r0, #2
 80010ec:	f000 f8fb 	bl	80012e6 <LCD_write_command>
 80010f0:	482b      	ldr	r0, [pc, #172]	; (80011a0 <LCD_init+0x134>)
 80010f2:	f7ff ff9d 	bl	8001030 <software_delay>
	uint8_t custom_char1[] = LCD_CUSTOM_CHAR_ARROW_UP_PATERN;
 80010f6:	4a2b      	ldr	r2, [pc, #172]	; (80011a4 <LCD_init+0x138>)
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001100:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char1, 0);
 8001104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f98d 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char2[] = LCD_CUSTOM_CHAR_ARROW_DOWN_PATERN;
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <LCD_init+0x13c>)
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char2, 1);
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f980 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char3[] = LCD_CUSTOM_CHAR_ARROW_OUT_PATERN;
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <LCD_init+0x140>)
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001134:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char3, 2);
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	2102      	movs	r1, #2
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f973 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char4[] = LCD_CUSTOM_CHAR_ARROW_INTO_PATERN;
 8001144:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <LCD_init+0x144>)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char4, 3);
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2103      	movs	r1, #3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f966 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char5[] = LCD_CUSTOM_CHAR_ARROW_ENTER_PATERN;
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <LCD_init+0x148>)
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001168:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char5, 4);
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2104      	movs	r1, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f959 	bl	800142a <LCD_create_custom_character>
	uint8_t custom_char6[] = LCD_CUSTOM_CHAR_ARROW_PLUS_MINUS_PATERN;
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <LCD_init+0x14c>)
 800117a:	463b      	mov	r3, r7
 800117c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001180:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char6, 5);
 8001184:	463b      	mov	r3, r7
 8001186:	2105      	movs	r1, #5
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f94e 	bl	800142a <LCD_create_custom_character>



}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	000f4240 	.word	0x000f4240
 800119c:	00061a80 	.word	0x00061a80
 80011a0:	000186a0 	.word	0x000186a0
 80011a4:	08010568 	.word	0x08010568
 80011a8:	08010570 	.word	0x08010570
 80011ac:	08010578 	.word	0x08010578
 80011b0:	08010580 	.word	0x08010580
 80011b4:	08010588 	.word	0x08010588
 80011b8:	08010590 	.word	0x08010590

080011bc <LCD_send_4bits>:


void LCD_send_4bits(uint8_t data_to_send, char RS, char RW)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	460b      	mov	r3, r1
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	4613      	mov	r3, r2
 80011cc:	717b      	strb	r3, [r7, #5]
	LCD_GPIO_SET_VALUE(LCD_GPIO_RS_Pin, RS, LCD_GPIO_RS_Port);
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <LCD_send_4bits+0x24>
 80011d4:	2200      	movs	r2, #0
 80011d6:	2104      	movs	r1, #4
 80011d8:	4834      	ldr	r0, [pc, #208]	; (80012ac <LCD_send_4bits+0xf0>)
 80011da:	f003 f829 	bl	8004230 <HAL_GPIO_WritePin>
 80011de:	e004      	b.n	80011ea <LCD_send_4bits+0x2e>
 80011e0:	2201      	movs	r2, #1
 80011e2:	2104      	movs	r1, #4
 80011e4:	4831      	ldr	r0, [pc, #196]	; (80012ac <LCD_send_4bits+0xf0>)
 80011e6:	f003 f823 	bl	8004230 <HAL_GPIO_WritePin>
	//set RW to LOW (GND) by hardware

	if(data_to_send&(0x01<<0)){LCD_DATABIT_ON(4);}else{LCD_DATABIT_OFF(4);}
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <LCD_send_4bits+0x44>
 80011f4:	2201      	movs	r2, #1
 80011f6:	2110      	movs	r1, #16
 80011f8:	482c      	ldr	r0, [pc, #176]	; (80012ac <LCD_send_4bits+0xf0>)
 80011fa:	f003 f819 	bl	8004230 <HAL_GPIO_WritePin>
 80011fe:	e004      	b.n	800120a <LCD_send_4bits+0x4e>
 8001200:	2200      	movs	r2, #0
 8001202:	2110      	movs	r1, #16
 8001204:	4829      	ldr	r0, [pc, #164]	; (80012ac <LCD_send_4bits+0xf0>)
 8001206:	f003 f813 	bl	8004230 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<1)){LCD_DATABIT_ON(5);}else{LCD_DATABIT_OFF(5);}
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <LCD_send_4bits+0x64>
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	4824      	ldr	r0, [pc, #144]	; (80012ac <LCD_send_4bits+0xf0>)
 800121a:	f003 f809 	bl	8004230 <HAL_GPIO_WritePin>
 800121e:	e004      	b.n	800122a <LCD_send_4bits+0x6e>
 8001220:	2200      	movs	r2, #0
 8001222:	2120      	movs	r1, #32
 8001224:	4821      	ldr	r0, [pc, #132]	; (80012ac <LCD_send_4bits+0xf0>)
 8001226:	f003 f803 	bl	8004230 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<2)){LCD_DATABIT_ON(6);}else{LCD_DATABIT_OFF(6);}
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <LCD_send_4bits+0x84>
 8001234:	2201      	movs	r2, #1
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	481c      	ldr	r0, [pc, #112]	; (80012ac <LCD_send_4bits+0xf0>)
 800123a:	f002 fff9 	bl	8004230 <HAL_GPIO_WritePin>
 800123e:	e004      	b.n	800124a <LCD_send_4bits+0x8e>
 8001240:	2200      	movs	r2, #0
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	4819      	ldr	r0, [pc, #100]	; (80012ac <LCD_send_4bits+0xf0>)
 8001246:	f002 fff3 	bl	8004230 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<3)){LCD_DATABIT_ON(7);}else{LCD_DATABIT_OFF(7);}
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <LCD_send_4bits+0xa4>
 8001254:	2201      	movs	r2, #1
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	4814      	ldr	r0, [pc, #80]	; (80012ac <LCD_send_4bits+0xf0>)
 800125a:	f002 ffe9 	bl	8004230 <HAL_GPIO_WritePin>
 800125e:	e004      	b.n	800126a <LCD_send_4bits+0xae>
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <LCD_send_4bits+0xf0>)
 8001266:	f002 ffe3 	bl	8004230 <HAL_GPIO_WritePin>
	software_delay(100);
 800126a:	2064      	movs	r0, #100	; 0x64
 800126c:	f7ff fee0 	bl	8001030 <software_delay>
	
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8001270:	2201      	movs	r2, #1
 8001272:	2108      	movs	r1, #8
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LCD_send_4bits+0xf0>)
 8001276:	f002 ffdb 	bl	8004230 <HAL_GPIO_WritePin>
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f7ff fed8 	bl	8001030 <software_delay>
	LCD_GPIO_OFF(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8001280:	2200      	movs	r2, #0
 8001282:	2108      	movs	r1, #8
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <LCD_send_4bits+0xf0>)
 8001286:	f002 ffd3 	bl	8004230 <HAL_GPIO_WritePin>
 800128a:	2064      	movs	r0, #100	; 0x64
 800128c:	f7ff fed0 	bl	8001030 <software_delay>
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(1000);
 8001290:	2201      	movs	r2, #1
 8001292:	2108      	movs	r1, #8
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <LCD_send_4bits+0xf0>)
 8001296:	f002 ffcb 	bl	8004230 <HAL_GPIO_WritePin>
 800129a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129e:	f7ff fec7 	bl	8001030 <software_delay>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <LCD_send_8bits_twice_4bits>:

void LCD_send_8bits_twice_4bits(uint8_t data, char RS, char RW)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	460b      	mov	r3, r1
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	4613      	mov	r3, r2
 80012c0:	717b      	strb	r3, [r7, #5]
	LCD_send_4bits((data>>4), RS, RW);	//high part
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	797a      	ldrb	r2, [r7, #5]
 80012ca:	79b9      	ldrb	r1, [r7, #6]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff75 	bl	80011bc <LCD_send_4bits>
	LCD_send_4bits(data, RS, RW);		//low part
 80012d2:	797a      	ldrb	r2, [r7, #5]
 80012d4:	79b9      	ldrb	r1, [r7, #6]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff6f 	bl	80011bc <LCD_send_4bits>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(command, 0, 0);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffda 	bl	80012b0 <LCD_send_8bits_twice_4bits>
	software_delay(10000);
 80012fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8001300:	f7ff fe96 	bl	8001030 <software_delay>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <LCD_write_data>:

void LCD_write_data(char byte_data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(byte_data, 1, 0);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ffc7 	bl	80012b0 <LCD_send_8bits_twice_4bits>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <LCD_write_char>:

void LCD_write_char(char character)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	if(isprint(character))	LCD_write_data(character);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3301      	adds	r3, #1
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <LCD_write_char+0x2c>)
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <LCD_write_char+0x24>
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffde 	bl	800130c <LCD_write_data>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08010c10 	.word	0x08010c10

0800135c <LCD_write_text>:



void LCD_write_text(char* pText){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	while(*pText!='\0')
 8001364:	e007      	b.n	8001376 <LCD_write_text+0x1a>
	{
		LCD_write_char(*pText);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffde 	bl	800132c <LCD_write_char>
		pText++;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3301      	adds	r3, #1
 8001374:	607b      	str	r3, [r7, #4]
	while(*pText!='\0')
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f3      	bne.n	8001366 <LCD_write_text+0xa>
	}
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <LCD_goto_xy>:

void LCD_goto_xy(uint8_t line, uint8_t y)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]
	switch(line){
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <LCD_goto_xy+0x1c>
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d003      	beq.n	80013aa <LCD_goto_xy+0x22>
 80013a2:	e005      	b.n	80013b0 <LCD_goto_xy+0x28>
		case 0: line=0x00; break;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	e004      	b.n	80013b4 <LCD_goto_xy+0x2c>
		case 1: line=0x40; break;
 80013aa:	2340      	movs	r3, #64	; 0x40
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e001      	b.n	80013b4 <LCD_goto_xy+0x2c>
		default: line=0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	71fb      	strb	r3, [r7, #7]
	}
	LCD_write_command(LCD_DDRAM_ADDRESS | (line+y));
 80013b4:	79fa      	ldrb	r2, [r7, #7]
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4413      	add	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff8d 	bl	80012e6 <LCD_write_command>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <LCD_goto_line>:

void LCD_goto_line(uint8_t line)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	LCD_goto_xy(line, 0);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ffd0 	bl	8001388 <LCD_goto_xy>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LCD_printf>:
		LCD_write_text(text_buffer);
	}
}

uint8_t LCD_printf(const char * format, ... )
{
 80013f0:	b40f      	push	{r0, r1, r2, r3}
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
	#define LCD_BUFFER_SIZE (LCD_MAXIMUM_LINE_LENGTH+1)
	char text_buffer[LCD_BUFFER_SIZE];
	uint8_t length=0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
	va_list args;
	va_start (args, format);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	603b      	str	r3, [r7, #0]
	length=vsnprintf(text_buffer, LCD_BUFFER_SIZE, format, args);
 8001402:	1d38      	adds	r0, r7, #4
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6a3a      	ldr	r2, [r7, #32]
 8001408:	2111      	movs	r1, #17
 800140a:	f00c faf7 	bl	800d9fc <vsniprintf>
 800140e:	4603      	mov	r3, r0
 8001410:	75fb      	strb	r3, [r7, #23]
	LCD_write_text(text_buffer);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffa1 	bl	800135c <LCD_write_text>
	va_end (args);
	return length;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr

0800142a <LCD_create_custom_character>:


void LCD_create_custom_character(uint8_t* pPattern, uint8_t position)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	70fb      	strb	r3, [r7, #3]
	LCD_write_command(LCD_CGRAM_ADDRESS | (position*8));
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	b25b      	sxtb	r3, r3
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	b25b      	sxtb	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff4d 	bl	80012e6 <LCD_write_command>
	for (uint8_t i=0; i<8; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e009      	b.n	8001466 <LCD_create_custom_character+0x3c>
		LCD_write_data(pPattern[i]);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff56 	bl	800130c <LCD_write_data>
	for (uint8_t i=0; i<8; i++)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	3301      	adds	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b07      	cmp	r3, #7
 800146a:	d9f2      	bls.n	8001452 <LCD_create_custom_character+0x28>
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fa48 	bl	8001914 <null_ptr_check>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d117      	bne.n	80014c0 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	20d0      	movs	r0, #208	; 0xd0
 8001498:	f000 f818 	bl	80014cc <bmp2_get_regs>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 80014a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b58      	cmp	r3, #88	; 0x58
 80014ae:	d105      	bne.n	80014bc <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fa7a 	bl	80019aa <get_calib_param>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e001      	b.n	80014c0 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 80014bc:	23fc      	movs	r3, #252	; 0xfc
 80014be:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f000 fa19 	bl	8001914 <null_ptr_check>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80014e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11e      	bne.n	800152c <bmp2_get_regs+0x60>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001502:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68dc      	ldr	r4, [r3, #12]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	7bf8      	ldrb	r0, [r7, #15]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	47a0      	blx	r4
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001526:	23fe      	movs	r3, #254	; 0xfe
 8001528:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800152a:	e001      	b.n	8001530 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800152c:	23ff      	movs	r3, #255	; 0xff
 800152e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}

0800153c <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b04      	cmp	r3, #4
 800154e:	d901      	bls.n	8001554 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001550:	2304      	movs	r3, #4
 8001552:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f000 f9dd 	bl	8001914 <null_ptr_check>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001560:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001564:	2b00      	cmp	r3, #0
 8001566:	d150      	bne.n	800160a <bmp2_set_regs+0xce>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d04d      	beq.n	800160a <bmp2_set_regs+0xce>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d04a      	beq.n	800160a <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d043      	beq.n	8001602 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d114      	bne.n	80015b2 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001588:	2300      	movs	r3, #0
 800158a:	77fb      	strb	r3, [r7, #31]
 800158c:	e00d      	b.n	80015aa <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	68f9      	ldr	r1, [r7, #12]
 800159a:	440b      	add	r3, r1
 800159c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	3301      	adds	r3, #1
 80015a8:	77fb      	strb	r3, [r7, #31]
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d8ed      	bhi.n	800158e <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d90b      	bls.n	80015d0 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80015b8:	f107 0114 	add.w	r1, r7, #20
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f9c7 	bl	8001954 <interleave_data>
                temp_len = ((len * 2) - 1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	e001      	b.n	80015d4 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691c      	ldr	r4, [r3, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	7818      	ldrb	r0, [r3, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f107 0114 	add.w	r1, r7, #20
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	47a0      	blx	r4
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80015fa:	23fe      	movs	r3, #254	; 0xfe
 80015fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001600:	e007      	b.n	8001612 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001602:	23fd      	movs	r3, #253	; 0xfd
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001608:	e003      	b.n	8001612 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001610:	e000      	b.n	8001614 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001612:	bf00      	nop
    }

    return rslt;
 8001614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001618:	4618      	mov	r0, r3
 800161a:	372c      	adds	r7, #44	; 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}

08001620 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8001628:	23e0      	movs	r3, #224	; 0xe0
 800162a:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800162c:	23b6      	movs	r3, #182	; 0xb6
 800162e:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001630:	f107 010d 	add.w	r1, r7, #13
 8001634:	f107 000e 	add.w	r0, r7, #14
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f7ff ff7e 	bl	800153c <bmp2_set_regs>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800165a:	2300      	movs	r3, #0
 800165c:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d02d      	beq.n	80016c0 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001664:	f107 010c 	add.w	r1, r7, #12
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2202      	movs	r2, #2
 800166c:	20f4      	movs	r0, #244	; 0xf4
 800166e:	f7ff ff2d 	bl	80014cc <bmp2_get_regs>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d122      	bne.n	80016c4 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	095b      	lsrs	r3, r3, #5
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001688:	7b3b      	ldrb	r3, [r7, #12]
 800168a:	109b      	asrs	r3, r3, #2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001698:	7b7b      	ldrb	r3, [r7, #13]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	b2da      	uxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	109b      	asrs	r3, r3, #2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	715a      	strb	r2, [r3, #5]
 80016be:	e001      	b.n	80016c4 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016c0:	23ff      	movs	r3, #255	; 0xff
 80016c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f9fe 	bl	8001ae0 <conf_sensor>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01b      	beq.n	8001736 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80016fe:	f107 010e 	add.w	r1, r7, #14
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	20f3      	movs	r0, #243	; 0xf3
 8001708:	f7ff fee0 	bl	80014cc <bmp2_get_regs>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d110      	bne.n	800173a <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	10db      	asrs	r3, r3, #3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	705a      	strb	r2, [r3, #1]
 8001734:	e001      	b.n	800173a <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001736:	23ff      	movs	r3, #255	; 0xff
 8001738:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f9c0 	bl	8001ae0 <conf_sensor>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001764:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	2300      	movs	r3, #0
 8001780:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d024      	beq.n	80017dc <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001792:	f107 0110 	add.w	r1, r7, #16
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2206      	movs	r2, #6
 800179a:	20f7      	movs	r0, #247	; 0xf7
 800179c:	f7ff fe96 	bl	80014cc <bmp2_get_regs>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80017a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d119      	bne.n	80017e0 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80017ac:	f107 0208 	add.w	r2, r7, #8
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 faba 	bl	8001d30 <parse_sensor_data>
 80017bc:	4603      	mov	r3, r0
 80017be:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80017c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f80b 	bl	80017ec <bmp2_compensate_data>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]
 80017da:	e001      	b.n	80017e0 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80017dc:	23ff      	movs	r3, #255	; 0xff
 80017de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f88b 	bl	8001914 <null_ptr_check>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d129      	bne.n	800185e <bmp2_compensate_data+0x72>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d026      	beq.n	800185e <bmp2_compensate_data+0x72>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d023      	beq.n	800185e <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3308      	adds	r3, #8
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fabc 	bl	8001db8 <compensate_temperature>
 8001840:	4603      	mov	r3, r0
 8001842:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fba8 	bl	8001fa8 <compensate_pressure>
 8001858:	4603      	mov	r3, r0
 800185a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800185c:	e001      	b.n	8001862 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800185e:	23ff      	movs	r3, #255	; 0xff
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b092      	sub	sp, #72	; 0x48
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <bmp2_compute_meas_time+0x9c>)
 800187e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001882:	461d      	mov	r5, r3
 8001884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <bmp2_compute_meas_time+0xa0>)
 800188e:	f107 0410 	add.w	r4, r7, #16
 8001892:	461d      	mov	r5, r3
 8001894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800189c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f837 	bl	8001914 <null_ptr_check>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80018ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d122      	bne.n	80018fa <bmp2_compute_meas_time+0x8a>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01f      	beq.n	80018fa <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7e1b      	ldrb	r3, [r3, #24]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d111      	bne.n	80018e6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	3348      	adds	r3, #72	; 0x48
 80018ca:	443b      	add	r3, r7
 80018cc:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	789b      	ldrb	r3, [r3, #2]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	3348      	adds	r3, #72	; 0x48
 80018d8:	443b      	add	r3, r7
 80018da:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80018de:	441a      	add	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018e4:	e00c      	b.n	8001900 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	78db      	ldrb	r3, [r3, #3]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3348      	adds	r3, #72	; 0x48
 80018ee:	443b      	add	r3, r7
 80018f0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018f8:	e002      	b.n	8001900 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80018fa:	23ff      	movs	r3, #255	; 0xff
 80018fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001900:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001904:	4618      	mov	r0, r3
 8001906:	3748      	adds	r7, #72	; 0x48
 8001908:	46bd      	mov	sp, r7
 800190a:	bdb0      	pop	{r4, r5, r7, pc}
 800190c:	0801059c 	.word	0x0801059c
 8001910:	080105b0 	.word	0x080105b0

08001914 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <null_ptr_check+0x26>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <null_ptr_check+0x26>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <null_ptr_check+0x26>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800193a:	23ff      	movs	r3, #255	; 0xff
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e001      	b.n	8001944 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e015      	b.n	8001994 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	441a      	add	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	3b01      	subs	r3, #1
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	440b      	add	r3, r1
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	441a      	add	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	440b      	add	r3, r1
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d3e5      	bcc.n	8001968 <interleave_data+0x14>
    }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b08a      	sub	sp, #40	; 0x28
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80019c8:	f107 010c 	add.w	r1, r7, #12
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2219      	movs	r2, #25
 80019d0:	2088      	movs	r0, #136	; 0x88
 80019d2:	f7ff fd7b 	bl	80014cc <bmp2_get_regs>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80019dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d177      	bne.n	8001ad4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7b3b      	ldrb	r3, [r7, #12]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001a0a:	7c7b      	ldrb	r3, [r7, #17]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	7c3b      	ldrb	r3, [r7, #16]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	7cbb      	ldrb	r3, [r7, #18]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001a30:	7d7b      	ldrb	r3, [r7, #21]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	7d3b      	ldrb	r3, [r7, #20]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	7dbb      	ldrb	r3, [r7, #22]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001a54:	7e7b      	ldrb	r3, [r7, #25]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	7e3b      	ldrb	r3, [r7, #24]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001a66:	7efb      	ldrb	r3, [r7, #27]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	7ebb      	ldrb	r3, [r7, #26]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001a78:	7f7b      	ldrb	r3, [r7, #29]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	7f3b      	ldrb	r3, [r7, #28]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	7fbb      	ldrb	r3, [r7, #30]
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001a9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001ac8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001aee:	2300      	movs	r3, #0
 8001af0:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001af2:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001af6:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d074      	beq.n	8001be8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001afe:	f107 0114 	add.w	r1, r7, #20
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	20f4      	movs	r0, #244	; 0xf4
 8001b08:	f7ff fce0 	bl	80014cc <bmp2_get_regs>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d169      	bne.n	8001bec <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fd81 	bl	8001620 <bmp2_soft_reset>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d160      	bne.n	8001bec <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f861 	bl	8001bf8 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001b36:	7d7b      	ldrb	r3, [r7, #21]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	b25a      	sxtb	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	789b      	ldrb	r3, [r3, #2]
 8001b44:	015b      	lsls	r3, r3, #5
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001b50:	7d7b      	ldrb	r3, [r7, #21]
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	f023 031c 	bic.w	r3, r3, #28
 8001b58:	b25a      	sxtb	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	791b      	ldrb	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	f003 031c 	and.w	r3, r3, #28
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001b70:	7d7b      	ldrb	r3, [r7, #21]
 8001b72:	b25b      	sxtb	r3, r3
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	b25a      	sxtb	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001b8e:	f107 0114 	add.w	r1, r7, #20
 8001b92:	f107 0010 	add.w	r0, r7, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f7ff fccf 	bl	800153c <bmp2_set_regs>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d120      	bne.n	8001bec <conf_sensor+0x10c>
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01d      	beq.n	8001bec <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001bb6:	7d3b      	ldrb	r3, [r7, #20]
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001bd2:	f107 0114 	add.w	r1, r7, #20
 8001bd6:	f107 0010 	add.w	r0, r7, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f7ff fcad 	bl	800153c <bmp2_set_regs>
 8001be2:	4603      	mov	r3, r0
 8001be4:	75fb      	strb	r3, [r7, #23]
 8001be6:	e001      	b.n	8001bec <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001be8:	23ff      	movs	r3, #255	; 0xff
 8001bea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	78db      	ldrb	r3, [r3, #3]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	f200 808b 	bhi.w	8001d22 <set_os_mode+0x12a>
 8001c0c:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <set_os_mode+0x1c>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c29 	.word	0x08001c29
 8001c18:	08001c5b 	.word	0x08001c5b
 8001c1c:	08001c8d 	.word	0x08001c8d
 8001c20:	08001cbf 	.word	0x08001cbf
 8001c24:	08001cf1 	.word	0x08001cf1
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	f023 031c 	bic.w	r3, r3, #28
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	701a      	strb	r2, [r3, #0]
            break;
 8001c58:	e064      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	f043 0320 	orr.w	r3, r3, #32
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	f023 031c 	bic.w	r3, r3, #28
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	701a      	strb	r2, [r3, #0]
            break;
 8001c8a:	e04b      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	f023 031c 	bic.w	r3, r3, #28
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	f043 030c 	orr.w	r3, r3, #12
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	701a      	strb	r2, [r3, #0]
            break;
 8001cbc:	e032      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	f043 0320 	orr.w	r3, r3, #32
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	f023 031c 	bic.w	r3, r3, #28
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	701a      	strb	r2, [r3, #0]
            break;
 8001cee:	e019      	b.n	8001d24 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	f023 031c 	bic.w	r3, r3, #28
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	f043 0314 	orr.w	r3, r3, #20
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	701a      	strb	r2, [r3, #0]
            break;
 8001d20:	e000      	b.n	8001d24 <set_os_mode+0x12c>
        default:
            break;
 8001d22:	bf00      	nop
    }
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3301      	adds	r3, #1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3302      	adds	r3, #2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3303      	adds	r3, #3
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	031b      	lsls	r3, r3, #12
 8001d6e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3305      	adds	r3, #5
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f000 fae5 	bl	8002370 <st_check_boundaries>
 8001da6:	4603      	mov	r3, r0
 8001da8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001daa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dbc:	b08c      	sub	sp, #48	; 0x30
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbc7 	bl	8000564 <__aeabi_i2d>
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <compensate_temperature+0x1d4>)
 8001ddc:	f7fe fd56 	bl	800088c <__aeabi_ddiv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4614      	mov	r4, r2
 8001de6:	461d      	mov	r5, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	8b9b      	ldrh	r3, [r3, #28]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fba9 	bl	8000544 <__aeabi_ui2d>
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <compensate_temperature+0x1d8>)
 8001df8:	f7fe fd48 	bl	800088c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa60 	bl	80002c8 <__aeabi_dsub>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fba4 	bl	8000564 <__aeabi_i2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fc08 	bl	8000638 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb95 	bl	8000564 <__aeabi_i2d>
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e42:	f7fe fd23 	bl	800088c <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8b9b      	ldrh	r3, [r3, #28]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb76 	bl	8000544 <__aeabi_ui2d>
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <compensate_temperature+0x1dc>)
 8001e5e:	f7fe fd15 	bl	800088c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4620      	mov	r0, r4
 8001e68:	4629      	mov	r1, r5
 8001e6a:	f7fe fa2d 	bl	80002c8 <__aeabi_dsub>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4614      	mov	r4, r2
 8001e74:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb72 	bl	8000564 <__aeabi_i2d>
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e88:	f7fe fd00 	bl	800088c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4690      	mov	r8, r2
 8001e92:	4699      	mov	r9, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8b9b      	ldrh	r3, [r3, #28]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb53 	bl	8000544 <__aeabi_ui2d>
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <compensate_temperature+0x1dc>)
 8001ea4:	f7fe fcf2 	bl	800088c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4640      	mov	r0, r8
 8001eae:	4649      	mov	r1, r9
 8001eb0:	f7fe fa0a 	bl	80002c8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe fbbc 	bl	8000638 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb48 	bl	8000564 <__aeabi_i2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
    var2 =
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe fbac 	bl	8000638 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ef0:	f7fe f9ec 	bl	80002cc <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fe4c 	bl	8000b98 <__aeabi_d2iz>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001f06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f0e:	f7fe f9dd 	bl	80002cc <__adddf3>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <compensate_temperature+0x1e0>)
 8001f20:	f7fe fcb4 	bl	800088c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <compensate_temperature+0x1e4>)
 8001f32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f36:	f7fe fdf1 	bl	8000b1c <__aeabi_dcmplt>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <compensate_temperature+0x1e4>)
 8001f46:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <compensate_temperature+0x1e8>)
 8001f56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f5a:	f7fe fdfd 	bl	8000b58 <__aeabi_dcmpgt>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <compensate_temperature+0x1e8>)
 8001f6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f7a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001f7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f8c:	40d00000 	.word	0x40d00000
 8001f90:	40900000 	.word	0x40900000
 8001f94:	40c00000 	.word	0x40c00000
 8001f98:	40b40000 	.word	0x40b40000
 8001f9c:	c0440000 	.word	0xc0440000
 8001fa0:	40554000 	.word	0x40554000
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe faca 	bl	8000564 <__aeabi_i2d>
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	f7fe fc58 	bl	800088c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4bcb      	ldr	r3, [pc, #812]	; (8002318 <compensate_pressure+0x370>)
 8001fea:	f7fe f96d 	bl	80002c8 <__aeabi_dsub>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ffa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ffe:	f7fe fb1b 	bl	8000638 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe faa7 	bl	8000564 <__aeabi_i2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f7fe fb0b 	bl	8000638 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	4bbb      	ldr	r3, [pc, #748]	; (800231c <compensate_pressure+0x374>)
 8002030:	f7fe fc2c 	bl	800088c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fa8e 	bl	8000564 <__aeabi_i2d>
 8002048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204c:	f7fe faf4 	bl	8000638 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	f7fe f936 	bl	80002cc <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002068:	f7fe f930 	bl	80002cc <__adddf3>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4ba9      	ldr	r3, [pc, #676]	; (8002320 <compensate_pressure+0x378>)
 800207a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800207e:	f7fe fc05 	bl	800088c <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	461d      	mov	r5, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa67 	bl	8000564 <__aeabi_i2d>
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4ba2      	ldr	r3, [pc, #648]	; (8002324 <compensate_pressure+0x37c>)
 800209c:	f7fe facc 	bl	8000638 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe f910 	bl	80002cc <__adddf3>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa52 	bl	8000564 <__aeabi_i2d>
 80020c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c4:	f7fe fab8 	bl	8000638 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	f7fe fab0 	bl	8000638 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b90      	ldr	r3, [pc, #576]	; (8002328 <compensate_pressure+0x380>)
 80020e6:	f7fe fbd1 	bl	800088c <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4614      	mov	r4, r2
 80020f0:	461d      	mov	r5, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa33 	bl	8000564 <__aeabi_i2d>
 80020fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002102:	f7fe fa99 	bl	8000638 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4620      	mov	r0, r4
 800210c:	4629      	mov	r1, r5
 800210e:	f7fe f8dd 	bl	80002cc <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <compensate_pressure+0x380>)
 8002120:	f7fe fbb4 	bl	800088c <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b7a      	ldr	r3, [pc, #488]	; (800231c <compensate_pressure+0x374>)
 8002132:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002136:	f7fe fba9 	bl	800088c <__aeabi_ddiv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b79      	ldr	r3, [pc, #484]	; (800232c <compensate_pressure+0x384>)
 8002148:	f7fe f8c0 	bl	80002cc <__adddf3>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4614      	mov	r4, r2
 8002152:	461d      	mov	r5, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f9f3 	bl	8000544 <__aeabi_ui2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4620      	mov	r0, r4
 8002164:	4629      	mov	r1, r5
 8002166:	f7fe fa67 	bl	8000638 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800217e:	f7fe fccd 	bl	8000b1c <__aeabi_dcmplt>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <compensate_pressure+0x1f8>
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002194:	f7fe fce0 	bl	8000b58 <__aeabi_dcmpgt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80de 	beq.w	800235c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9cd 	bl	8000544 <__aeabi_ui2d>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	f04f 0000 	mov.w	r0, #0
 80021b2:	495f      	ldr	r1, [pc, #380]	; (8002330 <compensate_pressure+0x388>)
 80021b4:	f7fe f888 	bl	80002c8 <__aeabi_dsub>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <compensate_pressure+0x38c>)
 80021c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021ca:	f7fe fb5f 	bl	800088c <__aeabi_ddiv>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021d6:	f7fe f877 	bl	80002c8 <__aeabi_dsub>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	a347      	add	r3, pc, #284	; (adr r3, 8002300 <compensate_pressure+0x358>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fa26 	bl	8000638 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f8:	f7fe fb48 	bl	800088c <__aeabi_ddiv>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f9aa 	bl	8000564 <__aeabi_i2d>
 8002210:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002214:	f7fe fa10 	bl	8000638 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002224:	f7fe fa08 	bl	8000638 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	4b40      	ldr	r3, [pc, #256]	; (8002338 <compensate_pressure+0x390>)
 8002236:	f7fe fb29 	bl	800088c <__aeabi_ddiv>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f98b 	bl	8000564 <__aeabi_i2d>
 800224e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002252:	f7fe f9f1 	bl	8000638 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <compensate_pressure+0x374>)
 8002264:	f7fe fb12 	bl	800088c <__aeabi_ddiv>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002270:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002274:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002278:	f7fe f828 	bl	80002cc <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f96a 	bl	8000564 <__aeabi_i2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fe f818 	bl	80002cc <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <compensate_pressure+0x394>)
 80022aa:	f7fe faef 	bl	800088c <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022b6:	f7fe f809 	bl	80002cc <__adddf3>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 80022c2:	a311      	add	r3, pc, #68	; (adr r3, 8002308 <compensate_pressure+0x360>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022cc:	f7fe fc26 	bl	8000b1c <__aeabi_dcmplt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 80022d6:	a30c      	add	r3, pc, #48	; (adr r3, 8002308 <compensate_pressure+0x360>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 80022e6:	a30a      	add	r3, pc, #40	; (adr r3, 8002310 <compensate_pressure+0x368>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022f0:	f7fe fc32 	bl	8000b58 <__aeabi_dcmpgt>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	e022      	b.n	8002340 <compensate_pressure+0x398>
 80022fa:	bf00      	nop
 80022fc:	f3af 8000 	nop.w
 8002300:	00000000 	.word	0x00000000
 8002304:	40b86a00 	.word	0x40b86a00
 8002308:	00000000 	.word	0x00000000
 800230c:	40dd4c00 	.word	0x40dd4c00
 8002310:	00000000 	.word	0x00000000
 8002314:	40fadb00 	.word	0x40fadb00
 8002318:	40ef4000 	.word	0x40ef4000
 800231c:	40e00000 	.word	0x40e00000
 8002320:	40100000 	.word	0x40100000
 8002324:	40f00000 	.word	0x40f00000
 8002328:	41200000 	.word	0x41200000
 800232c:	3ff00000 	.word	0x3ff00000
 8002330:	41300000 	.word	0x41300000
 8002334:	40b00000 	.word	0x40b00000
 8002338:	41e00000 	.word	0x41e00000
 800233c:	40300000 	.word	0x40300000
 8002340:	d007      	beq.n	8002352 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8002342:	a309      	add	r3, pc, #36	; (adr r3, 8002368 <compensate_pressure+0x3c0>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 800234c:	2304      	movs	r3, #4
 800234e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002358:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 800235c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002360:	4618      	mov	r0, r3
 8002362:	3730      	adds	r7, #48	; 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bdb0      	pop	{r4, r5, r7, pc}
 8002368:	00000000 	.word	0x00000000
 800236c:	40fadb00 	.word	0x40fadb00

08002370 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db03      	blt.n	800238c <st_check_boundaries+0x1c>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <st_check_boundaries+0x88>)
 8002388:	4293      	cmp	r3, r2
 800238a:	dd09      	ble.n	80023a0 <st_check_boundaries+0x30>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db06      	blt.n	80023a0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <st_check_boundaries+0x88>)
 8002396:	4293      	cmp	r3, r2
 8002398:	dc02      	bgt.n	80023a0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 800239a:	23fa      	movs	r3, #250	; 0xfa
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e023      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db03      	blt.n	80023ae <st_check_boundaries+0x3e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <st_check_boundaries+0x88>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	dd09      	ble.n	80023c2 <st_check_boundaries+0x52>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db06      	blt.n	80023c2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <st_check_boundaries+0x88>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	dc02      	bgt.n	80023c2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 80023bc:	23fb      	movs	r3, #251	; 0xfb
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e012      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db03      	blt.n	80023d0 <st_check_boundaries+0x60>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <st_check_boundaries+0x88>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	dd09      	ble.n	80023e4 <st_check_boundaries+0x74>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db03      	blt.n	80023de <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <st_check_boundaries+0x88>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	dd02      	ble.n	80023e4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80023de:	23f9      	movs	r3, #249	; 0xf9
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e001      	b.n	80023e8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	000ffff0 	.word	0x000ffff0

080023fc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff f836 	bl	8001476 <bmp2_init>
 800240a:	4603      	mov	r3, r0
 800240c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f91b 	bl	8001650 <bmp2_get_config>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 800241e:	2303      	movs	r3, #3
 8002420:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8002422:	2300      	movs	r3, #0
 8002424:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8002426:	2303      	movs	r3, #3
 8002428:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f94d 	bl	80016d0 <bmp2_set_config>
 8002436:	4603      	mov	r3, r0
 8002438:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4619      	mov	r1, r3
 8002442:	2003      	movs	r0, #3
 8002444:	f7ff f97f 	bl	8001746 <bmp2_set_power_mode>
 8002448:	4603      	mov	r3, r0
 800244a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 800244c:	f107 0108 	add.w	r1, r7, #8
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fa0a 	bl	8001870 <bmp2_compute_meas_time>
 800245c:	4603      	mov	r3, r0
 800245e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6858      	ldr	r0, [r3, #4]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	891b      	ldrh	r3, [r3, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	4619      	mov	r1, r3
 8002494:	f001 fecc 	bl	8004230 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	f107 010f 	add.w	r1, r7, #15
 80024a0:	2305      	movs	r3, #5
 80024a2:	2201      	movs	r2, #1
 80024a4:	f003 f8c7 	bl	8005636 <HAL_SPI_Transmit>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	2305      	movs	r3, #5
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	f003 fa2b 	bl	8005912 <HAL_SPI_Receive>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	7dbb      	ldrb	r3, [r7, #22]
 80024c2:	4413      	add	r3, r2
 80024c4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6858      	ldr	r0, [r3, #4]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	891b      	ldrh	r3, [r3, #8]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4619      	mov	r1, r3
 80024d2:	f001 fead 	bl	8004230 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80024d6:	7dbb      	ldrb	r3, [r7, #22]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <bmp2_spi_read+0x74>
    iError = -1;
 80024dc:	23ff      	movs	r3, #255	; 0xff
 80024de:	75fb      	strb	r3, [r7, #23]

  return iError;
 80024e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6858      	ldr	r0, [r3, #4]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	891b      	ldrh	r3, [r3, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	f001 fe8c 	bl	8004230 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	f107 010f 	add.w	r1, r7, #15
 8002520:	2305      	movs	r3, #5
 8002522:	2201      	movs	r2, #1
 8002524:	f003 f887 	bl	8005636 <HAL_SPI_Transmit>
 8002528:	4603      	mov	r3, r0
 800252a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	b29a      	uxth	r2, r3
 8002534:	2305      	movs	r3, #5
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	f003 f87d 	bl	8005636 <HAL_SPI_Transmit>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	7dbb      	ldrb	r3, [r7, #22]
 8002542:	4413      	add	r3, r2
 8002544:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6858      	ldr	r0, [r3, #4]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	891b      	ldrh	r3, [r3, #8]
 800254e:	2201      	movs	r2, #1
 8002550:	4619      	mov	r1, r3
 8002552:	f001 fe6d 	bl	8004230 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002556:	7dbb      	ldrb	r3, [r7, #22]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <bmp2_spi_write+0x74>
    iError = -1;
 800255c:	23ff      	movs	r3, #255	; 0xff
 800255e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a05      	ldr	r2, [pc, #20]	; (8002590 <bmp2_delay_us+0x24>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	4618      	mov	r0, r3
 8002582:	f001 fae1 	bl	8003b48 <HAL_Delay>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08d      	sub	sp, #52	; 0x34
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 800259c:	23ff      	movs	r3, #255	; 0xff
 800259e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <BMP2_ReadTemperature_degC+0x9c>)
 80025a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	899b      	ldrh	r3, [r3, #12]
 80025b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f896 	bl	80016ee <bmp2_get_status>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f8ce 	bl	8001770 <bmp2_get_sensor_data>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 80025da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 80025e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80025f0:	7f3b      	ldrb	r3, [r7, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <BMP2_ReadTemperature_degC+0x6a>
 80025f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	dcdb      	bgt.n	80025b6 <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685c      	ldr	r4, [r3, #4]
 8002602:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002606:	f7fe fb0f 	bl	8000c28 <__aeabi_d2f>
 800260a:	4603      	mov	r3, r0
 800260c:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002616:	729a      	strb	r2, [r3, #10]

  return temp;
 8002618:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800261c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002620:	eeb0 0a47 	vmov.f32	s0, s14
 8002624:	eef0 0a67 	vmov.f32	s1, s15
 8002628:	3734      	adds	r7, #52	; 0x34
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	7ff80000 	.word	0x7ff80000

08002634 <ARM_PID_Init>:

static arm_pid_instance_f32 PID;
static float error;
static float32_t pid_out;
static uint32_t pwm_duty;
void ARM_PID_Init(float32_t KP,float32_t KI,float32_t KD) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	ed87 0a03 	vstr	s0, [r7, #12]
 800263e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002642:	ed87 1a01 	vstr	s2, [r7, #4]
    PID.Kp = KP;
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <ARM_PID_Init+0x34>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6193      	str	r3, [r2, #24]
    PID.Ki = KI;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <ARM_PID_Init+0x34>)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	61d3      	str	r3, [r2, #28]
    PID.Kd = KD;
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <ARM_PID_Init+0x34>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6213      	str	r3, [r2, #32]
    arm_pid_init_f32(&PID, 1);
 8002658:	2101      	movs	r1, #1
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <ARM_PID_Init+0x34>)
 800265c:	f009 fdde 	bl	800c21c <arm_pid_init_f32>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	2000025c 	.word	0x2000025c

0800266c <Calculate_PID_out>:

uint32_t Calculate_PID_out(float setpoint, float measured) {
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	ed87 0a01 	vstr	s0, [r7, #4]
 8002676:	edc7 0a00 	vstr	s1, [r7]
    // Funkcja oblicza aktualny error, potem pid_out a na koniec konwersja na PWM
    error = setpoint - measured;  // Calculate the error
 800267a:	ed97 7a01 	vldr	s14, [r7, #4]
 800267e:	edd7 7a00 	vldr	s15, [r7]
 8002682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <Calculate_PID_out+0xb8>)
 8002688:	edc3 7a00 	vstr	s15, [r3]
    pid_out = arm_pid_f32(&PID, error);  // Calculate the PID output
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <Calculate_PID_out+0xb8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a25      	ldr	r2, [pc, #148]	; (8002728 <Calculate_PID_out+0xbc>)
 8002692:	617a      	str	r2, [r7, #20]
 8002694:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	ed93 7a00 	vldr	s14, [r3]
 800269c:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80026b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80026b4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80026c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a0e      	ldr	r2, [pc, #56]	; (800272c <Calculate_PID_out+0xc0>)
 80026f2:	6013      	str	r3, [r2, #0]
    pwm_duty = (uint32_t)pid_out;  // Convert to PWM
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <Calculate_PID_out+0xc0>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fe:	ee17 2a90 	vmov	r2, s15
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <Calculate_PID_out+0xc4>)
 8002704:	601a      	str	r2, [r3, #0]
    if (pwm_duty > 100){
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <Calculate_PID_out+0xc4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d902      	bls.n	8002714 <Calculate_PID_out+0xa8>
    	// Limit the duty cycle to 100
    	pwm_duty = 100;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <Calculate_PID_out+0xc4>)
 8002710:	2264      	movs	r2, #100	; 0x64
 8002712:	601a      	str	r2, [r3, #0]
    }
    if (pwm_duty < 0){
    	pwm_duty = 0;
    }// Limit the duty cycle to 0
    return pwm_duty;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <Calculate_PID_out+0xc4>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	20000280 	.word	0x20000280
 8002728:	2000025c 	.word	0x2000025c
 800272c:	20000284 	.word	0x20000284
 8002730:	20000288 	.word	0x20000288

08002734 <MX_GPIO_Init>:
     PG13   ------> ETH_TXD0
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	; 0x30
 8002738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 031c 	add.w	r3, r7, #28
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800274a:	4ba8      	ldr	r3, [pc, #672]	; (80029ec <MX_GPIO_Init+0x2b8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4aa7      	ldr	r2, [pc, #668]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4ba5      	ldr	r3, [pc, #660]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002762:	4ba2      	ldr	r3, [pc, #648]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4aa1      	ldr	r2, [pc, #644]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b9f      	ldr	r3, [pc, #636]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800277a:	4b9c      	ldr	r3, [pc, #624]	; (80029ec <MX_GPIO_Init+0x2b8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a9b      	ldr	r2, [pc, #620]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b99      	ldr	r3, [pc, #612]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	4b96      	ldr	r3, [pc, #600]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a95      	ldr	r2, [pc, #596]	; (80029ec <MX_GPIO_Init+0x2b8>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b93      	ldr	r3, [pc, #588]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	4b90      	ldr	r3, [pc, #576]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a8f      	ldr	r2, [pc, #572]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b8d      	ldr	r3, [pc, #564]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	4b8a      	ldr	r3, [pc, #552]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a89      	ldr	r2, [pc, #548]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b87      	ldr	r3, [pc, #540]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027da:	4b84      	ldr	r3, [pc, #528]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a83      	ldr	r2, [pc, #524]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b81      	ldr	r3, [pc, #516]	; (80029ec <MX_GPIO_Init+0x2b8>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CS1_GPIO_Port, BMP2_CS1_Pin, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2110      	movs	r1, #16
 80027f6:	487e      	ldr	r0, [pc, #504]	; (80029f0 <MX_GPIO_Init+0x2bc>)
 80027f8:	f001 fd1a 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80027fc:	2200      	movs	r2, #0
 80027fe:	f244 0181 	movw	r1, #16513	; 0x4081
 8002802:	487c      	ldr	r0, [pc, #496]	; (80029f4 <MX_GPIO_Init+0x2c0>)
 8002804:	f001 fd14 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800280e:	487a      	ldr	r0, [pc, #488]	; (80029f8 <MX_GPIO_Init+0x2c4>)
 8002810:	f001 fd0e 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8002814:	2200      	movs	r2, #0
 8002816:	21fc      	movs	r1, #252	; 0xfc
 8002818:	4878      	ldr	r0, [pc, #480]	; (80029fc <MX_GPIO_Init+0x2c8>)
 800281a:	f001 fd09 	bl	8004230 <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CS1_Pin;
 800281e:	2310      	movs	r3, #16
 8002820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	2301      	movs	r3, #1
 8002824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BMP2_CS1_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 031c 	add.w	r3, r7, #28
 8002832:	4619      	mov	r1, r3
 8002834:	486e      	ldr	r0, [pc, #440]	; (80029f0 <MX_GPIO_Init+0x2bc>)
 8002836:	f001 fb4f 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800283a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002840:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	4869      	ldr	r0, [pc, #420]	; (80029f8 <MX_GPIO_Init+0x2c4>)
 8002852:	f001 fb41 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002856:	2332      	movs	r3, #50	; 0x32
 8002858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002866:	230b      	movs	r3, #11
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	4861      	ldr	r0, [pc, #388]	; (80029f8 <MX_GPIO_Init+0x2c4>)
 8002872:	f001 fb31 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002876:	2386      	movs	r3, #134	; 0x86
 8002878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002886:	230b      	movs	r3, #11
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4619      	mov	r1, r3
 8002890:	485b      	ldr	r0, [pc, #364]	; (8002a00 <MX_GPIO_Init+0x2cc>)
 8002892:	f001 fb21 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8002896:	2308      	movs	r3, #8
 8002898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028a6:	2302      	movs	r3, #2
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	4853      	ldr	r0, [pc, #332]	; (8002a00 <MX_GPIO_Init+0x2cc>)
 80028b2:	f001 fb11 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80028b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80028ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
 80028be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	4849      	ldr	r0, [pc, #292]	; (80029f4 <MX_GPIO_Init+0x2c0>)
 80028d0:	f001 fb02 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80028d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028e6:	230b      	movs	r3, #11
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	4619      	mov	r1, r3
 80028f0:	4840      	ldr	r0, [pc, #256]	; (80029f4 <MX_GPIO_Init+0x2c0>)
 80028f2:	f001 faf1 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 80028f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002908:	2302      	movs	r3, #2
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	483a      	ldr	r0, [pc, #232]	; (80029fc <MX_GPIO_Init+0x2c8>)
 8002914:	f001 fae0 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002918:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800292a:	230a      	movs	r3, #10
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4832      	ldr	r0, [pc, #200]	; (8002a00 <MX_GPIO_Init+0x2cc>)
 8002936:	f001 facf 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800293a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	482c      	ldr	r0, [pc, #176]	; (8002a00 <MX_GPIO_Init+0x2cc>)
 8002950:	f001 fac2 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295a:	2301      	movs	r3, #1
 800295c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	4822      	ldr	r0, [pc, #136]	; (80029f8 <MX_GPIO_Init+0x2c4>)
 800296e:	f001 fab3 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8002972:	23fc      	movs	r3, #252	; 0xfc
 8002974:	61fb      	str	r3, [r7, #28]
                          |LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002976:	2301      	movs	r3, #1
 8002978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	481c      	ldr	r0, [pc, #112]	; (80029fc <MX_GPIO_Init+0x2c8>)
 800298a:	f001 faa5 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800298e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029a0:	230b      	movs	r3, #11
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4619      	mov	r1, r3
 80029aa:	4816      	ldr	r0, [pc, #88]	; (8002a04 <MX_GPIO_Init+0x2d0>)
 80029ac:	f001 fa94 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80029b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b6:	2312      	movs	r3, #18
 80029b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029c2:	2304      	movs	r3, #4
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	4619      	mov	r1, r3
 80029cc:	4809      	ldr	r0, [pc, #36]	; (80029f4 <MX_GPIO_Init+0x2c0>)
 80029ce:	f001 fa83 	bl	8003ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	2028      	movs	r0, #40	; 0x28
 80029d8:	f001 f9b5 	bl	8003d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029dc:	2028      	movs	r0, #40	; 0x28
 80029de:	f001 f9ce 	bl	8003d7e <HAL_NVIC_EnableIRQ>

}
 80029e2:	bf00      	nop
 80029e4:	3730      	adds	r7, #48	; 0x30
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40021800 	.word	0x40021800

08002a08 <calculate_timer_freq>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint32_t calculate_timer_freq(TIM_HandleTypeDef *htim){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t timer_freq = HAL_RCC_GetPCLK1Freq() * 2;
 8002a10:	f002 f94e 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8002a14:	4603      	mov	r3, r0
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
  uint32_t prescaler = htim->Init.Prescaler + 1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t Arr = htim->Init.Period + 1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
  uint32_t freq = timer_freq / (prescaler * Arr);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	60bb      	str	r3, [r7, #8]
  return freq;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <set_pwm_power>:

void set_pwm_power (TIM_HandleTypeDef *htim, uint32_t pwm_power){
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
	if (pwm_power == 0){
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <set_pwm_power+0x1a>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 0);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
	uint32_t Counter_period = htim->Init.Period;
	uint32_t pwm_val = (Counter_period*pwm_power)/100.0f;
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (uint32_t)pwm_val);
	}
}
 8002a5c:	e017      	b.n	8002a8e <set_pwm_power+0x4a>
	uint32_t Counter_period = htim->Init.Period;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	60fb      	str	r3, [r7, #12]
	uint32_t pwm_val = (Counter_period*pwm_power)/100.0f;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a74:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002a9c <set_pwm_power+0x58>
 8002a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a80:	ee17 3a90 	vmov	r3, s15
 8002a84:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (uint32_t)pwm_val);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	42c80000 	.word	0x42c80000

08002aa0 <HAL_TIM_PeriodElapsedCallback>:
// Inside the HAL_TIM_PeriodElapsedCallback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002aa4:	b08b      	sub	sp, #44	; 0x2c
 8002aa6:	af06      	add	r7, sp, #24
 8002aa8:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a63      	ldr	r2, [pc, #396]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	f040 80be 	bne.w	8002c30 <HAL_TIM_PeriodElapsedCallback+0x190>
    // Read the temperature with a frequency of 4 Hz. 
		temp_read = BMP2_ReadTemperature_degC(&bmp2dev_1);
 8002ab4:	4862      	ldr	r0, [pc, #392]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002ab6:	f7ff fd6d 	bl	8002594 <BMP2_ReadTemperature_degC>
 8002aba:	ec53 2b10 	vmov	r2, r3, d0
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fe f8b1 	bl	8000c28 <__aeabi_d2f>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a5e      	ldr	r2, [pc, #376]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002aca:	6013      	str	r3, [r2, #0]
		temp_read_int = (int)temp_read;
 8002acc:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ad6:	ee17 2a90 	vmov	r2, s15
 8002ada:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002adc:	601a      	str	r2, [r3, #0]
		temp_fractional = (int)((temp_read - temp_read_int) * 1000);
 8002ade:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002c4c <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8002af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b00:	ee17 2a90 	vmov	r2, s15
 8002b04:	4b52      	ldr	r3, [pc, #328]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002b06:	601a      	str	r2, [r3, #0]
		// Write data to LCD
		LCD_goto_line(0);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fe fc63 	bl	80013d4 <LCD_goto_line>
		LCD_printf("Actual=%d.%03d[C]", temp_read_int, temp_fractional);
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	484e      	ldr	r0, [pc, #312]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002b1a:	f7fe fc69 	bl	80013f0 <LCD_printf>
		// Jakiś smiszny debugging dla odczytywania wartości zadaniej
		// opisać komentarze #TODO @Bartek
		if (dataReceivedFlag == 1){
 8002b1e:	4b4e      	ldr	r3, [pc, #312]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d13c      	bne.n	8002ba2 <HAL_TIM_PeriodElapsedCallback+0x102>
			dataReceivedFlag = 0;  // Resetuj flagę
 8002b28:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]

			// Konwersja stringa na float
			receivedValue = atof(rxBuffer);
 8002b2e:	484b      	ldr	r0, [pc, #300]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002b30:	f009 fb92 	bl	800c258 <atof>
 8002b34:	ec53 2b10 	vmov	r2, r3, d0
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fe f874 	bl	8000c28 <__aeabi_d2f>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4a47      	ldr	r2, [pc, #284]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b44:	6013      	str	r3, [r2, #0]
			temp_receivedValue_int = (int)receivedValue;
 8002b46:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b50:	ee17 2a90 	vmov	r2, s15
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b56:	601a      	str	r2, [r3, #0]
			temp_receivedValue_fractional = (int)((receivedValue - temp_receivedValue_int) * 1000);
 8002b58:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002c4c <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8002b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7a:	ee17 2a90 	vmov	r2, s15
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002b80:	601a      	str	r2, [r3, #0]

			// Wyświetl odebraną wiadomość
			LCD_goto_line(1);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7fe fc26 	bl	80013d4 <LCD_goto_line>
			LCD_printf("Set:%d.%03d[C]       ",  temp_receivedValue_int, temp_receivedValue_fractional);
 8002b88:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4836      	ldr	r0, [pc, #216]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002b94:	f7fe fc2c 	bl	80013f0 <LCD_printf>

			// Resetuj rxBuffer
			memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	482f      	ldr	r0, [pc, #188]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002b9e:	f00a ff3b 	bl	800da18 <memset>
		}

    // Calculate the PID output
    pwm_duty = Calculate_PID_out(receivedValue, temp_read);
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002baa:	ed93 7a00 	vldr	s14, [r3]
 8002bae:	eef0 0a47 	vmov.f32	s1, s14
 8002bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb6:	f7ff fd59 	bl	800266c <Calculate_PID_out>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002bbe:	6013      	str	r3, [r2, #0]
    set_pwm_power(&htim2, pwm_duty);
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	481d      	ldr	r0, [pc, #116]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002bc8:	f7ff ff3c 	bl	8002a44 <set_pwm_power>
	int msg_len = sprintf(json_msg, "{\"temperature\": %.2f, \"error\": %.2f, \"pwm_power\": %u, \"destined\": %.2f}\r\n",
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcd9 	bl	8000588 <__aeabi_f2d>
 8002bd6:	4680      	mov	r8, r0
 8002bd8:	4689      	mov	r9, r1
			temp_read,receivedValue-temp_read,pwm_duty,receivedValue);
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002bdc:	ed93 7a00 	vldr	s14, [r3]
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee77 7a67 	vsub.f32	s15, s14, s15
	int msg_len = sprintf(json_msg, "{\"temperature\": %.2f, \"error\": %.2f, \"pwm_power\": %u, \"destined\": %.2f}\r\n",
 8002bea:	ee17 0a90 	vmov	r0, s15
 8002bee:	f7fd fccb 	bl	8000588 <__aeabi_f2d>
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	460d      	mov	r5, r1
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002bf8:	681e      	ldr	r6, [r3, #0]
 8002bfa:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fcc2 	bl	8000588 <__aeabi_f2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c0c:	9602      	str	r6, [sp, #8]
 8002c0e:	e9cd 4500 	strd	r4, r5, [sp]
 8002c12:	4642      	mov	r2, r8
 8002c14:	464b      	mov	r3, r9
 8002c16:	4917      	ldr	r1, [pc, #92]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c18:	4817      	ldr	r0, [pc, #92]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c1a:	f00a fe61 	bl	800d8e0 <siprintf>
 8002c1e:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart3, (uint8_t*)json_msg, msg_len, 1000);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c28:	4913      	ldr	r1, [pc, #76]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c2a:	4814      	ldr	r0, [pc, #80]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002c2c:	f004 fdc2 	bl	80077b4 <HAL_UART_Transmit>
	}
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20002978 	.word	0x20002978
 8002c40:	20000018 	.word	0x20000018
 8002c44:	2000029c 	.word	0x2000029c
 8002c48:	2000028c 	.word	0x2000028c
 8002c4c:	447a0000 	.word	0x447a0000
 8002c50:	20000290 	.word	0x20000290
 8002c54:	080105d0 	.word	0x080105d0
 8002c58:	20000426 	.word	0x20000426
 8002c5c:	20000324 	.word	0x20000324
 8002c60:	20000054 	.word	0x20000054
 8002c64:	20000294 	.word	0x20000294
 8002c68:	20000298 	.word	0x20000298
 8002c6c:	080105e4 	.word	0x080105e4
 8002c70:	20000320 	.word	0x20000320
 8002c74:	080105fc 	.word	0x080105fc
 8002c78:	200002a0 	.word	0x200002a0
 8002c7c:	20002a10 	.word	0x20002a10

08002c80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)  // Sprawdź, czy przerwanie pochodzi z USART3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <HAL_UART_RxCpltCallback+0x78>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d12d      	bne.n	8002cee <HAL_UART_RxCpltCallback+0x6e>
    {
        if (rxBuffer[rxIndex] == '\n')  // Sprawdź, czy odebrano znak końca linii
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_UART_RxCpltCallback+0x7c>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_UART_RxCpltCallback+0x80>)
 8002c9c:	5c9b      	ldrb	r3, [r3, r2]
 8002c9e:	2b0a      	cmp	r3, #10
 8002ca0:	d10d      	bne.n	8002cbe <HAL_UART_RxCpltCallback+0x3e>
        {
            dataReceivedFlag = 1;  // Ustaw flagę o odebraniu pełnej wiadomości
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_UART_RxCpltCallback+0x84>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
            rxBuffer[rxIndex] = '\0';  // Zamień znak końca linii na znak końca łańcucha
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <HAL_UART_RxCpltCallback+0x7c>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_UART_RxCpltCallback+0x80>)
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]
            rxIndex = 0;  // Resetuj indeks bufora
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_UART_RxCpltCallback+0x7c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	801a      	strh	r2, [r3, #0]
 8002cbc:	e00c      	b.n	8002cd8 <HAL_UART_RxCpltCallback+0x58>
        }
        else
        {
            if (++rxIndex >= RX_BUFFER_SIZE)  // Inkrementuj indeks i sprawdź przepełnienie
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_UART_RxCpltCallback+0x7c>)
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <HAL_UART_RxCpltCallback+0x7c>)
 8002cca:	4619      	mov	r1, r3
 8002ccc:	8011      	strh	r1, [r2, #0]
 8002cce:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd0:	d902      	bls.n	8002cd8 <HAL_UART_RxCpltCallback+0x58>
            {
                rxIndex = 0;  // Resetuj indeks bufora
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_UART_RxCpltCallback+0x7c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	801a      	strh	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);  // Ponownie włącz przerwanie
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_UART_RxCpltCallback+0x7c>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_UART_RxCpltCallback+0x80>)
 8002ce2:	4413      	add	r3, r2
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4807      	ldr	r0, [pc, #28]	; (8002d08 <HAL_UART_RxCpltCallback+0x88>)
 8002cea:	f004 fde6 	bl	80078ba <HAL_UART_Receive_IT>
    }
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	20000424 	.word	0x20000424
 8002d00:	20000324 	.word	0x20000324
 8002d04:	20000426 	.word	0x20000426
 8002d08:	20002a10 	.word	0x20002a10

08002d0c <send_uart>:
	while (*buf++ != '\0') i++;
	return i;
}

// to send data to the uart
void send_uart(char *string){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fd facb 	bl	80002b0 <strlen>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *) string, len, 1000);
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4803      	ldr	r0, [pc, #12]	; (8002d38 <send_uart+0x2c>)
 8002d2a:	f004 fd43 	bl	80077b4 <HAL_UART_Transmit>
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20002a10 	.word	0x20002a10

08002d3c <bufclear>:

// clear sd_buffer
void bufclear(void){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++){
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	e007      	b.n	8002d58 <bufclear+0x1c>
		sd_buffer[i] = '\0';
 8002d48:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <bufclear+0x34>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<1024; i++){
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3301      	adds	r3, #1
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	dbf3      	blt.n	8002d48 <bufclear+0xc>
	}
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20002498 	.word	0x20002498

08002d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	ed2d 8b02 	vpush	{d8}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d7c:	f000 fe87 	bl	8003a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d80:	f000 f91e 	bl	8002fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d84:	f7ff fcd6 	bl	8002734 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002d88:	f000 fdc0 	bl	800390c <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002d8c:	f000 f9ca 	bl	8003124 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002d90:	f000 fc1e 	bl	80035d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d94:	f000 fc94 	bl	80036c0 <MX_TIM3_Init>
  MX_SPI3_Init();
 8002d98:	f000 f986 	bl	80030a8 <MX_SPI3_Init>
  MX_FATFS_Init();
 8002d9c:	f005 ff98 	bl	8008cd0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // Inicjalizacja komponentów zewnętrznych
  BMP2_Init(&bmp2dev_1);
 8002da0:	486b      	ldr	r0, [pc, #428]	; (8002f50 <main+0x1dc>)
 8002da2:	f7ff fb2b 	bl	80023fc <BMP2_Init>
  LCD_init();
 8002da6:	f7fe f961 	bl	800106c <LCD_init>
  memset(lastRxBuffer, 0, RX_BUFFER_SIZE);  // Inicjalizacja lastRxBuffer
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	2100      	movs	r1, #0
 8002dae:	4869      	ldr	r0, [pc, #420]	; (8002f54 <main+0x1e0>)
 8002db0:	f00a fe32 	bl	800da18 <memset>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);  // Inicjalizacja przerwania odbioru UART
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <main+0x1e4>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <main+0x1e8>)
 8002dbe:	4413      	add	r3, r2
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4866      	ldr	r0, [pc, #408]	; (8002f60 <main+0x1ec>)
 8002dc6:	f004 fd78 	bl	80078ba <HAL_UART_Receive_IT>

  // Mount SD Card
  fresult = f_mount(&fs, "0:", 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4965      	ldr	r1, [pc, #404]	; (8002f64 <main+0x1f0>)
 8002dce:	4866      	ldr	r0, [pc, #408]	; (8002f68 <main+0x1f4>)
 8002dd0:	f008 f9c8 	bl	800b164 <f_mount>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <main+0x1f8>)
 8002dda:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK){
 8002ddc:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <main+0x1f8>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <main+0x78>
	  send_uart("error in mounting SD CARD...\n");
 8002de4:	4862      	ldr	r0, [pc, #392]	; (8002f70 <main+0x1fc>)
 8002de6:	f7ff ff91 	bl	8002d0c <send_uart>
 8002dea:	e002      	b.n	8002df2 <main+0x7e>
  }
  else {
	  send_uart("SD CARD mounted successfully...\n");
 8002dec:	4861      	ldr	r0, [pc, #388]	; (8002f74 <main+0x200>)
 8002dee:	f7ff ff8d 	bl	8002d0c <send_uart>
  }

  // Card capacity details
  f_getfree("0:", &fre_clust, &pfs);
 8002df2:	4a61      	ldr	r2, [pc, #388]	; (8002f78 <main+0x204>)
 8002df4:	4961      	ldr	r1, [pc, #388]	; (8002f7c <main+0x208>)
 8002df6:	485b      	ldr	r0, [pc, #364]	; (8002f64 <main+0x1f0>)
 8002df8:	f008 ff61 	bl	800bcbe <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002dfc:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <main+0x204>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	3b02      	subs	r3, #2
 8002e04:	4a5c      	ldr	r2, [pc, #368]	; (8002f78 <main+0x204>)
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	8952      	ldrh	r2, [r2, #10]
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fb98 	bl	8000544 <__aeabi_ui2d>
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <main+0x20c>)
 8002e1a:	f7fd fc0d 	bl	8000638 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f7fd fedf 	bl	8000be8 <__aeabi_d2uiz>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4a55      	ldr	r2, [pc, #340]	; (8002f84 <main+0x210>)
 8002e2e:	6013      	str	r3, [r2, #0]
  sprintf(sd_buffer, "SD CARD Total Size: \t%lu\n", total);
 8002e30:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <main+0x210>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4954      	ldr	r1, [pc, #336]	; (8002f88 <main+0x214>)
 8002e38:	4854      	ldr	r0, [pc, #336]	; (8002f8c <main+0x218>)
 8002e3a:	f00a fd51 	bl	800d8e0 <siprintf>
  send_uart(sd_buffer);
 8002e3e:	4853      	ldr	r0, [pc, #332]	; (8002f8c <main+0x218>)
 8002e40:	f7ff ff64 	bl	8002d0c <send_uart>
  bufclear();
 8002e44:	f7ff ff7a 	bl	8002d3c <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002e48:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <main+0x204>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	895b      	ldrh	r3, [r3, #10]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <main+0x208>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb73 	bl	8000544 <__aeabi_ui2d>
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <main+0x20c>)
 8002e64:	f7fd fbe8 	bl	8000638 <__aeabi_dmul>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f7fd feba 	bl	8000be8 <__aeabi_d2uiz>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4a46      	ldr	r2, [pc, #280]	; (8002f90 <main+0x21c>)
 8002e78:	6013      	str	r3, [r2, #0]
  sprintf(sd_buffer, "SD CARD Free Space: \t%lu\n", free_space);
 8002e7a:	4b45      	ldr	r3, [pc, #276]	; (8002f90 <main+0x21c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4944      	ldr	r1, [pc, #272]	; (8002f94 <main+0x220>)
 8002e82:	4842      	ldr	r0, [pc, #264]	; (8002f8c <main+0x218>)
 8002e84:	f00a fd2c 	bl	800d8e0 <siprintf>
  send_uart(sd_buffer);
 8002e88:	4840      	ldr	r0, [pc, #256]	; (8002f8c <main+0x218>)
 8002e8a:	f7ff ff3f 	bl	8002d0c <send_uart>
  bufclear();
 8002e8e:	f7ff ff55 	bl	8002d3c <bufclear>

  // File writing
//  res =  f_unlink("/");

//   Open file to write / create a file if it doesn't exist
  res1 = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002e92:	2213      	movs	r2, #19
 8002e94:	4940      	ldr	r1, [pc, #256]	; (8002f98 <main+0x224>)
 8002e96:	4841      	ldr	r0, [pc, #260]	; (8002f9c <main+0x228>)
 8002e98:	f008 f9aa 	bl	800b1f0 <f_open>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <main+0x22c>)
 8002ea2:	701a      	strb	r2, [r3, #0]

  // Writing text
  res2 = f_puts("This data is from the first file\n\n", &fil);
 8002ea4:	493d      	ldr	r1, [pc, #244]	; (8002f9c <main+0x228>)
 8002ea6:	483f      	ldr	r0, [pc, #252]	; (8002fa4 <main+0x230>)
 8002ea8:	f009 f872 	bl	800bf90 <f_puts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <main+0x234>)
 8002eb2:	701a      	strb	r2, [r3, #0]
  send_uart("file1.txt cerated and data written\n");
 8002eb4:	483d      	ldr	r0, [pc, #244]	; (8002fac <main+0x238>)
 8002eb6:	f7ff ff29 	bl	8002d0c <send_uart>

  res3 = f_close(&fil);
 8002eba:	4838      	ldr	r0, [pc, #224]	; (8002f9c <main+0x228>)
 8002ebc:	f008 fed5 	bl	800bc6a <f_close>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <main+0x23c>)
 8002ec6:	701a      	strb	r2, [r3, #0]
  res4 = f_open(&fil, "file1.txt", FA_READ);
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4933      	ldr	r1, [pc, #204]	; (8002f98 <main+0x224>)
 8002ecc:	4833      	ldr	r0, [pc, #204]	; (8002f9c <main+0x228>)
 8002ece:	f008 f98f 	bl	800b1f0 <f_open>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <main+0x240>)
 8002ed8:	701a      	strb	r2, [r3, #0]
  f_gets(sd_buffer, sizeof(sd_buffer), &fil);
 8002eda:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <main+0x228>)
 8002edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ee0:	482a      	ldr	r0, [pc, #168]	; (8002f8c <main+0x218>)
 8002ee2:	f008 ffa1 	bl	800be28 <f_gets>
  send_uart(sd_buffer);
 8002ee6:	4829      	ldr	r0, [pc, #164]	; (8002f8c <main+0x218>)
 8002ee8:	f7ff ff10 	bl	8002d0c <send_uart>
  f_close(&fil);
 8002eec:	482b      	ldr	r0, [pc, #172]	; (8002f9c <main+0x228>)
 8002eee:	f008 febc 	bl	800bc6a <f_close>
  bufclear();
 8002ef2:	f7ff ff23 	bl	8002d3c <bufclear>


  //Zmiana priorytetu przerwań, #TODO debugging.
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2105      	movs	r1, #5
 8002efa:	2027      	movs	r0, #39	; 0x27
 8002efc:	f000 ff23 	bl	8003d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0); // Przykładowy niższy priorytet
 8002f00:	2200      	movs	r2, #0
 8002f02:	2106      	movs	r1, #6
 8002f04:	201c      	movs	r0, #28
 8002f06:	f000 ff1e 	bl	8003d46 <HAL_NVIC_SetPriority>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ARM_PID_Init(5.0f,0.1f/calculate_timer_freq(&htim2),1.0f*calculate_timer_freq(&htim2));
 8002f0a:	482b      	ldr	r0, [pc, #172]	; (8002fb8 <main+0x244>)
 8002f0c:	f7ff fd7c 	bl	8002a08 <calculate_timer_freq>
 8002f10:	ee07 0a90 	vmov	s15, r0
 8002f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f18:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002fbc <main+0x248>
 8002f1c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002f20:	4825      	ldr	r0, [pc, #148]	; (8002fb8 <main+0x244>)
 8002f22:	f7ff fd71 	bl	8002a08 <calculate_timer_freq>
 8002f26:	ee07 0a90 	vmov	s15, r0
 8002f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2e:	eeb0 1a67 	vmov.f32	s2, s15
 8002f32:	eef0 0a48 	vmov.f32	s1, s16
 8002f36:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002f3a:	f7ff fb7b 	bl	8002634 <ARM_PID_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002f3e:	481e      	ldr	r0, [pc, #120]	; (8002fb8 <main+0x244>)
 8002f40:	f003 fa86 	bl	8006450 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002f44:	2100      	movs	r1, #0
 8002f46:	481c      	ldr	r0, [pc, #112]	; (8002fb8 <main+0x244>)
 8002f48:	f003 fb5c 	bl	8006604 <HAL_TIM_PWM_Start>
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <main+0x1d8>
 8002f4e:	bf00      	nop
 8002f50:	20000018 	.word	0x20000018
 8002f54:	200003a4 	.word	0x200003a4
 8002f58:	20000424 	.word	0x20000424
 8002f5c:	20000324 	.word	0x20000324
 8002f60:	20002a10 	.word	0x20002a10
 8002f64:	08010648 	.word	0x08010648
 8002f68:	20000428 	.word	0x20000428
 8002f6c:	20002490 	.word	0x20002490
 8002f70:	0801064c 	.word	0x0801064c
 8002f74:	0801066c 	.word	0x0801066c
 8002f78:	20002898 	.word	0x20002898
 8002f7c:	2000289c 	.word	0x2000289c
 8002f80:	3fe00000 	.word	0x3fe00000
 8002f84:	200028a0 	.word	0x200028a0
 8002f88:	08010690 	.word	0x08010690
 8002f8c:	20002498 	.word	0x20002498
 8002f90:	200028a4 	.word	0x200028a4
 8002f94:	080106ac 	.word	0x080106ac
 8002f98:	080106c8 	.word	0x080106c8
 8002f9c:	20001460 	.word	0x20001460
 8002fa0:	20002491 	.word	0x20002491
 8002fa4:	080106d4 	.word	0x080106d4
 8002fa8:	20002492 	.word	0x20002492
 8002fac:	080106f8 	.word	0x080106f8
 8002fb0:	20002493 	.word	0x20002493
 8002fb4:	20002494 	.word	0x20002494
 8002fb8:	20002978 	.word	0x20002978
 8002fbc:	3dcccccd 	.word	0x3dcccccd

08002fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b094      	sub	sp, #80	; 0x50
 8002fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fc6:	f107 0320 	add.w	r3, r7, #32
 8002fca:	2230      	movs	r2, #48	; 0x30
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00a fd22 	bl	800da18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002fe4:	f001 f962 	bl	80042ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <SystemClock_Config+0xd4>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a29      	ldr	r2, [pc, #164]	; (8003094 <SystemClock_Config+0xd4>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <SystemClock_Config+0xd4>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <SystemClock_Config+0xd8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <SystemClock_Config+0xd8>)
 8003006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <SystemClock_Config+0xd8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003018:	2301      	movs	r3, #1
 800301a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800301c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003022:	2302      	movs	r3, #2
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800302c:	2304      	movs	r3, #4
 800302e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003030:	23d8      	movs	r3, #216	; 0xd8
 8003032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003034:	2302      	movs	r3, #2
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003038:	2303      	movs	r3, #3
 800303a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800303c:	f107 0320 	add.w	r3, r7, #32
 8003040:	4618      	mov	r0, r3
 8003042:	f001 f993 	bl	800436c <HAL_RCC_OscConfig>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800304c:	f000 f826 	bl	800309c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003050:	f001 f93c 	bl	80042cc <HAL_PWREx_EnableOverDrive>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800305a:	f000 f81f 	bl	800309c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800305e:	230f      	movs	r3, #15
 8003060:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003062:	2302      	movs	r3, #2
 8003064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800306a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800306e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003070:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003074:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	2107      	movs	r1, #7
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fc19 	bl	80048b4 <HAL_RCC_ClockConfig>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003088:	f000 f808 	bl	800309c <Error_Handler>
  }
}
 800308c:	bf00      	nop
 800308e:	3750      	adds	r7, #80	; 0x50
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	40007000 	.word	0x40007000

0800309c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i
}
 80030a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <Error_Handler+0x8>
	...

080030a8 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <MX_SPI3_Init+0x74>)
 80030ae:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <MX_SPI3_Init+0x78>)
 80030b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <MX_SPI3_Init+0x74>)
 80030b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <MX_SPI3_Init+0x74>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <MX_SPI3_Init+0x74>)
 80030c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <MX_SPI3_Init+0x74>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <MX_SPI3_Init+0x74>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <MX_SPI3_Init+0x74>)
 80030d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <MX_SPI3_Init+0x74>)
 80030de:	2208      	movs	r2, #8
 80030e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <MX_SPI3_Init+0x74>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <MX_SPI3_Init+0x74>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <MX_SPI3_Init+0x74>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <MX_SPI3_Init+0x74>)
 80030f6:	2207      	movs	r2, #7
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <MX_SPI3_Init+0x74>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <MX_SPI3_Init+0x74>)
 8003102:	2208      	movs	r2, #8
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_SPI3_Init+0x74>)
 8003108:	f002 f9ea 	bl	80054e0 <HAL_SPI_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003112:	f7ff ffc3 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200028a8 	.word	0x200028a8
 8003120:	40003c00 	.word	0x40003c00

08003124 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <MX_SPI4_Init+0x74>)
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <MX_SPI4_Init+0x78>)
 800312c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <MX_SPI4_Init+0x74>)
 8003130:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003134:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003136:	4b18      	ldr	r3, [pc, #96]	; (8003198 <MX_SPI4_Init+0x74>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800313c:	4b16      	ldr	r3, [pc, #88]	; (8003198 <MX_SPI4_Init+0x74>)
 800313e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003142:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <MX_SPI4_Init+0x74>)
 8003146:	2202      	movs	r2, #2
 8003148:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <MX_SPI4_Init+0x74>)
 800314c:	2201      	movs	r2, #1
 800314e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <MX_SPI4_Init+0x74>)
 8003152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003156:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <MX_SPI4_Init+0x74>)
 800315a:	2210      	movs	r2, #16
 800315c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <MX_SPI4_Init+0x74>)
 8003160:	2200      	movs	r2, #0
 8003162:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <MX_SPI4_Init+0x74>)
 8003166:	2200      	movs	r2, #0
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <MX_SPI4_Init+0x74>)
 800316c:	2200      	movs	r2, #0
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <MX_SPI4_Init+0x74>)
 8003172:	2207      	movs	r2, #7
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <MX_SPI4_Init+0x74>)
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <MX_SPI4_Init+0x74>)
 800317e:	2200      	movs	r2, #0
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003182:	4805      	ldr	r0, [pc, #20]	; (8003198 <MX_SPI4_Init+0x74>)
 8003184:	f002 f9ac 	bl	80054e0 <HAL_SPI_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800318e:	f7ff ff85 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000290c 	.word	0x2000290c
 800319c:	40013400 	.word	0x40013400

080031a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08c      	sub	sp, #48	; 0x30
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3c      	ldr	r2, [pc, #240]	; (80032b0 <HAL_SPI_MspInit+0x110>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d145      	bne.n	800324e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031c2:	4b3c      	ldr	r3, [pc, #240]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a3b      	ldr	r2, [pc, #236]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 80031c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a35      	ldr	r2, [pc, #212]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a2f      	ldr	r2, [pc, #188]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800320a:	2304      	movs	r3, #4
 800320c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	2303      	movs	r3, #3
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800321a:	2307      	movs	r3, #7
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	4619      	mov	r1, r3
 8003224:	4824      	ldr	r0, [pc, #144]	; (80032b8 <HAL_SPI_MspInit+0x118>)
 8003226:	f000 fe57 	bl	8003ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800322a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800323c:	2306      	movs	r3, #6
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	4619      	mov	r1, r3
 8003246:	481d      	ldr	r0, [pc, #116]	; (80032bc <HAL_SPI_MspInit+0x11c>)
 8003248:	f000 fe46 	bl	8003ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800324c:	e02c      	b.n	80032a8 <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI4)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <HAL_SPI_MspInit+0x120>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d127      	bne.n	80032a8 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003258:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 800325e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003262:	6453      	str	r3, [r2, #68]	; 0x44
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 8003276:	f043 0310 	orr.w	r3, r3, #16
 800327a:	6313      	str	r3, [r2, #48]	; 0x30
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_SPI_MspInit+0x114>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP2_SCL_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8003288:	2364      	movs	r3, #100	; 0x64
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003298:	2305      	movs	r3, #5
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4808      	ldr	r0, [pc, #32]	; (80032c4 <HAL_SPI_MspInit+0x124>)
 80032a4:	f000 fe18 	bl	8003ed8 <HAL_GPIO_Init>
}
 80032a8:	bf00      	nop
 80032aa:	3730      	adds	r7, #48	; 0x30
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40003c00 	.word	0x40003c00
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40013400 	.word	0x40013400
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_MspInit+0x44>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_MspInit+0x44>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_MspInit+0x44>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_MspInit+0x44>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_MspInit+0x44>)
 80032ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_MspInit+0x44>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler()
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <SDTimer_Handler+0x40>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <SDTimer_Handler+0x1c>
		Timer1--;
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <SDTimer_Handler+0x40>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <SDTimer_Handler+0x40>)
 800332a:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0){
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <SDTimer_Handler+0x44>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <SDTimer_Handler+0x34>
		Timer2--;
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <SDTimer_Handler+0x44>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <SDTimer_Handler+0x44>)
 8003342:	701a      	strb	r2, [r3, #0]
	}
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20002971 	.word	0x20002971
 8003354:	20002972 	.word	0x20002972

08003358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800335c:	e7fe      	b.n	800335c <NMI_Handler+0x4>

0800335e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003362:	e7fe      	b.n	8003362 <HardFault_Handler+0x4>

08003364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003368:	e7fe      	b.n	8003368 <MemManage_Handler+0x4>

0800336a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336e:	e7fe      	b.n	800336e <BusFault_Handler+0x4>

08003370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003374:	e7fe      	b.n	8003374 <UsageFault_Handler+0x4>

08003376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <SysTick_Handler+0x30>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <SysTick_Handler+0x30>)
 80033b0:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10){
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <SysTick_Handler+0x30>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	d904      	bls.n	80033c6 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <SysTick_Handler+0x30>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80033c2:	f7ff ffa5 	bl	8003310 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c6:	f000 fb9f 	bl	8003b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20002970 	.word	0x20002970

080033d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <TIM2_IRQHandler+0x10>)
 80033da:	f003 fa0d 	bl	80067f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20002978 	.word	0x20002978

080033e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM3_IRQHandler+0x10>)
 80033ee:	f003 fa03 	bl	80067f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200029c4 	.word	0x200029c4

080033fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <USART3_IRQHandler+0x10>)
 8003402:	f004 fa9f 	bl	8007944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20002a10 	.word	0x20002a10

08003410 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003414:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003418:	f000 ff24 	bl	8004264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}

08003420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return 1;
 8003424:	2301      	movs	r3, #1
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <_kill>:

int _kill(int pid, int sig)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800343a:	f00a fb51 	bl	800dae0 <__errno>
 800343e:	4603      	mov	r3, r0
 8003440:	2216      	movs	r2, #22
 8003442:	601a      	str	r2, [r3, #0]
  return -1;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_exit>:

void _exit (int status)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003458:	f04f 31ff 	mov.w	r1, #4294967295
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ffe7 	bl	8003430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003462:	e7fe      	b.n	8003462 <_exit+0x12>

08003464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e00a      	b.n	800348c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003476:	f3af 8000 	nop.w
 800347a:	4601      	mov	r1, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	60ba      	str	r2, [r7, #8]
 8003482:	b2ca      	uxtb	r2, r1
 8003484:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbf0      	blt.n	8003476 <_read+0x12>
  }

  return len;
 8003494:	687b      	ldr	r3, [r7, #4]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e009      	b.n	80034c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	60ba      	str	r2, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dbf1      	blt.n	80034b0 <_write+0x12>
  }
  return len;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_close>:

int _close(int file)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_isatty>:

int _isatty(int file)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <_sbrk+0x5c>)
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <_sbrk+0x60>)
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <_sbrk+0x64>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <_sbrk+0x64>)
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <_sbrk+0x68>)
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d207      	bcs.n	8003580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003570:	f00a fab6 	bl	800dae0 <__errno>
 8003574:	4603      	mov	r3, r0
 8003576:	220c      	movs	r2, #12
 8003578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e009      	b.n	8003594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <_sbrk+0x64>)
 8003590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20050000 	.word	0x20050000
 80035a0:	00000400 	.word	0x00000400
 80035a4:	20002974 	.word	0x20002974
 80035a8:	20002e28 	.word	0x20002e28

080035ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <SystemInit+0x20>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	4a05      	ldr	r2, [pc, #20]	; (80035cc <SystemInit+0x20>)
 80035b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08e      	sub	sp, #56	; 0x38
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e4:	f107 031c 	add.w	r3, r7, #28
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035f0:	463b      	mov	r3, r7
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	615a      	str	r2, [r3, #20]
 8003600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003602:	4b2e      	ldr	r3, [pc, #184]	; (80036bc <MX_TIM2_Init+0xec>)
 8003604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800360a:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <MX_TIM2_Init+0xec>)
 800360c:	226b      	movs	r2, #107	; 0x6b
 800360e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <MX_TIM2_Init+0xec>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <MX_TIM2_Init+0xec>)
 8003618:	f241 3287 	movw	r2, #4999	; 0x1387
 800361c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361e:	4b27      	ldr	r3, [pc, #156]	; (80036bc <MX_TIM2_Init+0xec>)
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <MX_TIM2_Init+0xec>)
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800362a:	4824      	ldr	r0, [pc, #144]	; (80036bc <MX_TIM2_Init+0xec>)
 800362c:	f002 feb8 	bl	80063a0 <HAL_TIM_Base_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003636:	f7ff fd31 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800363a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003640:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003644:	4619      	mov	r1, r3
 8003646:	481d      	ldr	r0, [pc, #116]	; (80036bc <MX_TIM2_Init+0xec>)
 8003648:	f003 fb0a 	bl	8006c60 <HAL_TIM_ConfigClockSource>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003652:	f7ff fd23 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003656:	4819      	ldr	r0, [pc, #100]	; (80036bc <MX_TIM2_Init+0xec>)
 8003658:	f002 ff72 	bl	8006540 <HAL_TIM_PWM_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003662:	f7ff fd1b 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800366e:	f107 031c 	add.w	r3, r7, #28
 8003672:	4619      	mov	r1, r3
 8003674:	4811      	ldr	r0, [pc, #68]	; (80036bc <MX_TIM2_Init+0xec>)
 8003676:	f003 ffa3 	bl	80075c0 <HAL_TIMEx_MasterConfigSynchronization>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003680:	f7ff fd0c 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003684:	2360      	movs	r3, #96	; 0x60
 8003686:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 8003688:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800368c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003696:	463b      	mov	r3, r7
 8003698:	2200      	movs	r2, #0
 800369a:	4619      	mov	r1, r3
 800369c:	4807      	ldr	r0, [pc, #28]	; (80036bc <MX_TIM2_Init+0xec>)
 800369e:	f003 f9cb 	bl	8006a38 <HAL_TIM_PWM_ConfigChannel>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80036a8:	f7ff fcf8 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80036ac:	4803      	ldr	r0, [pc, #12]	; (80036bc <MX_TIM2_Init+0xec>)
 80036ae:	f000 f8f7 	bl	80038a0 <HAL_TIM_MspPostInit>

}
 80036b2:	bf00      	nop
 80036b4:	3738      	adds	r7, #56	; 0x38
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20002978 	.word	0x20002978

080036c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036c6:	f107 0310 	add.w	r3, r7, #16
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <MX_TIM3_Init+0x94>)
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <MX_TIM3_Init+0x98>)
 80036e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <MX_TIM3_Init+0x94>)
 80036e6:	226b      	movs	r2, #107	; 0x6b
 80036e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <MX_TIM3_Init+0x94>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80036f0:	4b18      	ldr	r3, [pc, #96]	; (8003754 <MX_TIM3_Init+0x94>)
 80036f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80036f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <MX_TIM3_Init+0x94>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <MX_TIM3_Init+0x94>)
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003704:	4813      	ldr	r0, [pc, #76]	; (8003754 <MX_TIM3_Init+0x94>)
 8003706:	f002 fe4b 	bl	80063a0 <HAL_TIM_Base_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003710:	f7ff fcc4 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003718:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800371a:	f107 0310 	add.w	r3, r7, #16
 800371e:	4619      	mov	r1, r3
 8003720:	480c      	ldr	r0, [pc, #48]	; (8003754 <MX_TIM3_Init+0x94>)
 8003722:	f003 fa9d 	bl	8006c60 <HAL_TIM_ConfigClockSource>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800372c:	f7ff fcb6 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4805      	ldr	r0, [pc, #20]	; (8003754 <MX_TIM3_Init+0x94>)
 800373e:	f003 ff3f 	bl	80075c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003748:	f7ff fca8 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800374c:	bf00      	nop
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	200029c4 	.word	0x200029c4
 8003758:	40000400 	.word	0x40000400

0800375c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	; 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 031c 	add.w	r3, r7, #28
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377c:	d131      	bne.n	80037e2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800377e:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a42      	ldr	r2, [pc, #264]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b40      	ldr	r3, [pc, #256]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a3c      	ldr	r2, [pc, #240]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b3a      	ldr	r3, [pc, #232]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 80037ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037c0:	2301      	movs	r3, #1
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	4619      	mov	r1, r3
 80037ca:	4831      	ldr	r0, [pc, #196]	; (8003890 <HAL_TIM_Base_MspInit+0x134>)
 80037cc:	f000 fb84 	bl	8003ed8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037d0:	2200      	movs	r2, #0
 80037d2:	2100      	movs	r1, #0
 80037d4:	201c      	movs	r0, #28
 80037d6:	f000 fab6 	bl	8003d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037da:	201c      	movs	r0, #28
 80037dc:	f000 facf 	bl	8003d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037e0:	e050      	b.n	8003884 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM3)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2b      	ldr	r2, [pc, #172]	; (8003894 <HAL_TIM_Base_MspInit+0x138>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d14b      	bne.n	8003884 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	4a26      	ldr	r2, [pc, #152]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	6413      	str	r3, [r2, #64]	; 0x40
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	4a20      	ldr	r2, [pc, #128]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	6313      	str	r3, [r2, #48]	; 0x30
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	6313      	str	r3, [r2, #48]	; 0x30
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_TIM_Base_MspInit+0x130>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8003834:	2340      	movs	r3, #64	; 0x40
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003840:	2300      	movs	r3, #0
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003844:	2302      	movs	r3, #2
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8003848:	f107 031c 	add.w	r3, r7, #28
 800384c:	4619      	mov	r1, r3
 800384e:	4812      	ldr	r0, [pc, #72]	; (8003898 <HAL_TIM_Base_MspInit+0x13c>)
 8003850:	f000 fb42 	bl	8003ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003858:	2302      	movs	r3, #2
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003860:	2300      	movs	r3, #0
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003864:	2302      	movs	r3, #2
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	4619      	mov	r1, r3
 800386e:	480b      	ldr	r0, [pc, #44]	; (800389c <HAL_TIM_Base_MspInit+0x140>)
 8003870:	f000 fb32 	bl	8003ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003874:	2200      	movs	r2, #0
 8003876:	2100      	movs	r1, #0
 8003878:	201d      	movs	r0, #29
 800387a:	f000 fa64 	bl	8003d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800387e:	201d      	movs	r0, #29
 8003880:	f000 fa7d 	bl	8003d7e <HAL_NVIC_EnableIRQ>
}
 8003884:	bf00      	nop
 8003886:	3730      	adds	r7, #48	; 0x30
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	40020400 	.word	0x40020400
 8003894:	40000400 	.word	0x40000400
 8003898:	40020000 	.word	0x40020000
 800389c:	40020800 	.word	0x40020800

080038a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	f107 030c 	add.w	r3, r7, #12
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d11b      	bne.n	80038fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_TIM_MspPostInit+0x64>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <HAL_TIM_MspPostInit+0x64>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6313      	str	r3, [r2, #48]	; 0x30
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <HAL_TIM_MspPostInit+0x64>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038da:	2320      	movs	r3, #32
 80038dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ee:	f107 030c 	add.w	r3, r7, #12
 80038f2:	4619      	mov	r1, r3
 80038f4:	4804      	ldr	r0, [pc, #16]	; (8003908 <HAL_TIM_MspPostInit+0x68>)
 80038f6:	f000 faef 	bl	8003ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	40020000 	.word	0x40020000

0800390c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003910:	4b14      	ldr	r3, [pc, #80]	; (8003964 <MX_USART3_UART_Init+0x58>)
 8003912:	4a15      	ldr	r2, [pc, #84]	; (8003968 <MX_USART3_UART_Init+0x5c>)
 8003914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <MX_USART3_UART_Init+0x58>)
 8003918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800391c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <MX_USART3_UART_Init+0x58>)
 8003920:	2200      	movs	r2, #0
 8003922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <MX_USART3_UART_Init+0x58>)
 8003926:	2200      	movs	r2, #0
 8003928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <MX_USART3_UART_Init+0x58>)
 800392c:	2200      	movs	r2, #0
 800392e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <MX_USART3_UART_Init+0x58>)
 8003932:	220c      	movs	r2, #12
 8003934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <MX_USART3_UART_Init+0x58>)
 8003938:	2200      	movs	r2, #0
 800393a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <MX_USART3_UART_Init+0x58>)
 800393e:	2200      	movs	r2, #0
 8003940:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <MX_USART3_UART_Init+0x58>)
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <MX_USART3_UART_Init+0x58>)
 800394a:	2200      	movs	r2, #0
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800394e:	4805      	ldr	r0, [pc, #20]	; (8003964 <MX_USART3_UART_Init+0x58>)
 8003950:	f003 fee2 	bl	8007718 <HAL_UART_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800395a:	f7ff fb9f 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20002a10 	.word	0x20002a10
 8003968:	40004800 	.word	0x40004800

0800396c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b0aa      	sub	sp, #168	; 0xa8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003974:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003984:	f107 0310 	add.w	r3, r7, #16
 8003988:	2284      	movs	r2, #132	; 0x84
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f00a f843 	bl	800da18 <memset>
  if(uartHandle->Instance==USART3)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <HAL_UART_MspInit+0xc4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d144      	bne.n	8003a26 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800399c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80039a2:	2310      	movs	r3, #16
 80039a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039a6:	f107 0310 	add.w	r3, r7, #16
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 f9a8 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80039b6:	f7ff fb71 	bl	800309c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_UART_MspInit+0xc8>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_UART_MspInit+0xc8>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_UART_MspInit+0xc8>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <HAL_UART_MspInit+0xc8>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <HAL_UART_MspInit+0xc8>)
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	6313      	str	r3, [r2, #48]	; 0x30
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_UART_MspInit+0xc8>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80039ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fe:	2303      	movs	r3, #3
 8003a00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a04:	2307      	movs	r3, #7
 8003a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4809      	ldr	r0, [pc, #36]	; (8003a38 <HAL_UART_MspInit+0xcc>)
 8003a12:	f000 fa61 	bl	8003ed8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	2027      	movs	r0, #39	; 0x27
 8003a1c:	f000 f993 	bl	8003d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a20:	2027      	movs	r0, #39	; 0x27
 8003a22:	f000 f9ac 	bl	8003d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a26:	bf00      	nop
 8003a28:	37a8      	adds	r7, #168	; 0xa8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40004800 	.word	0x40004800
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40020c00 	.word	0x40020c00

08003a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a40:	480d      	ldr	r0, [pc, #52]	; (8003a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a42:	490e      	ldr	r1, [pc, #56]	; (8003a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a44:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a48:	e002      	b.n	8003a50 <LoopCopyDataInit>

08003a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4e:	3304      	adds	r3, #4

08003a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a54:	d3f9      	bcc.n	8003a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a56:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a58:	4c0b      	ldr	r4, [pc, #44]	; (8003a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a5c:	e001      	b.n	8003a62 <LoopFillZerobss>

08003a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a60:	3204      	adds	r2, #4

08003a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a64:	d3fb      	bcc.n	8003a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a66:	f7ff fda1 	bl	80035ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a6a:	f00a f83f 	bl	800daec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a6e:	f7ff f981 	bl	8002d74 <main>
  bx  lr    
 8003a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a7c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003a80:	08010ff4 	.word	0x08010ff4
  ldr r2, =_sbss
 8003a84:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003a88:	20002e24 	.word	0x20002e24

08003a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a8c:	e7fe      	b.n	8003a8c <ADC_IRQHandler>

08003a8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a92:	2003      	movs	r0, #3
 8003a94:	f000 f94c 	bl	8003d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f000 f805 	bl	8003aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a9e:	f7ff fc13 	bl	80032c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_InitTick+0x54>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_InitTick+0x58>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f967 	bl	8003d9a <HAL_SYSTICK_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00e      	b.n	8003af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d80a      	bhi.n	8003af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003adc:	2200      	movs	r2, #0
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	f000 f92f 	bl	8003d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ae8:	4a06      	ldr	r2, [pc, #24]	; (8003b04 <HAL_InitTick+0x5c>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000058 	.word	0x20000058
 8003b00:	20000060 	.word	0x20000060
 8003b04:	2000005c 	.word	0x2000005c

08003b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_IncTick+0x20>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_IncTick+0x24>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <HAL_IncTick+0x24>)
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000060 	.word	0x20000060
 8003b2c:	20002a98 	.word	0x20002a98

08003b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return uwTick;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <HAL_GetTick+0x14>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20002a98 	.word	0x20002a98

08003b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7ff ffee 	bl	8003b30 <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d005      	beq.n	8003b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <HAL_Delay+0x44>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b6e:	bf00      	nop
 8003b70:	f7ff ffde 	bl	8003b30 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d8f7      	bhi.n	8003b70 <HAL_Delay+0x28>
  {
  }
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000060 	.word	0x20000060

08003b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bac:	4013      	ands	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bbe:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	60d3      	str	r3, [r2, #12]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000ed00 	.word	0xe000ed00
 8003bd4:	05fa0000 	.word	0x05fa0000

08003bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	f003 0307 	and.w	r3, r3, #7
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	db0b      	blt.n	8003c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	4907      	ldr	r1, [pc, #28]	; (8003c2c <__NVIC_EnableIRQ+0x38>)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2001      	movs	r0, #1
 8003c16:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000e100 	.word	0xe000e100

08003c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	6039      	str	r1, [r7, #0]
 8003c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	db0a      	blt.n	8003c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	490c      	ldr	r1, [pc, #48]	; (8003c7c <__NVIC_SetPriority+0x4c>)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	0112      	lsls	r2, r2, #4
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	440b      	add	r3, r1
 8003c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c58:	e00a      	b.n	8003c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <__NVIC_SetPriority+0x50>)
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3b04      	subs	r3, #4
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	761a      	strb	r2, [r3, #24]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000e100 	.word	0xe000e100
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b089      	sub	sp, #36	; 0x24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f1c3 0307 	rsb	r3, r3, #7
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	bf28      	it	cs
 8003ca2:	2304      	movcs	r3, #4
 8003ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d902      	bls.n	8003cb4 <NVIC_EncodePriority+0x30>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3b03      	subs	r3, #3
 8003cb2:	e000      	b.n	8003cb6 <NVIC_EncodePriority+0x32>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	43d9      	mvns	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cdc:	4313      	orrs	r3, r2
         );
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3724      	adds	r7, #36	; 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cfc:	d301      	bcc.n	8003d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e00f      	b.n	8003d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d02:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <SysTick_Config+0x40>)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d0a:	210f      	movs	r1, #15
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	f7ff ff8e 	bl	8003c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <SysTick_Config+0x40>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d1a:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <SysTick_Config+0x40>)
 8003d1c:	2207      	movs	r2, #7
 8003d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	e000e010 	.word	0xe000e010

08003d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ff29 	bl	8003b90 <__NVIC_SetPriorityGrouping>
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d58:	f7ff ff3e 	bl	8003bd8 <__NVIC_GetPriorityGrouping>
 8003d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7ff ff8e 	bl	8003c84 <NVIC_EncodePriority>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff5d 	bl	8003c30 <__NVIC_SetPriority>
}
 8003d76:	bf00      	nop
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff31 	bl	8003bf4 <__NVIC_EnableIRQ>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ffa2 	bl	8003cec <SysTick_Config>
 8003da8:	4603      	mov	r3, r0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff feb6 	bl	8003b30 <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d008      	beq.n	8003de4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e052      	b.n	8003e8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0216 	bic.w	r2, r2, #22
 8003df2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <HAL_DMA_Abort+0x62>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0208 	bic.w	r2, r2, #8
 8003e22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e34:	e013      	b.n	8003e5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e36:	f7ff fe7b 	bl	8003b30 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d90c      	bls.n	8003e5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e015      	b.n	8003e8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e4      	bne.n	8003e36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	223f      	movs	r2, #63	; 0x3f
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e00c      	b.n	8003eca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2205      	movs	r2, #5
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e175      	b.n	80041e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ef8:	2201      	movs	r2, #1
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	f040 8164 	bne.w	80041de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d005      	beq.n	8003f2e <HAL_GPIO_Init+0x56>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d130      	bne.n	8003f90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	2203      	movs	r2, #3
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f64:	2201      	movs	r2, #1
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 0201 	and.w	r2, r3, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d017      	beq.n	8003fcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d123      	bne.n	8004020 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	08da      	lsrs	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3208      	adds	r2, #8
 8003fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	220f      	movs	r2, #15
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	08da      	lsrs	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3208      	adds	r2, #8
 800401a:	69b9      	ldr	r1, [r7, #24]
 800401c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 0203 	and.w	r2, r3, #3
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80be 	beq.w	80041de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004062:	4b66      	ldr	r3, [pc, #408]	; (80041fc <HAL_GPIO_Init+0x324>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	4a65      	ldr	r2, [pc, #404]	; (80041fc <HAL_GPIO_Init+0x324>)
 8004068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800406c:	6453      	str	r3, [r2, #68]	; 0x44
 800406e:	4b63      	ldr	r3, [pc, #396]	; (80041fc <HAL_GPIO_Init+0x324>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800407a:	4a61      	ldr	r2, [pc, #388]	; (8004200 <HAL_GPIO_Init+0x328>)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	3302      	adds	r3, #2
 8004082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004086:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	220f      	movs	r2, #15
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a58      	ldr	r2, [pc, #352]	; (8004204 <HAL_GPIO_Init+0x32c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d037      	beq.n	8004116 <HAL_GPIO_Init+0x23e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a57      	ldr	r2, [pc, #348]	; (8004208 <HAL_GPIO_Init+0x330>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d031      	beq.n	8004112 <HAL_GPIO_Init+0x23a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a56      	ldr	r2, [pc, #344]	; (800420c <HAL_GPIO_Init+0x334>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d02b      	beq.n	800410e <HAL_GPIO_Init+0x236>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a55      	ldr	r2, [pc, #340]	; (8004210 <HAL_GPIO_Init+0x338>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d025      	beq.n	800410a <HAL_GPIO_Init+0x232>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a54      	ldr	r2, [pc, #336]	; (8004214 <HAL_GPIO_Init+0x33c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01f      	beq.n	8004106 <HAL_GPIO_Init+0x22e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a53      	ldr	r2, [pc, #332]	; (8004218 <HAL_GPIO_Init+0x340>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d019      	beq.n	8004102 <HAL_GPIO_Init+0x22a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a52      	ldr	r2, [pc, #328]	; (800421c <HAL_GPIO_Init+0x344>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <HAL_GPIO_Init+0x226>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a51      	ldr	r2, [pc, #324]	; (8004220 <HAL_GPIO_Init+0x348>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00d      	beq.n	80040fa <HAL_GPIO_Init+0x222>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a50      	ldr	r2, [pc, #320]	; (8004224 <HAL_GPIO_Init+0x34c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <HAL_GPIO_Init+0x21e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a4f      	ldr	r2, [pc, #316]	; (8004228 <HAL_GPIO_Init+0x350>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_GPIO_Init+0x21a>
 80040ee:	2309      	movs	r3, #9
 80040f0:	e012      	b.n	8004118 <HAL_GPIO_Init+0x240>
 80040f2:	230a      	movs	r3, #10
 80040f4:	e010      	b.n	8004118 <HAL_GPIO_Init+0x240>
 80040f6:	2308      	movs	r3, #8
 80040f8:	e00e      	b.n	8004118 <HAL_GPIO_Init+0x240>
 80040fa:	2307      	movs	r3, #7
 80040fc:	e00c      	b.n	8004118 <HAL_GPIO_Init+0x240>
 80040fe:	2306      	movs	r3, #6
 8004100:	e00a      	b.n	8004118 <HAL_GPIO_Init+0x240>
 8004102:	2305      	movs	r3, #5
 8004104:	e008      	b.n	8004118 <HAL_GPIO_Init+0x240>
 8004106:	2304      	movs	r3, #4
 8004108:	e006      	b.n	8004118 <HAL_GPIO_Init+0x240>
 800410a:	2303      	movs	r3, #3
 800410c:	e004      	b.n	8004118 <HAL_GPIO_Init+0x240>
 800410e:	2302      	movs	r3, #2
 8004110:	e002      	b.n	8004118 <HAL_GPIO_Init+0x240>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_GPIO_Init+0x240>
 8004116:	2300      	movs	r3, #0
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	f002 0203 	and.w	r2, r2, #3
 800411e:	0092      	lsls	r2, r2, #2
 8004120:	4093      	lsls	r3, r2
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004128:	4935      	ldr	r1, [pc, #212]	; (8004200 <HAL_GPIO_Init+0x328>)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	3302      	adds	r3, #2
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_GPIO_Init+0x354>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800415a:	4a34      	ldr	r2, [pc, #208]	; (800422c <HAL_GPIO_Init+0x354>)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_GPIO_Init+0x354>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004184:	4a29      	ldr	r2, [pc, #164]	; (800422c <HAL_GPIO_Init+0x354>)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_GPIO_Init+0x354>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <HAL_GPIO_Init+0x354>)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041b4:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_GPIO_Init+0x354>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041d8:	4a14      	ldr	r2, [pc, #80]	; (800422c <HAL_GPIO_Init+0x354>)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b0f      	cmp	r3, #15
 80041e8:	f67f ae86 	bls.w	8003ef8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3724      	adds	r7, #36	; 0x24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
 8004200:	40013800 	.word	0x40013800
 8004204:	40020000 	.word	0x40020000
 8004208:	40020400 	.word	0x40020400
 800420c:	40020800 	.word	0x40020800
 8004210:	40020c00 	.word	0x40020c00
 8004214:	40021000 	.word	0x40021000
 8004218:	40021400 	.word	0x40021400
 800421c:	40021800 	.word	0x40021800
 8004220:	40021c00 	.word	0x40021c00
 8004224:	40022000 	.word	0x40022000
 8004228:	40022400 	.word	0x40022400
 800422c:	40013c00 	.word	0x40013c00

08004230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
 800423c:	4613      	mov	r3, r2
 800423e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004240:	787b      	ldrb	r3, [r7, #1]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800424c:	e003      	b.n	8004256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800424e:	887b      	ldrh	r3, [r7, #2]
 8004250:	041a      	lsls	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	619a      	str	r2, [r3, #24]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800427a:	4a05      	ldr	r2, [pc, #20]	; (8004290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f806 	bl	8004294 <HAL_GPIO_EXTI_Callback>
  }
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40013c00 	.word	0x40013c00

08004294 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ba:	6013      	str	r3, [r2, #0]
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40007000 	.word	0x40007000

080042cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	4b23      	ldr	r3, [pc, #140]	; (8004364 <HAL_PWREx_EnableOverDrive+0x98>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a22      	ldr	r2, [pc, #136]	; (8004364 <HAL_PWREx_EnableOverDrive+0x98>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042ee:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042fa:	f7ff fc19 	bl	8003b30 <HAL_GetTick>
 80042fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004300:	e009      	b.n	8004316 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004302:	f7ff fc15 	bl	8003b30 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004310:	d901      	bls.n	8004316 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e022      	b.n	800435c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004322:	d1ee      	bne.n	8004302 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0f      	ldr	r2, [pc, #60]	; (8004368 <HAL_PWREx_EnableOverDrive+0x9c>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004330:	f7ff fbfe 	bl	8003b30 <HAL_GetTick>
 8004334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004336:	e009      	b.n	800434c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004338:	f7ff fbfa 	bl	8003b30 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004346:	d901      	bls.n	800434c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e007      	b.n	800435c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_PWREx_EnableOverDrive+0x9c>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004358:	d1ee      	bne.n	8004338 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40023800 	.word	0x40023800
 8004368:	40007000 	.word	0x40007000

0800436c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e291      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8087 	beq.w	800449e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004390:	4b96      	ldr	r3, [pc, #600]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b04      	cmp	r3, #4
 800439a:	d00c      	beq.n	80043b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439c:	4b93      	ldr	r3, [pc, #588]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d112      	bne.n	80043ce <HAL_RCC_OscConfig+0x62>
 80043a8:	4b90      	ldr	r3, [pc, #576]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b4:	d10b      	bne.n	80043ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b6:	4b8d      	ldr	r3, [pc, #564]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d06c      	beq.n	800449c <HAL_RCC_OscConfig+0x130>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d168      	bne.n	800449c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e26b      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d6:	d106      	bne.n	80043e6 <HAL_RCC_OscConfig+0x7a>
 80043d8:	4b84      	ldr	r3, [pc, #528]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a83      	ldr	r2, [pc, #524]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80043de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e02e      	b.n	8004444 <HAL_RCC_OscConfig+0xd8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x9c>
 80043ee:	4b7f      	ldr	r3, [pc, #508]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7e      	ldr	r2, [pc, #504]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80043f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b7c      	ldr	r3, [pc, #496]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7b      	ldr	r2, [pc, #492]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <HAL_RCC_OscConfig+0xd8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0xc0>
 8004412:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a75      	ldr	r2, [pc, #468]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a72      	ldr	r2, [pc, #456]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0xd8>
 800442c:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a6e      	ldr	r2, [pc, #440]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b6c      	ldr	r3, [pc, #432]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6b      	ldr	r2, [pc, #428]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 800443e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7ff fb70 	bl	8003b30 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004454:	f7ff fb6c 	bl	8003b30 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e21f      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b61      	ldr	r3, [pc, #388]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0xe8>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7ff fb5c 	bl	8003b30 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800447c:	f7ff fb58 	bl	8003b30 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e20b      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	4b57      	ldr	r3, [pc, #348]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x110>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d069      	beq.n	800457e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044aa:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d11c      	bne.n	80044fc <HAL_RCC_OscConfig+0x190>
 80044c2:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d116      	bne.n	80044fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x17a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1df      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	493d      	ldr	r1, [pc, #244]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	e040      	b.n	800457e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d023      	beq.n	800454c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004504:	4b39      	ldr	r3, [pc, #228]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a38      	ldr	r2, [pc, #224]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7ff fb0e 	bl	8003b30 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004518:	f7ff fb0a 	bl	8003b30 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e1bd      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	4b30      	ldr	r3, [pc, #192]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004536:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4929      	ldr	r1, [pc, #164]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
 800454a:	e018      	b.n	800457e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7ff faea 	bl	8003b30 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004560:	f7ff fae6 	bl	8003b30 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e199      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004572:	4b1e      	ldr	r3, [pc, #120]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d038      	beq.n	80045fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d019      	beq.n	80045c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004592:	4b16      	ldr	r3, [pc, #88]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459e:	f7ff fac7 	bl	8003b30 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a6:	f7ff fac3 	bl	8003b30 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e176      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80045ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCC_OscConfig+0x23a>
 80045c4:	e01a      	b.n	80045fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80045c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ca:	4a08      	ldr	r2, [pc, #32]	; (80045ec <HAL_RCC_OscConfig+0x280>)
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7ff faad 	bl	8003b30 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045da:	f7ff faa9 	bl	8003b30 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d903      	bls.n	80045f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e15c      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
 80045ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f0:	4b91      	ldr	r3, [pc, #580]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ee      	bne.n	80045da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80a4 	beq.w	8004752 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460a:	4b8b      	ldr	r3, [pc, #556]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a87      	ldr	r2, [pc, #540]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
 8004622:	4b85      	ldr	r3, [pc, #532]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004632:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_OscConfig+0x4d0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d118      	bne.n	8004670 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800463e:	4b7f      	ldr	r3, [pc, #508]	; (800483c <HAL_RCC_OscConfig+0x4d0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a7e      	ldr	r2, [pc, #504]	; (800483c <HAL_RCC_OscConfig+0x4d0>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464a:	f7ff fa71 	bl	8003b30 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004652:	f7ff fa6d 	bl	8003b30 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b64      	cmp	r3, #100	; 0x64
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e120      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004664:	4b75      	ldr	r3, [pc, #468]	; (800483c <HAL_RCC_OscConfig+0x4d0>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x31a>
 8004678:	4b6f      	ldr	r3, [pc, #444]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4a6e      	ldr	r2, [pc, #440]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
 8004684:	e02d      	b.n	80046e2 <HAL_RCC_OscConfig+0x376>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x33c>
 800468e:	4b6a      	ldr	r3, [pc, #424]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a69      	ldr	r2, [pc, #420]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	4b67      	ldr	r3, [pc, #412]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a66      	ldr	r2, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	e01c      	b.n	80046e2 <HAL_RCC_OscConfig+0x376>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d10c      	bne.n	80046ca <HAL_RCC_OscConfig+0x35e>
 80046b0:	4b61      	ldr	r3, [pc, #388]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a60      	ldr	r2, [pc, #384]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
 80046bc:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	4a5d      	ldr	r2, [pc, #372]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
 80046c8:	e00b      	b.n	80046e2 <HAL_RCC_OscConfig+0x376>
 80046ca:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	4a5a      	ldr	r2, [pc, #360]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6713      	str	r3, [r2, #112]	; 0x70
 80046d6:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a57      	ldr	r2, [pc, #348]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80046dc:	f023 0304 	bic.w	r3, r3, #4
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d015      	beq.n	8004716 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7ff fa21 	bl	8003b30 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f0:	e00a      	b.n	8004708 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7ff fa1d 	bl	8003b30 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e0ce      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004708:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ee      	beq.n	80046f2 <HAL_RCC_OscConfig+0x386>
 8004714:	e014      	b.n	8004740 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004716:	f7ff fa0b 	bl	8003b30 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471c:	e00a      	b.n	8004734 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7ff fa07 	bl	8003b30 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	; 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e0b8      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004734:	4b40      	ldr	r3, [pc, #256]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ee      	bne.n	800471e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d105      	bne.n	8004752 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004746:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	4a3b      	ldr	r2, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800474c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004750:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80a4 	beq.w	80048a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800475c:	4b36      	ldr	r3, [pc, #216]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b08      	cmp	r3, #8
 8004766:	d06b      	beq.n	8004840 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d149      	bne.n	8004804 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004770:	4b31      	ldr	r3, [pc, #196]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a30      	ldr	r2, [pc, #192]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7ff f9d8 	bl	8003b30 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7ff f9d4 	bl	8003b30 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e087      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	019b      	lsls	r3, r3, #6
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	3b01      	subs	r3, #1
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	4313      	orrs	r3, r2
 80047c8:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80047ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d0:	4b19      	ldr	r3, [pc, #100]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80047d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7ff f9a8 	bl	8003b30 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e4:	f7ff f9a4 	bl	8003b30 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e057      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x478>
 8004802:	e04f      	b.n	80048a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0b      	ldr	r2, [pc, #44]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800480a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7ff f98e 	bl	8003b30 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7ff f98a 	bl	8003b30 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e03d      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	4b03      	ldr	r3, [pc, #12]	; (8004838 <HAL_RCC_OscConfig+0x4cc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x4ac>
 8004836:	e035      	b.n	80048a4 <HAL_RCC_OscConfig+0x538>
 8004838:	40023800 	.word	0x40023800
 800483c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_OscConfig+0x544>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d028      	beq.n	80048a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d121      	bne.n	80048a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d11a      	bne.n	80048a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004870:	4013      	ands	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004876:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004878:	4293      	cmp	r3, r2
 800487a:	d111      	bne.n	80048a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	3b01      	subs	r3, #1
 800488a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800

080048b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0d0      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048cc:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d910      	bls.n	80048fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b67      	ldr	r3, [pc, #412]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 020f 	bic.w	r2, r3, #15
 80048e2:	4965      	ldr	r1, [pc, #404]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b63      	ldr	r3, [pc, #396]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0b8      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d020      	beq.n	800494a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004914:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 800491a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800491e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800492c:	4b53      	ldr	r3, [pc, #332]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a52      	ldr	r2, [pc, #328]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004938:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	494d      	ldr	r1, [pc, #308]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d040      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d115      	bne.n	8004996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e07f      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d107      	bne.n	8004986 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004976:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e073      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004986:	4b3d      	ldr	r3, [pc, #244]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e06b      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f023 0203 	bic.w	r2, r3, #3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4936      	ldr	r1, [pc, #216]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a8:	f7ff f8c2 	bl	8003b30 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	e00a      	b.n	80049c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b0:	f7ff f8be 	bl	8003b30 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e053      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	4b2d      	ldr	r3, [pc, #180]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 020c 	and.w	r2, r3, #12
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d1eb      	bne.n	80049b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d8:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d210      	bcs.n	8004a08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 020f 	bic.w	r2, r3, #15
 80049ee:	4922      	ldr	r1, [pc, #136]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e032      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4916      	ldr	r1, [pc, #88]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	490e      	ldr	r1, [pc, #56]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a46:	f000 f821 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	490a      	ldr	r1, [pc, #40]	; (8004a80 <HAL_RCC_ClockConfig+0x1cc>)
 8004a58:	5ccb      	ldrb	r3, [r1, r3]
 8004a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1d0>)
 8004a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1d4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff f81e 	bl	8003aa8 <HAL_InitTick>

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023c00 	.word	0x40023c00
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	08010764 	.word	0x08010764
 8004a84:	20000058 	.word	0x20000058
 8004a88:	2000005c 	.word	0x2000005c

08004a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a90:	b094      	sub	sp, #80	; 0x50
 8004a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	647b      	str	r3, [r7, #68]	; 0x44
 8004a98:	2300      	movs	r3, #0
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa4:	4b79      	ldr	r3, [pc, #484]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 030c 	and.w	r3, r3, #12
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d00d      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x40>
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	f200 80e1 	bhi.w	8004c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004abe:	e0db      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ac0:	4b73      	ldr	r3, [pc, #460]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac4:	e0db      	b.n	8004c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac6:	4b73      	ldr	r3, [pc, #460]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aca:	e0d8      	b.n	8004c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004acc:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d063      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae2:	4b6a      	ldr	r3, [pc, #424]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	2200      	movs	r2, #0
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30
 8004af6:	2300      	movs	r3, #0
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
 8004afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004afe:	4622      	mov	r2, r4
 8004b00:	462b      	mov	r3, r5
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f04f 0100 	mov.w	r1, #0
 8004b0a:	0159      	lsls	r1, r3, #5
 8004b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b10:	0150      	lsls	r0, r2, #5
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4621      	mov	r1, r4
 8004b18:	1a51      	subs	r1, r2, r1
 8004b1a:	6139      	str	r1, [r7, #16]
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b30:	4659      	mov	r1, fp
 8004b32:	018b      	lsls	r3, r1, #6
 8004b34:	4651      	mov	r1, sl
 8004b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	018a      	lsls	r2, r1, #6
 8004b3e:	4651      	mov	r1, sl
 8004b40:	ebb2 0801 	subs.w	r8, r2, r1
 8004b44:	4659      	mov	r1, fp
 8004b46:	eb63 0901 	sbc.w	r9, r3, r1
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b5e:	4690      	mov	r8, r2
 8004b60:	4699      	mov	r9, r3
 8004b62:	4623      	mov	r3, r4
 8004b64:	eb18 0303 	adds.w	r3, r8, r3
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	eb49 0303 	adc.w	r3, r9, r3
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b7e:	4629      	mov	r1, r5
 8004b80:	024b      	lsls	r3, r1, #9
 8004b82:	4621      	mov	r1, r4
 8004b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b88:	4621      	mov	r1, r4
 8004b8a:	024a      	lsls	r2, r1, #9
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b92:	2200      	movs	r2, #0
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b9c:	f7fc f894 	bl	8000cc8 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba8:	e058      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b38      	ldr	r3, [pc, #224]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bba:	623b      	str	r3, [r7, #32]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	f04f 0000 	mov.w	r0, #0
 8004bcc:	f04f 0100 	mov.w	r1, #0
 8004bd0:	0159      	lsls	r1, r3, #5
 8004bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bd6:	0150      	lsls	r0, r2, #5
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4641      	mov	r1, r8
 8004bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8004be2:	4649      	mov	r1, r9
 8004be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8004c00:	eb63 050b 	sbc.w	r5, r3, fp
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	00eb      	lsls	r3, r5, #3
 8004c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c12:	00e2      	lsls	r2, r4, #3
 8004c14:	4614      	mov	r4, r2
 8004c16:	461d      	mov	r5, r3
 8004c18:	4643      	mov	r3, r8
 8004c1a:	18e3      	adds	r3, r4, r3
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	464b      	mov	r3, r9
 8004c20:	eb45 0303 	adc.w	r3, r5, r3
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c32:	4629      	mov	r1, r5
 8004c34:	028b      	lsls	r3, r1, #10
 8004c36:	4621      	mov	r1, r4
 8004c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	028a      	lsls	r2, r1, #10
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c46:	2200      	movs	r2, #0
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	61fa      	str	r2, [r7, #28]
 8004c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c50:	f7fc f83a 	bl	8000cc8 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4613      	mov	r3, r2
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	3301      	adds	r3, #1
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c76:	e002      	b.n	8004c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3750      	adds	r7, #80	; 0x50
 8004c84:	46bd      	mov	sp, r7
 8004c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	00f42400 	.word	0x00f42400
 8004c94:	007a1200 	.word	0x007a1200

08004c98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000058 	.word	0x20000058

08004cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb4:	f7ff fff0 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0a9b      	lsrs	r3, r3, #10
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	08010774 	.word	0x08010774

08004cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cdc:	f7ff ffdc 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	0b5b      	lsrs	r3, r3, #13
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4903      	ldr	r1, [pc, #12]	; (8004cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	08010774 	.word	0x08010774

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d012      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d28:	4b69      	ldr	r3, [pc, #420]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a68      	ldr	r2, [pc, #416]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d32:	6093      	str	r3, [r2, #8]
 8004d34:	4b66      	ldr	r3, [pc, #408]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	4964      	ldr	r1, [pc, #400]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d017      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d5a:	4b5d      	ldr	r3, [pc, #372]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	4959      	ldr	r1, [pc, #356]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d78:	d101      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d86:	2301      	movs	r3, #1
 8004d88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d017      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d96:	4b4e      	ldr	r3, [pc, #312]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	494a      	ldr	r1, [pc, #296]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db4:	d101      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004db6:	2301      	movs	r3, #1
 8004db8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 808b 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004de4:	4b3a      	ldr	r3, [pc, #232]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	4a39      	ldr	r2, [pc, #228]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dee:	6413      	str	r3, [r2, #64]	; 0x40
 8004df0:	4b37      	ldr	r3, [pc, #220]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dfc:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e08:	f7fe fe92 	bl	8003b30 <HAL_GetTick>
 8004e0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7fe fe8e 	bl	8003b30 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	; 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e357      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e22:	4b2c      	ldr	r3, [pc, #176]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e2e:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d035      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d02e      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e56:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e6e:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e74:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d114      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fe fe56 	bl	8003b30 <HAL_GetTick>
 8004e84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e86:	e00a      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e88:	f7fe fe52 	bl	8003b30 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e319      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0ee      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb6:	d111      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ec4:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ec6:	400b      	ands	r3, r1
 8004ec8:	4901      	ldr	r1, [pc, #4]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	0ffffcff 	.word	0x0ffffcff
 8004edc:	4baa      	ldr	r3, [pc, #680]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4aa9      	ldr	r2, [pc, #676]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ee6:	6093      	str	r3, [r2, #8]
 8004ee8:	4ba7      	ldr	r3, [pc, #668]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef4:	49a4      	ldr	r1, [pc, #656]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f06:	4ba0      	ldr	r3, [pc, #640]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f0c:	4a9e      	ldr	r2, [pc, #632]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f16:	4b9c      	ldr	r3, [pc, #624]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	4999      	ldr	r1, [pc, #612]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f34:	4b94      	ldr	r3, [pc, #592]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f42:	4991      	ldr	r1, [pc, #580]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f56:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f64:	4988      	ldr	r1, [pc, #544]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f78:	4b83      	ldr	r3, [pc, #524]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f86:	4980      	ldr	r1, [pc, #512]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f9a:	4b7b      	ldr	r3, [pc, #492]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4977      	ldr	r1, [pc, #476]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fbc:	4b72      	ldr	r3, [pc, #456]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f023 0203 	bic.w	r2, r3, #3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	496f      	ldr	r1, [pc, #444]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fde:	4b6a      	ldr	r3, [pc, #424]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f023 020c 	bic.w	r2, r3, #12
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fec:	4966      	ldr	r1, [pc, #408]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005000:	4b61      	ldr	r3, [pc, #388]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	495e      	ldr	r1, [pc, #376]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005022:	4b59      	ldr	r3, [pc, #356]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005030:	4955      	ldr	r1, [pc, #340]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005044:	4b50      	ldr	r3, [pc, #320]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	494d      	ldr	r1, [pc, #308]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005066:	4b48      	ldr	r3, [pc, #288]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	4944      	ldr	r1, [pc, #272]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005088:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005096:	493c      	ldr	r1, [pc, #240]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050aa:	4b37      	ldr	r3, [pc, #220]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b8:	4933      	ldr	r1, [pc, #204]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050cc:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050da:	492b      	ldr	r1, [pc, #172]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d011      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050ee:	4b26      	ldr	r3, [pc, #152]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fc:	4922      	ldr	r1, [pc, #136]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800510c:	d101      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800510e:	2301      	movs	r3, #1
 8005110:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800511e:	2301      	movs	r3, #1
 8005120:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800512e:	4b16      	ldr	r3, [pc, #88]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005134:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513c:	4912      	ldr	r1, [pc, #72]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005150:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005156:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005160:	4909      	ldr	r1, [pc, #36]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d006      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80d9 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800517c:	4b02      	ldr	r3, [pc, #8]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a01      	ldr	r2, [pc, #4]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005186:	e001      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005188:	40023800 	.word	0x40023800
 800518c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518e:	f7fe fccf 	bl	8003b30 <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005196:	f7fe fccb 	bl	8003b30 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b64      	cmp	r3, #100	; 0x64
 80051a2:	d901      	bls.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e194      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a8:	4b6c      	ldr	r3, [pc, #432]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f0      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d021      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11d      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051c8:	4b64      	ldr	r3, [pc, #400]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051d6:	4b61      	ldr	r3, [pc, #388]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	019a      	lsls	r2, r3, #6
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	431a      	orrs	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	071b      	lsls	r3, r3, #28
 80051fc:	4957      	ldr	r1, [pc, #348]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02e      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800522e:	d129      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005230:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005244:	0f1b      	lsrs	r3, r3, #28
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	019a      	lsls	r2, r3, #6
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	061b      	lsls	r3, r3, #24
 800525e:	431a      	orrs	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	071b      	lsls	r3, r3, #28
 8005264:	493d      	ldr	r1, [pc, #244]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800526c:	4b3b      	ldr	r3, [pc, #236]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800526e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005272:	f023 021f 	bic.w	r2, r3, #31
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	3b01      	subs	r3, #1
 800527c:	4937      	ldr	r1, [pc, #220]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01d      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005290:	4b32      	ldr	r3, [pc, #200]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005296:	0e1b      	lsrs	r3, r3, #24
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800529e:	4b2f      	ldr	r3, [pc, #188]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a4:	0f1b      	lsrs	r3, r3, #28
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	019a      	lsls	r2, r3, #6
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	431a      	orrs	r2, r3
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	431a      	orrs	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	071b      	lsls	r3, r3, #28
 80052c4:	4925      	ldr	r1, [pc, #148]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d011      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	019a      	lsls	r2, r3, #6
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	071b      	lsls	r3, r3, #28
 80052f4:	4919      	ldr	r1, [pc, #100]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005308:	f7fe fc12 	bl	8003b30 <HAL_GetTick>
 800530c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005310:	f7fe fc0e 	bl	8003b30 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	; 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0d7      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005322:	4b0e      	ldr	r3, [pc, #56]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b01      	cmp	r3, #1
 8005332:	f040 80cd 	bne.w	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005342:	f7fe fbf5 	bl	8003b30 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005348:	e00a      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800534a:	f7fe fbf1 	bl	8003b30 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b64      	cmp	r3, #100	; 0x64
 8005356:	d903      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0ba      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800535c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005360:	4b5e      	ldr	r3, [pc, #376]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	d0ed      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02e      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d12a      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005396:	4b51      	ldr	r3, [pc, #324]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053a4:	4b4d      	ldr	r3, [pc, #308]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	0f1b      	lsrs	r3, r3, #28
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	019a      	lsls	r2, r3, #6
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	061b      	lsls	r3, r3, #24
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	071b      	lsls	r3, r3, #28
 80053ca:	4944      	ldr	r1, [pc, #272]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053d2:	4b42      	ldr	r3, [pc, #264]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	493d      	ldr	r1, [pc, #244]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005400:	d11d      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005402:	4b36      	ldr	r3, [pc, #216]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005410:	4b32      	ldr	r3, [pc, #200]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	0f1b      	lsrs	r3, r3, #28
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	019a      	lsls	r2, r3, #6
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	431a      	orrs	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	431a      	orrs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	071b      	lsls	r3, r3, #28
 8005436:	4929      	ldr	r1, [pc, #164]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d028      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	0e1b      	lsrs	r3, r3, #24
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	0c1b      	lsrs	r3, r3, #16
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	019a      	lsls	r2, r3, #6
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	431a      	orrs	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	071b      	lsls	r3, r3, #28
 800547e:	4917      	ldr	r1, [pc, #92]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005486:	4b15      	ldr	r3, [pc, #84]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	4911      	ldr	r1, [pc, #68]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800549c:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a8:	f7fe fb42 	bl	8003b30 <HAL_GetTick>
 80054ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054b0:	f7fe fb3e 	bl	8003b30 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e007      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ce:	d1ef      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800

080054e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e09d      	b.n	800562e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005502:	d009      	beq.n	8005518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	61da      	str	r2, [r3, #28]
 800550a:	e005      	b.n	8005518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fd fe34 	bl	80031a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005558:	d902      	bls.n	8005560 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e002      	b.n	8005566 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005564:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800556e:	d007      	beq.n	8005580 <HAL_SPI_Init+0xa0>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c2:	ea42 0103 	orr.w	r1, r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	0c1b      	lsrs	r3, r3, #16
 80055dc:	f003 0204 	and.w	r2, r3, #4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055fc:	ea42 0103 	orr.w	r1, r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800561c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b088      	sub	sp, #32
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_SPI_Transmit+0x22>
 8005654:	2302      	movs	r3, #2
 8005656:	e158      	b.n	800590a <HAL_SPI_Transmit+0x2d4>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005660:	f7fe fa66 	bl	8003b30 <HAL_GetTick>
 8005664:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d002      	beq.n	800567c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005676:	2302      	movs	r3, #2
 8005678:	77fb      	strb	r3, [r7, #31]
    goto error;
 800567a:	e13d      	b.n	80058f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Transmit+0x52>
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800568c:	e134      	b.n	80058f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2203      	movs	r2, #3
 8005692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d8:	d10f      	bne.n	80056fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	d007      	beq.n	8005718 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005716:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005720:	d94b      	bls.n	80057ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_SPI_Transmit+0xfa>
 800572a:	8afb      	ldrh	r3, [r7, #22]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d13e      	bne.n	80057ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	881a      	ldrh	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	1c9a      	adds	r2, r3, #2
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005754:	e02b      	b.n	80057ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b02      	cmp	r3, #2
 8005762:	d112      	bne.n	800578a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005788:	e011      	b.n	80057ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578a:	f7fe f9d1 	bl	8003b30 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d803      	bhi.n	80057a2 <HAL_SPI_Transmit+0x16c>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d102      	bne.n	80057a8 <HAL_SPI_Transmit+0x172>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057ac:	e0a4      	b.n	80058f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ce      	bne.n	8005756 <HAL_SPI_Transmit+0x120>
 80057b8:	e07c      	b.n	80058b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_Transmit+0x192>
 80057c2:	8afb      	ldrh	r3, [r7, #22]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d170      	bne.n	80058aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d912      	bls.n	80057f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	881a      	ldrh	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	1c9a      	adds	r2, r3, #2
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b02      	subs	r3, #2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057f6:	e058      	b.n	80058aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	7812      	ldrb	r2, [r2, #0]
 8005804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800581e:	e044      	b.n	80058aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d12b      	bne.n	8005886 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d912      	bls.n	800585e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b02      	subs	r3, #2
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800585c:	e025      	b.n	80058aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005884:	e011      	b.n	80058aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005886:	f7fe f953 	bl	8003b30 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d803      	bhi.n	800589e <HAL_SPI_Transmit+0x268>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d102      	bne.n	80058a4 <HAL_SPI_Transmit+0x26e>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058a8:	e026      	b.n	80058f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1b5      	bne.n	8005820 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fd07 	bl	80062cc <SPI_EndRxTxTransaction>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058d2:	2300      	movs	r3, #0
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	77fb      	strb	r3, [r7, #31]
 80058f4:	e000      	b.n	80058f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80058f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005908:	7ffb      	ldrb	r3, [r7, #31]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b088      	sub	sp, #32
 8005916:	af02      	add	r7, sp, #8
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800592e:	d112      	bne.n	8005956 <HAL_SPI_Receive+0x44>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10e      	bne.n	8005956 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2204      	movs	r2, #4
 800593c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f910 	bl	8005b72 <HAL_SPI_TransmitReceive>
 8005952:	4603      	mov	r3, r0
 8005954:	e109      	b.n	8005b6a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_SPI_Receive+0x52>
 8005960:	2302      	movs	r3, #2
 8005962:	e102      	b.n	8005b6a <HAL_SPI_Receive+0x258>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800596c:	f7fe f8e0 	bl	8003b30 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b01      	cmp	r3, #1
 800597c:	d002      	beq.n	8005984 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800597e:	2302      	movs	r3, #2
 8005980:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005982:	e0e9      	b.n	8005b58 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_SPI_Receive+0x7e>
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005994:	e0e0      	b.n	8005b58 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2204      	movs	r2, #4
 800599a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	88fa      	ldrh	r2, [r7, #6]
 80059ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	88fa      	ldrh	r2, [r7, #6]
 80059b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059e0:	d908      	bls.n	80059f4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	e007      	b.n	8005a04 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a02:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0c:	d10f      	bne.n	8005a2e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d007      	beq.n	8005a4c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a54:	d867      	bhi.n	8005b26 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a56:	e030      	b.n	8005aba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d117      	bne.n	8005a96 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f103 020c 	add.w	r2, r3, #12
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a94:	e011      	b.n	8005aba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a96:	f7fe f84b 	bl	8003b30 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d803      	bhi.n	8005aae <HAL_SPI_Receive+0x19c>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d102      	bne.n	8005ab4 <HAL_SPI_Receive+0x1a2>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ab8:	e04e      	b.n	8005b58 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1c8      	bne.n	8005a58 <HAL_SPI_Receive+0x146>
 8005ac6:	e034      	b.n	8005b32 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d115      	bne.n	8005b02 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	b292      	uxth	r2, r2
 8005ae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	1c9a      	adds	r2, r3, #2
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b00:	e011      	b.n	8005b26 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b02:	f7fe f815 	bl	8003b30 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d803      	bhi.n	8005b1a <HAL_SPI_Receive+0x208>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d102      	bne.n	8005b20 <HAL_SPI_Receive+0x20e>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b24:	e018      	b.n	8005b58 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1ca      	bne.n	8005ac8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 fb4c 	bl	80061d4 <SPI_EndRxTransaction>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	75fb      	strb	r3, [r7, #23]
 8005b54:	e000      	b.n	8005b58 <HAL_SPI_Receive+0x246>
  }

error :
 8005b56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b08a      	sub	sp, #40	; 0x28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
 8005b7e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b80:	2301      	movs	r3, #1
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_SPI_TransmitReceive+0x26>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e1fb      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x41e>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba0:	f7fd ffc6 	bl	8003b30 <HAL_GetTick>
 8005ba4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005bb4:	887b      	ldrh	r3, [r7, #2]
 8005bb6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005bb8:	887b      	ldrh	r3, [r7, #2]
 8005bba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bbc:	7efb      	ldrb	r3, [r7, #27]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d00e      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x6e>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc8:	d106      	bne.n	8005bd8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <HAL_SPI_TransmitReceive+0x66>
 8005bd2:	7efb      	ldrb	r3, [r7, #27]
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d003      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005bde:	e1cd      	b.n	8005f7c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x80>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x80>
 8005bec:	887b      	ldrh	r3, [r7, #2]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005bf8:	e1c0      	b.n	8005f7c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d003      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2205      	movs	r2, #5
 8005c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	887a      	ldrh	r2, [r7, #2]
 8005c1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	887a      	ldrh	r2, [r7, #2]
 8005c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	887a      	ldrh	r2, [r7, #2]
 8005c34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	887a      	ldrh	r2, [r7, #2]
 8005c3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c50:	d802      	bhi.n	8005c58 <HAL_SPI_TransmitReceive+0xe6>
 8005c52:	8a3b      	ldrh	r3, [r7, #16]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d908      	bls.n	8005c6a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c66:	605a      	str	r2, [r3, #4]
 8005c68:	e007      	b.n	8005c7a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c78:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d007      	beq.n	8005c98 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca0:	d97c      	bls.n	8005d9c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_SPI_TransmitReceive+0x13e>
 8005caa:	8a7b      	ldrh	r3, [r7, #18]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d169      	bne.n	8005d84 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	881a      	ldrh	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	1c9a      	adds	r2, r3, #2
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cd4:	e056      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d11b      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x1aa>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d016      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x1aa>
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d113      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	881a      	ldrh	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d11c      	bne.n	8005d64 <HAL_SPI_TransmitReceive+0x1f2>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d016      	beq.n	8005d64 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	b292      	uxth	r2, r2
 8005d42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d60:	2301      	movs	r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d64:	f7fd fee4 	bl	8003b30 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d807      	bhi.n	8005d84 <HAL_SPI_TransmitReceive+0x212>
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7a:	d003      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d82:	e0fb      	b.n	8005f7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1a3      	bne.n	8005cd6 <HAL_SPI_TransmitReceive+0x164>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d19d      	bne.n	8005cd6 <HAL_SPI_TransmitReceive+0x164>
 8005d9a:	e0df      	b.n	8005f5c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_SPI_TransmitReceive+0x23a>
 8005da4:	8a7b      	ldrh	r3, [r7, #18]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	f040 80cb 	bne.w	8005f42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d912      	bls.n	8005ddc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	881a      	ldrh	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	1c9a      	adds	r2, r3, #2
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b02      	subs	r3, #2
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dda:	e0b2      	b.n	8005f42 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e02:	e09e      	b.n	8005f42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d134      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x30a>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d02f      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x30a>
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d12c      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d912      	bls.n	8005e52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b02      	subs	r3, #2
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e50:	e012      	b.n	8005e78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d148      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x3aa>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d042      	beq.n	8005f1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d923      	bls.n	8005eea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	b292      	uxth	r2, r2
 8005eae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	1c9a      	adds	r2, r3, #2
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b02      	subs	r3, #2
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d81f      	bhi.n	8005f18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	e016      	b.n	8005f18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f103 020c 	add.w	r2, r3, #12
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	7812      	ldrb	r2, [r2, #0]
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f1c:	f7fd fe08 	bl	8003b30 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d803      	bhi.n	8005f34 <HAL_SPI_TransmitReceive+0x3c2>
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d102      	bne.n	8005f3a <HAL_SPI_TransmitReceive+0x3c8>
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f40:	e01c      	b.n	8005f7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f47f af5b 	bne.w	8005e04 <HAL_SPI_TransmitReceive+0x292>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f47f af54 	bne.w	8005e04 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f9b3 	bl	80062cc <SPI_EndRxTxTransaction>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d006      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	661a      	str	r2, [r3, #96]	; 0x60
 8005f78:	e000      	b.n	8005f7c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005f7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3728      	adds	r7, #40	; 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fa8:	f7fd fdc2 	bl	8003b30 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fb8:	f7fd fdba 	bl	8003b30 <HAL_GetTick>
 8005fbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fbe:	4b39      	ldr	r3, [pc, #228]	; (80060a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	015b      	lsls	r3, r3, #5
 8005fc4:	0d1b      	lsrs	r3, r3, #20
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	fb02 f303 	mul.w	r3, r2, r3
 8005fcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fce:	e054      	b.n	800607a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd6:	d050      	beq.n	800607a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fd8:	f7fd fdaa 	bl	8003b30 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d902      	bls.n	8005fee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d13d      	bne.n	800606a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ffc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006006:	d111      	bne.n	800602c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006010:	d004      	beq.n	800601c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601a:	d107      	bne.n	800602c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006034:	d10f      	bne.n	8006056 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006054:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e017      	b.n	800609a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	3b01      	subs	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4013      	ands	r3, r2
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	bf0c      	ite	eq
 800608a:	2301      	moveq	r3, #1
 800608c:	2300      	movne	r3, #0
 800608e:	b2db      	uxtb	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	429a      	cmp	r2, r3
 8006096:	d19b      	bne.n	8005fd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000058 	.word	0x20000058

080060a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060ba:	f7fd fd39 	bl	8003b30 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	4413      	add	r3, r2
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80060ca:	f7fd fd31 	bl	8003b30 <HAL_GetTick>
 80060ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060d8:	4b3d      	ldr	r3, [pc, #244]	; (80061d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	00da      	lsls	r2, r3, #3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	0d1b      	lsrs	r3, r3, #20
 80060e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060f0:	e060      	b.n	80061b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060f8:	d107      	bne.n	800610a <SPI_WaitFifoStateUntilTimeout+0x62>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006108:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d050      	beq.n	80061b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006112:	f7fd fd0d 	bl	8003b30 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611e:	429a      	cmp	r2, r3
 8006120:	d902      	bls.n	8006128 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	2b00      	cmp	r3, #0
 8006126:	d13d      	bne.n	80061a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006136:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006140:	d111      	bne.n	8006166 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614a:	d004      	beq.n	8006156 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006154:	d107      	bne.n	8006166 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006164:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616e:	d10f      	bne.n	8006190 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800618e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e010      	b.n	80061c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d196      	bne.n	80060f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3728      	adds	r7, #40	; 0x28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000058 	.word	0x20000058

080061d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061e8:	d111      	bne.n	800620e <SPI_EndRxTransaction+0x3a>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f2:	d004      	beq.n	80061fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fc:	d107      	bne.n	800620e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006216:	d112      	bne.n	800623e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2200      	movs	r2, #0
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff feb8 	bl	8005f98 <SPI_WaitFlagStateUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d021      	beq.n	8006272 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e03d      	b.n	80062ba <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800623e:	4b21      	ldr	r3, [pc, #132]	; (80062c4 <SPI_EndRxTransaction+0xf0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <SPI_EndRxTransaction+0xf4>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	0d5b      	lsrs	r3, r3, #21
 800624a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	3b01      	subs	r3, #1
 800625e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d0f2      	beq.n	8006254 <SPI_EndRxTransaction+0x80>
 800626e:	e000      	b.n	8006272 <SPI_EndRxTransaction+0x9e>
        break;
 8006270:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627a:	d11d      	bne.n	80062b8 <SPI_EndRxTransaction+0xe4>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006284:	d004      	beq.n	8006290 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628e:	d113      	bne.n	80062b8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2200      	movs	r2, #0
 8006298:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff ff03 	bl	80060a8 <SPI_WaitFifoStateUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ac:	f043 0220 	orr.w	r2, r3, #32
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e000      	b.n	80062ba <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000058 	.word	0x20000058
 80062c8:	165e9f81 	.word	0x165e9f81

080062cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff fedf 	bl	80060a8 <SPI_WaitFifoStateUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f4:	f043 0220 	orr.w	r2, r3, #32
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e046      	b.n	800638e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <SPI_EndRxTxTransaction+0xcc>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a25      	ldr	r2, [pc, #148]	; (800639c <SPI_EndRxTxTransaction+0xd0>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	0d5b      	lsrs	r3, r3, #21
 800630c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800631e:	d112      	bne.n	8006346 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2200      	movs	r2, #0
 8006328:	2180      	movs	r1, #128	; 0x80
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff fe34 	bl	8005f98 <SPI_WaitFlagStateUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d016      	beq.n	8006364 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e023      	b.n	800638e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	3b01      	subs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635c:	2b80      	cmp	r3, #128	; 0x80
 800635e:	d0f2      	beq.n	8006346 <SPI_EndRxTxTransaction+0x7a>
 8006360:	e000      	b.n	8006364 <SPI_EndRxTxTransaction+0x98>
        break;
 8006362:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff fe99 	bl	80060a8 <SPI_WaitFifoStateUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e000      	b.n	800638e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000058 	.word	0x20000058
 800639c:	165e9f81 	.word	0x165e9f81

080063a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e049      	b.n	8006446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fd f9c8 	bl	800375c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f000 fd30 	bl	8006e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	d001      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e054      	b.n	8006512 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a26      	ldr	r2, [pc, #152]	; (8006520 <HAL_TIM_Base_Start_IT+0xd0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d022      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x80>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006492:	d01d      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x80>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a22      	ldr	r2, [pc, #136]	; (8006524 <HAL_TIM_Base_Start_IT+0xd4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d018      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x80>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a21      	ldr	r2, [pc, #132]	; (8006528 <HAL_TIM_Base_Start_IT+0xd8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d013      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x80>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1f      	ldr	r2, [pc, #124]	; (800652c <HAL_TIM_Base_Start_IT+0xdc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00e      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x80>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1e      	ldr	r2, [pc, #120]	; (8006530 <HAL_TIM_Base_Start_IT+0xe0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x80>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1c      	ldr	r2, [pc, #112]	; (8006534 <HAL_TIM_Base_Start_IT+0xe4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x80>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <HAL_TIM_Base_Start_IT+0xe8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d115      	bne.n	80064fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	4b19      	ldr	r3, [pc, #100]	; (800653c <HAL_TIM_Base_Start_IT+0xec>)
 80064d8:	4013      	ands	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b06      	cmp	r3, #6
 80064e0:	d015      	beq.n	800650e <HAL_TIM_Base_Start_IT+0xbe>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e8:	d011      	beq.n	800650e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fa:	e008      	b.n	800650e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e000      	b.n	8006510 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	40010000 	.word	0x40010000
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800
 800652c:	40000c00 	.word	0x40000c00
 8006530:	40010400 	.word	0x40010400
 8006534:	40014000 	.word	0x40014000
 8006538:	40001800 	.word	0x40001800
 800653c:	00010007 	.word	0x00010007

08006540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e049      	b.n	80065e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f841 	bl	80065ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	4619      	mov	r1, r3
 800657e:	4610      	mov	r0, r2
 8006580:	f000 fc60 	bl	8006e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <HAL_TIM_PWM_Start+0x24>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	bf14      	ite	ne
 8006620:	2301      	movne	r3, #1
 8006622:	2300      	moveq	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	e03c      	b.n	80066a2 <HAL_TIM_PWM_Start+0x9e>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b04      	cmp	r3, #4
 800662c:	d109      	bne.n	8006642 <HAL_TIM_PWM_Start+0x3e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b01      	cmp	r3, #1
 8006638:	bf14      	ite	ne
 800663a:	2301      	movne	r3, #1
 800663c:	2300      	moveq	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	e02f      	b.n	80066a2 <HAL_TIM_PWM_Start+0x9e>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d109      	bne.n	800665c <HAL_TIM_PWM_Start+0x58>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	e022      	b.n	80066a2 <HAL_TIM_PWM_Start+0x9e>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b0c      	cmp	r3, #12
 8006660:	d109      	bne.n	8006676 <HAL_TIM_PWM_Start+0x72>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b01      	cmp	r3, #1
 800666c:	bf14      	ite	ne
 800666e:	2301      	movne	r3, #1
 8006670:	2300      	moveq	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	e015      	b.n	80066a2 <HAL_TIM_PWM_Start+0x9e>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b10      	cmp	r3, #16
 800667a:	d109      	bne.n	8006690 <HAL_TIM_PWM_Start+0x8c>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e008      	b.n	80066a2 <HAL_TIM_PWM_Start+0x9e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	bf14      	ite	ne
 800669c:	2301      	movne	r3, #1
 800669e:	2300      	moveq	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e092      	b.n	80067d0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <HAL_TIM_PWM_Start+0xb6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b8:	e023      	b.n	8006702 <HAL_TIM_PWM_Start+0xfe>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d104      	bne.n	80066ca <HAL_TIM_PWM_Start+0xc6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066c8:	e01b      	b.n	8006702 <HAL_TIM_PWM_Start+0xfe>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d104      	bne.n	80066da <HAL_TIM_PWM_Start+0xd6>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066d8:	e013      	b.n	8006702 <HAL_TIM_PWM_Start+0xfe>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b0c      	cmp	r3, #12
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0xe6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066e8:	e00b      	b.n	8006702 <HAL_TIM_PWM_Start+0xfe>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_PWM_Start+0xf6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f8:	e003      	b.n	8006702 <HAL_TIM_PWM_Start+0xfe>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 ff32 	bl	8007574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a30      	ldr	r2, [pc, #192]	; (80067d8 <HAL_TIM_PWM_Start+0x1d4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIM_PWM_Start+0x120>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2f      	ldr	r2, [pc, #188]	; (80067dc <HAL_TIM_PWM_Start+0x1d8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d101      	bne.n	8006728 <HAL_TIM_PWM_Start+0x124>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <HAL_TIM_PWM_Start+0x126>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <HAL_TIM_PWM_Start+0x1d4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d022      	beq.n	800678e <HAL_TIM_PWM_Start+0x18a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006750:	d01d      	beq.n	800678e <HAL_TIM_PWM_Start+0x18a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a22      	ldr	r2, [pc, #136]	; (80067e0 <HAL_TIM_PWM_Start+0x1dc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d018      	beq.n	800678e <HAL_TIM_PWM_Start+0x18a>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a20      	ldr	r2, [pc, #128]	; (80067e4 <HAL_TIM_PWM_Start+0x1e0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d013      	beq.n	800678e <HAL_TIM_PWM_Start+0x18a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1f      	ldr	r2, [pc, #124]	; (80067e8 <HAL_TIM_PWM_Start+0x1e4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00e      	beq.n	800678e <HAL_TIM_PWM_Start+0x18a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a19      	ldr	r2, [pc, #100]	; (80067dc <HAL_TIM_PWM_Start+0x1d8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d009      	beq.n	800678e <HAL_TIM_PWM_Start+0x18a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <HAL_TIM_PWM_Start+0x1e8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d004      	beq.n	800678e <HAL_TIM_PWM_Start+0x18a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <HAL_TIM_PWM_Start+0x1ec>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d115      	bne.n	80067ba <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	4b17      	ldr	r3, [pc, #92]	; (80067f4 <HAL_TIM_PWM_Start+0x1f0>)
 8006796:	4013      	ands	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b06      	cmp	r3, #6
 800679e:	d015      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1c8>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a6:	d011      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b8:	e008      	b.n	80067cc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0201 	orr.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e000      	b.n	80067ce <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40001800 	.word	0x40001800
 80067f4:	00010007 	.word	0x00010007

080067f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b02      	cmp	r3, #2
 800680c:	d122      	bne.n	8006854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b02      	cmp	r3, #2
 800681a:	d11b      	bne.n	8006854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0202 	mvn.w	r2, #2
 8006824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fae4 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fad6 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fae7 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b04      	cmp	r3, #4
 8006860:	d122      	bne.n	80068a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b04      	cmp	r3, #4
 800686e:	d11b      	bne.n	80068a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0204 	mvn.w	r2, #4
 8006878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2202      	movs	r2, #2
 800687e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 faba 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 8006894:	e005      	b.n	80068a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 faac 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fabd 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d122      	bne.n	80068fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d11b      	bne.n	80068fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f06f 0208 	mvn.w	r2, #8
 80068cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2204      	movs	r2, #4
 80068d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa90 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 80068e8:	e005      	b.n	80068f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa82 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fa93 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b10      	cmp	r3, #16
 8006908:	d122      	bne.n	8006950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b10      	cmp	r3, #16
 8006916:	d11b      	bne.n	8006950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0210 	mvn.w	r2, #16
 8006920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2208      	movs	r2, #8
 8006926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa66 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 800693c:	e005      	b.n	800694a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa58 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fa69 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d10e      	bne.n	800697c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	d107      	bne.n	800697c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0201 	mvn.w	r2, #1
 8006974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fc f892 	bl	8002aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006986:	2b80      	cmp	r3, #128	; 0x80
 8006988:	d10e      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d107      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fea4 	bl	80076f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b6:	d10e      	bne.n	80069d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d107      	bne.n	80069d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fe97 	bl	8007704 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	d10e      	bne.n	8006a02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d107      	bne.n	8006a02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa17 	bl	8006e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d10e      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d107      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f06f 0220 	mvn.w	r2, #32
 8006a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fe57 	bl	80076dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e0ff      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b14      	cmp	r3, #20
 8006a62:	f200 80f0 	bhi.w	8006c46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006ac1 	.word	0x08006ac1
 8006a70:	08006c47 	.word	0x08006c47
 8006a74:	08006c47 	.word	0x08006c47
 8006a78:	08006c47 	.word	0x08006c47
 8006a7c:	08006b01 	.word	0x08006b01
 8006a80:	08006c47 	.word	0x08006c47
 8006a84:	08006c47 	.word	0x08006c47
 8006a88:	08006c47 	.word	0x08006c47
 8006a8c:	08006b43 	.word	0x08006b43
 8006a90:	08006c47 	.word	0x08006c47
 8006a94:	08006c47 	.word	0x08006c47
 8006a98:	08006c47 	.word	0x08006c47
 8006a9c:	08006b83 	.word	0x08006b83
 8006aa0:	08006c47 	.word	0x08006c47
 8006aa4:	08006c47 	.word	0x08006c47
 8006aa8:	08006c47 	.word	0x08006c47
 8006aac:	08006bc5 	.word	0x08006bc5
 8006ab0:	08006c47 	.word	0x08006c47
 8006ab4:	08006c47 	.word	0x08006c47
 8006ab8:	08006c47 	.word	0x08006c47
 8006abc:	08006c05 	.word	0x08006c05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fa5c 	bl	8006f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0208 	orr.w	r2, r2, #8
 8006ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0204 	bic.w	r2, r2, #4
 8006aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6999      	ldr	r1, [r3, #24]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	619a      	str	r2, [r3, #24]
      break;
 8006afe:	e0a5      	b.n	8006c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 faae 	bl	8007068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6999      	ldr	r1, [r3, #24]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	021a      	lsls	r2, r3, #8
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	619a      	str	r2, [r3, #24]
      break;
 8006b40:	e084      	b.n	8006c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fb05 	bl	8007158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69da      	ldr	r2, [r3, #28]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0208 	orr.w	r2, r2, #8
 8006b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0204 	bic.w	r2, r2, #4
 8006b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69d9      	ldr	r1, [r3, #28]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	61da      	str	r2, [r3, #28]
      break;
 8006b80:	e064      	b.n	8006c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fb5b 	bl	8007244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69d9      	ldr	r1, [r3, #28]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	021a      	lsls	r2, r3, #8
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	61da      	str	r2, [r3, #28]
      break;
 8006bc2:	e043      	b.n	8006c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fb92 	bl	80072f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0208 	orr.w	r2, r2, #8
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0204 	bic.w	r2, r2, #4
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c02:	e023      	b.n	8006c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fbc4 	bl	8007398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	021a      	lsls	r2, r3, #8
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c44:	e002      	b.n	8006c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_TIM_ConfigClockSource+0x1c>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e0b4      	b.n	8006de6 <HAL_TIM_ConfigClockSource+0x186>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	4b56      	ldr	r3, [pc, #344]	; (8006df0 <HAL_TIM_ConfigClockSource+0x190>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb4:	d03e      	beq.n	8006d34 <HAL_TIM_ConfigClockSource+0xd4>
 8006cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cba:	f200 8087 	bhi.w	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc2:	f000 8086 	beq.w	8006dd2 <HAL_TIM_ConfigClockSource+0x172>
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cca:	d87f      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
 8006ccc:	2b70      	cmp	r3, #112	; 0x70
 8006cce:	d01a      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0xa6>
 8006cd0:	2b70      	cmp	r3, #112	; 0x70
 8006cd2:	d87b      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
 8006cd4:	2b60      	cmp	r3, #96	; 0x60
 8006cd6:	d050      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x11a>
 8006cd8:	2b60      	cmp	r3, #96	; 0x60
 8006cda:	d877      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
 8006cdc:	2b50      	cmp	r3, #80	; 0x50
 8006cde:	d03c      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0xfa>
 8006ce0:	2b50      	cmp	r3, #80	; 0x50
 8006ce2:	d873      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	d058      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x13a>
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d86f      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
 8006cec:	2b30      	cmp	r3, #48	; 0x30
 8006cee:	d064      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x15a>
 8006cf0:	2b30      	cmp	r3, #48	; 0x30
 8006cf2:	d86b      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d060      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x15a>
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d867      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05c      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x15a>
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d05a      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x15a>
 8006d04:	e062      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d16:	f000 fc0d 	bl	8007534 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	609a      	str	r2, [r3, #8]
      break;
 8006d32:	e04f      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d44:	f000 fbf6 	bl	8007534 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d56:	609a      	str	r2, [r3, #8]
      break;
 8006d58:	e03c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d66:	461a      	mov	r2, r3
 8006d68:	f000 fb6a 	bl	8007440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2150      	movs	r1, #80	; 0x50
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fbc3 	bl	80074fe <TIM_ITRx_SetConfig>
      break;
 8006d78:	e02c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d86:	461a      	mov	r2, r3
 8006d88:	f000 fb89 	bl	800749e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2160      	movs	r1, #96	; 0x60
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fbb3 	bl	80074fe <TIM_ITRx_SetConfig>
      break;
 8006d98:	e01c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da6:	461a      	mov	r2, r3
 8006da8:	f000 fb4a 	bl	8007440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2140      	movs	r1, #64	; 0x40
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fba3 	bl	80074fe <TIM_ITRx_SetConfig>
      break;
 8006db8:	e00c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f000 fb9a 	bl	80074fe <TIM_ITRx_SetConfig>
      break;
 8006dca:	e003      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd0:	e000      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	fffeff88 	.word	0xfffeff88

08006df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a40      	ldr	r2, [pc, #256]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e62:	d00f      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a3d      	ldr	r2, [pc, #244]	; (8006f5c <TIM_Base_SetConfig+0x118>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a3c      	ldr	r2, [pc, #240]	; (8006f60 <TIM_Base_SetConfig+0x11c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a3b      	ldr	r2, [pc, #236]	; (8006f64 <TIM_Base_SetConfig+0x120>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a3a      	ldr	r2, [pc, #232]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d108      	bne.n	8006e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2f      	ldr	r2, [pc, #188]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d02b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea4:	d027      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <TIM_Base_SetConfig+0x118>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d023      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <TIM_Base_SetConfig+0x11c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <TIM_Base_SetConfig+0x120>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d017      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <TIM_Base_SetConfig+0x128>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a27      	ldr	r2, [pc, #156]	; (8006f70 <TIM_Base_SetConfig+0x12c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a26      	ldr	r2, [pc, #152]	; (8006f74 <TIM_Base_SetConfig+0x130>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d00b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <TIM_Base_SetConfig+0x134>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d007      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a24      	ldr	r2, [pc, #144]	; (8006f7c <TIM_Base_SetConfig+0x138>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <TIM_Base_SetConfig+0x13c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d108      	bne.n	8006f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0xf8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40010400 	.word	0x40010400
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800
 8006f78:	40001800 	.word	0x40001800
 8006f7c:	40001c00 	.word	0x40001c00
 8006f80:	40002000 	.word	0x40002000

08006f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0201 	bic.w	r2, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4b2b      	ldr	r3, [pc, #172]	; (800705c <TIM_OC1_SetConfig+0xd8>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 0302 	bic.w	r3, r3, #2
 8006fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a21      	ldr	r2, [pc, #132]	; (8007060 <TIM_OC1_SetConfig+0xdc>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x64>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a20      	ldr	r2, [pc, #128]	; (8007064 <TIM_OC1_SetConfig+0xe0>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10c      	bne.n	8007002 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0308 	bic.w	r3, r3, #8
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0304 	bic.w	r3, r3, #4
 8007000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a16      	ldr	r2, [pc, #88]	; (8007060 <TIM_OC1_SetConfig+0xdc>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_OC1_SetConfig+0x8e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a15      	ldr	r2, [pc, #84]	; (8007064 <TIM_OC1_SetConfig+0xe0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d111      	bne.n	8007036 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	fffeff8f 	.word	0xfffeff8f
 8007060:	40010000 	.word	0x40010000
 8007064:	40010400 	.word	0x40010400

08007068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0210 	bic.w	r2, r3, #16
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <TIM_OC2_SetConfig+0xe4>)
 8007094:	4013      	ands	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f023 0320 	bic.w	r3, r3, #32
 80070b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a23      	ldr	r2, [pc, #140]	; (8007150 <TIM_OC2_SetConfig+0xe8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_OC2_SetConfig+0x68>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a22      	ldr	r2, [pc, #136]	; (8007154 <TIM_OC2_SetConfig+0xec>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d10d      	bne.n	80070ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a18      	ldr	r2, [pc, #96]	; (8007150 <TIM_OC2_SetConfig+0xe8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_OC2_SetConfig+0x94>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a17      	ldr	r2, [pc, #92]	; (8007154 <TIM_OC2_SetConfig+0xec>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d113      	bne.n	8007124 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800710a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	4313      	orrs	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	621a      	str	r2, [r3, #32]
}
 800713e:	bf00      	nop
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	feff8fff 	.word	0xfeff8fff
 8007150:	40010000 	.word	0x40010000
 8007154:	40010400 	.word	0x40010400

08007158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4b2d      	ldr	r3, [pc, #180]	; (8007238 <TIM_OC3_SetConfig+0xe0>)
 8007184:	4013      	ands	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a22      	ldr	r2, [pc, #136]	; (800723c <TIM_OC3_SetConfig+0xe4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d003      	beq.n	80071be <TIM_OC3_SetConfig+0x66>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a21      	ldr	r2, [pc, #132]	; (8007240 <TIM_OC3_SetConfig+0xe8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d10d      	bne.n	80071da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a17      	ldr	r2, [pc, #92]	; (800723c <TIM_OC3_SetConfig+0xe4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d003      	beq.n	80071ea <TIM_OC3_SetConfig+0x92>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a16      	ldr	r2, [pc, #88]	; (8007240 <TIM_OC3_SetConfig+0xe8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d113      	bne.n	8007212 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	011b      	lsls	r3, r3, #4
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	621a      	str	r2, [r3, #32]
}
 800722c:	bf00      	nop
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	fffeff8f 	.word	0xfffeff8f
 800723c:	40010000 	.word	0x40010000
 8007240:	40010400 	.word	0x40010400

08007244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4b1e      	ldr	r3, [pc, #120]	; (80072e8 <TIM_OC4_SetConfig+0xa4>)
 8007270:	4013      	ands	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800728e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	031b      	lsls	r3, r3, #12
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a13      	ldr	r2, [pc, #76]	; (80072ec <TIM_OC4_SetConfig+0xa8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC4_SetConfig+0x68>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <TIM_OC4_SetConfig+0xac>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d109      	bne.n	80072c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	019b      	lsls	r3, r3, #6
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	feff8fff 	.word	0xfeff8fff
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40010400 	.word	0x40010400

080072f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4b1b      	ldr	r3, [pc, #108]	; (800738c <TIM_OC5_SetConfig+0x98>)
 8007320:	4013      	ands	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007334:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	041b      	lsls	r3, r3, #16
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4313      	orrs	r3, r2
 8007340:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a12      	ldr	r2, [pc, #72]	; (8007390 <TIM_OC5_SetConfig+0x9c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d003      	beq.n	8007352 <TIM_OC5_SetConfig+0x5e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a11      	ldr	r2, [pc, #68]	; (8007394 <TIM_OC5_SetConfig+0xa0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d109      	bne.n	8007366 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007358:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	621a      	str	r2, [r3, #32]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	fffeff8f 	.word	0xfffeff8f
 8007390:	40010000 	.word	0x40010000
 8007394:	40010400 	.word	0x40010400

08007398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <TIM_OC6_SetConfig+0x9c>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	051b      	lsls	r3, r3, #20
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a13      	ldr	r2, [pc, #76]	; (8007438 <TIM_OC6_SetConfig+0xa0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC6_SetConfig+0x60>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a12      	ldr	r2, [pc, #72]	; (800743c <TIM_OC6_SetConfig+0xa4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d109      	bne.n	800740c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	029b      	lsls	r3, r3, #10
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	feff8fff 	.word	0xfeff8fff
 8007438:	40010000 	.word	0x40010000
 800743c:	40010400 	.word	0x40010400

08007440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	f023 0201 	bic.w	r2, r3, #1
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800746a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f023 030a 	bic.w	r3, r3, #10
 800747c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800749e:	b480      	push	{r7}
 80074a0:	b087      	sub	sp, #28
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f023 0210 	bic.w	r2, r3, #16
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	031b      	lsls	r3, r3, #12
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	f043 0307 	orr.w	r3, r3, #7
 8007520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	609a      	str	r2, [r3, #8]
}
 8007528:	bf00      	nop
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800754e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	021a      	lsls	r2, r3, #8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	431a      	orrs	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4313      	orrs	r3, r2
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	609a      	str	r2, [r3, #8]
}
 8007568:	bf00      	nop
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	2201      	movs	r2, #1
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1a      	ldr	r2, [r3, #32]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	43db      	mvns	r3, r3
 8007596:	401a      	ands	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1a      	ldr	r2, [r3, #32]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ac:	431a      	orrs	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
	...

080075c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e06d      	b.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a30      	ldr	r2, [pc, #192]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2f      	ldr	r2, [pc, #188]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007612:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a20      	ldr	r2, [pc, #128]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d022      	beq.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764a:	d01d      	beq.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1d      	ldr	r2, [pc, #116]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d018      	beq.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d013      	beq.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1a      	ldr	r2, [pc, #104]	; (80076d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00e      	beq.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a15      	ldr	r2, [pc, #84]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d009      	beq.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d004      	beq.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d10c      	bne.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800768e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	4313      	orrs	r3, r2
 8007698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	40010000 	.word	0x40010000
 80076c4:	40010400 	.word	0x40010400
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40000c00 	.word	0x40000c00
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40001800 	.word	0x40001800

080076dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e040      	b.n	80077ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fc f916 	bl	800396c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2224      	movs	r2, #36	; 0x24
 8007744:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0201 	bic.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fbe6 	bl	8007f28 <UART_SetConfig>
 800775c:	4603      	mov	r3, r0
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e022      	b.n	80077ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fe3e 	bl	80083f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fec5 	bl	8008534 <UART_CheckIdleState>
 80077aa:	4603      	mov	r3, r0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	4613      	mov	r3, r2
 80077c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	d171      	bne.n	80078b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <HAL_UART_Transmit+0x24>
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e06a      	b.n	80078b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2221      	movs	r2, #33	; 0x21
 80077e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ea:	f7fc f9a1 	bl	8003b30 <HAL_GetTick>
 80077ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	88fa      	ldrh	r2, [r7, #6]
 80077f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007808:	d108      	bne.n	800781c <HAL_UART_Transmit+0x68>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	e003      	b.n	8007824 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007824:	e02c      	b.n	8007880 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2200      	movs	r2, #0
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 feb6 	bl	80085a2 <UART_WaitOnFlagUntilTimeout>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e038      	b.n	80078b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007854:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	3302      	adds	r3, #2
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e007      	b.n	800786e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3301      	adds	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007886:	b29b      	uxth	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1cc      	bne.n	8007826 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2200      	movs	r2, #0
 8007894:	2140      	movs	r1, #64	; 0x40
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fe83 	bl	80085a2 <UART_WaitOnFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e005      	b.n	80078b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2220      	movs	r2, #32
 80078aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	e000      	b.n	80078b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80078b0:	2302      	movs	r3, #2
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b08a      	sub	sp, #40	; 0x28
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	4613      	mov	r3, r2
 80078c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	d132      	bne.n	8007938 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_UART_Receive_IT+0x24>
 80078d8:	88fb      	ldrh	r3, [r7, #6]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e02b      	b.n	800793a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d018      	beq.n	8007928 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	613b      	str	r3, [r7, #16]
   return(result);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	623b      	str	r3, [r7, #32]
 8007916:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	69f9      	ldr	r1, [r7, #28]
 800791a:	6a3a      	ldr	r2, [r7, #32]
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	61bb      	str	r3, [r7, #24]
   return(result);
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e6      	bne.n	80078f6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	461a      	mov	r2, r3
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 fefe 	bl	8008730 <UART_Start_Receive_IT>
 8007934:	4603      	mov	r3, r0
 8007936:	e000      	b.n	800793a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007938:	2302      	movs	r3, #2
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b0ba      	sub	sp, #232	; 0xe8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800796a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800796e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007972:	4013      	ands	r3, r2
 8007974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d115      	bne.n	80079ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00f      	beq.n	80079ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8297 	beq.w	8007ed0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
      }
      return;
 80079aa:	e291      	b.n	8007ed0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8117 	beq.w	8007be4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079c6:	4b85      	ldr	r3, [pc, #532]	; (8007bdc <HAL_UART_IRQHandler+0x298>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 810a 	beq.w	8007be4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d011      	beq.n	8007a00 <HAL_UART_IRQHandler+0xbc>
 80079dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2201      	movs	r2, #1
 80079ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f6:	f043 0201 	orr.w	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d011      	beq.n	8007a30 <HAL_UART_IRQHandler+0xec>
 8007a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a26:	f043 0204 	orr.w	r2, r3, #4
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d011      	beq.n	8007a60 <HAL_UART_IRQHandler+0x11c>
 8007a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2204      	movs	r2, #4
 8007a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a56:	f043 0202 	orr.w	r2, r3, #2
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d017      	beq.n	8007a9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2208      	movs	r2, #8
 8007a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a92:	f043 0208 	orr.w	r2, r3, #8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d012      	beq.n	8007ace <HAL_UART_IRQHandler+0x18a>
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00c      	beq.n	8007ace <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac4:	f043 0220 	orr.w	r2, r3, #32
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 81fd 	beq.w	8007ed4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00d      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d005      	beq.n	8007b26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d04f      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fec8 	bl	80088bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d141      	bne.n	8007bbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1d9      	bne.n	8007b3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d013      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b92:	4a13      	ldr	r2, [pc, #76]	; (8007be0 <HAL_UART_IRQHandler+0x29c>)
 8007b94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fc f979 	bl	8003e92 <HAL_DMA_Abort_IT>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d017      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	e00f      	b.n	8007bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9a0 	bl	8007efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	e00b      	b.n	8007bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f99c 	bl	8007efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc4:	e007      	b.n	8007bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f998 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007bd4:	e17e      	b.n	8007ed4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd6:	bf00      	nop
    return;
 8007bd8:	e17c      	b.n	8007ed4 <HAL_UART_IRQHandler+0x590>
 8007bda:	bf00      	nop
 8007bdc:	04000120 	.word	0x04000120
 8007be0:	08008985 	.word	0x08008985

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	f040 814c 	bne.w	8007e86 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8145 	beq.w	8007e86 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 813e 	beq.w	8007e86 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2210      	movs	r2, #16
 8007c10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1c:	2b40      	cmp	r3, #64	; 0x40
 8007c1e:	f040 80b6 	bne.w	8007d8e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8150 	beq.w	8007ed8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c42:	429a      	cmp	r2, r3
 8007c44:	f080 8148 	bcs.w	8007ed8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5c:	f000 8086 	beq.w	8007d6c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	461a      	mov	r2, r3
 8007c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1da      	bne.n	8007c60 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cbc:	f023 0301 	bic.w	r3, r3, #1
 8007cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e1      	bne.n	8007caa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e3      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3c:	f023 0310 	bic.w	r3, r3, #16
 8007d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e4      	bne.n	8007d2c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fc f823 	bl	8003db2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f8c2 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d8c:	e0a4      	b.n	8007ed8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8096 	beq.w	8007edc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8091 	beq.w	8007edc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e4      	bne.n	8007dba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e14:	633a      	str	r2, [r7, #48]	; 0x30
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e3      	bne.n	8007df0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f023 0310 	bic.w	r3, r3, #16
 8007e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	69b9      	ldr	r1, [r7, #24]
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e4      	bne.n	8007e3c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f846 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e84:	e02a      	b.n	8007edc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00e      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d008      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01c      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
    }
    return;
 8007eae:	e017      	b.n	8007ee0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d012      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x59e>
 8007ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00c      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fd71 	bl	80089b0 <UART_EndTransmit_IT>
    return;
 8007ece:	e008      	b.n	8007ee2 <HAL_UART_IRQHandler+0x59e>
      return;
 8007ed0:	bf00      	nop
 8007ed2:	e006      	b.n	8007ee2 <HAL_UART_IRQHandler+0x59e>
    return;
 8007ed4:	bf00      	nop
 8007ed6:	e004      	b.n	8007ee2 <HAL_UART_IRQHandler+0x59e>
      return;
 8007ed8:	bf00      	nop
 8007eda:	e002      	b.n	8007ee2 <HAL_UART_IRQHandler+0x59e>
      return;
 8007edc:	bf00      	nop
 8007ede:	e000      	b.n	8007ee2 <HAL_UART_IRQHandler+0x59e>
    return;
 8007ee0:	bf00      	nop
  }

}
 8007ee2:	37e8      	adds	r7, #232	; 0xe8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	431a      	orrs	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4ba6      	ldr	r3, [pc, #664]	; (80081ec <UART_SetConfig+0x2c4>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	6979      	ldr	r1, [r7, #20]
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a94      	ldr	r2, [pc, #592]	; (80081f0 <UART_SetConfig+0x2c8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d120      	bne.n	8007fe6 <UART_SetConfig+0xbe>
 8007fa4:	4b93      	ldr	r3, [pc, #588]	; (80081f4 <UART_SetConfig+0x2cc>)
 8007fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d816      	bhi.n	8007fe0 <UART_SetConfig+0xb8>
 8007fb2:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <UART_SetConfig+0x90>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08007fc9 	.word	0x08007fc9
 8007fbc:	08007fd5 	.word	0x08007fd5
 8007fc0:	08007fcf 	.word	0x08007fcf
 8007fc4:	08007fdb 	.word	0x08007fdb
 8007fc8:	2301      	movs	r3, #1
 8007fca:	77fb      	strb	r3, [r7, #31]
 8007fcc:	e150      	b.n	8008270 <UART_SetConfig+0x348>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	77fb      	strb	r3, [r7, #31]
 8007fd2:	e14d      	b.n	8008270 <UART_SetConfig+0x348>
 8007fd4:	2304      	movs	r3, #4
 8007fd6:	77fb      	strb	r3, [r7, #31]
 8007fd8:	e14a      	b.n	8008270 <UART_SetConfig+0x348>
 8007fda:	2308      	movs	r3, #8
 8007fdc:	77fb      	strb	r3, [r7, #31]
 8007fde:	e147      	b.n	8008270 <UART_SetConfig+0x348>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	77fb      	strb	r3, [r7, #31]
 8007fe4:	e144      	b.n	8008270 <UART_SetConfig+0x348>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a83      	ldr	r2, [pc, #524]	; (80081f8 <UART_SetConfig+0x2d0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d132      	bne.n	8008056 <UART_SetConfig+0x12e>
 8007ff0:	4b80      	ldr	r3, [pc, #512]	; (80081f4 <UART_SetConfig+0x2cc>)
 8007ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff6:	f003 030c 	and.w	r3, r3, #12
 8007ffa:	2b0c      	cmp	r3, #12
 8007ffc:	d828      	bhi.n	8008050 <UART_SetConfig+0x128>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0xdc>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008039 	.word	0x08008039
 8008008:	08008051 	.word	0x08008051
 800800c:	08008051 	.word	0x08008051
 8008010:	08008051 	.word	0x08008051
 8008014:	08008045 	.word	0x08008045
 8008018:	08008051 	.word	0x08008051
 800801c:	08008051 	.word	0x08008051
 8008020:	08008051 	.word	0x08008051
 8008024:	0800803f 	.word	0x0800803f
 8008028:	08008051 	.word	0x08008051
 800802c:	08008051 	.word	0x08008051
 8008030:	08008051 	.word	0x08008051
 8008034:	0800804b 	.word	0x0800804b
 8008038:	2300      	movs	r3, #0
 800803a:	77fb      	strb	r3, [r7, #31]
 800803c:	e118      	b.n	8008270 <UART_SetConfig+0x348>
 800803e:	2302      	movs	r3, #2
 8008040:	77fb      	strb	r3, [r7, #31]
 8008042:	e115      	b.n	8008270 <UART_SetConfig+0x348>
 8008044:	2304      	movs	r3, #4
 8008046:	77fb      	strb	r3, [r7, #31]
 8008048:	e112      	b.n	8008270 <UART_SetConfig+0x348>
 800804a:	2308      	movs	r3, #8
 800804c:	77fb      	strb	r3, [r7, #31]
 800804e:	e10f      	b.n	8008270 <UART_SetConfig+0x348>
 8008050:	2310      	movs	r3, #16
 8008052:	77fb      	strb	r3, [r7, #31]
 8008054:	e10c      	b.n	8008270 <UART_SetConfig+0x348>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a68      	ldr	r2, [pc, #416]	; (80081fc <UART_SetConfig+0x2d4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d120      	bne.n	80080a2 <UART_SetConfig+0x17a>
 8008060:	4b64      	ldr	r3, [pc, #400]	; (80081f4 <UART_SetConfig+0x2cc>)
 8008062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800806a:	2b30      	cmp	r3, #48	; 0x30
 800806c:	d013      	beq.n	8008096 <UART_SetConfig+0x16e>
 800806e:	2b30      	cmp	r3, #48	; 0x30
 8008070:	d814      	bhi.n	800809c <UART_SetConfig+0x174>
 8008072:	2b20      	cmp	r3, #32
 8008074:	d009      	beq.n	800808a <UART_SetConfig+0x162>
 8008076:	2b20      	cmp	r3, #32
 8008078:	d810      	bhi.n	800809c <UART_SetConfig+0x174>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <UART_SetConfig+0x15c>
 800807e:	2b10      	cmp	r3, #16
 8008080:	d006      	beq.n	8008090 <UART_SetConfig+0x168>
 8008082:	e00b      	b.n	800809c <UART_SetConfig+0x174>
 8008084:	2300      	movs	r3, #0
 8008086:	77fb      	strb	r3, [r7, #31]
 8008088:	e0f2      	b.n	8008270 <UART_SetConfig+0x348>
 800808a:	2302      	movs	r3, #2
 800808c:	77fb      	strb	r3, [r7, #31]
 800808e:	e0ef      	b.n	8008270 <UART_SetConfig+0x348>
 8008090:	2304      	movs	r3, #4
 8008092:	77fb      	strb	r3, [r7, #31]
 8008094:	e0ec      	b.n	8008270 <UART_SetConfig+0x348>
 8008096:	2308      	movs	r3, #8
 8008098:	77fb      	strb	r3, [r7, #31]
 800809a:	e0e9      	b.n	8008270 <UART_SetConfig+0x348>
 800809c:	2310      	movs	r3, #16
 800809e:	77fb      	strb	r3, [r7, #31]
 80080a0:	e0e6      	b.n	8008270 <UART_SetConfig+0x348>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a56      	ldr	r2, [pc, #344]	; (8008200 <UART_SetConfig+0x2d8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d120      	bne.n	80080ee <UART_SetConfig+0x1c6>
 80080ac:	4b51      	ldr	r3, [pc, #324]	; (80081f4 <UART_SetConfig+0x2cc>)
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080b6:	2bc0      	cmp	r3, #192	; 0xc0
 80080b8:	d013      	beq.n	80080e2 <UART_SetConfig+0x1ba>
 80080ba:	2bc0      	cmp	r3, #192	; 0xc0
 80080bc:	d814      	bhi.n	80080e8 <UART_SetConfig+0x1c0>
 80080be:	2b80      	cmp	r3, #128	; 0x80
 80080c0:	d009      	beq.n	80080d6 <UART_SetConfig+0x1ae>
 80080c2:	2b80      	cmp	r3, #128	; 0x80
 80080c4:	d810      	bhi.n	80080e8 <UART_SetConfig+0x1c0>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <UART_SetConfig+0x1a8>
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d006      	beq.n	80080dc <UART_SetConfig+0x1b4>
 80080ce:	e00b      	b.n	80080e8 <UART_SetConfig+0x1c0>
 80080d0:	2300      	movs	r3, #0
 80080d2:	77fb      	strb	r3, [r7, #31]
 80080d4:	e0cc      	b.n	8008270 <UART_SetConfig+0x348>
 80080d6:	2302      	movs	r3, #2
 80080d8:	77fb      	strb	r3, [r7, #31]
 80080da:	e0c9      	b.n	8008270 <UART_SetConfig+0x348>
 80080dc:	2304      	movs	r3, #4
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e0c6      	b.n	8008270 <UART_SetConfig+0x348>
 80080e2:	2308      	movs	r3, #8
 80080e4:	77fb      	strb	r3, [r7, #31]
 80080e6:	e0c3      	b.n	8008270 <UART_SetConfig+0x348>
 80080e8:	2310      	movs	r3, #16
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e0c0      	b.n	8008270 <UART_SetConfig+0x348>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a44      	ldr	r2, [pc, #272]	; (8008204 <UART_SetConfig+0x2dc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d125      	bne.n	8008144 <UART_SetConfig+0x21c>
 80080f8:	4b3e      	ldr	r3, [pc, #248]	; (80081f4 <UART_SetConfig+0x2cc>)
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008106:	d017      	beq.n	8008138 <UART_SetConfig+0x210>
 8008108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800810c:	d817      	bhi.n	800813e <UART_SetConfig+0x216>
 800810e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008112:	d00b      	beq.n	800812c <UART_SetConfig+0x204>
 8008114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008118:	d811      	bhi.n	800813e <UART_SetConfig+0x216>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <UART_SetConfig+0x1fe>
 800811e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008122:	d006      	beq.n	8008132 <UART_SetConfig+0x20a>
 8008124:	e00b      	b.n	800813e <UART_SetConfig+0x216>
 8008126:	2300      	movs	r3, #0
 8008128:	77fb      	strb	r3, [r7, #31]
 800812a:	e0a1      	b.n	8008270 <UART_SetConfig+0x348>
 800812c:	2302      	movs	r3, #2
 800812e:	77fb      	strb	r3, [r7, #31]
 8008130:	e09e      	b.n	8008270 <UART_SetConfig+0x348>
 8008132:	2304      	movs	r3, #4
 8008134:	77fb      	strb	r3, [r7, #31]
 8008136:	e09b      	b.n	8008270 <UART_SetConfig+0x348>
 8008138:	2308      	movs	r3, #8
 800813a:	77fb      	strb	r3, [r7, #31]
 800813c:	e098      	b.n	8008270 <UART_SetConfig+0x348>
 800813e:	2310      	movs	r3, #16
 8008140:	77fb      	strb	r3, [r7, #31]
 8008142:	e095      	b.n	8008270 <UART_SetConfig+0x348>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a2f      	ldr	r2, [pc, #188]	; (8008208 <UART_SetConfig+0x2e0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d125      	bne.n	800819a <UART_SetConfig+0x272>
 800814e:	4b29      	ldr	r3, [pc, #164]	; (80081f4 <UART_SetConfig+0x2cc>)
 8008150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800815c:	d017      	beq.n	800818e <UART_SetConfig+0x266>
 800815e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008162:	d817      	bhi.n	8008194 <UART_SetConfig+0x26c>
 8008164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008168:	d00b      	beq.n	8008182 <UART_SetConfig+0x25a>
 800816a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816e:	d811      	bhi.n	8008194 <UART_SetConfig+0x26c>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <UART_SetConfig+0x254>
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d006      	beq.n	8008188 <UART_SetConfig+0x260>
 800817a:	e00b      	b.n	8008194 <UART_SetConfig+0x26c>
 800817c:	2301      	movs	r3, #1
 800817e:	77fb      	strb	r3, [r7, #31]
 8008180:	e076      	b.n	8008270 <UART_SetConfig+0x348>
 8008182:	2302      	movs	r3, #2
 8008184:	77fb      	strb	r3, [r7, #31]
 8008186:	e073      	b.n	8008270 <UART_SetConfig+0x348>
 8008188:	2304      	movs	r3, #4
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	e070      	b.n	8008270 <UART_SetConfig+0x348>
 800818e:	2308      	movs	r3, #8
 8008190:	77fb      	strb	r3, [r7, #31]
 8008192:	e06d      	b.n	8008270 <UART_SetConfig+0x348>
 8008194:	2310      	movs	r3, #16
 8008196:	77fb      	strb	r3, [r7, #31]
 8008198:	e06a      	b.n	8008270 <UART_SetConfig+0x348>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1b      	ldr	r2, [pc, #108]	; (800820c <UART_SetConfig+0x2e4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d138      	bne.n	8008216 <UART_SetConfig+0x2ee>
 80081a4:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <UART_SetConfig+0x2cc>)
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80081ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081b2:	d017      	beq.n	80081e4 <UART_SetConfig+0x2bc>
 80081b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081b8:	d82a      	bhi.n	8008210 <UART_SetConfig+0x2e8>
 80081ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081be:	d00b      	beq.n	80081d8 <UART_SetConfig+0x2b0>
 80081c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c4:	d824      	bhi.n	8008210 <UART_SetConfig+0x2e8>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <UART_SetConfig+0x2aa>
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d006      	beq.n	80081de <UART_SetConfig+0x2b6>
 80081d0:	e01e      	b.n	8008210 <UART_SetConfig+0x2e8>
 80081d2:	2300      	movs	r3, #0
 80081d4:	77fb      	strb	r3, [r7, #31]
 80081d6:	e04b      	b.n	8008270 <UART_SetConfig+0x348>
 80081d8:	2302      	movs	r3, #2
 80081da:	77fb      	strb	r3, [r7, #31]
 80081dc:	e048      	b.n	8008270 <UART_SetConfig+0x348>
 80081de:	2304      	movs	r3, #4
 80081e0:	77fb      	strb	r3, [r7, #31]
 80081e2:	e045      	b.n	8008270 <UART_SetConfig+0x348>
 80081e4:	2308      	movs	r3, #8
 80081e6:	77fb      	strb	r3, [r7, #31]
 80081e8:	e042      	b.n	8008270 <UART_SetConfig+0x348>
 80081ea:	bf00      	nop
 80081ec:	efff69f3 	.word	0xefff69f3
 80081f0:	40011000 	.word	0x40011000
 80081f4:	40023800 	.word	0x40023800
 80081f8:	40004400 	.word	0x40004400
 80081fc:	40004800 	.word	0x40004800
 8008200:	40004c00 	.word	0x40004c00
 8008204:	40005000 	.word	0x40005000
 8008208:	40011400 	.word	0x40011400
 800820c:	40007800 	.word	0x40007800
 8008210:	2310      	movs	r3, #16
 8008212:	77fb      	strb	r3, [r7, #31]
 8008214:	e02c      	b.n	8008270 <UART_SetConfig+0x348>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a72      	ldr	r2, [pc, #456]	; (80083e4 <UART_SetConfig+0x4bc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d125      	bne.n	800826c <UART_SetConfig+0x344>
 8008220:	4b71      	ldr	r3, [pc, #452]	; (80083e8 <UART_SetConfig+0x4c0>)
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008226:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800822a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800822e:	d017      	beq.n	8008260 <UART_SetConfig+0x338>
 8008230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008234:	d817      	bhi.n	8008266 <UART_SetConfig+0x33e>
 8008236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800823a:	d00b      	beq.n	8008254 <UART_SetConfig+0x32c>
 800823c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008240:	d811      	bhi.n	8008266 <UART_SetConfig+0x33e>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <UART_SetConfig+0x326>
 8008246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800824a:	d006      	beq.n	800825a <UART_SetConfig+0x332>
 800824c:	e00b      	b.n	8008266 <UART_SetConfig+0x33e>
 800824e:	2300      	movs	r3, #0
 8008250:	77fb      	strb	r3, [r7, #31]
 8008252:	e00d      	b.n	8008270 <UART_SetConfig+0x348>
 8008254:	2302      	movs	r3, #2
 8008256:	77fb      	strb	r3, [r7, #31]
 8008258:	e00a      	b.n	8008270 <UART_SetConfig+0x348>
 800825a:	2304      	movs	r3, #4
 800825c:	77fb      	strb	r3, [r7, #31]
 800825e:	e007      	b.n	8008270 <UART_SetConfig+0x348>
 8008260:	2308      	movs	r3, #8
 8008262:	77fb      	strb	r3, [r7, #31]
 8008264:	e004      	b.n	8008270 <UART_SetConfig+0x348>
 8008266:	2310      	movs	r3, #16
 8008268:	77fb      	strb	r3, [r7, #31]
 800826a:	e001      	b.n	8008270 <UART_SetConfig+0x348>
 800826c:	2310      	movs	r3, #16
 800826e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008278:	d15b      	bne.n	8008332 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800827a:	7ffb      	ldrb	r3, [r7, #31]
 800827c:	2b08      	cmp	r3, #8
 800827e:	d828      	bhi.n	80082d2 <UART_SetConfig+0x3aa>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <UART_SetConfig+0x360>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082ad 	.word	0x080082ad
 800828c:	080082b5 	.word	0x080082b5
 8008290:	080082bd 	.word	0x080082bd
 8008294:	080082d3 	.word	0x080082d3
 8008298:	080082c3 	.word	0x080082c3
 800829c:	080082d3 	.word	0x080082d3
 80082a0:	080082d3 	.word	0x080082d3
 80082a4:	080082d3 	.word	0x080082d3
 80082a8:	080082cb 	.word	0x080082cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ac:	f7fc fd00 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 80082b0:	61b8      	str	r0, [r7, #24]
        break;
 80082b2:	e013      	b.n	80082dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082b4:	f7fc fd10 	bl	8004cd8 <HAL_RCC_GetPCLK2Freq>
 80082b8:	61b8      	str	r0, [r7, #24]
        break;
 80082ba:	e00f      	b.n	80082dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082bc:	4b4b      	ldr	r3, [pc, #300]	; (80083ec <UART_SetConfig+0x4c4>)
 80082be:	61bb      	str	r3, [r7, #24]
        break;
 80082c0:	e00c      	b.n	80082dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082c2:	f7fc fbe3 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 80082c6:	61b8      	str	r0, [r7, #24]
        break;
 80082c8:	e008      	b.n	80082dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ce:	61bb      	str	r3, [r7, #24]
        break;
 80082d0:	e004      	b.n	80082dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	77bb      	strb	r3, [r7, #30]
        break;
 80082da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d074      	beq.n	80083cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	005a      	lsls	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	085b      	lsrs	r3, r3, #1
 80082ec:	441a      	add	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2b0f      	cmp	r3, #15
 80082fc:	d916      	bls.n	800832c <UART_SetConfig+0x404>
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008304:	d212      	bcs.n	800832c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	b29b      	uxth	r3, r3
 800830a:	f023 030f 	bic.w	r3, r3, #15
 800830e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	085b      	lsrs	r3, r3, #1
 8008314:	b29b      	uxth	r3, r3
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	b29a      	uxth	r2, r3
 800831c:	89fb      	ldrh	r3, [r7, #14]
 800831e:	4313      	orrs	r3, r2
 8008320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	89fa      	ldrh	r2, [r7, #14]
 8008328:	60da      	str	r2, [r3, #12]
 800832a:	e04f      	b.n	80083cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	77bb      	strb	r3, [r7, #30]
 8008330:	e04c      	b.n	80083cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008332:	7ffb      	ldrb	r3, [r7, #31]
 8008334:	2b08      	cmp	r3, #8
 8008336:	d828      	bhi.n	800838a <UART_SetConfig+0x462>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <UART_SetConfig+0x418>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008365 	.word	0x08008365
 8008344:	0800836d 	.word	0x0800836d
 8008348:	08008375 	.word	0x08008375
 800834c:	0800838b 	.word	0x0800838b
 8008350:	0800837b 	.word	0x0800837b
 8008354:	0800838b 	.word	0x0800838b
 8008358:	0800838b 	.word	0x0800838b
 800835c:	0800838b 	.word	0x0800838b
 8008360:	08008383 	.word	0x08008383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008364:	f7fc fca4 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8008368:	61b8      	str	r0, [r7, #24]
        break;
 800836a:	e013      	b.n	8008394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800836c:	f7fc fcb4 	bl	8004cd8 <HAL_RCC_GetPCLK2Freq>
 8008370:	61b8      	str	r0, [r7, #24]
        break;
 8008372:	e00f      	b.n	8008394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008374:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <UART_SetConfig+0x4c4>)
 8008376:	61bb      	str	r3, [r7, #24]
        break;
 8008378:	e00c      	b.n	8008394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800837a:	f7fc fb87 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 800837e:	61b8      	str	r0, [r7, #24]
        break;
 8008380:	e008      	b.n	8008394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008386:	61bb      	str	r3, [r7, #24]
        break;
 8008388:	e004      	b.n	8008394 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	77bb      	strb	r3, [r7, #30]
        break;
 8008392:	bf00      	nop
    }

    if (pclk != 0U)
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d018      	beq.n	80083cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	085a      	lsrs	r2, r3, #1
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	441a      	add	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	2b0f      	cmp	r3, #15
 80083b2:	d909      	bls.n	80083c8 <UART_SetConfig+0x4a0>
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ba:	d205      	bcs.n	80083c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	b29a      	uxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60da      	str	r2, [r3, #12]
 80083c6:	e001      	b.n	80083cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80083d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	40007c00 	.word	0x40007c00
 80083e8:	40023800 	.word	0x40023800
 80083ec:	00f42400 	.word	0x00f42400

080083f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01a      	beq.n	8008506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ee:	d10a      	bne.n	8008506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	605a      	str	r2, [r3, #4]
  }
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af02      	add	r7, sp, #8
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008544:	f7fb faf4 	bl	8003b30 <HAL_GetTick>
 8008548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	2b08      	cmp	r3, #8
 8008556:	d10e      	bne.n	8008576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f81b 	bl	80085a2 <UART_WaitOnFlagUntilTimeout>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e011      	b.n	800859a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b09c      	sub	sp, #112	; 0x70
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b2:	e0a7      	b.n	8008704 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ba:	f000 80a3 	beq.w	8008704 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085be:	f7fb fab7 	bl	8003b30 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d302      	bcc.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80085ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d13f      	bne.n	8008654 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085e8:	667b      	str	r3, [r7, #100]	; 0x64
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e6      	bne.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3308      	adds	r3, #8
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	f023 0301 	bic.w	r3, r3, #1
 800861c:	663b      	str	r3, [r7, #96]	; 0x60
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3308      	adds	r3, #8
 8008624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008626:	64ba      	str	r2, [r7, #72]	; 0x48
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800862c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e5      	bne.n	8008606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2220      	movs	r2, #32
 800863e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e068      	b.n	8008726 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d050      	beq.n	8008704 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800866c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008670:	d148      	bne.n	8008704 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800867a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
 800869c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3308      	adds	r3, #8
 80086b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	613b      	str	r3, [r7, #16]
   return(result);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f023 0301 	bic.w	r3, r3, #1
 80086c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086ce:	623a      	str	r2, [r7, #32]
 80086d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	69f9      	ldr	r1, [r7, #28]
 80086d4:	6a3a      	ldr	r2, [r7, #32]
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	61bb      	str	r3, [r7, #24]
   return(result);
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e5      	bne.n	80086ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2220      	movs	r2, #32
 80086e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2220      	movs	r2, #32
 80086ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e010      	b.n	8008726 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	69da      	ldr	r2, [r3, #28]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4013      	ands	r3, r2
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	429a      	cmp	r2, r3
 8008712:	bf0c      	ite	eq
 8008714:	2301      	moveq	r3, #1
 8008716:	2300      	movne	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	429a      	cmp	r2, r3
 8008720:	f43f af48 	beq.w	80085b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3770      	adds	r7, #112	; 0x70
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008730:	b480      	push	{r7}
 8008732:	b097      	sub	sp, #92	; 0x5c
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	88fa      	ldrh	r2, [r7, #6]
 8008748:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008762:	d10e      	bne.n	8008782 <UART_Start_Receive_IT+0x52>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d105      	bne.n	8008778 <UART_Start_Receive_IT+0x48>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008776:	e02d      	b.n	80087d4 <UART_Start_Receive_IT+0xa4>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	22ff      	movs	r2, #255	; 0xff
 800877c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008780:	e028      	b.n	80087d4 <UART_Start_Receive_IT+0xa4>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10d      	bne.n	80087a6 <UART_Start_Receive_IT+0x76>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d104      	bne.n	800879c <UART_Start_Receive_IT+0x6c>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	22ff      	movs	r2, #255	; 0xff
 8008796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800879a:	e01b      	b.n	80087d4 <UART_Start_Receive_IT+0xa4>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	227f      	movs	r2, #127	; 0x7f
 80087a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087a4:	e016      	b.n	80087d4 <UART_Start_Receive_IT+0xa4>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ae:	d10d      	bne.n	80087cc <UART_Start_Receive_IT+0x9c>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d104      	bne.n	80087c2 <UART_Start_Receive_IT+0x92>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	227f      	movs	r2, #127	; 0x7f
 80087bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087c0:	e008      	b.n	80087d4 <UART_Start_Receive_IT+0xa4>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	223f      	movs	r2, #63	; 0x3f
 80087c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087ca:	e003      	b.n	80087d4 <UART_Start_Receive_IT+0xa4>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2222      	movs	r2, #34	; 0x22
 80087e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3308      	adds	r3, #8
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	f043 0301 	orr.w	r3, r3, #1
 80087fa:	657b      	str	r3, [r7, #84]	; 0x54
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3308      	adds	r3, #8
 8008802:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008804:	64ba      	str	r2, [r7, #72]	; 0x48
 8008806:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800880a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e5      	bne.n	80087e4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008820:	d107      	bne.n	8008832 <UART_Start_Receive_IT+0x102>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4a21      	ldr	r2, [pc, #132]	; (80088b4 <UART_Start_Receive_IT+0x184>)
 800882e:	669a      	str	r2, [r3, #104]	; 0x68
 8008830:	e002      	b.n	8008838 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4a20      	ldr	r2, [pc, #128]	; (80088b8 <UART_Start_Receive_IT+0x188>)
 8008836:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d019      	beq.n	8008874 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
 8008860:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e6      	bne.n	8008840 <UART_Start_Receive_IT+0x110>
 8008872:	e018      	b.n	80088a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	613b      	str	r3, [r7, #16]
   return(result);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f043 0320 	orr.w	r3, r3, #32
 8008888:	653b      	str	r3, [r7, #80]	; 0x50
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008892:	623b      	str	r3, [r7, #32]
 8008894:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	69f9      	ldr	r1, [r7, #28]
 8008898:	6a3a      	ldr	r2, [r7, #32]
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	61bb      	str	r3, [r7, #24]
   return(result);
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e6      	bne.n	8008874 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	375c      	adds	r7, #92	; 0x5c
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	08008b6b 	.word	0x08008b6b
 80088b8:	08008a05 	.word	0x08008a05

080088bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088bc:	b480      	push	{r7}
 80088be:	b095      	sub	sp, #84	; 0x54
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e2:	643b      	str	r3, [r7, #64]	; 0x40
 80088e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	61fb      	str	r3, [r7, #28]
   return(result);
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	f023 0301 	bic.w	r3, r3, #1
 800890c:	64bb      	str	r3, [r7, #72]	; 0x48
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800891c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e5      	bne.n	80088f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892e:	2b01      	cmp	r3, #1
 8008930:	d118      	bne.n	8008964 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f023 0310 	bic.w	r3, r3, #16
 8008946:	647b      	str	r3, [r7, #68]	; 0x44
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6979      	ldr	r1, [r7, #20]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	613b      	str	r3, [r7, #16]
   return(result);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e6      	bne.n	8008932 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008978:	bf00      	nop
 800897a:	3754      	adds	r7, #84	; 0x54
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f7ff faaa 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a8:	bf00      	nop
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b088      	sub	sp, #32
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089cc:	61fb      	str	r3, [r7, #28]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6979      	ldr	r1, [r7, #20]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	613b      	str	r3, [r7, #16]
   return(result);
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e6      	bne.n	80089b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fa76 	bl	8007ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089fc:	bf00      	nop
 80089fe:	3720      	adds	r7, #32
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b096      	sub	sp, #88	; 0x58
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a12:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a1c:	2b22      	cmp	r3, #34	; 0x22
 8008a1e:	f040 8098 	bne.w	8008b52 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a30:	b2d9      	uxtb	r1, r3
 8008a32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3c:	400a      	ands	r2, r1
 8008a3e:	b2d2      	uxtb	r2, r2
 8008a40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d17b      	bne.n	8008b62 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	e853 3f00 	ldrex	r3, [r3]
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a88:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a90:	e841 2300 	strex	r3, r2, [r1]
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e6      	bne.n	8008a6a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	f023 0301 	bic.w	r3, r3, #1
 8008ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008abc:	633a      	str	r2, [r7, #48]	; 0x30
 8008abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac4:	e841 2300 	strex	r3, r2, [r1]
 8008ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e5      	bne.n	8008a9c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d12e      	bne.n	8008b4a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0310 	bic.w	r3, r3, #16
 8008b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	69b9      	ldr	r1, [r7, #24]
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e6      	bne.n	8008af2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f003 0310 	and.w	r3, r3, #16
 8008b2e:	2b10      	cmp	r3, #16
 8008b30:	d103      	bne.n	8008b3a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2210      	movs	r2, #16
 8008b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff f9e4 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b48:	e00b      	b.n	8008b62 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7fa f898 	bl	8002c80 <HAL_UART_RxCpltCallback>
}
 8008b50:	e007      	b.n	8008b62 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0208 	orr.w	r2, r2, #8
 8008b60:	619a      	str	r2, [r3, #24]
}
 8008b62:	bf00      	nop
 8008b64:	3758      	adds	r7, #88	; 0x58
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b096      	sub	sp, #88	; 0x58
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b82:	2b22      	cmp	r3, #34	; 0x22
 8008b84:	f040 8098 	bne.w	8008cb8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b96:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b98:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bac:	1c9a      	adds	r2, r3, #2
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d17b      	bne.n	8008cc8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bee:	643b      	str	r3, [r7, #64]	; 0x40
 8008bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e6      	bne.n	8008bd0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3308      	adds	r3, #8
 8008c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3308      	adds	r3, #8
 8008c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e5      	bne.n	8008c02 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d12e      	bne.n	8008cb0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f023 0310 	bic.w	r3, r3, #16
 8008c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c76:	61bb      	str	r3, [r7, #24]
 8008c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6979      	ldr	r1, [r7, #20]
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	613b      	str	r3, [r7, #16]
   return(result);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e6      	bne.n	8008c58 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	d103      	bne.n	8008ca0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2210      	movs	r2, #16
 8008c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff f931 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cae:	e00b      	b.n	8008cc8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7f9 ffe5 	bl	8002c80 <HAL_UART_RxCpltCallback>
}
 8008cb6:	e007      	b.n	8008cc8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0208 	orr.w	r2, r2, #8
 8008cc6:	619a      	str	r2, [r3, #24]
}
 8008cc8:	bf00      	nop
 8008cca:	3758      	adds	r7, #88	; 0x58
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008cd4:	4904      	ldr	r1, [pc, #16]	; (8008ce8 <MX_FATFS_Init+0x18>)
 8008cd6:	4805      	ldr	r0, [pc, #20]	; (8008cec <MX_FATFS_Init+0x1c>)
 8008cd8:	f003 f9ca 	bl	800c070 <FATFS_LinkDriver>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	461a      	mov	r2, r3
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <MX_FATFS_Init+0x20>)
 8008ce2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008ce4:	bf00      	nop
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20002aa0 	.word	0x20002aa0
 8008cec:	20000064 	.word	0x20000064
 8008cf0:	20002a9c 	.word	0x20002a9c

08008cf4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008cf8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008d0e:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <USER_initialize+0x24>)
 8008d10:	2201      	movs	r2, #1
 8008d12:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <USER_initialize+0x24>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	20000061 	.word	0x20000061

08008d2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008d36:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <USER_status+0x24>)
 8008d38:	2201      	movs	r2, #1
 8008d3a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <USER_status+0x24>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	20000061 	.word	0x20000061

08008d54 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008d64:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008d82:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	603a      	str	r2, [r7, #0]
 8008d9a:	71fb      	strb	r3, [r7, #7]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
    return res;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
	...

08008db4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <disk_status+0x30>)
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	79fa      	ldrb	r2, [r7, #7]
 8008dcc:	4905      	ldr	r1, [pc, #20]	; (8008de4 <disk_status+0x30>)
 8008dce:	440a      	add	r2, r1
 8008dd0:	7a12      	ldrb	r2, [r2, #8]
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4798      	blx	r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20002ccc 	.word	0x20002ccc

08008de8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	4a0d      	ldr	r2, [pc, #52]	; (8008e30 <disk_initialize+0x48>)
 8008dfa:	5cd3      	ldrb	r3, [r2, r3]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d111      	bne.n	8008e24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	4a0b      	ldr	r2, [pc, #44]	; (8008e30 <disk_initialize+0x48>)
 8008e04:	2101      	movs	r1, #1
 8008e06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <disk_initialize+0x48>)
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	79fa      	ldrb	r2, [r7, #7]
 8008e16:	4906      	ldr	r1, [pc, #24]	; (8008e30 <disk_initialize+0x48>)
 8008e18:	440a      	add	r2, r1
 8008e1a:	7a12      	ldrb	r2, [r2, #8]
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20002ccc 	.word	0x20002ccc

08008e34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	4a0a      	ldr	r2, [pc, #40]	; (8008e70 <disk_read+0x3c>)
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	689c      	ldr	r4, [r3, #8]
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	4a07      	ldr	r2, [pc, #28]	; (8008e70 <disk_read+0x3c>)
 8008e54:	4413      	add	r3, r2
 8008e56:	7a18      	ldrb	r0, [r3, #8]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	47a0      	blx	r4
 8008e60:	4603      	mov	r3, r0
 8008e62:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd90      	pop	{r4, r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20002ccc 	.word	0x20002ccc

08008e74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008e74:	b590      	push	{r4, r7, lr}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	4a0a      	ldr	r2, [pc, #40]	; (8008eb0 <disk_write+0x3c>)
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	68dc      	ldr	r4, [r3, #12]
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4a07      	ldr	r2, [pc, #28]	; (8008eb0 <disk_write+0x3c>)
 8008e94:	4413      	add	r3, r2
 8008e96:	7a18      	ldrb	r0, [r3, #8]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	47a0      	blx	r4
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd90      	pop	{r4, r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	20002ccc 	.word	0x20002ccc

08008eb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	603a      	str	r2, [r7, #0]
 8008ebe:	71fb      	strb	r3, [r7, #7]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	4a09      	ldr	r2, [pc, #36]	; (8008eec <disk_ioctl+0x38>)
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	79fa      	ldrb	r2, [r7, #7]
 8008ed2:	4906      	ldr	r1, [pc, #24]	; (8008eec <disk_ioctl+0x38>)
 8008ed4:	440a      	add	r2, r1
 8008ed6:	7a10      	ldrb	r0, [r2, #8]
 8008ed8:	79b9      	ldrb	r1, [r7, #6]
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	4798      	blx	r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	20002ccc 	.word	0x20002ccc

08008ef0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3301      	adds	r3, #1
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008f00:	89fb      	ldrh	r3, [r7, #14]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	b21a      	sxth	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	b21b      	sxth	r3, r3
 8008f10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008f12:	89fb      	ldrh	r3, [r7, #14]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3303      	adds	r3, #3
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	3202      	adds	r2, #2
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	3201      	adds	r2, #1
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	7812      	ldrb	r2, [r2, #0]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
	return rv;
 8008f58:	68fb      	ldr	r3, [r7, #12]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008f66:	b480      	push	{r7}
 8008f68:	b083      	sub	sp, #12
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	887a      	ldrh	r2, [r7, #2]
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	887b      	ldrh	r3, [r7, #2]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	607a      	str	r2, [r7, #4]
 8008f8a:	887a      	ldrh	r2, [r7, #2]
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	701a      	strb	r2, [r3, #0]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	0a1b      	lsrs	r3, r3, #8
 8008fb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	1c5a      	adds	r2, r3, #1
 8008fbc:	607a      	str	r2, [r7, #4]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	b2d2      	uxtb	r2, r2
 8008fc2:	701a      	strb	r2, [r3, #0]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	0a1b      	lsrs	r3, r3, #8
 8008fc8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	701a      	strb	r2, [r3, #0]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	0a1b      	lsrs	r3, r3, #8
 8008fda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	701a      	strb	r2, [r3, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00d      	beq.n	800902a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	1c53      	adds	r3, r2, #1
 8009012:	613b      	str	r3, [r7, #16]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	1c59      	adds	r1, r3, #1
 8009018:	6179      	str	r1, [r7, #20]
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3b01      	subs	r3, #1
 8009022:	607b      	str	r3, [r7, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f1      	bne.n	800900e <mem_cpy+0x1a>
	}
}
 800902a:	bf00      	nop
 800902c:	371c      	adds	r7, #28
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009036:	b480      	push	{r7}
 8009038:	b087      	sub	sp, #28
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	617a      	str	r2, [r7, #20]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3b01      	subs	r3, #1
 8009056:	607b      	str	r3, [r7, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f3      	bne.n	8009046 <mem_set+0x10>
}
 800905e:	bf00      	nop
 8009060:	bf00      	nop
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800906c:	b480      	push	{r7}
 800906e:	b089      	sub	sp, #36	; 0x24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	61fa      	str	r2, [r7, #28]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	4619      	mov	r1, r3
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	61ba      	str	r2, [r7, #24]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	1acb      	subs	r3, r1, r3
 8009098:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3b01      	subs	r3, #1
 800909e:	607b      	str	r3, [r7, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <mem_cmp+0x40>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0eb      	beq.n	8009084 <mem_cmp+0x18>

	return r;
 80090ac:	697b      	ldr	r3, [r7, #20]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3724      	adds	r7, #36	; 0x24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80090c4:	e002      	b.n	80090cc <chk_chr+0x12>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	3301      	adds	r3, #1
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <chk_chr+0x26>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	4293      	cmp	r3, r2
 80090de:	d1f2      	bne.n	80090c6 <chk_chr+0xc>
	return *str;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	781b      	ldrb	r3, [r3, #0]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090fa:	2300      	movs	r3, #0
 80090fc:	60bb      	str	r3, [r7, #8]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	e029      	b.n	8009158 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009104:	4a27      	ldr	r2, [pc, #156]	; (80091a4 <chk_lock+0xb4>)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	4413      	add	r3, r2
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01d      	beq.n	800914e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009112:	4a24      	ldr	r2, [pc, #144]	; (80091a4 <chk_lock+0xb4>)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	011b      	lsls	r3, r3, #4
 8009118:	4413      	add	r3, r2
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d116      	bne.n	8009152 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009124:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <chk_lock+0xb4>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	4413      	add	r3, r2
 800912c:	3304      	adds	r3, #4
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009134:	429a      	cmp	r2, r3
 8009136:	d10c      	bne.n	8009152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009138:	4a1a      	ldr	r2, [pc, #104]	; (80091a4 <chk_lock+0xb4>)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	4413      	add	r3, r2
 8009140:	3308      	adds	r3, #8
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009148:	429a      	cmp	r2, r3
 800914a:	d102      	bne.n	8009152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800914c:	e007      	b.n	800915e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800914e:	2301      	movs	r3, #1
 8009150:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d9d2      	bls.n	8009104 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b02      	cmp	r3, #2
 8009162:	d109      	bne.n	8009178 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d102      	bne.n	8009170 <chk_lock+0x80>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d101      	bne.n	8009174 <chk_lock+0x84>
 8009170:	2300      	movs	r3, #0
 8009172:	e010      	b.n	8009196 <chk_lock+0xa6>
 8009174:	2312      	movs	r3, #18
 8009176:	e00e      	b.n	8009196 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d108      	bne.n	8009190 <chk_lock+0xa0>
 800917e:	4a09      	ldr	r2, [pc, #36]	; (80091a4 <chk_lock+0xb4>)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	4413      	add	r3, r2
 8009186:	330c      	adds	r3, #12
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800918e:	d101      	bne.n	8009194 <chk_lock+0xa4>
 8009190:	2310      	movs	r3, #16
 8009192:	e000      	b.n	8009196 <chk_lock+0xa6>
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20002aac 	.word	0x20002aac

080091a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80091ae:	2300      	movs	r3, #0
 80091b0:	607b      	str	r3, [r7, #4]
 80091b2:	e002      	b.n	80091ba <enq_lock+0x12>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3301      	adds	r3, #1
 80091b8:	607b      	str	r3, [r7, #4]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d806      	bhi.n	80091ce <enq_lock+0x26>
 80091c0:	4a09      	ldr	r2, [pc, #36]	; (80091e8 <enq_lock+0x40>)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	4413      	add	r3, r2
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1f2      	bne.n	80091b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	bf14      	ite	ne
 80091d4:	2301      	movne	r3, #1
 80091d6:	2300      	moveq	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
}
 80091da:	4618      	mov	r0, r3
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20002aac 	.word	0x20002aac

080091ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	e01f      	b.n	800923c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80091fc:	4a41      	ldr	r2, [pc, #260]	; (8009304 <inc_lock+0x118>)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	4413      	add	r3, r2
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d113      	bne.n	8009236 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800920e:	4a3d      	ldr	r2, [pc, #244]	; (8009304 <inc_lock+0x118>)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	4413      	add	r3, r2
 8009216:	3304      	adds	r3, #4
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800921e:	429a      	cmp	r2, r3
 8009220:	d109      	bne.n	8009236 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009222:	4a38      	ldr	r2, [pc, #224]	; (8009304 <inc_lock+0x118>)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	011b      	lsls	r3, r3, #4
 8009228:	4413      	add	r3, r2
 800922a:	3308      	adds	r3, #8
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009232:	429a      	cmp	r2, r3
 8009234:	d006      	beq.n	8009244 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3301      	adds	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d9dc      	bls.n	80091fc <inc_lock+0x10>
 8009242:	e000      	b.n	8009246 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009244:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d132      	bne.n	80092b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	e002      	b.n	8009258 <inc_lock+0x6c>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d806      	bhi.n	800926c <inc_lock+0x80>
 800925e:	4a29      	ldr	r2, [pc, #164]	; (8009304 <inc_lock+0x118>)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	4413      	add	r3, r2
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1f2      	bne.n	8009252 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d101      	bne.n	8009276 <inc_lock+0x8a>
 8009272:	2300      	movs	r3, #0
 8009274:	e040      	b.n	80092f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4922      	ldr	r1, [pc, #136]	; (8009304 <inc_lock+0x118>)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	440b      	add	r3, r1
 8009282:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	491e      	ldr	r1, [pc, #120]	; (8009304 <inc_lock+0x118>)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	011b      	lsls	r3, r3, #4
 800928e:	440b      	add	r3, r1
 8009290:	3304      	adds	r3, #4
 8009292:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	695a      	ldr	r2, [r3, #20]
 8009298:	491a      	ldr	r1, [pc, #104]	; (8009304 <inc_lock+0x118>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	440b      	add	r3, r1
 80092a0:	3308      	adds	r3, #8
 80092a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80092a4:	4a17      	ldr	r2, [pc, #92]	; (8009304 <inc_lock+0x118>)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	4413      	add	r3, r2
 80092ac:	330c      	adds	r3, #12
 80092ae:	2200      	movs	r2, #0
 80092b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <inc_lock+0xe0>
 80092b8:	4a12      	ldr	r2, [pc, #72]	; (8009304 <inc_lock+0x118>)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	4413      	add	r3, r2
 80092c0:	330c      	adds	r3, #12
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <inc_lock+0xe0>
 80092c8:	2300      	movs	r3, #0
 80092ca:	e015      	b.n	80092f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d108      	bne.n	80092e4 <inc_lock+0xf8>
 80092d2:	4a0c      	ldr	r2, [pc, #48]	; (8009304 <inc_lock+0x118>)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	4413      	add	r3, r2
 80092da:	330c      	adds	r3, #12
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	e001      	b.n	80092e8 <inc_lock+0xfc>
 80092e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092e8:	4906      	ldr	r1, [pc, #24]	; (8009304 <inc_lock+0x118>)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	440b      	add	r3, r1
 80092f0:	330c      	adds	r3, #12
 80092f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	20002aac 	.word	0x20002aac

08009308 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3b01      	subs	r3, #1
 8009314:	607b      	str	r3, [r7, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d825      	bhi.n	8009368 <dec_lock+0x60>
		n = Files[i].ctr;
 800931c:	4a17      	ldr	r2, [pc, #92]	; (800937c <dec_lock+0x74>)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	4413      	add	r3, r2
 8009324:	330c      	adds	r3, #12
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800932a:	89fb      	ldrh	r3, [r7, #14]
 800932c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009330:	d101      	bne.n	8009336 <dec_lock+0x2e>
 8009332:	2300      	movs	r3, #0
 8009334:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009336:	89fb      	ldrh	r3, [r7, #14]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <dec_lock+0x3a>
 800933c:	89fb      	ldrh	r3, [r7, #14]
 800933e:	3b01      	subs	r3, #1
 8009340:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009342:	4a0e      	ldr	r2, [pc, #56]	; (800937c <dec_lock+0x74>)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	4413      	add	r3, r2
 800934a:	330c      	adds	r3, #12
 800934c:	89fa      	ldrh	r2, [r7, #14]
 800934e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009350:	89fb      	ldrh	r3, [r7, #14]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <dec_lock+0x5a>
 8009356:	4a09      	ldr	r2, [pc, #36]	; (800937c <dec_lock+0x74>)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	4413      	add	r3, r2
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	737b      	strb	r3, [r7, #13]
 8009366:	e001      	b.n	800936c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009368:	2302      	movs	r3, #2
 800936a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800936c:	7b7b      	ldrb	r3, [r7, #13]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20002aac 	.word	0x20002aac

08009380 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	e010      	b.n	80093b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800938e:	4a0d      	ldr	r2, [pc, #52]	; (80093c4 <clear_lock+0x44>)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	011b      	lsls	r3, r3, #4
 8009394:	4413      	add	r3, r2
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	429a      	cmp	r2, r3
 800939c:	d105      	bne.n	80093aa <clear_lock+0x2a>
 800939e:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <clear_lock+0x44>)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	4413      	add	r3, r2
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3301      	adds	r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d9eb      	bls.n	800938e <clear_lock+0xe>
	}
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	20002aac 	.word	0x20002aac

080093c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	78db      	ldrb	r3, [r3, #3]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d034      	beq.n	8009446 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	7858      	ldrb	r0, [r3, #1]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093ec:	2301      	movs	r3, #1
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	f7ff fd40 	bl	8008e74 <disk_write>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <sync_window+0x38>
			res = FR_DISK_ERR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	73fb      	strb	r3, [r7, #15]
 80093fe:	e022      	b.n	8009446 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	1ad2      	subs	r2, r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	429a      	cmp	r2, r3
 8009414:	d217      	bcs.n	8009446 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	789b      	ldrb	r3, [r3, #2]
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	e010      	b.n	8009440 <sync_window+0x78>
					wsect += fs->fsize;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4413      	add	r3, r2
 8009426:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	7858      	ldrb	r0, [r3, #1]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009432:	2301      	movs	r3, #1
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	f7ff fd1d 	bl	8008e74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3b01      	subs	r3, #1
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d8eb      	bhi.n	800941e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d01b      	beq.n	80094a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff ffad 	bl	80093c8 <sync_window>
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d113      	bne.n	80094a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7858      	ldrb	r0, [r3, #1]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009482:	2301      	movs	r3, #1
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	f7ff fcd5 	bl	8008e34 <disk_read>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009490:	f04f 33ff 	mov.w	r3, #4294967295
 8009494:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009496:	2301      	movs	r3, #1
 8009498:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff ff87 	bl	80093c8 <sync_window>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d159      	bne.n	8009578 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d149      	bne.n	8009560 <sync_fs+0xb4>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	791b      	ldrb	r3, [r3, #4]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d145      	bne.n	8009560 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	899b      	ldrh	r3, [r3, #12]
 80094de:	461a      	mov	r2, r3
 80094e0:	2100      	movs	r1, #0
 80094e2:	f7ff fda8 	bl	8009036 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3338      	adds	r3, #56	; 0x38
 80094ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094ee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fd37 	bl	8008f66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3338      	adds	r3, #56	; 0x38
 80094fc:	4921      	ldr	r1, [pc, #132]	; (8009584 <sync_fs+0xd8>)
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff fd4c 	bl	8008f9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3338      	adds	r3, #56	; 0x38
 8009508:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800950c:	491e      	ldr	r1, [pc, #120]	; (8009588 <sync_fs+0xdc>)
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff fd44 	bl	8008f9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3338      	adds	r3, #56	; 0x38
 8009518:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7ff fd3a 	bl	8008f9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3338      	adds	r3, #56	; 0x38
 800952c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f7ff fd30 	bl	8008f9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7858      	ldrb	r0, [r3, #1]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009554:	2301      	movs	r3, #1
 8009556:	f7ff fc8d 	bl	8008e74 <disk_write>
			fs->fsi_flag = 0;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2200      	movs	r2, #0
 8009566:	2100      	movs	r1, #0
 8009568:	4618      	mov	r0, r3
 800956a:	f7ff fca3 	bl	8008eb4 <disk_ioctl>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <sync_fs+0xcc>
 8009574:	2301      	movs	r3, #1
 8009576:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	41615252 	.word	0x41615252
 8009588:	61417272 	.word	0x61417272

0800958c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	3b02      	subs	r3, #2
 800959a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	3b02      	subs	r3, #2
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d301      	bcc.n	80095ac <clust2sect+0x20>
 80095a8:	2300      	movs	r3, #0
 80095aa:	e008      	b.n	80095be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	895b      	ldrh	r3, [r3, #10]
 80095b0:	461a      	mov	r2, r3
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	fb03 f202 	mul.w	r2, r3, r2
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095bc:	4413      	add	r3, r2
}
 80095be:	4618      	mov	r0, r3
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d904      	bls.n	80095ea <get_fat+0x20>
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d302      	bcc.n	80095f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80095ea:	2301      	movs	r3, #1
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	e0bb      	b.n	8009768 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80095f0:	f04f 33ff 	mov.w	r3, #4294967295
 80095f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	f000 8083 	beq.w	8009706 <get_fat+0x13c>
 8009600:	2b03      	cmp	r3, #3
 8009602:	f300 80a7 	bgt.w	8009754 <get_fat+0x18a>
 8009606:	2b01      	cmp	r3, #1
 8009608:	d002      	beq.n	8009610 <get_fat+0x46>
 800960a:	2b02      	cmp	r3, #2
 800960c:	d056      	beq.n	80096bc <get_fat+0xf2>
 800960e:	e0a1      	b.n	8009754 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	60fb      	str	r3, [r7, #12]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	085b      	lsrs	r3, r3, #1
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4413      	add	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	899b      	ldrh	r3, [r3, #12]
 8009626:	4619      	mov	r1, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	fbb3 f3f1 	udiv	r3, r3, r1
 800962e:	4413      	add	r3, r2
 8009630:	4619      	mov	r1, r3
 8009632:	6938      	ldr	r0, [r7, #16]
 8009634:	f7ff ff0c 	bl	8009450 <move_window>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	f040 808d 	bne.w	800975a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	60fa      	str	r2, [r7, #12]
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	8992      	ldrh	r2, [r2, #12]
 800964a:	fbb3 f1f2 	udiv	r1, r3, r2
 800964e:	fb01 f202 	mul.w	r2, r1, r2
 8009652:	1a9b      	subs	r3, r3, r2
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4413      	add	r3, r2
 8009658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800965c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	899b      	ldrh	r3, [r3, #12]
 8009666:	4619      	mov	r1, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	fbb3 f3f1 	udiv	r3, r3, r1
 800966e:	4413      	add	r3, r2
 8009670:	4619      	mov	r1, r3
 8009672:	6938      	ldr	r0, [r7, #16]
 8009674:	f7ff feec 	bl	8009450 <move_window>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d16f      	bne.n	800975e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	899b      	ldrh	r3, [r3, #12]
 8009682:	461a      	mov	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	fbb3 f1f2 	udiv	r1, r3, r2
 800968a:	fb01 f202 	mul.w	r2, r1, r2
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4413      	add	r3, r2
 8009694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009698:	021b      	lsls	r3, r3, #8
 800969a:	461a      	mov	r2, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4313      	orrs	r3, r2
 80096a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <get_fat+0xe8>
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	091b      	lsrs	r3, r3, #4
 80096b0:	e002      	b.n	80096b8 <get_fat+0xee>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096b8:	617b      	str	r3, [r7, #20]
			break;
 80096ba:	e055      	b.n	8009768 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	899b      	ldrh	r3, [r3, #12]
 80096c4:	085b      	lsrs	r3, r3, #1
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4619      	mov	r1, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80096d0:	4413      	add	r3, r2
 80096d2:	4619      	mov	r1, r3
 80096d4:	6938      	ldr	r0, [r7, #16]
 80096d6:	f7ff febb 	bl	8009450 <move_window>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d140      	bne.n	8009762 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	8992      	ldrh	r2, [r2, #12]
 80096ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80096f2:	fb00 f202 	mul.w	r2, r0, r2
 80096f6:	1a9b      	subs	r3, r3, r2
 80096f8:	440b      	add	r3, r1
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff fbf8 	bl	8008ef0 <ld_word>
 8009700:	4603      	mov	r3, r0
 8009702:	617b      	str	r3, [r7, #20]
			break;
 8009704:	e030      	b.n	8009768 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	899b      	ldrh	r3, [r3, #12]
 800970e:	089b      	lsrs	r3, r3, #2
 8009710:	b29b      	uxth	r3, r3
 8009712:	4619      	mov	r1, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	fbb3 f3f1 	udiv	r3, r3, r1
 800971a:	4413      	add	r3, r2
 800971c:	4619      	mov	r1, r3
 800971e:	6938      	ldr	r0, [r7, #16]
 8009720:	f7ff fe96 	bl	8009450 <move_window>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d11d      	bne.n	8009766 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	8992      	ldrh	r2, [r2, #12]
 8009738:	fbb3 f0f2 	udiv	r0, r3, r2
 800973c:	fb00 f202 	mul.w	r2, r0, r2
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	440b      	add	r3, r1
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff fbeb 	bl	8008f20 <ld_dword>
 800974a:	4603      	mov	r3, r0
 800974c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009750:	617b      	str	r3, [r7, #20]
			break;
 8009752:	e009      	b.n	8009768 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009754:	2301      	movs	r3, #1
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	e006      	b.n	8009768 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800975a:	bf00      	nop
 800975c:	e004      	b.n	8009768 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800975e:	bf00      	nop
 8009760:	e002      	b.n	8009768 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009762:	bf00      	nop
 8009764:	e000      	b.n	8009768 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009766:	bf00      	nop
		}
	}

	return val;
 8009768:	697b      	ldr	r3, [r7, #20]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009772:	b590      	push	{r4, r7, lr}
 8009774:	b089      	sub	sp, #36	; 0x24
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800977e:	2302      	movs	r3, #2
 8009780:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2b01      	cmp	r3, #1
 8009786:	f240 8109 	bls.w	800999c <put_fat+0x22a>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	429a      	cmp	r2, r3
 8009792:	f080 8103 	bcs.w	800999c <put_fat+0x22a>
		switch (fs->fs_type) {
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b03      	cmp	r3, #3
 800979c:	f000 80b6 	beq.w	800990c <put_fat+0x19a>
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	f300 80fb 	bgt.w	800999c <put_fat+0x22a>
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d003      	beq.n	80097b2 <put_fat+0x40>
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	f000 8083 	beq.w	80098b6 <put_fat+0x144>
 80097b0:	e0f4      	b.n	800999c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	085b      	lsrs	r3, r3, #1
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	4413      	add	r3, r2
 80097be:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	899b      	ldrh	r3, [r3, #12]
 80097c8:	4619      	mov	r1, r3
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80097d0:	4413      	add	r3, r2
 80097d2:	4619      	mov	r1, r3
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7ff fe3b 	bl	8009450 <move_window>
 80097da:	4603      	mov	r3, r0
 80097dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097de:	7ffb      	ldrb	r3, [r7, #31]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f040 80d4 	bne.w	800998e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	61ba      	str	r2, [r7, #24]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	8992      	ldrh	r2, [r2, #12]
 80097f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80097fa:	fb00 f202 	mul.w	r2, r0, r2
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	440b      	add	r3, r1
 8009802:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00d      	beq.n	800982a <put_fat+0xb8>
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	b25b      	sxtb	r3, r3
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	b25a      	sxtb	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	b25b      	sxtb	r3, r3
 8009822:	4313      	orrs	r3, r2
 8009824:	b25b      	sxtb	r3, r3
 8009826:	b2db      	uxtb	r3, r3
 8009828:	e001      	b.n	800982e <put_fat+0xbc>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	899b      	ldrh	r3, [r3, #12]
 8009840:	4619      	mov	r1, r3
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	fbb3 f3f1 	udiv	r3, r3, r1
 8009848:	4413      	add	r3, r2
 800984a:	4619      	mov	r1, r3
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff fdff 	bl	8009450 <move_window>
 8009852:	4603      	mov	r3, r0
 8009854:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009856:	7ffb      	ldrb	r3, [r7, #31]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f040 809a 	bne.w	8009992 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	899b      	ldrh	r3, [r3, #12]
 8009868:	461a      	mov	r2, r3
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009870:	fb00 f202 	mul.w	r2, r0, r2
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	440b      	add	r3, r1
 8009878:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <put_fat+0x11a>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	091b      	lsrs	r3, r3, #4
 8009888:	b2db      	uxtb	r3, r3
 800988a:	e00e      	b.n	80098aa <put_fat+0x138>
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	b25b      	sxtb	r3, r3
 8009892:	f023 030f 	bic.w	r3, r3, #15
 8009896:	b25a      	sxtb	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	0a1b      	lsrs	r3, r3, #8
 800989c:	b25b      	sxtb	r3, r3
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	b25b      	sxtb	r3, r3
 80098a4:	4313      	orrs	r3, r2
 80098a6:	b25b      	sxtb	r3, r3
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2201      	movs	r2, #1
 80098b2:	70da      	strb	r2, [r3, #3]
			break;
 80098b4:	e072      	b.n	800999c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	899b      	ldrh	r3, [r3, #12]
 80098be:	085b      	lsrs	r3, r3, #1
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	4619      	mov	r1, r3
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ca:	4413      	add	r3, r2
 80098cc:	4619      	mov	r1, r3
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7ff fdbe 	bl	8009450 <move_window>
 80098d4:	4603      	mov	r3, r0
 80098d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098d8:	7ffb      	ldrb	r3, [r7, #31]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d15b      	bne.n	8009996 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	8992      	ldrh	r2, [r2, #12]
 80098ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80098f0:	fb00 f202 	mul.w	r2, r0, r2
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	440b      	add	r3, r1
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	b292      	uxth	r2, r2
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff fb31 	bl	8008f66 <st_word>
			fs->wflag = 1;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2201      	movs	r2, #1
 8009908:	70da      	strb	r2, [r3, #3]
			break;
 800990a:	e047      	b.n	800999c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	899b      	ldrh	r3, [r3, #12]
 8009914:	089b      	lsrs	r3, r3, #2
 8009916:	b29b      	uxth	r3, r3
 8009918:	4619      	mov	r1, r3
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009920:	4413      	add	r3, r2
 8009922:	4619      	mov	r1, r3
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff fd93 	bl	8009450 <move_window>
 800992a:	4603      	mov	r3, r0
 800992c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800992e:	7ffb      	ldrb	r3, [r7, #31]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d132      	bne.n	800999a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	8992      	ldrh	r2, [r2, #12]
 8009948:	fbb3 f0f2 	udiv	r0, r3, r2
 800994c:	fb00 f202 	mul.w	r2, r0, r2
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	440b      	add	r3, r1
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff fae3 	bl	8008f20 <ld_dword>
 800995a:	4603      	mov	r3, r0
 800995c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009960:	4323      	orrs	r3, r4
 8009962:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	8992      	ldrh	r2, [r2, #12]
 8009972:	fbb3 f0f2 	udiv	r0, r3, r2
 8009976:	fb00 f202 	mul.w	r2, r0, r2
 800997a:	1a9b      	subs	r3, r3, r2
 800997c:	440b      	add	r3, r1
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff fb0b 	bl	8008f9c <st_dword>
			fs->wflag = 1;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2201      	movs	r2, #1
 800998a:	70da      	strb	r2, [r3, #3]
			break;
 800998c:	e006      	b.n	800999c <put_fat+0x22a>
			if (res != FR_OK) break;
 800998e:	bf00      	nop
 8009990:	e004      	b.n	800999c <put_fat+0x22a>
			if (res != FR_OK) break;
 8009992:	bf00      	nop
 8009994:	e002      	b.n	800999c <put_fat+0x22a>
			if (res != FR_OK) break;
 8009996:	bf00      	nop
 8009998:	e000      	b.n	800999c <put_fat+0x22a>
			if (res != FR_OK) break;
 800999a:	bf00      	nop
		}
	}
	return res;
 800999c:	7ffb      	ldrb	r3, [r7, #31]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3724      	adds	r7, #36	; 0x24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd90      	pop	{r4, r7, pc}

080099a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b088      	sub	sp, #32
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d904      	bls.n	80099cc <remove_chain+0x26>
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d301      	bcc.n	80099d0 <remove_chain+0x2a>
 80099cc:	2302      	movs	r3, #2
 80099ce:	e04b      	b.n	8009a68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00c      	beq.n	80099f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	69b8      	ldr	r0, [r7, #24]
 80099de:	f7ff fec8 	bl	8009772 <put_fat>
 80099e2:	4603      	mov	r3, r0
 80099e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80099e6:	7ffb      	ldrb	r3, [r7, #31]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <remove_chain+0x4a>
 80099ec:	7ffb      	ldrb	r3, [r7, #31]
 80099ee:	e03b      	b.n	8009a68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff fde9 	bl	80095ca <get_fat>
 80099f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d031      	beq.n	8009a64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <remove_chain+0x64>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e02e      	b.n	8009a68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d101      	bne.n	8009a16 <remove_chain+0x70>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e028      	b.n	8009a68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009a16:	2200      	movs	r2, #0
 8009a18:	68b9      	ldr	r1, [r7, #8]
 8009a1a:	69b8      	ldr	r0, [r7, #24]
 8009a1c:	f7ff fea9 	bl	8009772 <put_fat>
 8009a20:	4603      	mov	r3, r0
 8009a22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009a24:	7ffb      	ldrb	r3, [r7, #31]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <remove_chain+0x88>
 8009a2a:	7ffb      	ldrb	r3, [r7, #31]
 8009a2c:	e01c      	b.n	8009a68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	3b02      	subs	r3, #2
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d20b      	bcs.n	8009a54 <remove_chain+0xae>
			fs->free_clst++;
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	791b      	ldrb	r3, [r3, #4]
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d3c6      	bcc.n	80099f0 <remove_chain+0x4a>
 8009a62:	e000      	b.n	8009a66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009a64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3720      	adds	r7, #32
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10d      	bne.n	8009aa2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d004      	beq.n	8009a9c <create_chain+0x2c>
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d31b      	bcc.n	8009ad4 <create_chain+0x64>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	e018      	b.n	8009ad4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fd90 	bl	80095ca <get_fat>
 8009aaa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d801      	bhi.n	8009ab6 <create_chain+0x46>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e070      	b.n	8009b98 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d101      	bne.n	8009ac2 <create_chain+0x52>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	e06a      	b.n	8009b98 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d201      	bcs.n	8009ad0 <create_chain+0x60>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	e063      	b.n	8009b98 <create_chain+0x128>
		scl = clst;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	3301      	adds	r3, #1
 8009adc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	69fa      	ldr	r2, [r7, #28]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d307      	bcc.n	8009af8 <create_chain+0x88>
				ncl = 2;
 8009ae8:	2302      	movs	r3, #2
 8009aea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009aec:	69fa      	ldr	r2, [r7, #28]
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d901      	bls.n	8009af8 <create_chain+0x88>
 8009af4:	2300      	movs	r3, #0
 8009af6:	e04f      	b.n	8009b98 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009af8:	69f9      	ldr	r1, [r7, #28]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff fd65 	bl	80095ca <get_fat>
 8009b00:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00e      	beq.n	8009b26 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d003      	beq.n	8009b16 <create_chain+0xa6>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b14:	d101      	bne.n	8009b1a <create_chain+0xaa>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	e03e      	b.n	8009b98 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009b1a:	69fa      	ldr	r2, [r7, #28]
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d1da      	bne.n	8009ad8 <create_chain+0x68>
 8009b22:	2300      	movs	r3, #0
 8009b24:	e038      	b.n	8009b98 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009b26:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	69f9      	ldr	r1, [r7, #28]
 8009b2e:	6938      	ldr	r0, [r7, #16]
 8009b30:	f7ff fe1f 	bl	8009772 <put_fat>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d109      	bne.n	8009b52 <create_chain+0xe2>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d006      	beq.n	8009b52 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009b44:	69fa      	ldr	r2, [r7, #28]
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6938      	ldr	r0, [r7, #16]
 8009b4a:	f7ff fe12 	bl	8009772 <put_fat>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d116      	bne.n	8009b86 <create_chain+0x116>
		fs->last_clst = ncl;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	3b02      	subs	r3, #2
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d804      	bhi.n	8009b76 <create_chain+0x106>
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	1e5a      	subs	r2, r3, #1
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	791b      	ldrb	r3, [r3, #4]
 8009b7a:	f043 0301 	orr.w	r3, r3, #1
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	711a      	strb	r2, [r3, #4]
 8009b84:	e007      	b.n	8009b96 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d102      	bne.n	8009b92 <create_chain+0x122>
 8009b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b90:	e000      	b.n	8009b94 <create_chain+0x124>
 8009b92:	2301      	movs	r3, #1
 8009b94:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009b96:	69fb      	ldr	r3, [r7, #28]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3720      	adds	r7, #32
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	899b      	ldrh	r3, [r3, #12]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	8952      	ldrh	r2, [r2, #10]
 8009bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bcc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	1d1a      	adds	r2, r3, #4
 8009bd2:	613a      	str	r2, [r7, #16]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <clmt_clust+0x42>
 8009bde:	2300      	movs	r3, #0
 8009be0:	e010      	b.n	8009c04 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d307      	bcc.n	8009bfa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009bf8:	e7e9      	b.n	8009bce <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009bfa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	4413      	add	r3, r2
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c26:	d204      	bcs.n	8009c32 <dir_sdi+0x22>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f003 031f 	and.w	r3, r3, #31
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009c32:	2302      	movs	r3, #2
 8009c34:	e071      	b.n	8009d1a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <dir_sdi+0x46>
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d902      	bls.n	8009c56 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10c      	bne.n	8009c76 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	095b      	lsrs	r3, r3, #5
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	8912      	ldrh	r2, [r2, #8]
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d301      	bcc.n	8009c6c <dir_sdi+0x5c>
 8009c68:	2302      	movs	r3, #2
 8009c6a:	e056      	b.n	8009d1a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	61da      	str	r2, [r3, #28]
 8009c74:	e02d      	b.n	8009cd2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	895b      	ldrh	r3, [r3, #10]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	899b      	ldrh	r3, [r3, #12]
 8009c80:	fb02 f303 	mul.w	r3, r2, r3
 8009c84:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009c86:	e019      	b.n	8009cbc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6979      	ldr	r1, [r7, #20]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7ff fc9c 	bl	80095ca <get_fat>
 8009c92:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d101      	bne.n	8009ca0 <dir_sdi+0x90>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e03c      	b.n	8009d1a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d904      	bls.n	8009cb0 <dir_sdi+0xa0>
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d301      	bcc.n	8009cb4 <dir_sdi+0xa4>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e032      	b.n	8009d1a <dir_sdi+0x10a>
			ofs -= csz;
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d2e1      	bcs.n	8009c88 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009cc4:	6979      	ldr	r1, [r7, #20]
 8009cc6:	6938      	ldr	r0, [r7, #16]
 8009cc8:	f7ff fc60 	bl	800958c <clust2sect>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <dir_sdi+0xd4>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e01a      	b.n	8009d1a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	69da      	ldr	r2, [r3, #28]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	899b      	ldrh	r3, [r3, #12]
 8009cec:	4619      	mov	r1, r3
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cf4:	441a      	add	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	899b      	ldrh	r3, [r3, #12]
 8009d04:	461a      	mov	r2, r3
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d0c:	fb00 f202 	mul.w	r2, r0, r2
 8009d10:	1a9b      	subs	r3, r3, r2
 8009d12:	18ca      	adds	r2, r1, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	3320      	adds	r3, #32
 8009d38:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <dir_next+0x28>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d48:	d301      	bcc.n	8009d4e <dir_next+0x2c>
 8009d4a:	2304      	movs	r3, #4
 8009d4c:	e0bb      	b.n	8009ec6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	899b      	ldrh	r3, [r3, #12]
 8009d52:	461a      	mov	r2, r3
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d5a:	fb01 f202 	mul.w	r2, r1, r2
 8009d5e:	1a9b      	subs	r3, r3, r2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f040 809d 	bne.w	8009ea0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10b      	bne.n	8009d90 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	095b      	lsrs	r3, r3, #5
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	8912      	ldrh	r2, [r2, #8]
 8009d80:	4293      	cmp	r3, r2
 8009d82:	f0c0 808d 	bcc.w	8009ea0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	61da      	str	r2, [r3, #28]
 8009d8c:	2304      	movs	r3, #4
 8009d8e:	e09a      	b.n	8009ec6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	899b      	ldrh	r3, [r3, #12]
 8009d94:	461a      	mov	r2, r3
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	8952      	ldrh	r2, [r2, #10]
 8009da0:	3a01      	subs	r2, #1
 8009da2:	4013      	ands	r3, r2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d17b      	bne.n	8009ea0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	4619      	mov	r1, r3
 8009db0:	4610      	mov	r0, r2
 8009db2:	f7ff fc0a 	bl	80095ca <get_fat>
 8009db6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d801      	bhi.n	8009dc2 <dir_next+0xa0>
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e081      	b.n	8009ec6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d101      	bne.n	8009dce <dir_next+0xac>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e07b      	b.n	8009ec6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d359      	bcc.n	8009e8c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d104      	bne.n	8009de8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	61da      	str	r2, [r3, #28]
 8009de4:	2304      	movs	r3, #4
 8009de6:	e06e      	b.n	8009ec6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	4619      	mov	r1, r3
 8009df0:	4610      	mov	r0, r2
 8009df2:	f7ff fe3d 	bl	8009a70 <create_chain>
 8009df6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <dir_next+0xe0>
 8009dfe:	2307      	movs	r3, #7
 8009e00:	e061      	b.n	8009ec6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d101      	bne.n	8009e0c <dir_next+0xea>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	e05c      	b.n	8009ec6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e12:	d101      	bne.n	8009e18 <dir_next+0xf6>
 8009e14:	2301      	movs	r3, #1
 8009e16:	e056      	b.n	8009ec6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f7ff fad5 	bl	80093c8 <sync_window>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <dir_next+0x106>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e04e      	b.n	8009ec6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	899b      	ldrh	r3, [r3, #12]
 8009e32:	461a      	mov	r2, r3
 8009e34:	2100      	movs	r1, #0
 8009e36:	f7ff f8fe 	bl	8009036 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	6979      	ldr	r1, [r7, #20]
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff fba3 	bl	800958c <clust2sect>
 8009e46:	4602      	mov	r2, r0
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8009e4c:	e012      	b.n	8009e74 <dir_next+0x152>
						fs->wflag = 1;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f7ff fab7 	bl	80093c8 <sync_window>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <dir_next+0x142>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e030      	b.n	8009ec6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	3301      	adds	r3, #1
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	635a      	str	r2, [r3, #52]	; 0x34
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	895b      	ldrh	r3, [r3, #10]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d3e6      	bcc.n	8009e4e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	1ad2      	subs	r2, r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009e92:	6979      	ldr	r1, [r7, #20]
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7ff fb79 	bl	800958c <clust2sect>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	899b      	ldrh	r3, [r3, #12]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009eb8:	fb00 f202 	mul.w	r2, r0, r2
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	18ca      	adds	r2, r1, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009ede:	2100      	movs	r1, #0
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff fe95 	bl	8009c10 <dir_sdi>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d12b      	bne.n	8009f48 <dir_alloc+0x7a>
		n = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff faa8 	bl	8009450 <move_window>
 8009f00:	4603      	mov	r3, r0
 8009f02:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d11d      	bne.n	8009f46 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2be5      	cmp	r3, #229	; 0xe5
 8009f12:	d004      	beq.n	8009f1e <dir_alloc+0x50>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d107      	bne.n	8009f2e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	3301      	adds	r3, #1
 8009f22:	613b      	str	r3, [r7, #16]
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d102      	bne.n	8009f32 <dir_alloc+0x64>
 8009f2c:	e00c      	b.n	8009f48 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009f2e:	2300      	movs	r3, #0
 8009f30:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009f32:	2101      	movs	r1, #1
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff fef4 	bl	8009d22 <dir_next>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0d7      	beq.n	8009ef4 <dir_alloc+0x26>
 8009f44:	e000      	b.n	8009f48 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009f46:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009f48:	7dfb      	ldrb	r3, [r7, #23]
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d101      	bne.n	8009f52 <dir_alloc+0x84>
 8009f4e:	2307      	movs	r3, #7
 8009f50:	75fb      	strb	r3, [r7, #23]
	return res;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	331a      	adds	r3, #26
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe ffc0 	bl	8008ef0 <ld_word>
 8009f70:	4603      	mov	r3, r0
 8009f72:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d109      	bne.n	8009f90 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	3314      	adds	r3, #20
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe ffb5 	bl	8008ef0 <ld_word>
 8009f86:	4603      	mov	r3, r0
 8009f88:	041b      	lsls	r3, r3, #16
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009f90:	68fb      	ldr	r3, [r7, #12]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	60f8      	str	r0, [r7, #12]
 8009fa2:	60b9      	str	r1, [r7, #8]
 8009fa4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	331a      	adds	r3, #26
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	b292      	uxth	r2, r2
 8009fae:	4611      	mov	r1, r2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fe ffd8 	bl	8008f66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d109      	bne.n	8009fd2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f103 0214 	add.w	r2, r3, #20
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4610      	mov	r0, r2
 8009fce:	f7fe ffca 	bl	8008f66 <st_word>
	}
}
 8009fd2:	bf00      	nop
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009fdc:	b590      	push	{r4, r7, lr}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	331a      	adds	r3, #26
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe ff80 	bl	8008ef0 <ld_word>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <cmp_lfn+0x1e>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e059      	b.n	800a0ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a002:	1e5a      	subs	r2, r3, #1
 800a004:	4613      	mov	r3, r2
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a010:	2301      	movs	r3, #1
 800a012:	81fb      	strh	r3, [r7, #14]
 800a014:	2300      	movs	r3, #0
 800a016:	613b      	str	r3, [r7, #16]
 800a018:	e033      	b.n	800a082 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a01a:	4a27      	ldr	r2, [pc, #156]	; (800a0b8 <cmp_lfn+0xdc>)
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	4413      	add	r3, r2
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	4413      	add	r3, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe ff61 	bl	8008ef0 <ld_word>
 800a02e:	4603      	mov	r3, r0
 800a030:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a032:	89fb      	ldrh	r3, [r7, #14]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d01a      	beq.n	800a06e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2bfe      	cmp	r3, #254	; 0xfe
 800a03c:	d812      	bhi.n	800a064 <cmp_lfn+0x88>
 800a03e:	89bb      	ldrh	r3, [r7, #12]
 800a040:	4618      	mov	r0, r3
 800a042:	f002 f861 	bl	800c108 <ff_wtoupper>
 800a046:	4603      	mov	r3, r0
 800a048:	461c      	mov	r4, r3
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	617a      	str	r2, [r7, #20]
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	4413      	add	r3, r2
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f002 f855 	bl	800c108 <ff_wtoupper>
 800a05e:	4603      	mov	r3, r0
 800a060:	429c      	cmp	r4, r3
 800a062:	d001      	beq.n	800a068 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a064:	2300      	movs	r3, #0
 800a066:	e022      	b.n	800a0ae <cmp_lfn+0xd2>
			}
			wc = uc;
 800a068:	89bb      	ldrh	r3, [r7, #12]
 800a06a:	81fb      	strh	r3, [r7, #14]
 800a06c:	e006      	b.n	800a07c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a06e:	89bb      	ldrh	r3, [r7, #12]
 800a070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a074:	4293      	cmp	r3, r2
 800a076:	d001      	beq.n	800a07c <cmp_lfn+0xa0>
 800a078:	2300      	movs	r3, #0
 800a07a:	e018      	b.n	800a0ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	3301      	adds	r3, #1
 800a080:	613b      	str	r3, [r7, #16]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2b0c      	cmp	r3, #12
 800a086:	d9c8      	bls.n	800a01a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00b      	beq.n	800a0ac <cmp_lfn+0xd0>
 800a094:	89fb      	ldrh	r3, [r7, #14]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d008      	beq.n	800a0ac <cmp_lfn+0xd0>
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <cmp_lfn+0xd0>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	e000      	b.n	800a0ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a0ac:	2301      	movs	r3, #1
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd90      	pop	{r4, r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	080107fc 	.word	0x080107fc

0800a0bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	71fb      	strb	r3, [r7, #7]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	330d      	adds	r3, #13
 800a0d6:	79ba      	ldrb	r2, [r7, #6]
 800a0d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	330b      	adds	r3, #11
 800a0de:	220f      	movs	r2, #15
 800a0e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	331a      	adds	r3, #26
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe ff38 	bl	8008f66 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	1e5a      	subs	r2, r3, #1
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	82fb      	strh	r3, [r7, #22]
 800a10a:	2300      	movs	r3, #0
 800a10c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a10e:	8afb      	ldrh	r3, [r7, #22]
 800a110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a114:	4293      	cmp	r3, r2
 800a116:	d007      	beq.n	800a128 <put_lfn+0x6c>
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	61fa      	str	r2, [r7, #28]
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	4413      	add	r3, r2
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a128:	4a17      	ldr	r2, [pc, #92]	; (800a188 <put_lfn+0xcc>)
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	4413      	add	r3, r2
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4413      	add	r3, r2
 800a136:	8afa      	ldrh	r2, [r7, #22]
 800a138:	4611      	mov	r1, r2
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe ff13 	bl	8008f66 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a140:	8afb      	ldrh	r3, [r7, #22]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d102      	bne.n	800a14c <put_lfn+0x90>
 800a146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a14a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	3301      	adds	r3, #1
 800a150:	61bb      	str	r3, [r7, #24]
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b0c      	cmp	r3, #12
 800a156:	d9da      	bls.n	800a10e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a158:	8afb      	ldrh	r3, [r7, #22]
 800a15a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a15e:	4293      	cmp	r3, r2
 800a160:	d006      	beq.n	800a170 <put_lfn+0xb4>
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4413      	add	r3, r2
 800a16a:	881b      	ldrh	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d103      	bne.n	800a178 <put_lfn+0xbc>
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a176:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	79fa      	ldrb	r2, [r7, #7]
 800a17c:	701a      	strb	r2, [r3, #0]
}
 800a17e:	bf00      	nop
 800a180:	3720      	adds	r7, #32
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	080107fc 	.word	0x080107fc

0800a18c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08c      	sub	sp, #48	; 0x30
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a19a:	220b      	movs	r2, #11
 800a19c:	68b9      	ldr	r1, [r7, #8]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7fe ff28 	bl	8008ff4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b05      	cmp	r3, #5
 800a1a8:	d929      	bls.n	800a1fe <gen_numname+0x72>
		sr = seq;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a1ae:	e020      	b.n	800a1f2 <gen_numname+0x66>
			wc = *lfn++;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	1c9a      	adds	r2, r3, #2
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1be:	e015      	b.n	800a1ec <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	005a      	lsls	r2, r3, #1
 800a1c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	4413      	add	r3, r2
 800a1cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a1ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1d0:	085b      	lsrs	r3, r3, #1
 800a1d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <gen_numname+0x5a>
 800a1de:	69fa      	ldr	r2, [r7, #28]
 800a1e0:	4b30      	ldr	r3, [pc, #192]	; (800a2a4 <gen_numname+0x118>)
 800a1e2:	4053      	eors	r3, r2
 800a1e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	2b0f      	cmp	r3, #15
 800a1f0:	d9e6      	bls.n	800a1c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1da      	bne.n	800a1b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a1fe:	2307      	movs	r3, #7
 800a200:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	3330      	adds	r3, #48	; 0x30
 800a20e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a216:	2b39      	cmp	r3, #57	; 0x39
 800a218:	d904      	bls.n	800a224 <gen_numname+0x98>
 800a21a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a21e:	3307      	adds	r3, #7
 800a220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	1e5a      	subs	r2, r3, #1
 800a228:	62ba      	str	r2, [r7, #40]	; 0x28
 800a22a:	3330      	adds	r3, #48	; 0x30
 800a22c:	443b      	add	r3, r7
 800a22e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a232:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	091b      	lsrs	r3, r3, #4
 800a23a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1df      	bne.n	800a202 <gen_numname+0x76>
	ns[i] = '~';
 800a242:	f107 0214 	add.w	r2, r7, #20
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	4413      	add	r3, r2
 800a24a:	227e      	movs	r2, #126	; 0x7e
 800a24c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a24e:	2300      	movs	r3, #0
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
 800a252:	e002      	b.n	800a25a <gen_numname+0xce>
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	3301      	adds	r3, #1
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
 800a25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	429a      	cmp	r2, r3
 800a260:	d205      	bcs.n	800a26e <gen_numname+0xe2>
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	4413      	add	r3, r2
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2b20      	cmp	r3, #32
 800a26c:	d1f2      	bne.n	800a254 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a270:	2b07      	cmp	r3, #7
 800a272:	d807      	bhi.n	800a284 <gen_numname+0xf8>
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	1c5a      	adds	r2, r3, #1
 800a278:	62ba      	str	r2, [r7, #40]	; 0x28
 800a27a:	3330      	adds	r3, #48	; 0x30
 800a27c:	443b      	add	r3, r7
 800a27e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a282:	e000      	b.n	800a286 <gen_numname+0xfa>
 800a284:	2120      	movs	r1, #32
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	627a      	str	r2, [r7, #36]	; 0x24
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	460a      	mov	r2, r1
 800a292:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	2b07      	cmp	r3, #7
 800a298:	d9e9      	bls.n	800a26e <gen_numname+0xe2>
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	3730      	adds	r7, #48	; 0x30
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	00011021 	.word	0x00011021

0800a2a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a2b4:	230b      	movs	r3, #11
 800a2b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	0852      	lsrs	r2, r2, #1
 800a2be:	01db      	lsls	r3, r3, #7
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	1c59      	adds	r1, r3, #1
 800a2c8:	6079      	str	r1, [r7, #4]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	60bb      	str	r3, [r7, #8]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1ed      	bne.n	800a2b8 <sum_sfn+0x10>
	return sum;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b086      	sub	sp, #24
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff fc88 	bl	8009c10 <dir_sdi>
 800a300:	4603      	mov	r3, r0
 800a302:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <dir_find+0x24>
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	e0a9      	b.n	800a462 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a30e:	23ff      	movs	r3, #255	; 0xff
 800a310:	753b      	strb	r3, [r7, #20]
 800a312:	7d3b      	ldrb	r3, [r7, #20]
 800a314:	757b      	strb	r3, [r7, #21]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	4619      	mov	r1, r3
 800a324:	6938      	ldr	r0, [r7, #16]
 800a326:	f7ff f893 	bl	8009450 <move_window>
 800a32a:	4603      	mov	r3, r0
 800a32c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	2b00      	cmp	r3, #0
 800a332:	f040 8090 	bne.w	800a456 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a33e:	7dbb      	ldrb	r3, [r7, #22]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d102      	bne.n	800a34a <dir_find+0x60>
 800a344:	2304      	movs	r3, #4
 800a346:	75fb      	strb	r3, [r7, #23]
 800a348:	e08a      	b.n	800a460 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	330b      	adds	r3, #11
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a356:	73fb      	strb	r3, [r7, #15]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	7bfa      	ldrb	r2, [r7, #15]
 800a35c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a35e:	7dbb      	ldrb	r3, [r7, #22]
 800a360:	2be5      	cmp	r3, #229	; 0xe5
 800a362:	d007      	beq.n	800a374 <dir_find+0x8a>
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d009      	beq.n	800a382 <dir_find+0x98>
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	2b0f      	cmp	r3, #15
 800a372:	d006      	beq.n	800a382 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a374:	23ff      	movs	r3, #255	; 0xff
 800a376:	757b      	strb	r3, [r7, #21]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295
 800a37e:	631a      	str	r2, [r3, #48]	; 0x30
 800a380:	e05e      	b.n	800a440 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	2b0f      	cmp	r3, #15
 800a386:	d136      	bne.n	800a3f6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a392:	2b00      	cmp	r3, #0
 800a394:	d154      	bne.n	800a440 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a396:	7dbb      	ldrb	r3, [r7, #22]
 800a398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00d      	beq.n	800a3bc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	7b5b      	ldrb	r3, [r3, #13]
 800a3a6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a3a8:	7dbb      	ldrb	r3, [r7, #22]
 800a3aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ae:	75bb      	strb	r3, [r7, #22]
 800a3b0:	7dbb      	ldrb	r3, [r7, #22]
 800a3b2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	695a      	ldr	r2, [r3, #20]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a3bc:	7dba      	ldrb	r2, [r7, #22]
 800a3be:	7d7b      	ldrb	r3, [r7, #21]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d115      	bne.n	800a3f0 <dir_find+0x106>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	330d      	adds	r3, #13
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	7d3a      	ldrb	r2, [r7, #20]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d10e      	bne.n	800a3f0 <dir_find+0x106>
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	691a      	ldr	r2, [r3, #16]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4610      	mov	r0, r2
 800a3de:	f7ff fdfd 	bl	8009fdc <cmp_lfn>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <dir_find+0x106>
 800a3e8:	7d7b      	ldrb	r3, [r7, #21]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	e000      	b.n	800a3f2 <dir_find+0x108>
 800a3f0:	23ff      	movs	r3, #255	; 0xff
 800a3f2:	757b      	strb	r3, [r7, #21]
 800a3f4:	e024      	b.n	800a440 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a3f6:	7d7b      	ldrb	r3, [r7, #21]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d109      	bne.n	800a410 <dir_find+0x126>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff ff51 	bl	800a2a8 <sum_sfn>
 800a406:	4603      	mov	r3, r0
 800a408:	461a      	mov	r2, r3
 800a40a:	7d3b      	ldrb	r3, [r7, #20]
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d024      	beq.n	800a45a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <dir_find+0x14a>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a18      	ldr	r0, [r3, #32]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3324      	adds	r3, #36	; 0x24
 800a426:	220b      	movs	r2, #11
 800a428:	4619      	mov	r1, r3
 800a42a:	f7fe fe1f 	bl	800906c <mem_cmp>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d014      	beq.n	800a45e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a434:	23ff      	movs	r3, #255	; 0xff
 800a436:	757b      	strb	r3, [r7, #21]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f04f 32ff 	mov.w	r2, #4294967295
 800a43e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a440:	2100      	movs	r1, #0
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff fc6d 	bl	8009d22 <dir_next>
 800a448:	4603      	mov	r3, r0
 800a44a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f43f af65 	beq.w	800a31e <dir_find+0x34>
 800a454:	e004      	b.n	800a460 <dir_find+0x176>
		if (res != FR_OK) break;
 800a456:	bf00      	nop
 800a458:	e002      	b.n	800a460 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a45a:	bf00      	nop
 800a45c:	e000      	b.n	800a460 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a45e:	bf00      	nop

	return res;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08c      	sub	sp, #48	; 0x30
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a480:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <dir_register+0x20>
 800a488:	2306      	movs	r3, #6
 800a48a:	e0e0      	b.n	800a64e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a48c:	2300      	movs	r3, #0
 800a48e:	627b      	str	r3, [r7, #36]	; 0x24
 800a490:	e002      	b.n	800a498 <dir_register+0x2c>
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	3301      	adds	r3, #1
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	4413      	add	r3, r2
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1f4      	bne.n	800a492 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	220c      	movs	r2, #12
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fe fd9d 	bl	8008ff4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d032      	beq.n	800a52a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2240      	movs	r2, #64	; 0x40
 800a4c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4d0:	e016      	b.n	800a500 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	691a      	ldr	r2, [r3, #16]
 800a4dc:	f107 010c 	add.w	r1, r7, #12
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f7ff fe53 	bl	800a18c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff feff 	bl	800a2ea <dir_find>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a4f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	2b63      	cmp	r3, #99	; 0x63
 800a504:	d9e5      	bls.n	800a4d2 <dir_register+0x66>
 800a506:	e000      	b.n	800a50a <dir_register+0x9e>
			if (res != FR_OK) break;
 800a508:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	2b64      	cmp	r3, #100	; 0x64
 800a50e:	d101      	bne.n	800a514 <dir_register+0xa8>
 800a510:	2307      	movs	r3, #7
 800a512:	e09c      	b.n	800a64e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d002      	beq.n	800a522 <dir_register+0xb6>
 800a51c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a520:	e095      	b.n	800a64e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a522:	7dfa      	ldrb	r2, [r7, #23]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <dir_register+0xd8>
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	330c      	adds	r3, #12
 800a538:	4a47      	ldr	r2, [pc, #284]	; (800a658 <dir_register+0x1ec>)
 800a53a:	fba2 2303 	umull	r2, r3, r2, r3
 800a53e:	089b      	lsrs	r3, r3, #2
 800a540:	3301      	adds	r3, #1
 800a542:	e000      	b.n	800a546 <dir_register+0xda>
 800a544:	2301      	movs	r3, #1
 800a546:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a548:	6a39      	ldr	r1, [r7, #32]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7ff fcbf 	bl	8009ece <dir_alloc>
 800a550:	4603      	mov	r3, r0
 800a552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d148      	bne.n	800a5f0 <dir_register+0x184>
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	3b01      	subs	r3, #1
 800a562:	623b      	str	r3, [r7, #32]
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d042      	beq.n	800a5f0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	695a      	ldr	r2, [r3, #20]
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	015b      	lsls	r3, r3, #5
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fb4a 	bl	8009c10 <dir_sdi>
 800a57c:	4603      	mov	r3, r0
 800a57e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a586:	2b00      	cmp	r3, #0
 800a588:	d132      	bne.n	800a5f0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3324      	adds	r3, #36	; 0x24
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff fe8a 	bl	800a2a8 <sum_sfn>
 800a594:	4603      	mov	r3, r0
 800a596:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	4619      	mov	r1, r3
 800a59e:	69f8      	ldr	r0, [r7, #28]
 800a5a0:	f7fe ff56 	bl	8009450 <move_window>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a5aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d11d      	bne.n	800a5ee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	6918      	ldr	r0, [r3, #16]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a19      	ldr	r1, [r3, #32]
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	7efb      	ldrb	r3, [r7, #27]
 800a5c0:	f7ff fd7c 	bl	800a0bc <put_lfn>
				fs->wflag = 1;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff fba8 	bl	8009d22 <dir_next>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a5d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d107      	bne.n	800a5f0 <dir_register+0x184>
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	623b      	str	r3, [r7, #32]
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1d5      	bne.n	800a598 <dir_register+0x12c>
 800a5ec:	e000      	b.n	800a5f0 <dir_register+0x184>
				if (res != FR_OK) break;
 800a5ee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a5f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d128      	bne.n	800a64a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	69f8      	ldr	r0, [r7, #28]
 800a600:	f7fe ff26 	bl	8009450 <move_window>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a60a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d11b      	bne.n	800a64a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	2220      	movs	r2, #32
 800a618:	2100      	movs	r1, #0
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fd0b 	bl	8009036 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a18      	ldr	r0, [r3, #32]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3324      	adds	r3, #36	; 0x24
 800a628:	220b      	movs	r2, #11
 800a62a:	4619      	mov	r1, r3
 800a62c:	f7fe fce2 	bl	8008ff4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	330c      	adds	r3, #12
 800a63c:	f002 0218 	and.w	r2, r2, #24
 800a640:	b2d2      	uxtb	r2, r2
 800a642:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	2201      	movs	r2, #1
 800a648:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3730      	adds	r7, #48	; 0x30
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	4ec4ec4f 	.word	0x4ec4ec4f

0800a65c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08a      	sub	sp, #40	; 0x28
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	613b      	str	r3, [r7, #16]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	61ba      	str	r2, [r7, #24]
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	4413      	add	r3, r2
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a68a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a68c:	2b1f      	cmp	r3, #31
 800a68e:	d940      	bls.n	800a712 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a692:	2b2f      	cmp	r3, #47	; 0x2f
 800a694:	d006      	beq.n	800a6a4 <create_name+0x48>
 800a696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a698:	2b5c      	cmp	r3, #92	; 0x5c
 800a69a:	d110      	bne.n	800a6be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a69c:	e002      	b.n	800a6a4 <create_name+0x48>
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	61bb      	str	r3, [r7, #24]
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2b2f      	cmp	r3, #47	; 0x2f
 800a6ae:	d0f6      	beq.n	800a69e <create_name+0x42>
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	2b5c      	cmp	r3, #92	; 0x5c
 800a6ba:	d0f0      	beq.n	800a69e <create_name+0x42>
			break;
 800a6bc:	e02a      	b.n	800a714 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2bfe      	cmp	r3, #254	; 0xfe
 800a6c2:	d901      	bls.n	800a6c8 <create_name+0x6c>
 800a6c4:	2306      	movs	r3, #6
 800a6c6:	e17d      	b.n	800a9c4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a6c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a6ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f001 fcdc 	bl	800c090 <ff_convert>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a6dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <create_name+0x8a>
 800a6e2:	2306      	movs	r3, #6
 800a6e4:	e16e      	b.n	800a9c4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a6e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6e8:	2b7f      	cmp	r3, #127	; 0x7f
 800a6ea:	d809      	bhi.n	800a700 <create_name+0xa4>
 800a6ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	488d      	ldr	r0, [pc, #564]	; (800a928 <create_name+0x2cc>)
 800a6f2:	f7fe fce2 	bl	80090ba <chk_chr>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <create_name+0xa4>
 800a6fc:	2306      	movs	r3, #6
 800a6fe:	e161      	b.n	800a9c4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	617a      	str	r2, [r7, #20]
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4413      	add	r3, r2
 800a70c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a70e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a710:	e7b4      	b.n	800a67c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a712:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	441a      	add	r2, r3
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a71e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a720:	2b1f      	cmp	r3, #31
 800a722:	d801      	bhi.n	800a728 <create_name+0xcc>
 800a724:	2304      	movs	r3, #4
 800a726:	e000      	b.n	800a72a <create_name+0xce>
 800a728:	2300      	movs	r3, #0
 800a72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a72e:	e011      	b.n	800a754 <create_name+0xf8>
		w = lfn[di - 1];
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a736:	4413      	add	r3, r2
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a744:	2b20      	cmp	r3, #32
 800a746:	d002      	beq.n	800a74e <create_name+0xf2>
 800a748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a74a:	2b2e      	cmp	r3, #46	; 0x2e
 800a74c:	d106      	bne.n	800a75c <create_name+0x100>
		di--;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	3b01      	subs	r3, #1
 800a752:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1ea      	bne.n	800a730 <create_name+0xd4>
 800a75a:	e000      	b.n	800a75e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a75c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4413      	add	r3, r2
 800a766:	2200      	movs	r2, #0
 800a768:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <create_name+0x118>
 800a770:	2306      	movs	r3, #6
 800a772:	e127      	b.n	800a9c4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3324      	adds	r3, #36	; 0x24
 800a778:	220b      	movs	r2, #11
 800a77a:	2120      	movs	r1, #32
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fe fc5a 	bl	8009036 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a782:	2300      	movs	r3, #0
 800a784:	61bb      	str	r3, [r7, #24]
 800a786:	e002      	b.n	800a78e <create_name+0x132>
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	3301      	adds	r3, #1
 800a78c:	61bb      	str	r3, [r7, #24]
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	4413      	add	r3, r2
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d0f5      	beq.n	800a788 <create_name+0x12c>
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7a8:	d0ee      	beq.n	800a788 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d009      	beq.n	800a7c4 <create_name+0x168>
 800a7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7b4:	f043 0303 	orr.w	r3, r3, #3
 800a7b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a7bc:	e002      	b.n	800a7c4 <create_name+0x168>
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	617b      	str	r3, [r7, #20]
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <create_name+0x182>
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a7d0:	4413      	add	r3, r2
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	2b2e      	cmp	r3, #46	; 0x2e
 800a7dc:	d1ef      	bne.n	800a7be <create_name+0x162>

	i = b = 0; ni = 8;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	623b      	str	r3, [r7, #32]
 800a7e8:	2308      	movs	r3, #8
 800a7ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	61ba      	str	r2, [r7, #24]
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 8090 	beq.w	800a924 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a806:	2b20      	cmp	r3, #32
 800a808:	d006      	beq.n	800a818 <create_name+0x1bc>
 800a80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a80c:	2b2e      	cmp	r3, #46	; 0x2e
 800a80e:	d10a      	bne.n	800a826 <create_name+0x1ca>
 800a810:	69ba      	ldr	r2, [r7, #24]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	429a      	cmp	r2, r3
 800a816:	d006      	beq.n	800a826 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a81c:	f043 0303 	orr.w	r3, r3, #3
 800a820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a824:	e07d      	b.n	800a922 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a826:	6a3a      	ldr	r2, [r7, #32]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d203      	bcs.n	800a836 <create_name+0x1da>
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	429a      	cmp	r2, r3
 800a834:	d123      	bne.n	800a87e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	2b0b      	cmp	r3, #11
 800a83a:	d106      	bne.n	800a84a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a840:	f043 0303 	orr.w	r3, r3, #3
 800a844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a848:	e075      	b.n	800a936 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d005      	beq.n	800a85e <create_name+0x202>
 800a852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a856:	f043 0303 	orr.w	r3, r3, #3
 800a85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	429a      	cmp	r2, r3
 800a864:	d866      	bhi.n	800a934 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	61bb      	str	r3, [r7, #24]
 800a86a:	2308      	movs	r3, #8
 800a86c:	623b      	str	r3, [r7, #32]
 800a86e:	230b      	movs	r3, #11
 800a870:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a872:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a87c:	e051      	b.n	800a922 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a87e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a880:	2b7f      	cmp	r3, #127	; 0x7f
 800a882:	d914      	bls.n	800a8ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a886:	2100      	movs	r1, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f001 fc01 	bl	800c090 <ff_convert>
 800a88e:	4603      	mov	r3, r0
 800a890:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a894:	2b00      	cmp	r3, #0
 800a896:	d004      	beq.n	800a8a2 <create_name+0x246>
 800a898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a89a:	3b80      	subs	r3, #128	; 0x80
 800a89c:	4a23      	ldr	r2, [pc, #140]	; (800a92c <create_name+0x2d0>)
 800a89e:	5cd3      	ldrb	r3, [r2, r3]
 800a8a0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8a6:	f043 0302 	orr.w	r3, r3, #2
 800a8aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a8ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d007      	beq.n	800a8c4 <create_name+0x268>
 800a8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	481d      	ldr	r0, [pc, #116]	; (800a930 <create_name+0x2d4>)
 800a8ba:	f7fe fbfe 	bl	80090ba <chk_chr>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d008      	beq.n	800a8d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a8c4:	235f      	movs	r3, #95	; 0x5f
 800a8c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8cc:	f043 0303 	orr.w	r3, r3, #3
 800a8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8d4:	e01b      	b.n	800a90e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a8d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8d8:	2b40      	cmp	r3, #64	; 0x40
 800a8da:	d909      	bls.n	800a8f0 <create_name+0x294>
 800a8dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8de:	2b5a      	cmp	r3, #90	; 0x5a
 800a8e0:	d806      	bhi.n	800a8f0 <create_name+0x294>
					b |= 2;
 800a8e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8e6:	f043 0302 	orr.w	r3, r3, #2
 800a8ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a8ee:	e00e      	b.n	800a90e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a8f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8f2:	2b60      	cmp	r3, #96	; 0x60
 800a8f4:	d90b      	bls.n	800a90e <create_name+0x2b2>
 800a8f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8f8:	2b7a      	cmp	r3, #122	; 0x7a
 800a8fa:	d808      	bhi.n	800a90e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a8fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a900:	f043 0301 	orr.w	r3, r3, #1
 800a904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a90a:	3b20      	subs	r3, #32
 800a90c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	623a      	str	r2, [r7, #32]
 800a914:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a916:	b2d1      	uxtb	r1, r2
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	4413      	add	r3, r2
 800a91c:	460a      	mov	r2, r1
 800a91e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a922:	e763      	b.n	800a7ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a924:	bf00      	nop
 800a926:	e006      	b.n	800a936 <create_name+0x2da>
 800a928:	0801071c 	.word	0x0801071c
 800a92c:	0801077c 	.word	0x0801077c
 800a930:	08010728 	.word	0x08010728
			if (si > di) break;			/* No extension */
 800a934:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a93c:	2be5      	cmp	r3, #229	; 0xe5
 800a93e:	d103      	bne.n	800a948 <create_name+0x2ec>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2205      	movs	r2, #5
 800a944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	d104      	bne.n	800a958 <create_name+0x2fc>
 800a94e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a95c:	f003 030c 	and.w	r3, r3, #12
 800a960:	2b0c      	cmp	r3, #12
 800a962:	d005      	beq.n	800a970 <create_name+0x314>
 800a964:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a968:	f003 0303 	and.w	r3, r3, #3
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d105      	bne.n	800a97c <create_name+0x320>
 800a970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a974:	f043 0302 	orr.w	r3, r3, #2
 800a978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d117      	bne.n	800a9b8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a98c:	f003 0303 	and.w	r3, r3, #3
 800a990:	2b01      	cmp	r3, #1
 800a992:	d105      	bne.n	800a9a0 <create_name+0x344>
 800a994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a998:	f043 0310 	orr.w	r3, r3, #16
 800a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a9a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9a4:	f003 030c 	and.w	r3, r3, #12
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d105      	bne.n	800a9b8 <create_name+0x35c>
 800a9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9b0:	f043 0308 	orr.w	r3, r3, #8
 800a9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a9be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a9c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3728      	adds	r7, #40	; 0x28
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a9e0:	e002      	b.n	800a9e8 <follow_path+0x1c>
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	2b2f      	cmp	r3, #47	; 0x2f
 800a9ee:	d0f8      	beq.n	800a9e2 <follow_path+0x16>
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b5c      	cmp	r3, #92	; 0x5c
 800a9f6:	d0f4      	beq.n	800a9e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b1f      	cmp	r3, #31
 800aa04:	d80a      	bhi.n	800aa1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2280      	movs	r2, #128	; 0x80
 800aa0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aa0e:	2100      	movs	r1, #0
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f7ff f8fd 	bl	8009c10 <dir_sdi>
 800aa16:	4603      	mov	r3, r0
 800aa18:	75fb      	strb	r3, [r7, #23]
 800aa1a:	e048      	b.n	800aaae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa1c:	463b      	mov	r3, r7
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff fe1b 	bl	800a65c <create_name>
 800aa26:	4603      	mov	r3, r0
 800aa28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d139      	bne.n	800aaa4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fc5a 	bl	800a2ea <dir_find>
 800aa36:	4603      	mov	r3, r0
 800aa38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00a      	beq.n	800aa5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	d12c      	bne.n	800aaa8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aa4e:	7afb      	ldrb	r3, [r7, #11]
 800aa50:	f003 0304 	and.w	r3, r3, #4
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d127      	bne.n	800aaa8 <follow_path+0xdc>
 800aa58:	2305      	movs	r3, #5
 800aa5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aa5c:	e024      	b.n	800aaa8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	f003 0304 	and.w	r3, r3, #4
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d121      	bne.n	800aaac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	799b      	ldrb	r3, [r3, #6]
 800aa6c:	f003 0310 	and.w	r3, r3, #16
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d102      	bne.n	800aa7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aa74:	2305      	movs	r3, #5
 800aa76:	75fb      	strb	r3, [r7, #23]
 800aa78:	e019      	b.n	800aaae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	8992      	ldrh	r2, [r2, #12]
 800aa88:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa8c:	fb00 f202 	mul.w	r2, r0, r2
 800aa90:	1a9b      	subs	r3, r3, r2
 800aa92:	440b      	add	r3, r1
 800aa94:	4619      	mov	r1, r3
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f7ff fa60 	bl	8009f5c <ld_clust>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aaa2:	e7bb      	b.n	800aa1c <follow_path+0x50>
			if (res != FR_OK) break;
 800aaa4:	bf00      	nop
 800aaa6:	e002      	b.n	800aaae <follow_path+0xe2>
				break;
 800aaa8:	bf00      	nop
 800aaaa:	e000      	b.n	800aaae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aaac:	bf00      	nop
			}
		}
	}

	return res;
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aac0:	f04f 33ff 	mov.w	r3, #4294967295
 800aac4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d031      	beq.n	800ab32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	617b      	str	r3, [r7, #20]
 800aad4:	e002      	b.n	800aadc <get_ldnumber+0x24>
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	3301      	adds	r3, #1
 800aada:	617b      	str	r3, [r7, #20]
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b1f      	cmp	r3, #31
 800aae2:	d903      	bls.n	800aaec <get_ldnumber+0x34>
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b3a      	cmp	r3, #58	; 0x3a
 800aaea:	d1f4      	bne.n	800aad6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b3a      	cmp	r3, #58	; 0x3a
 800aaf2:	d11c      	bne.n	800ab2e <get_ldnumber+0x76>
			tp = *path;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	60fa      	str	r2, [r7, #12]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	3b30      	subs	r3, #48	; 0x30
 800ab04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b09      	cmp	r3, #9
 800ab0a:	d80e      	bhi.n	800ab2a <get_ldnumber+0x72>
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d10a      	bne.n	800ab2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d107      	bne.n	800ab2a <get_ldnumber+0x72>
					vol = (int)i;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	3301      	adds	r3, #1
 800ab22:	617b      	str	r3, [r7, #20]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	e002      	b.n	800ab34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ab2e:	2300      	movs	r3, #0
 800ab30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ab32:	693b      	ldr	r3, [r7, #16]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	371c      	adds	r7, #28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	70da      	strb	r2, [r3, #3]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295
 800ab56:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7fe fc78 	bl	8009450 <move_window>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <check_fs+0x2a>
 800ab66:	2304      	movs	r3, #4
 800ab68:	e038      	b.n	800abdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3338      	adds	r3, #56	; 0x38
 800ab6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe f9bc 	bl	8008ef0 <ld_word>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d001      	beq.n	800ab88 <check_fs+0x48>
 800ab84:	2303      	movs	r3, #3
 800ab86:	e029      	b.n	800abdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab8e:	2be9      	cmp	r3, #233	; 0xe9
 800ab90:	d009      	beq.n	800aba6 <check_fs+0x66>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab98:	2beb      	cmp	r3, #235	; 0xeb
 800ab9a:	d11e      	bne.n	800abda <check_fs+0x9a>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aba2:	2b90      	cmp	r3, #144	; 0x90
 800aba4:	d119      	bne.n	800abda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	3338      	adds	r3, #56	; 0x38
 800abaa:	3336      	adds	r3, #54	; 0x36
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe f9b7 	bl	8008f20 <ld_dword>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800abb8:	4a0a      	ldr	r2, [pc, #40]	; (800abe4 <check_fs+0xa4>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d101      	bne.n	800abc2 <check_fs+0x82>
 800abbe:	2300      	movs	r3, #0
 800abc0:	e00c      	b.n	800abdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3338      	adds	r3, #56	; 0x38
 800abc6:	3352      	adds	r3, #82	; 0x52
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fe f9a9 	bl	8008f20 <ld_dword>
 800abce:	4603      	mov	r3, r0
 800abd0:	4a05      	ldr	r2, [pc, #20]	; (800abe8 <check_fs+0xa8>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d101      	bne.n	800abda <check_fs+0x9a>
 800abd6:	2300      	movs	r3, #0
 800abd8:	e000      	b.n	800abdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800abda:	2302      	movs	r3, #2
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	00544146 	.word	0x00544146
 800abe8:	33544146 	.word	0x33544146

0800abec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b096      	sub	sp, #88	; 0x58
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	4613      	mov	r3, r2
 800abf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f7ff ff59 	bl	800aab8 <get_ldnumber>
 800ac06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	da01      	bge.n	800ac12 <find_volume+0x26>
 800ac0e:	230b      	movs	r3, #11
 800ac10:	e265      	b.n	800b0de <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ac12:	4a9f      	ldr	r2, [pc, #636]	; (800ae90 <find_volume+0x2a4>)
 800ac14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <find_volume+0x3a>
 800ac22:	230c      	movs	r3, #12
 800ac24:	e25b      	b.n	800b0de <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	f023 0301 	bic.w	r3, r3, #1
 800ac32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d01a      	beq.n	800ac72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3e:	785b      	ldrb	r3, [r3, #1]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe f8b7 	bl	8008db4 <disk_status>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ac4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac50:	f003 0301 	and.w	r3, r3, #1
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10c      	bne.n	800ac72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <find_volume+0x82>
 800ac5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac62:	f003 0304 	and.w	r3, r3, #4
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ac6a:	230a      	movs	r3, #10
 800ac6c:	e237      	b.n	800b0de <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e235      	b.n	800b0de <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	2200      	movs	r2, #0
 800ac76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ac78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	785b      	ldrb	r3, [r3, #1]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe f8af 	bl	8008de8 <disk_initialize>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ac90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e21e      	b.n	800b0de <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aca0:	79fb      	ldrb	r3, [r7, #7]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <find_volume+0xca>
 800aca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acaa:	f003 0304 	and.w	r3, r3, #4
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800acb2:	230a      	movs	r3, #10
 800acb4:	e213      	b.n	800b0de <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	7858      	ldrb	r0, [r3, #1]
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	330c      	adds	r3, #12
 800acbe:	461a      	mov	r2, r3
 800acc0:	2102      	movs	r1, #2
 800acc2:	f7fe f8f7 	bl	8008eb4 <disk_ioctl>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <find_volume+0xe4>
 800accc:	2301      	movs	r3, #1
 800acce:	e206      	b.n	800b0de <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800acd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd2:	899b      	ldrh	r3, [r3, #12]
 800acd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd8:	d80d      	bhi.n	800acf6 <find_volume+0x10a>
 800acda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acdc:	899b      	ldrh	r3, [r3, #12]
 800acde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace2:	d308      	bcc.n	800acf6 <find_volume+0x10a>
 800ace4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace6:	899b      	ldrh	r3, [r3, #12]
 800ace8:	461a      	mov	r2, r3
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	899b      	ldrh	r3, [r3, #12]
 800acee:	3b01      	subs	r3, #1
 800acf0:	4013      	ands	r3, r2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <find_volume+0x10e>
 800acf6:	2301      	movs	r3, #1
 800acf8:	e1f1      	b.n	800b0de <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800acfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad02:	f7ff ff1d 	bl	800ab40 <check_fs>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ad0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d149      	bne.n	800ada8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad14:	2300      	movs	r3, #0
 800ad16:	643b      	str	r3, [r7, #64]	; 0x40
 800ad18:	e01e      	b.n	800ad58 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ad20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ad28:	4413      	add	r3, r2
 800ad2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	3304      	adds	r3, #4
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d006      	beq.n	800ad44 <find_volume+0x158>
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	3308      	adds	r3, #8
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe f8f0 	bl	8008f20 <ld_dword>
 800ad40:	4602      	mov	r2, r0
 800ad42:	e000      	b.n	800ad46 <find_volume+0x15a>
 800ad44:	2200      	movs	r2, #0
 800ad46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	3358      	adds	r3, #88	; 0x58
 800ad4c:	443b      	add	r3, r7
 800ad4e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad54:	3301      	adds	r3, #1
 800ad56:	643b      	str	r3, [r7, #64]	; 0x40
 800ad58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d9dd      	bls.n	800ad1a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ad5e:	2300      	movs	r3, #0
 800ad60:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ad62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d002      	beq.n	800ad6e <find_volume+0x182>
 800ad68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ad6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	3358      	adds	r3, #88	; 0x58
 800ad74:	443b      	add	r3, r7
 800ad76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ad7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ad7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d005      	beq.n	800ad8e <find_volume+0x1a2>
 800ad82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad86:	f7ff fedb 	bl	800ab40 <check_fs>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	e000      	b.n	800ad90 <find_volume+0x1a4>
 800ad8e:	2303      	movs	r3, #3
 800ad90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ad94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d905      	bls.n	800ada8 <find_volume+0x1bc>
 800ad9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad9e:	3301      	adds	r3, #1
 800ada0:	643b      	str	r3, [r7, #64]	; 0x40
 800ada2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ada4:	2b03      	cmp	r3, #3
 800ada6:	d9e2      	bls.n	800ad6e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ada8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adac:	2b04      	cmp	r3, #4
 800adae:	d101      	bne.n	800adb4 <find_volume+0x1c8>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e194      	b.n	800b0de <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800adb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d901      	bls.n	800adc0 <find_volume+0x1d4>
 800adbc:	230d      	movs	r3, #13
 800adbe:	e18e      	b.n	800b0de <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	3338      	adds	r3, #56	; 0x38
 800adc4:	330b      	adds	r3, #11
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe f892 	bl	8008ef0 <ld_word>
 800adcc:	4603      	mov	r3, r0
 800adce:	461a      	mov	r2, r3
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	899b      	ldrh	r3, [r3, #12]
 800add4:	429a      	cmp	r2, r3
 800add6:	d001      	beq.n	800addc <find_volume+0x1f0>
 800add8:	230d      	movs	r3, #13
 800adda:	e180      	b.n	800b0de <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	3338      	adds	r3, #56	; 0x38
 800ade0:	3316      	adds	r3, #22
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe f884 	bl	8008ef0 <ld_word>
 800ade8:	4603      	mov	r3, r0
 800adea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800adec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <find_volume+0x214>
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	3338      	adds	r3, #56	; 0x38
 800adf6:	3324      	adds	r3, #36	; 0x24
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fe f891 	bl	8008f20 <ld_dword>
 800adfe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ae00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae04:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae08:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae12:	789b      	ldrb	r3, [r3, #2]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d005      	beq.n	800ae24 <find_volume+0x238>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	789b      	ldrb	r3, [r3, #2]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d001      	beq.n	800ae24 <find_volume+0x238>
 800ae20:	230d      	movs	r3, #13
 800ae22:	e15c      	b.n	800b0de <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ae24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae26:	789b      	ldrb	r3, [r3, #2]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae2c:	fb02 f303 	mul.w	r3, r2, r3
 800ae30:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	895b      	ldrh	r3, [r3, #10]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d008      	beq.n	800ae58 <find_volume+0x26c>
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	895b      	ldrh	r3, [r3, #10]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4e:	895b      	ldrh	r3, [r3, #10]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	4013      	ands	r3, r2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <find_volume+0x270>
 800ae58:	230d      	movs	r3, #13
 800ae5a:	e140      	b.n	800b0de <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5e:	3338      	adds	r3, #56	; 0x38
 800ae60:	3311      	adds	r3, #17
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe f844 	bl	8008ef0 <ld_word>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ae70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae72:	891b      	ldrh	r3, [r3, #8]
 800ae74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae76:	8992      	ldrh	r2, [r2, #12]
 800ae78:	0952      	lsrs	r2, r2, #5
 800ae7a:	b292      	uxth	r2, r2
 800ae7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae80:	fb01 f202 	mul.w	r2, r1, r2
 800ae84:	1a9b      	subs	r3, r3, r2
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d003      	beq.n	800ae94 <find_volume+0x2a8>
 800ae8c:	230d      	movs	r3, #13
 800ae8e:	e126      	b.n	800b0de <find_volume+0x4f2>
 800ae90:	20002aa4 	.word	0x20002aa4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	3338      	adds	r3, #56	; 0x38
 800ae98:	3313      	adds	r3, #19
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fe f828 	bl	8008ef0 <ld_word>
 800aea0:	4603      	mov	r3, r0
 800aea2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d106      	bne.n	800aeb8 <find_volume+0x2cc>
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeac:	3338      	adds	r3, #56	; 0x38
 800aeae:	3320      	adds	r3, #32
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe f835 	bl	8008f20 <ld_dword>
 800aeb6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	3338      	adds	r3, #56	; 0x38
 800aebc:	330e      	adds	r3, #14
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe f816 	bl	8008ef0 <ld_word>
 800aec4:	4603      	mov	r3, r0
 800aec6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aec8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <find_volume+0x2e6>
 800aece:	230d      	movs	r3, #13
 800aed0:	e105      	b.n	800b0de <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aed2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed6:	4413      	add	r3, r2
 800aed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeda:	8911      	ldrh	r1, [r2, #8]
 800aedc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aede:	8992      	ldrh	r2, [r2, #12]
 800aee0:	0952      	lsrs	r2, r2, #5
 800aee2:	b292      	uxth	r2, r2
 800aee4:	fbb1 f2f2 	udiv	r2, r1, r2
 800aee8:	b292      	uxth	r2, r2
 800aeea:	4413      	add	r3, r2
 800aeec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aeee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d201      	bcs.n	800aefa <find_volume+0x30e>
 800aef6:	230d      	movs	r3, #13
 800aef8:	e0f1      	b.n	800b0de <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aefa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af02:	8952      	ldrh	r2, [r2, #10]
 800af04:	fbb3 f3f2 	udiv	r3, r3, r2
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <find_volume+0x328>
 800af10:	230d      	movs	r3, #13
 800af12:	e0e4      	b.n	800b0de <find_volume+0x4f2>
		fmt = FS_FAT32;
 800af14:	2303      	movs	r3, #3
 800af16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800af20:	4293      	cmp	r3, r2
 800af22:	d802      	bhi.n	800af2a <find_volume+0x33e>
 800af24:	2302      	movs	r3, #2
 800af26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800af30:	4293      	cmp	r3, r2
 800af32:	d802      	bhi.n	800af3a <find_volume+0x34e>
 800af34:	2301      	movs	r3, #1
 800af36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	1c9a      	adds	r2, r3, #2
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800af42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af46:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800af48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af4c:	441a      	add	r2, r3
 800af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af50:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800af52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af56:	441a      	add	r2, r3
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800af5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af60:	2b03      	cmp	r3, #3
 800af62:	d11e      	bne.n	800afa2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800af64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af66:	3338      	adds	r3, #56	; 0x38
 800af68:	332a      	adds	r3, #42	; 0x2a
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fd ffc0 	bl	8008ef0 <ld_word>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <find_volume+0x38e>
 800af76:	230d      	movs	r3, #13
 800af78:	e0b1      	b.n	800b0de <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	891b      	ldrh	r3, [r3, #8]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d001      	beq.n	800af86 <find_volume+0x39a>
 800af82:	230d      	movs	r3, #13
 800af84:	e0ab      	b.n	800b0de <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	3338      	adds	r3, #56	; 0x38
 800af8a:	332c      	adds	r3, #44	; 0x2c
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fd ffc7 	bl	8008f20 <ld_dword>
 800af92:	4602      	mov	r2, r0
 800af94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af96:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	647b      	str	r3, [r7, #68]	; 0x44
 800afa0:	e01f      	b.n	800afe2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800afa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa4:	891b      	ldrh	r3, [r3, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <find_volume+0x3c2>
 800afaa:	230d      	movs	r3, #13
 800afac:	e097      	b.n	800b0de <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afb4:	441a      	add	r2, r3
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800afba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d103      	bne.n	800afca <find_volume+0x3de>
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	005b      	lsls	r3, r3, #1
 800afc8:	e00a      	b.n	800afe0 <find_volume+0x3f4>
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	69da      	ldr	r2, [r3, #28]
 800afce:	4613      	mov	r3, r2
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	4413      	add	r3, r2
 800afd4:	085a      	lsrs	r2, r3, #1
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	69db      	ldr	r3, [r3, #28]
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800afe0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	6a1a      	ldr	r2, [r3, #32]
 800afe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe8:	899b      	ldrh	r3, [r3, #12]
 800afea:	4619      	mov	r1, r3
 800afec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afee:	440b      	add	r3, r1
 800aff0:	3b01      	subs	r3, #1
 800aff2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aff4:	8989      	ldrh	r1, [r1, #12]
 800aff6:	fbb3 f3f1 	udiv	r3, r3, r1
 800affa:	429a      	cmp	r2, r3
 800affc:	d201      	bcs.n	800b002 <find_volume+0x416>
 800affe:	230d      	movs	r3, #13
 800b000:	e06d      	b.n	800b0de <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	619a      	str	r2, [r3, #24]
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	699a      	ldr	r2, [r3, #24]
 800b00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b010:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b014:	2280      	movs	r2, #128	; 0x80
 800b016:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d149      	bne.n	800b0b4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	3338      	adds	r3, #56	; 0x38
 800b024:	3330      	adds	r3, #48	; 0x30
 800b026:	4618      	mov	r0, r3
 800b028:	f7fd ff62 	bl	8008ef0 <ld_word>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d140      	bne.n	800b0b4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b034:	3301      	adds	r3, #1
 800b036:	4619      	mov	r1, r3
 800b038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b03a:	f7fe fa09 	bl	8009450 <move_window>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d137      	bne.n	800b0b4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	2200      	movs	r2, #0
 800b048:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	3338      	adds	r3, #56	; 0x38
 800b04e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b052:	4618      	mov	r0, r3
 800b054:	f7fd ff4c 	bl	8008ef0 <ld_word>
 800b058:	4603      	mov	r3, r0
 800b05a:	461a      	mov	r2, r3
 800b05c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b060:	429a      	cmp	r2, r3
 800b062:	d127      	bne.n	800b0b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b066:	3338      	adds	r3, #56	; 0x38
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fd ff59 	bl	8008f20 <ld_dword>
 800b06e:	4603      	mov	r3, r0
 800b070:	4a1d      	ldr	r2, [pc, #116]	; (800b0e8 <find_volume+0x4fc>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d11e      	bne.n	800b0b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	3338      	adds	r3, #56	; 0x38
 800b07a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fd ff4e 	bl	8008f20 <ld_dword>
 800b084:	4603      	mov	r3, r0
 800b086:	4a19      	ldr	r2, [pc, #100]	; (800b0ec <find_volume+0x500>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d113      	bne.n	800b0b4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	3338      	adds	r3, #56	; 0x38
 800b090:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b094:	4618      	mov	r0, r3
 800b096:	f7fd ff43 	bl	8008f20 <ld_dword>
 800b09a:	4602      	mov	r2, r0
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	3338      	adds	r3, #56	; 0x38
 800b0a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fd ff39 	bl	8008f20 <ld_dword>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b0ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b0bc:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <find_volume+0x504>)
 800b0be:	881b      	ldrh	r3, [r3, #0]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	4b0a      	ldr	r3, [pc, #40]	; (800b0f0 <find_volume+0x504>)
 800b0c6:	801a      	strh	r2, [r3, #0]
 800b0c8:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <find_volume+0x504>)
 800b0ca:	881a      	ldrh	r2, [r3, #0]
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	4a08      	ldr	r2, [pc, #32]	; (800b0f4 <find_volume+0x508>)
 800b0d4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b0d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0d8:	f7fe f952 	bl	8009380 <clear_lock>
#endif
	return FR_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3758      	adds	r7, #88	; 0x58
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	41615252 	.word	0x41615252
 800b0ec:	61417272 	.word	0x61417272
 800b0f0:	20002aa8 	.word	0x20002aa8
 800b0f4:	20002acc 	.word	0x20002acc

0800b0f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b102:	2309      	movs	r3, #9
 800b104:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01c      	beq.n	800b146 <validate+0x4e>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d018      	beq.n	800b146 <validate+0x4e>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d013      	beq.n	800b146 <validate+0x4e>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	889a      	ldrh	r2, [r3, #4]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	88db      	ldrh	r3, [r3, #6]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d10c      	bne.n	800b146 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	785b      	ldrb	r3, [r3, #1]
 800b132:	4618      	mov	r0, r3
 800b134:	f7fd fe3e 	bl	8008db4 <disk_status>
 800b138:	4603      	mov	r3, r0
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <validate+0x4e>
			res = FR_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d102      	bne.n	800b152 <validate+0x5a>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	e000      	b.n	800b154 <validate+0x5c>
 800b152:	2300      	movs	r3, #0
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	6013      	str	r3, [r2, #0]
	return res;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b176:	f107 0310 	add.w	r3, r7, #16
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff fc9c 	bl	800aab8 <get_ldnumber>
 800b180:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	2b00      	cmp	r3, #0
 800b186:	da01      	bge.n	800b18c <f_mount+0x28>
 800b188:	230b      	movs	r3, #11
 800b18a:	e02b      	b.n	800b1e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b18c:	4a17      	ldr	r2, [pc, #92]	; (800b1ec <f_mount+0x88>)
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b194:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b19c:	69b8      	ldr	r0, [r7, #24]
 800b19e:	f7fe f8ef 	bl	8009380 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	490d      	ldr	r1, [pc, #52]	; (800b1ec <f_mount+0x88>)
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <f_mount+0x66>
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d001      	beq.n	800b1ce <f_mount+0x6a>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e00a      	b.n	800b1e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b1ce:	f107 010c 	add.w	r1, r7, #12
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fd07 	bl	800abec <find_volume>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3720      	adds	r7, #32
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20002aa4 	.word	0x20002aa4

0800b1f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b09a      	sub	sp, #104	; 0x68
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <f_open+0x18>
 800b204:	2309      	movs	r3, #9
 800b206:	e1bb      	b.n	800b580 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b208:	79fb      	ldrb	r3, [r7, #7]
 800b20a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b20e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b210:	79fa      	ldrb	r2, [r7, #7]
 800b212:	f107 0114 	add.w	r1, r7, #20
 800b216:	f107 0308 	add.w	r3, r7, #8
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff fce6 	bl	800abec <find_volume>
 800b220:	4603      	mov	r3, r0
 800b222:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b226:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f040 819f 	bne.w	800b56e <f_open+0x37e>
		dj.obj.fs = fs;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	f107 0318 	add.w	r3, r7, #24
 800b23a:	4611      	mov	r1, r2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff fbc5 	bl	800a9cc <follow_path>
 800b242:	4603      	mov	r3, r0
 800b244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b248:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d11a      	bne.n	800b286 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b250:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b254:	b25b      	sxtb	r3, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	da03      	bge.n	800b262 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b25a:	2306      	movs	r3, #6
 800b25c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b260:	e011      	b.n	800b286 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	f023 0301 	bic.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	bf14      	ite	ne
 800b26c:	2301      	movne	r3, #1
 800b26e:	2300      	moveq	r3, #0
 800b270:	b2db      	uxtb	r3, r3
 800b272:	461a      	mov	r2, r3
 800b274:	f107 0318 	add.w	r3, r7, #24
 800b278:	4611      	mov	r1, r2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fd ff38 	bl	80090f0 <chk_lock>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	f003 031c 	and.w	r3, r3, #28
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d07f      	beq.n	800b390 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b290:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b294:	2b00      	cmp	r3, #0
 800b296:	d017      	beq.n	800b2c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b298:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	d10e      	bne.n	800b2be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b2a0:	f7fd ff82 	bl	80091a8 <enq_lock>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d006      	beq.n	800b2b8 <f_open+0xc8>
 800b2aa:	f107 0318 	add.w	r3, r7, #24
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff f8dc 	bl	800a46c <dir_register>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	e000      	b.n	800b2ba <f_open+0xca>
 800b2b8:	2312      	movs	r3, #18
 800b2ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b2be:	79fb      	ldrb	r3, [r7, #7]
 800b2c0:	f043 0308 	orr.w	r3, r3, #8
 800b2c4:	71fb      	strb	r3, [r7, #7]
 800b2c6:	e010      	b.n	800b2ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b2c8:	7fbb      	ldrb	r3, [r7, #30]
 800b2ca:	f003 0311 	and.w	r3, r3, #17
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <f_open+0xea>
					res = FR_DENIED;
 800b2d2:	2307      	movs	r3, #7
 800b2d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b2d8:	e007      	b.n	800b2ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b2da:	79fb      	ldrb	r3, [r7, #7]
 800b2dc:	f003 0304 	and.w	r3, r3, #4
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <f_open+0xfa>
 800b2e4:	2308      	movs	r3, #8
 800b2e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b2ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d168      	bne.n	800b3c4 <f_open+0x1d4>
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	f003 0308 	and.w	r3, r3, #8
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d063      	beq.n	800b3c4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b2fc:	f7fd fcfa 	bl	8008cf4 <get_fattime>
 800b300:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	330e      	adds	r3, #14
 800b306:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fd fe47 	bl	8008f9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b310:	3316      	adds	r3, #22
 800b312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b314:	4618      	mov	r0, r3
 800b316:	f7fd fe41 	bl	8008f9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	330b      	adds	r3, #11
 800b31e:	2220      	movs	r2, #32
 800b320:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b326:	4611      	mov	r1, r2
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe fe17 	bl	8009f5c <ld_clust>
 800b32e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b334:	2200      	movs	r2, #0
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe fe2f 	bl	8009f9a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	331c      	adds	r3, #28
 800b340:	2100      	movs	r1, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f7fd fe2a 	bl	8008f9c <st_dword>
					fs->wflag = 1;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	2201      	movs	r2, #1
 800b34c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b350:	2b00      	cmp	r3, #0
 800b352:	d037      	beq.n	800b3c4 <f_open+0x1d4>
						dw = fs->winsect;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b358:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b35a:	f107 0318 	add.w	r3, r7, #24
 800b35e:	2200      	movs	r2, #0
 800b360:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b362:	4618      	mov	r0, r3
 800b364:	f7fe fb1f 	bl	80099a6 <remove_chain>
 800b368:	4603      	mov	r3, r0
 800b36a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b36e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b372:	2b00      	cmp	r3, #0
 800b374:	d126      	bne.n	800b3c4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe f868 	bl	8009450 <move_window>
 800b380:	4603      	mov	r3, r0
 800b382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b38a:	3a01      	subs	r2, #1
 800b38c:	615a      	str	r2, [r3, #20]
 800b38e:	e019      	b.n	800b3c4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b390:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b394:	2b00      	cmp	r3, #0
 800b396:	d115      	bne.n	800b3c4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b398:	7fbb      	ldrb	r3, [r7, #30]
 800b39a:	f003 0310 	and.w	r3, r3, #16
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <f_open+0x1ba>
					res = FR_NO_FILE;
 800b3a2:	2304      	movs	r3, #4
 800b3a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b3a8:	e00c      	b.n	800b3c4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b3aa:	79fb      	ldrb	r3, [r7, #7]
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d007      	beq.n	800b3c4 <f_open+0x1d4>
 800b3b4:	7fbb      	ldrb	r3, [r7, #30]
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <f_open+0x1d4>
						res = FR_DENIED;
 800b3be:	2307      	movs	r3, #7
 800b3c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b3c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d128      	bne.n	800b41e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b3cc:	79fb      	ldrb	r3, [r7, #7]
 800b3ce:	f003 0308 	and.w	r3, r3, #8
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b3d6:	79fb      	ldrb	r3, [r7, #7]
 800b3d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3dc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b3e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b3ec:	79fb      	ldrb	r3, [r7, #7]
 800b3ee:	f023 0301 	bic.w	r3, r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	bf14      	ite	ne
 800b3f6:	2301      	movne	r3, #1
 800b3f8:	2300      	moveq	r3, #0
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	f107 0318 	add.w	r3, r7, #24
 800b402:	4611      	mov	r1, r2
 800b404:	4618      	mov	r0, r3
 800b406:	f7fd fef1 	bl	80091ec <inc_lock>
 800b40a:	4602      	mov	r2, r0
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d102      	bne.n	800b41e <f_open+0x22e>
 800b418:	2302      	movs	r3, #2
 800b41a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b41e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b422:	2b00      	cmp	r3, #0
 800b424:	f040 80a3 	bne.w	800b56e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fd94 	bl	8009f5c <ld_clust>
 800b434:	4602      	mov	r2, r0
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43c:	331c      	adds	r3, #28
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fd fd6e 	bl	8008f20 <ld_dword>
 800b444:	4602      	mov	r2, r0
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	88da      	ldrh	r2, [r3, #6]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	79fa      	ldrb	r2, [r7, #7]
 800b462:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3330      	adds	r3, #48	; 0x30
 800b47a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b47e:	2100      	movs	r1, #0
 800b480:	4618      	mov	r0, r3
 800b482:	f7fd fdd8 	bl	8009036 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	f003 0320 	and.w	r3, r3, #32
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d06e      	beq.n	800b56e <f_open+0x37e>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d06a      	beq.n	800b56e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	68da      	ldr	r2, [r3, #12]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	895b      	ldrh	r3, [r3, #10]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	899b      	ldrh	r3, [r3, #12]
 800b4aa:	fb02 f303 	mul.w	r3, r2, r3
 800b4ae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4bc:	e016      	b.n	800b4ec <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fe f881 	bl	80095ca <get_fat>
 800b4c8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b4ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d802      	bhi.n	800b4d6 <f_open+0x2e6>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b4d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4dc:	d102      	bne.n	800b4e4 <f_open+0x2f4>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b4e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d103      	bne.n	800b4fc <f_open+0x30c>
 800b4f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d8e0      	bhi.n	800b4be <f_open+0x2ce>
				}
				fp->clust = clst;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b500:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b502:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b506:	2b00      	cmp	r3, #0
 800b508:	d131      	bne.n	800b56e <f_open+0x37e>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	899b      	ldrh	r3, [r3, #12]
 800b50e:	461a      	mov	r2, r3
 800b510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b512:	fbb3 f1f2 	udiv	r1, r3, r2
 800b516:	fb01 f202 	mul.w	r2, r1, r2
 800b51a:	1a9b      	subs	r3, r3, r2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d026      	beq.n	800b56e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe f831 	bl	800958c <clust2sect>
 800b52a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d103      	bne.n	800b53a <f_open+0x34a>
						res = FR_INT_ERR;
 800b532:	2302      	movs	r3, #2
 800b534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b538:	e019      	b.n	800b56e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	899b      	ldrh	r3, [r3, #12]
 800b53e:	461a      	mov	r2, r3
 800b540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b542:	fbb3 f2f2 	udiv	r2, r3, r2
 800b546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b548:	441a      	add	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	7858      	ldrb	r0, [r3, #1]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6a1a      	ldr	r2, [r3, #32]
 800b55c:	2301      	movs	r3, #1
 800b55e:	f7fd fc69 	bl	8008e34 <disk_read>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <f_open+0x37e>
 800b568:	2301      	movs	r3, #1
 800b56a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b56e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <f_open+0x38c>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b57c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b580:	4618      	mov	r0, r3
 800b582:	3768      	adds	r7, #104	; 0x68
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08e      	sub	sp, #56	; 0x38
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2200      	movs	r2, #0
 800b59e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f107 0214 	add.w	r2, r7, #20
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff fda5 	bl	800b0f8 <validate>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b5b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d107      	bne.n	800b5cc <f_read+0x44>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	7d5b      	ldrb	r3, [r3, #21]
 800b5c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b5c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <f_read+0x4a>
 800b5cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5d0:	e135      	b.n	800b83e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	7d1b      	ldrb	r3, [r3, #20]
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <f_read+0x5a>
 800b5de:	2307      	movs	r3, #7
 800b5e0:	e12d      	b.n	800b83e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	68da      	ldr	r2, [r3, #12]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	f240 811e 	bls.w	800b834 <f_read+0x2ac>
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b5fc:	e11a      	b.n	800b834 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	8992      	ldrh	r2, [r2, #12]
 800b606:	fbb3 f1f2 	udiv	r1, r3, r2
 800b60a:	fb01 f202 	mul.w	r2, r1, r2
 800b60e:	1a9b      	subs	r3, r3, r2
 800b610:	2b00      	cmp	r3, #0
 800b612:	f040 80d5 	bne.w	800b7c0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	8992      	ldrh	r2, [r2, #12]
 800b61e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	8952      	ldrh	r2, [r2, #10]
 800b626:	3a01      	subs	r2, #1
 800b628:	4013      	ands	r3, r2
 800b62a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d12f      	bne.n	800b692 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d103      	bne.n	800b642 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	633b      	str	r3, [r7, #48]	; 0x30
 800b640:	e013      	b.n	800b66a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b646:	2b00      	cmp	r3, #0
 800b648:	d007      	beq.n	800b65a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	4619      	mov	r1, r3
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7fe faa5 	bl	8009ba0 <clmt_clust>
 800b656:	6338      	str	r0, [r7, #48]	; 0x30
 800b658:	e007      	b.n	800b66a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f7fd ffb1 	bl	80095ca <get_fat>
 800b668:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d804      	bhi.n	800b67a <f_read+0xf2>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2202      	movs	r2, #2
 800b674:	755a      	strb	r2, [r3, #21]
 800b676:	2302      	movs	r3, #2
 800b678:	e0e1      	b.n	800b83e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b680:	d104      	bne.n	800b68c <f_read+0x104>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	755a      	strb	r2, [r3, #21]
 800b688:	2301      	movs	r3, #1
 800b68a:	e0d8      	b.n	800b83e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b690:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	4619      	mov	r1, r3
 800b69a:	4610      	mov	r0, r2
 800b69c:	f7fd ff76 	bl	800958c <clust2sect>
 800b6a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d104      	bne.n	800b6b2 <f_read+0x12a>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	755a      	strb	r2, [r3, #21]
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	e0c5      	b.n	800b83e <f_read+0x2b6>
			sect += csect;
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	899b      	ldrh	r3, [r3, #12]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6c6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d041      	beq.n	800b752 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b6ce:	69fa      	ldr	r2, [r7, #28]
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	4413      	add	r3, r2
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	8952      	ldrh	r2, [r2, #10]
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d905      	bls.n	800b6e8 <f_read+0x160>
					cc = fs->csize - csect;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	895b      	ldrh	r3, [r3, #10]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	7858      	ldrb	r0, [r3, #1]
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	69ba      	ldr	r2, [r7, #24]
 800b6f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6f2:	f7fd fb9f 	bl	8008e34 <disk_read>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d004      	beq.n	800b706 <f_read+0x17e>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2201      	movs	r2, #1
 800b700:	755a      	strb	r2, [r3, #21]
 800b702:	2301      	movs	r3, #1
 800b704:	e09b      	b.n	800b83e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	7d1b      	ldrb	r3, [r3, #20]
 800b70a:	b25b      	sxtb	r3, r3
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	da18      	bge.n	800b742 <f_read+0x1ba>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a1a      	ldr	r2, [r3, #32]
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d911      	bls.n	800b742 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6a1a      	ldr	r2, [r3, #32]
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	8992      	ldrh	r2, [r2, #12]
 800b72a:	fb02 f303 	mul.w	r3, r2, r3
 800b72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b730:	18d0      	adds	r0, r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	899b      	ldrh	r3, [r3, #12]
 800b73c:	461a      	mov	r2, r3
 800b73e:	f7fd fc59 	bl	8008ff4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	899b      	ldrh	r3, [r3, #12]
 800b746:	461a      	mov	r2, r3
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	fb02 f303 	mul.w	r3, r2, r3
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b750:	e05c      	b.n	800b80c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d02e      	beq.n	800b7ba <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	7d1b      	ldrb	r3, [r3, #20]
 800b760:	b25b      	sxtb	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	da18      	bge.n	800b798 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	7858      	ldrb	r0, [r3, #1]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6a1a      	ldr	r2, [r3, #32]
 800b774:	2301      	movs	r3, #1
 800b776:	f7fd fb7d 	bl	8008e74 <disk_write>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d004      	beq.n	800b78a <f_read+0x202>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2201      	movs	r2, #1
 800b784:	755a      	strb	r2, [r3, #21]
 800b786:	2301      	movs	r3, #1
 800b788:	e059      	b.n	800b83e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	7d1b      	ldrb	r3, [r3, #20]
 800b78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b792:	b2da      	uxtb	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	7858      	ldrb	r0, [r3, #1]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	69ba      	ldr	r2, [r7, #24]
 800b7a6:	f7fd fb45 	bl	8008e34 <disk_read>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <f_read+0x232>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	755a      	strb	r2, [r3, #21]
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e041      	b.n	800b83e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	899b      	ldrh	r3, [r3, #12]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	8992      	ldrh	r2, [r2, #12]
 800b7ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7d2:	fb01 f202 	mul.w	r2, r1, r2
 800b7d6:	1a9b      	subs	r3, r3, r2
 800b7d8:	1ac3      	subs	r3, r0, r3
 800b7da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b7dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d901      	bls.n	800b7e8 <f_read+0x260>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	8992      	ldrh	r2, [r2, #12]
 800b7f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7fa:	fb00 f202 	mul.w	r2, r0, r2
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	440b      	add	r3, r1
 800b802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b804:	4619      	mov	r1, r3
 800b806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b808:	f7fd fbf4 	bl	8008ff4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b810:	4413      	add	r3, r2
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	699a      	ldr	r2, [r3, #24]
 800b818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81a:	441a      	add	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	619a      	str	r2, [r3, #24]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b826:	441a      	add	r2, r3
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	f47f aee1 	bne.w	800b5fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3738      	adds	r7, #56	; 0x38
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b08c      	sub	sp, #48	; 0x30
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	60f8      	str	r0, [r7, #12]
 800b84e:	60b9      	str	r1, [r7, #8]
 800b850:	607a      	str	r2, [r7, #4]
 800b852:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f107 0210 	add.w	r2, r7, #16
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f7ff fc46 	bl	800b0f8 <validate>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b876:	2b00      	cmp	r3, #0
 800b878:	d107      	bne.n	800b88a <f_write+0x44>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	7d5b      	ldrb	r3, [r3, #21]
 800b87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b886:	2b00      	cmp	r3, #0
 800b888:	d002      	beq.n	800b890 <f_write+0x4a>
 800b88a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b88e:	e16a      	b.n	800bb66 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	7d1b      	ldrb	r3, [r3, #20]
 800b894:	f003 0302 	and.w	r3, r3, #2
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d101      	bne.n	800b8a0 <f_write+0x5a>
 800b89c:	2307      	movs	r3, #7
 800b89e:	e162      	b.n	800bb66 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	699a      	ldr	r2, [r3, #24]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	441a      	add	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	f080 814c 	bcs.w	800bb4a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	43db      	mvns	r3, r3
 800b8b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b8ba:	e146      	b.n	800bb4a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	8992      	ldrh	r2, [r2, #12]
 800b8c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8c8:	fb01 f202 	mul.w	r2, r1, r2
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f040 80f1 	bne.w	800bab6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	699b      	ldr	r3, [r3, #24]
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	8992      	ldrh	r2, [r2, #12]
 800b8dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	8952      	ldrh	r2, [r2, #10]
 800b8e4:	3a01      	subs	r2, #1
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d143      	bne.n	800b978 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10c      	bne.n	800b912 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	2b00      	cmp	r3, #0
 800b902:	d11a      	bne.n	800b93a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2100      	movs	r1, #0
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe f8b1 	bl	8009a70 <create_chain>
 800b90e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b910:	e013      	b.n	800b93a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b916:	2b00      	cmp	r3, #0
 800b918:	d007      	beq.n	800b92a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	4619      	mov	r1, r3
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7fe f93d 	bl	8009ba0 <clmt_clust>
 800b926:	62b8      	str	r0, [r7, #40]	; 0x28
 800b928:	e007      	b.n	800b93a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	4619      	mov	r1, r3
 800b932:	4610      	mov	r0, r2
 800b934:	f7fe f89c 	bl	8009a70 <create_chain>
 800b938:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 8109 	beq.w	800bb54 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	2b01      	cmp	r3, #1
 800b946:	d104      	bne.n	800b952 <f_write+0x10c>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2202      	movs	r2, #2
 800b94c:	755a      	strb	r2, [r3, #21]
 800b94e:	2302      	movs	r3, #2
 800b950:	e109      	b.n	800bb66 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b958:	d104      	bne.n	800b964 <f_write+0x11e>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2201      	movs	r2, #1
 800b95e:	755a      	strb	r2, [r3, #21]
 800b960:	2301      	movs	r3, #1
 800b962:	e100      	b.n	800bb66 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b968:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d102      	bne.n	800b978 <f_write+0x132>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b976:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	7d1b      	ldrb	r3, [r3, #20]
 800b97c:	b25b      	sxtb	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	da18      	bge.n	800b9b4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	7858      	ldrb	r0, [r3, #1]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6a1a      	ldr	r2, [r3, #32]
 800b990:	2301      	movs	r3, #1
 800b992:	f7fd fa6f 	bl	8008e74 <disk_write>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d004      	beq.n	800b9a6 <f_write+0x160>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	755a      	strb	r2, [r3, #21]
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e0df      	b.n	800bb66 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	7d1b      	ldrb	r3, [r3, #20]
 800b9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4610      	mov	r0, r2
 800b9be:	f7fd fde5 	bl	800958c <clust2sect>
 800b9c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d104      	bne.n	800b9d4 <f_write+0x18e>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2202      	movs	r2, #2
 800b9ce:	755a      	strb	r2, [r3, #21]
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	e0c8      	b.n	800bb66 <f_write+0x320>
			sect += csect;
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	4413      	add	r3, r2
 800b9da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	899b      	ldrh	r3, [r3, #12]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d043      	beq.n	800ba78 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b9f0:	69ba      	ldr	r2, [r7, #24]
 800b9f2:	6a3b      	ldr	r3, [r7, #32]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	8952      	ldrh	r2, [r2, #10]
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d905      	bls.n	800ba0a <f_write+0x1c4>
					cc = fs->csize - csect;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	895b      	ldrh	r3, [r3, #10]
 800ba02:	461a      	mov	r2, r3
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	7858      	ldrb	r0, [r3, #1]
 800ba0e:	6a3b      	ldr	r3, [r7, #32]
 800ba10:	697a      	ldr	r2, [r7, #20]
 800ba12:	69f9      	ldr	r1, [r7, #28]
 800ba14:	f7fd fa2e 	bl	8008e74 <disk_write>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d004      	beq.n	800ba28 <f_write+0x1e2>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2201      	movs	r2, #1
 800ba22:	755a      	strb	r2, [r3, #21]
 800ba24:	2301      	movs	r3, #1
 800ba26:	e09e      	b.n	800bb66 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6a1a      	ldr	r2, [r3, #32]
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	6a3a      	ldr	r2, [r7, #32]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d918      	bls.n	800ba68 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6a1a      	ldr	r2, [r3, #32]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	8992      	ldrh	r2, [r2, #12]
 800ba48:	fb02 f303 	mul.w	r3, r2, r3
 800ba4c:	69fa      	ldr	r2, [r7, #28]
 800ba4e:	18d1      	adds	r1, r2, r3
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	899b      	ldrh	r3, [r3, #12]
 800ba54:	461a      	mov	r2, r3
 800ba56:	f7fd facd 	bl	8008ff4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	7d1b      	ldrb	r3, [r3, #20]
 800ba5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	899b      	ldrh	r3, [r3, #12]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
 800ba74:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ba76:	e04b      	b.n	800bb10 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d016      	beq.n	800bab0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	699a      	ldr	r2, [r3, #24]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d210      	bcs.n	800bab0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	7858      	ldrb	r0, [r3, #1]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba98:	2301      	movs	r3, #1
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	f7fd f9ca 	bl	8008e34 <disk_read>
 800baa0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d004      	beq.n	800bab0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2201      	movs	r2, #1
 800baaa:	755a      	strb	r2, [r3, #21]
 800baac:	2301      	movs	r3, #1
 800baae:	e05a      	b.n	800bb66 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	899b      	ldrh	r3, [r3, #12]
 800baba:	4618      	mov	r0, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	8992      	ldrh	r2, [r2, #12]
 800bac4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bac8:	fb01 f202 	mul.w	r2, r1, r2
 800bacc:	1a9b      	subs	r3, r3, r2
 800bace:	1ac3      	subs	r3, r0, r3
 800bad0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d901      	bls.n	800bade <f_write+0x298>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	8992      	ldrh	r2, [r2, #12]
 800baec:	fbb3 f0f2 	udiv	r0, r3, r2
 800baf0:	fb00 f202 	mul.w	r2, r0, r2
 800baf4:	1a9b      	subs	r3, r3, r2
 800baf6:	440b      	add	r3, r1
 800baf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafa:	69f9      	ldr	r1, [r7, #28]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fd fa79 	bl	8008ff4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	7d1b      	ldrb	r3, [r3, #20]
 800bb06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bb10:	69fa      	ldr	r2, [r7, #28]
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	4413      	add	r3, r2
 800bb16:	61fb      	str	r3, [r7, #28]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	699a      	ldr	r2, [r3, #24]
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	441a      	add	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	619a      	str	r2, [r3, #24]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	68da      	ldr	r2, [r3, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	699b      	ldr	r3, [r3, #24]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	bf38      	it	cc
 800bb30:	461a      	movcc	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	60da      	str	r2, [r3, #12]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	441a      	add	r2, r3
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f47f aeb5 	bne.w	800b8bc <f_write+0x76>
 800bb52:	e000      	b.n	800bb56 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb54:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	7d1b      	ldrb	r3, [r3, #20]
 800bb5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3730      	adds	r7, #48	; 0x30
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b086      	sub	sp, #24
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f107 0208 	add.w	r2, r7, #8
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7ff faba 	bl	800b0f8 <validate>
 800bb84:	4603      	mov	r3, r0
 800bb86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d168      	bne.n	800bc60 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	7d1b      	ldrb	r3, [r3, #20]
 800bb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d062      	beq.n	800bc60 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7d1b      	ldrb	r3, [r3, #20]
 800bb9e:	b25b      	sxtb	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	da15      	bge.n	800bbd0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	7858      	ldrb	r0, [r3, #1]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a1a      	ldr	r2, [r3, #32]
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	f7fd f95e 	bl	8008e74 <disk_write>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <f_sync+0x54>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e04f      	b.n	800bc62 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	7d1b      	ldrb	r3, [r3, #20]
 800bbc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bbd0:	f7fd f890 	bl	8008cf4 <get_fattime>
 800bbd4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4610      	mov	r0, r2
 800bbe0:	f7fd fc36 	bl	8009450 <move_window>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d138      	bne.n	800bc60 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	330b      	adds	r3, #11
 800bbf8:	781a      	ldrb	r2, [r3, #0]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	330b      	adds	r3, #11
 800bbfe:	f042 0220 	orr.w	r2, r2, #32
 800bc02:	b2d2      	uxtb	r2, r2
 800bc04:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6818      	ldr	r0, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	68f9      	ldr	r1, [r7, #12]
 800bc12:	f7fe f9c2 	bl	8009f9a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f103 021c 	add.w	r2, r3, #28
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f7fd f9ba 	bl	8008f9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	3316      	adds	r3, #22
 800bc2c:	6939      	ldr	r1, [r7, #16]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fd f9b4 	bl	8008f9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	3312      	adds	r3, #18
 800bc38:	2100      	movs	r1, #0
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fd f993 	bl	8008f66 <st_word>
					fs->wflag = 1;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2201      	movs	r2, #1
 800bc44:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fd fc2f 	bl	80094ac <sync_fs>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	7d1b      	ldrb	r3, [r3, #20]
 800bc56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff ff7b 	bl	800bb6e <f_sync>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d118      	bne.n	800bcb4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f107 0208 	add.w	r2, r7, #8
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff fa34 	bl	800b0f8 <validate>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10c      	bne.n	800bcb4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fd fb32 	bl	8009308 <dec_lock>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d102      	bne.n	800bcb4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b092      	sub	sp, #72	; 0x48
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bcca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bcce:	f107 030c 	add.w	r3, r7, #12
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe ff89 	bl	800abec <find_volume>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800bce0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f040 8099 	bne.w	800be1c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bcea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	699a      	ldr	r2, [r3, #24]
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	3b02      	subs	r3, #2
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d804      	bhi.n	800bd08 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	699a      	ldr	r2, [r3, #24]
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	e089      	b.n	800be1c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d128      	bne.n	800bd66 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bd14:	2302      	movs	r3, #2
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bd1c:	f107 0314 	add.w	r3, r7, #20
 800bd20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fd fc51 	bl	80095ca <get_fat>
 800bd28:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd30:	d103      	bne.n	800bd3a <f_getfree+0x7c>
 800bd32:	2301      	movs	r3, #1
 800bd34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bd38:	e063      	b.n	800be02 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d103      	bne.n	800bd48 <f_getfree+0x8a>
 800bd40:	2302      	movs	r3, #2
 800bd42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bd46:	e05c      	b.n	800be02 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d102      	bne.n	800bd54 <f_getfree+0x96>
 800bd4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd50:	3301      	adds	r3, #1
 800bd52:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800bd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd56:	3301      	adds	r3, #1
 800bd58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	69db      	ldr	r3, [r3, #28]
 800bd5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d3db      	bcc.n	800bd1c <f_getfree+0x5e>
 800bd64:	e04d      	b.n	800be02 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	69db      	ldr	r3, [r3, #28]
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd70:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	637b      	str	r3, [r7, #52]	; 0x34
 800bd76:	2300      	movs	r3, #0
 800bd78:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800bd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d113      	bne.n	800bda8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800bd80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd84:	1c5a      	adds	r2, r3, #1
 800bd86:	63ba      	str	r2, [r7, #56]	; 0x38
 800bd88:	4619      	mov	r1, r3
 800bd8a:	f7fd fb61 	bl	8009450 <move_window>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800bd94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d131      	bne.n	800be00 <f_getfree+0x142>
							p = fs->win;
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	3338      	adds	r3, #56	; 0x38
 800bda0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	899b      	ldrh	r3, [r3, #12]
 800bda6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d10f      	bne.n	800bdd0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800bdb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdb2:	f7fd f89d 	bl	8008ef0 <ld_word>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d102      	bne.n	800bdc2 <f_getfree+0x104>
 800bdbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	3302      	adds	r3, #2
 800bdc6:	633b      	str	r3, [r7, #48]	; 0x30
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	3b02      	subs	r3, #2
 800bdcc:	637b      	str	r3, [r7, #52]	; 0x34
 800bdce:	e010      	b.n	800bdf2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800bdd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdd2:	f7fd f8a5 	bl	8008f20 <ld_dword>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d102      	bne.n	800bde6 <f_getfree+0x128>
 800bde0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bde2:	3301      	adds	r3, #1
 800bde4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	3304      	adds	r3, #4
 800bdea:	633b      	str	r3, [r7, #48]	; 0x30
 800bdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdee:	3b04      	subs	r3, #4
 800bdf0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800bdf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1bd      	bne.n	800bd7a <f_getfree+0xbc>
 800bdfe:	e000      	b.n	800be02 <f_getfree+0x144>
							if (res != FR_OK) break;
 800be00:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be06:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be0c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800be0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be10:	791a      	ldrb	r2, [r3, #4]
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	f042 0201 	orr.w	r2, r2, #1
 800be18:	b2d2      	uxtb	r2, r2
 800be1a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800be1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800be20:	4618      	mov	r0, r3
 800be22:	3748      	adds	r7, #72	; 0x48
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b088      	sub	sp, #32
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]
	int n = 0;
 800be34:	2300      	movs	r3, #0
 800be36:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800be3c:	e01b      	b.n	800be76 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800be3e:	f107 0310 	add.w	r3, r7, #16
 800be42:	f107 0114 	add.w	r1, r7, #20
 800be46:	2201      	movs	r2, #1
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff fb9d 	bl	800b588 <f_read>
		if (rc != 1) break;
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d116      	bne.n	800be82 <f_gets+0x5a>
		c = s[0];
 800be54:	7d3b      	ldrb	r3, [r7, #20]
 800be56:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	2b0d      	cmp	r3, #13
 800be5c:	d100      	bne.n	800be60 <f_gets+0x38>
 800be5e:	e00a      	b.n	800be76 <f_gets+0x4e>
		*p++ = c;
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	1c5a      	adds	r2, r3, #1
 800be64:	61ba      	str	r2, [r7, #24]
 800be66:	7dfa      	ldrb	r2, [r7, #23]
 800be68:	701a      	strb	r2, [r3, #0]
		n++;
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	3301      	adds	r3, #1
 800be6e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	2b0a      	cmp	r3, #10
 800be74:	d007      	beq.n	800be86 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	3b01      	subs	r3, #1
 800be7a:	69fa      	ldr	r2, [r7, #28]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	dbde      	blt.n	800be3e <f_gets+0x16>
 800be80:	e002      	b.n	800be88 <f_gets+0x60>
		if (rc != 1) break;
 800be82:	bf00      	nop
 800be84:	e000      	b.n	800be88 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800be86:	bf00      	nop
	}
	*p = 0;
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	2200      	movs	r2, #0
 800be8c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <f_gets+0x70>
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	e000      	b.n	800be9a <f_gets+0x72>
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3720      	adds	r7, #32
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b084      	sub	sp, #16
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	460b      	mov	r3, r1
 800beac:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800beae:	78fb      	ldrb	r3, [r7, #3]
 800beb0:	2b0a      	cmp	r3, #10
 800beb2:	d103      	bne.n	800bebc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800beb4:	210d      	movs	r1, #13
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff fff3 	bl	800bea2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	db25      	blt.n	800bf14 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	1c5a      	adds	r2, r3, #1
 800becc:	60fa      	str	r2, [r7, #12]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	4413      	add	r3, r2
 800bed2:	78fa      	ldrb	r2, [r7, #3]
 800bed4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b3c      	cmp	r3, #60	; 0x3c
 800beda:	dd12      	ble.n	800bf02 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6818      	ldr	r0, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f103 010c 	add.w	r1, r3, #12
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	f107 0308 	add.w	r3, r7, #8
 800beec:	f7ff fcab 	bl	800b846 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d101      	bne.n	800befc <putc_bfd+0x5a>
 800bef8:	2300      	movs	r3, #0
 800befa:	e001      	b.n	800bf00 <putc_bfd+0x5e>
 800befc:	f04f 33ff 	mov.w	r3, #4294967295
 800bf00:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	1c5a      	adds	r2, r3, #1
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	609a      	str	r2, [r3, #8]
 800bf12:	e000      	b.n	800bf16 <putc_bfd+0x74>
	if (i < 0) return;
 800bf14:	bf00      	nop
}
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	db16      	blt.n	800bf5a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6818      	ldr	r0, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f103 010c 	add.w	r1, r3, #12
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f107 030c 	add.w	r3, r7, #12
 800bf40:	f7ff fc81 	bl	800b846 <f_write>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d107      	bne.n	800bf5a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d102      	bne.n	800bf5a <putc_flush+0x3e>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	e001      	b.n	800bf5e <putc_flush+0x42>
	return EOF;
 800bf5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b083      	sub	sp, #12
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	605a      	str	r2, [r3, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	609a      	str	r2, [r3, #8]
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b096      	sub	sp, #88	; 0x58
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800bf9a:	f107 030c 	add.w	r3, r7, #12
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff ffe0 	bl	800bf66 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800bfa6:	e009      	b.n	800bfbc <f_puts+0x2c>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	607a      	str	r2, [r7, #4]
 800bfae:	781a      	ldrb	r2, [r3, #0]
 800bfb0:	f107 030c 	add.w	r3, r7, #12
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff ff73 	bl	800bea2 <putc_bfd>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1f1      	bne.n	800bfa8 <f_puts+0x18>
	return putc_flush(&pb);
 800bfc4:	f107 030c 	add.w	r3, r7, #12
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff ffa7 	bl	800bf1c <putc_flush>
 800bfce:	4603      	mov	r3, r0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3758      	adds	r7, #88	; 0x58
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bfee:	4b1f      	ldr	r3, [pc, #124]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800bff0:	7a5b      	ldrb	r3, [r3, #9]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d131      	bne.n	800c05c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bff8:	4b1c      	ldr	r3, [pc, #112]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800bffa:	7a5b      	ldrb	r3, [r3, #9]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	461a      	mov	r2, r3
 800c000:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c002:	2100      	movs	r1, #0
 800c004:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c006:	4b19      	ldr	r3, [pc, #100]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c008:	7a5b      	ldrb	r3, [r3, #9]
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	4a17      	ldr	r2, [pc, #92]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c016:	4b15      	ldr	r3, [pc, #84]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c018:	7a5b      	ldrb	r3, [r3, #9]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	461a      	mov	r2, r3
 800c01e:	4b13      	ldr	r3, [pc, #76]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c020:	4413      	add	r3, r2
 800c022:	79fa      	ldrb	r2, [r7, #7]
 800c024:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c028:	7a5b      	ldrb	r3, [r3, #9]
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	b2d1      	uxtb	r1, r2
 800c030:	4a0e      	ldr	r2, [pc, #56]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c032:	7251      	strb	r1, [r2, #9]
 800c034:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c036:	7dbb      	ldrb	r3, [r7, #22]
 800c038:	3330      	adds	r3, #48	; 0x30
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	3301      	adds	r3, #1
 800c044:	223a      	movs	r2, #58	; 0x3a
 800c046:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	3302      	adds	r3, #2
 800c04c:	222f      	movs	r2, #47	; 0x2f
 800c04e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	3303      	adds	r3, #3
 800c054:	2200      	movs	r2, #0
 800c056:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	371c      	adds	r7, #28
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	20002ccc 	.word	0x20002ccc

0800c070 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c07a:	2200      	movs	r2, #0
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ffaa 	bl	800bfd8 <FATFS_LinkDriverEx>
 800c084:	4603      	mov	r3, r0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	6039      	str	r1, [r7, #0]
 800c09a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c09c:	88fb      	ldrh	r3, [r7, #6]
 800c09e:	2b7f      	cmp	r3, #127	; 0x7f
 800c0a0:	d802      	bhi.n	800c0a8 <ff_convert+0x18>
		c = chr;
 800c0a2:	88fb      	ldrh	r3, [r7, #6]
 800c0a4:	81fb      	strh	r3, [r7, #14]
 800c0a6:	e025      	b.n	800c0f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00b      	beq.n	800c0c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c0ae:	88fb      	ldrh	r3, [r7, #6]
 800c0b0:	2bff      	cmp	r3, #255	; 0xff
 800c0b2:	d805      	bhi.n	800c0c0 <ff_convert+0x30>
 800c0b4:	88fb      	ldrh	r3, [r7, #6]
 800c0b6:	3b80      	subs	r3, #128	; 0x80
 800c0b8:	4a12      	ldr	r2, [pc, #72]	; (800c104 <ff_convert+0x74>)
 800c0ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0be:	e000      	b.n	800c0c2 <ff_convert+0x32>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	81fb      	strh	r3, [r7, #14]
 800c0c4:	e016      	b.n	800c0f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	81fb      	strh	r3, [r7, #14]
 800c0ca:	e009      	b.n	800c0e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c0cc:	89fb      	ldrh	r3, [r7, #14]
 800c0ce:	4a0d      	ldr	r2, [pc, #52]	; (800c104 <ff_convert+0x74>)
 800c0d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0d4:	88fa      	ldrh	r2, [r7, #6]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d006      	beq.n	800c0e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c0da:	89fb      	ldrh	r3, [r7, #14]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	81fb      	strh	r3, [r7, #14]
 800c0e0:	89fb      	ldrh	r3, [r7, #14]
 800c0e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c0e4:	d9f2      	bls.n	800c0cc <ff_convert+0x3c>
 800c0e6:	e000      	b.n	800c0ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c0e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c0ea:	89fb      	ldrh	r3, [r7, #14]
 800c0ec:	3380      	adds	r3, #128	; 0x80
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c0f4:	89fb      	ldrh	r3, [r7, #14]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3714      	adds	r7, #20
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	0801080c 	.word	0x0801080c

0800c108 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c108:	b480      	push	{r7}
 800c10a:	b087      	sub	sp, #28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c112:	88fb      	ldrh	r3, [r7, #6]
 800c114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c118:	d201      	bcs.n	800c11e <ff_wtoupper+0x16>
 800c11a:	4b3e      	ldr	r3, [pc, #248]	; (800c214 <ff_wtoupper+0x10c>)
 800c11c:	e000      	b.n	800c120 <ff_wtoupper+0x18>
 800c11e:	4b3e      	ldr	r3, [pc, #248]	; (800c218 <ff_wtoupper+0x110>)
 800c120:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	1c9a      	adds	r2, r3, #2
 800c126:	617a      	str	r2, [r7, #20]
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c12c:	8a7b      	ldrh	r3, [r7, #18]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d068      	beq.n	800c204 <ff_wtoupper+0xfc>
 800c132:	88fa      	ldrh	r2, [r7, #6]
 800c134:	8a7b      	ldrh	r3, [r7, #18]
 800c136:	429a      	cmp	r2, r3
 800c138:	d364      	bcc.n	800c204 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	1c9a      	adds	r2, r3, #2
 800c13e:	617a      	str	r2, [r7, #20]
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	823b      	strh	r3, [r7, #16]
 800c144:	8a3b      	ldrh	r3, [r7, #16]
 800c146:	0a1b      	lsrs	r3, r3, #8
 800c148:	81fb      	strh	r3, [r7, #14]
 800c14a:	8a3b      	ldrh	r3, [r7, #16]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c150:	88fa      	ldrh	r2, [r7, #6]
 800c152:	8a79      	ldrh	r1, [r7, #18]
 800c154:	8a3b      	ldrh	r3, [r7, #16]
 800c156:	440b      	add	r3, r1
 800c158:	429a      	cmp	r2, r3
 800c15a:	da49      	bge.n	800c1f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c15c:	89fb      	ldrh	r3, [r7, #14]
 800c15e:	2b08      	cmp	r3, #8
 800c160:	d84f      	bhi.n	800c202 <ff_wtoupper+0xfa>
 800c162:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <ff_wtoupper+0x60>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c18d 	.word	0x0800c18d
 800c16c:	0800c19f 	.word	0x0800c19f
 800c170:	0800c1b5 	.word	0x0800c1b5
 800c174:	0800c1bd 	.word	0x0800c1bd
 800c178:	0800c1c5 	.word	0x0800c1c5
 800c17c:	0800c1cd 	.word	0x0800c1cd
 800c180:	0800c1d5 	.word	0x0800c1d5
 800c184:	0800c1dd 	.word	0x0800c1dd
 800c188:	0800c1e5 	.word	0x0800c1e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c18c:	88fa      	ldrh	r2, [r7, #6]
 800c18e:	8a7b      	ldrh	r3, [r7, #18]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	4413      	add	r3, r2
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	80fb      	strh	r3, [r7, #6]
 800c19c:	e027      	b.n	800c1ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c19e:	88fa      	ldrh	r2, [r7, #6]
 800c1a0:	8a7b      	ldrh	r3, [r7, #18]
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	88fa      	ldrh	r2, [r7, #6]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	80fb      	strh	r3, [r7, #6]
 800c1b2:	e01c      	b.n	800c1ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c1b4:	88fb      	ldrh	r3, [r7, #6]
 800c1b6:	3b10      	subs	r3, #16
 800c1b8:	80fb      	strh	r3, [r7, #6]
 800c1ba:	e018      	b.n	800c1ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c1bc:	88fb      	ldrh	r3, [r7, #6]
 800c1be:	3b20      	subs	r3, #32
 800c1c0:	80fb      	strh	r3, [r7, #6]
 800c1c2:	e014      	b.n	800c1ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c1c4:	88fb      	ldrh	r3, [r7, #6]
 800c1c6:	3b30      	subs	r3, #48	; 0x30
 800c1c8:	80fb      	strh	r3, [r7, #6]
 800c1ca:	e010      	b.n	800c1ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c1cc:	88fb      	ldrh	r3, [r7, #6]
 800c1ce:	3b1a      	subs	r3, #26
 800c1d0:	80fb      	strh	r3, [r7, #6]
 800c1d2:	e00c      	b.n	800c1ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c1d4:	88fb      	ldrh	r3, [r7, #6]
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	80fb      	strh	r3, [r7, #6]
 800c1da:	e008      	b.n	800c1ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c1dc:	88fb      	ldrh	r3, [r7, #6]
 800c1de:	3b50      	subs	r3, #80	; 0x50
 800c1e0:	80fb      	strh	r3, [r7, #6]
 800c1e2:	e004      	b.n	800c1ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c1e4:	88fb      	ldrh	r3, [r7, #6]
 800c1e6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c1ea:	80fb      	strh	r3, [r7, #6]
 800c1ec:	bf00      	nop
			}
			break;
 800c1ee:	e008      	b.n	800c202 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c1f0:	89fb      	ldrh	r3, [r7, #14]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d195      	bne.n	800c122 <ff_wtoupper+0x1a>
 800c1f6:	8a3b      	ldrh	r3, [r7, #16]
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c200:	e78f      	b.n	800c122 <ff_wtoupper+0x1a>
			break;
 800c202:	bf00      	nop
	}

	return chr;
 800c204:	88fb      	ldrh	r3, [r7, #6]
}
 800c206:	4618      	mov	r0, r3
 800c208:	371c      	adds	r7, #28
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	0801090c 	.word	0x0801090c
 800c218:	08010b00 	.word	0x08010b00

0800c21c <arm_pid_init_f32>:
 800c21c:	ed90 7a08 	vldr	s14, [r0, #32]
 800c220:	edd0 7a06 	vldr	s15, [r0, #24]
 800c224:	ed90 6a07 	vldr	s12, [r0, #28]
 800c228:	eef1 6a67 	vneg.f32	s13, s15
 800c22c:	ed80 7a02 	vstr	s14, [r0, #8]
 800c230:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c234:	ee37 6a07 	vadd.f32	s12, s14, s14
 800c238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c23c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800c240:	edc0 7a00 	vstr	s15, [r0]
 800c244:	ed80 7a01 	vstr	s14, [r0, #4]
 800c248:	b901      	cbnz	r1, 800c24c <arm_pid_init_f32+0x30>
 800c24a:	4770      	bx	lr
 800c24c:	2300      	movs	r3, #0
 800c24e:	60c3      	str	r3, [r0, #12]
 800c250:	6103      	str	r3, [r0, #16]
 800c252:	6143      	str	r3, [r0, #20]
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop

0800c258 <atof>:
 800c258:	2100      	movs	r1, #0
 800c25a:	f000 be0d 	b.w	800ce78 <strtod>

0800c25e <sulp>:
 800c25e:	b570      	push	{r4, r5, r6, lr}
 800c260:	4604      	mov	r4, r0
 800c262:	460d      	mov	r5, r1
 800c264:	ec45 4b10 	vmov	d0, r4, r5
 800c268:	4616      	mov	r6, r2
 800c26a:	f003 facd 	bl	800f808 <__ulp>
 800c26e:	ec51 0b10 	vmov	r0, r1, d0
 800c272:	b17e      	cbz	r6, 800c294 <sulp+0x36>
 800c274:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c278:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	dd09      	ble.n	800c294 <sulp+0x36>
 800c280:	051b      	lsls	r3, r3, #20
 800c282:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c286:	2400      	movs	r4, #0
 800c288:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c28c:	4622      	mov	r2, r4
 800c28e:	462b      	mov	r3, r5
 800c290:	f7f4 f9d2 	bl	8000638 <__aeabi_dmul>
 800c294:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c298 <_strtod_l>:
 800c298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29c:	ed2d 8b02 	vpush	{d8}
 800c2a0:	b09b      	sub	sp, #108	; 0x6c
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	9213      	str	r2, [sp, #76]	; 0x4c
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	9216      	str	r2, [sp, #88]	; 0x58
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	f04f 0800 	mov.w	r8, #0
 800c2b0:	f04f 0900 	mov.w	r9, #0
 800c2b4:	460a      	mov	r2, r1
 800c2b6:	9215      	str	r2, [sp, #84]	; 0x54
 800c2b8:	7811      	ldrb	r1, [r2, #0]
 800c2ba:	292b      	cmp	r1, #43	; 0x2b
 800c2bc:	d04c      	beq.n	800c358 <_strtod_l+0xc0>
 800c2be:	d83a      	bhi.n	800c336 <_strtod_l+0x9e>
 800c2c0:	290d      	cmp	r1, #13
 800c2c2:	d834      	bhi.n	800c32e <_strtod_l+0x96>
 800c2c4:	2908      	cmp	r1, #8
 800c2c6:	d834      	bhi.n	800c332 <_strtod_l+0x9a>
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	d03d      	beq.n	800c348 <_strtod_l+0xb0>
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	920a      	str	r2, [sp, #40]	; 0x28
 800c2d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c2d2:	7832      	ldrb	r2, [r6, #0]
 800c2d4:	2a30      	cmp	r2, #48	; 0x30
 800c2d6:	f040 80b4 	bne.w	800c442 <_strtod_l+0x1aa>
 800c2da:	7872      	ldrb	r2, [r6, #1]
 800c2dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c2e0:	2a58      	cmp	r2, #88	; 0x58
 800c2e2:	d170      	bne.n	800c3c6 <_strtod_l+0x12e>
 800c2e4:	9302      	str	r3, [sp, #8]
 800c2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	ab16      	add	r3, sp, #88	; 0x58
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	4a8e      	ldr	r2, [pc, #568]	; (800c528 <_strtod_l+0x290>)
 800c2f0:	ab17      	add	r3, sp, #92	; 0x5c
 800c2f2:	a915      	add	r1, sp, #84	; 0x54
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f002 fb65 	bl	800e9c4 <__gethex>
 800c2fa:	f010 070f 	ands.w	r7, r0, #15
 800c2fe:	4605      	mov	r5, r0
 800c300:	d005      	beq.n	800c30e <_strtod_l+0x76>
 800c302:	2f06      	cmp	r7, #6
 800c304:	d12a      	bne.n	800c35c <_strtod_l+0xc4>
 800c306:	3601      	adds	r6, #1
 800c308:	2300      	movs	r3, #0
 800c30a:	9615      	str	r6, [sp, #84]	; 0x54
 800c30c:	930a      	str	r3, [sp, #40]	; 0x28
 800c30e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c310:	2b00      	cmp	r3, #0
 800c312:	f040 857f 	bne.w	800ce14 <_strtod_l+0xb7c>
 800c316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c318:	b1db      	cbz	r3, 800c352 <_strtod_l+0xba>
 800c31a:	4642      	mov	r2, r8
 800c31c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c320:	ec43 2b10 	vmov	d0, r2, r3
 800c324:	b01b      	add	sp, #108	; 0x6c
 800c326:	ecbd 8b02 	vpop	{d8}
 800c32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32e:	2920      	cmp	r1, #32
 800c330:	d1cc      	bne.n	800c2cc <_strtod_l+0x34>
 800c332:	3201      	adds	r2, #1
 800c334:	e7bf      	b.n	800c2b6 <_strtod_l+0x1e>
 800c336:	292d      	cmp	r1, #45	; 0x2d
 800c338:	d1c8      	bne.n	800c2cc <_strtod_l+0x34>
 800c33a:	2101      	movs	r1, #1
 800c33c:	910a      	str	r1, [sp, #40]	; 0x28
 800c33e:	1c51      	adds	r1, r2, #1
 800c340:	9115      	str	r1, [sp, #84]	; 0x54
 800c342:	7852      	ldrb	r2, [r2, #1]
 800c344:	2a00      	cmp	r2, #0
 800c346:	d1c3      	bne.n	800c2d0 <_strtod_l+0x38>
 800c348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c34a:	9515      	str	r5, [sp, #84]	; 0x54
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f040 855f 	bne.w	800ce10 <_strtod_l+0xb78>
 800c352:	4642      	mov	r2, r8
 800c354:	464b      	mov	r3, r9
 800c356:	e7e3      	b.n	800c320 <_strtod_l+0x88>
 800c358:	2100      	movs	r1, #0
 800c35a:	e7ef      	b.n	800c33c <_strtod_l+0xa4>
 800c35c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c35e:	b13a      	cbz	r2, 800c370 <_strtod_l+0xd8>
 800c360:	2135      	movs	r1, #53	; 0x35
 800c362:	a818      	add	r0, sp, #96	; 0x60
 800c364:	f003 fb4d 	bl	800fa02 <__copybits>
 800c368:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c36a:	4620      	mov	r0, r4
 800c36c:	f002 ff20 	bl	800f1b0 <_Bfree>
 800c370:	3f01      	subs	r7, #1
 800c372:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c374:	2f04      	cmp	r7, #4
 800c376:	d806      	bhi.n	800c386 <_strtod_l+0xee>
 800c378:	e8df f007 	tbb	[pc, r7]
 800c37c:	201d0314 	.word	0x201d0314
 800c380:	14          	.byte	0x14
 800c381:	00          	.byte	0x00
 800c382:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c386:	05e9      	lsls	r1, r5, #23
 800c388:	bf48      	it	mi
 800c38a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c38e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c392:	0d1b      	lsrs	r3, r3, #20
 800c394:	051b      	lsls	r3, r3, #20
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1b9      	bne.n	800c30e <_strtod_l+0x76>
 800c39a:	f001 fba1 	bl	800dae0 <__errno>
 800c39e:	2322      	movs	r3, #34	; 0x22
 800c3a0:	6003      	str	r3, [r0, #0]
 800c3a2:	e7b4      	b.n	800c30e <_strtod_l+0x76>
 800c3a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c3a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c3ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c3b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c3b4:	e7e7      	b.n	800c386 <_strtod_l+0xee>
 800c3b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c530 <_strtod_l+0x298>
 800c3ba:	e7e4      	b.n	800c386 <_strtod_l+0xee>
 800c3bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c3c0:	f04f 38ff 	mov.w	r8, #4294967295
 800c3c4:	e7df      	b.n	800c386 <_strtod_l+0xee>
 800c3c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3c8:	1c5a      	adds	r2, r3, #1
 800c3ca:	9215      	str	r2, [sp, #84]	; 0x54
 800c3cc:	785b      	ldrb	r3, [r3, #1]
 800c3ce:	2b30      	cmp	r3, #48	; 0x30
 800c3d0:	d0f9      	beq.n	800c3c6 <_strtod_l+0x12e>
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d09b      	beq.n	800c30e <_strtod_l+0x76>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	f04f 0a00 	mov.w	sl, #0
 800c3dc:	9304      	str	r3, [sp, #16]
 800c3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c3e6:	46d3      	mov	fp, sl
 800c3e8:	220a      	movs	r2, #10
 800c3ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c3ec:	7806      	ldrb	r6, [r0, #0]
 800c3ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c3f2:	b2d9      	uxtb	r1, r3
 800c3f4:	2909      	cmp	r1, #9
 800c3f6:	d926      	bls.n	800c446 <_strtod_l+0x1ae>
 800c3f8:	494c      	ldr	r1, [pc, #304]	; (800c52c <_strtod_l+0x294>)
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f001 fb14 	bl	800da28 <strncmp>
 800c400:	2800      	cmp	r0, #0
 800c402:	d030      	beq.n	800c466 <_strtod_l+0x1ce>
 800c404:	2000      	movs	r0, #0
 800c406:	4632      	mov	r2, r6
 800c408:	9005      	str	r0, [sp, #20]
 800c40a:	465e      	mov	r6, fp
 800c40c:	4603      	mov	r3, r0
 800c40e:	2a65      	cmp	r2, #101	; 0x65
 800c410:	d001      	beq.n	800c416 <_strtod_l+0x17e>
 800c412:	2a45      	cmp	r2, #69	; 0x45
 800c414:	d113      	bne.n	800c43e <_strtod_l+0x1a6>
 800c416:	b91e      	cbnz	r6, 800c420 <_strtod_l+0x188>
 800c418:	9a04      	ldr	r2, [sp, #16]
 800c41a:	4302      	orrs	r2, r0
 800c41c:	d094      	beq.n	800c348 <_strtod_l+0xb0>
 800c41e:	2600      	movs	r6, #0
 800c420:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c422:	1c6a      	adds	r2, r5, #1
 800c424:	9215      	str	r2, [sp, #84]	; 0x54
 800c426:	786a      	ldrb	r2, [r5, #1]
 800c428:	2a2b      	cmp	r2, #43	; 0x2b
 800c42a:	d074      	beq.n	800c516 <_strtod_l+0x27e>
 800c42c:	2a2d      	cmp	r2, #45	; 0x2d
 800c42e:	d078      	beq.n	800c522 <_strtod_l+0x28a>
 800c430:	f04f 0c00 	mov.w	ip, #0
 800c434:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c438:	2909      	cmp	r1, #9
 800c43a:	d97f      	bls.n	800c53c <_strtod_l+0x2a4>
 800c43c:	9515      	str	r5, [sp, #84]	; 0x54
 800c43e:	2700      	movs	r7, #0
 800c440:	e09e      	b.n	800c580 <_strtod_l+0x2e8>
 800c442:	2300      	movs	r3, #0
 800c444:	e7c8      	b.n	800c3d8 <_strtod_l+0x140>
 800c446:	f1bb 0f08 	cmp.w	fp, #8
 800c44a:	bfd8      	it	le
 800c44c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c44e:	f100 0001 	add.w	r0, r0, #1
 800c452:	bfda      	itte	le
 800c454:	fb02 3301 	mlale	r3, r2, r1, r3
 800c458:	9309      	strle	r3, [sp, #36]	; 0x24
 800c45a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c45e:	f10b 0b01 	add.w	fp, fp, #1
 800c462:	9015      	str	r0, [sp, #84]	; 0x54
 800c464:	e7c1      	b.n	800c3ea <_strtod_l+0x152>
 800c466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	9215      	str	r2, [sp, #84]	; 0x54
 800c46c:	785a      	ldrb	r2, [r3, #1]
 800c46e:	f1bb 0f00 	cmp.w	fp, #0
 800c472:	d037      	beq.n	800c4e4 <_strtod_l+0x24c>
 800c474:	9005      	str	r0, [sp, #20]
 800c476:	465e      	mov	r6, fp
 800c478:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c47c:	2b09      	cmp	r3, #9
 800c47e:	d912      	bls.n	800c4a6 <_strtod_l+0x20e>
 800c480:	2301      	movs	r3, #1
 800c482:	e7c4      	b.n	800c40e <_strtod_l+0x176>
 800c484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	9215      	str	r2, [sp, #84]	; 0x54
 800c48a:	785a      	ldrb	r2, [r3, #1]
 800c48c:	3001      	adds	r0, #1
 800c48e:	2a30      	cmp	r2, #48	; 0x30
 800c490:	d0f8      	beq.n	800c484 <_strtod_l+0x1ec>
 800c492:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c496:	2b08      	cmp	r3, #8
 800c498:	f200 84c1 	bhi.w	800ce1e <_strtod_l+0xb86>
 800c49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c49e:	9005      	str	r0, [sp, #20]
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	3a30      	subs	r2, #48	; 0x30
 800c4a8:	f100 0301 	add.w	r3, r0, #1
 800c4ac:	d014      	beq.n	800c4d8 <_strtod_l+0x240>
 800c4ae:	9905      	ldr	r1, [sp, #20]
 800c4b0:	4419      	add	r1, r3
 800c4b2:	9105      	str	r1, [sp, #20]
 800c4b4:	4633      	mov	r3, r6
 800c4b6:	eb00 0c06 	add.w	ip, r0, r6
 800c4ba:	210a      	movs	r1, #10
 800c4bc:	4563      	cmp	r3, ip
 800c4be:	d113      	bne.n	800c4e8 <_strtod_l+0x250>
 800c4c0:	1833      	adds	r3, r6, r0
 800c4c2:	2b08      	cmp	r3, #8
 800c4c4:	f106 0601 	add.w	r6, r6, #1
 800c4c8:	4406      	add	r6, r0
 800c4ca:	dc1a      	bgt.n	800c502 <_strtod_l+0x26a>
 800c4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4ce:	230a      	movs	r3, #10
 800c4d0:	fb03 2301 	mla	r3, r3, r1, r2
 800c4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c4da:	1c51      	adds	r1, r2, #1
 800c4dc:	9115      	str	r1, [sp, #84]	; 0x54
 800c4de:	7852      	ldrb	r2, [r2, #1]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	e7c9      	b.n	800c478 <_strtod_l+0x1e0>
 800c4e4:	4658      	mov	r0, fp
 800c4e6:	e7d2      	b.n	800c48e <_strtod_l+0x1f6>
 800c4e8:	2b08      	cmp	r3, #8
 800c4ea:	f103 0301 	add.w	r3, r3, #1
 800c4ee:	dc03      	bgt.n	800c4f8 <_strtod_l+0x260>
 800c4f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c4f2:	434f      	muls	r7, r1
 800c4f4:	9709      	str	r7, [sp, #36]	; 0x24
 800c4f6:	e7e1      	b.n	800c4bc <_strtod_l+0x224>
 800c4f8:	2b10      	cmp	r3, #16
 800c4fa:	bfd8      	it	le
 800c4fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c500:	e7dc      	b.n	800c4bc <_strtod_l+0x224>
 800c502:	2e10      	cmp	r6, #16
 800c504:	bfdc      	itt	le
 800c506:	230a      	movle	r3, #10
 800c508:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c50c:	e7e3      	b.n	800c4d6 <_strtod_l+0x23e>
 800c50e:	2300      	movs	r3, #0
 800c510:	9305      	str	r3, [sp, #20]
 800c512:	2301      	movs	r3, #1
 800c514:	e780      	b.n	800c418 <_strtod_l+0x180>
 800c516:	f04f 0c00 	mov.w	ip, #0
 800c51a:	1caa      	adds	r2, r5, #2
 800c51c:	9215      	str	r2, [sp, #84]	; 0x54
 800c51e:	78aa      	ldrb	r2, [r5, #2]
 800c520:	e788      	b.n	800c434 <_strtod_l+0x19c>
 800c522:	f04f 0c01 	mov.w	ip, #1
 800c526:	e7f8      	b.n	800c51a <_strtod_l+0x282>
 800c528:	08010bc0 	.word	0x08010bc0
 800c52c:	08010bbc 	.word	0x08010bbc
 800c530:	7ff00000 	.word	0x7ff00000
 800c534:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c536:	1c51      	adds	r1, r2, #1
 800c538:	9115      	str	r1, [sp, #84]	; 0x54
 800c53a:	7852      	ldrb	r2, [r2, #1]
 800c53c:	2a30      	cmp	r2, #48	; 0x30
 800c53e:	d0f9      	beq.n	800c534 <_strtod_l+0x29c>
 800c540:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c544:	2908      	cmp	r1, #8
 800c546:	f63f af7a 	bhi.w	800c43e <_strtod_l+0x1a6>
 800c54a:	3a30      	subs	r2, #48	; 0x30
 800c54c:	9208      	str	r2, [sp, #32]
 800c54e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c550:	920c      	str	r2, [sp, #48]	; 0x30
 800c552:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c554:	1c57      	adds	r7, r2, #1
 800c556:	9715      	str	r7, [sp, #84]	; 0x54
 800c558:	7852      	ldrb	r2, [r2, #1]
 800c55a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c55e:	f1be 0f09 	cmp.w	lr, #9
 800c562:	d938      	bls.n	800c5d6 <_strtod_l+0x33e>
 800c564:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c566:	1a7f      	subs	r7, r7, r1
 800c568:	2f08      	cmp	r7, #8
 800c56a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c56e:	dc03      	bgt.n	800c578 <_strtod_l+0x2e0>
 800c570:	9908      	ldr	r1, [sp, #32]
 800c572:	428f      	cmp	r7, r1
 800c574:	bfa8      	it	ge
 800c576:	460f      	movge	r7, r1
 800c578:	f1bc 0f00 	cmp.w	ip, #0
 800c57c:	d000      	beq.n	800c580 <_strtod_l+0x2e8>
 800c57e:	427f      	negs	r7, r7
 800c580:	2e00      	cmp	r6, #0
 800c582:	d14f      	bne.n	800c624 <_strtod_l+0x38c>
 800c584:	9904      	ldr	r1, [sp, #16]
 800c586:	4301      	orrs	r1, r0
 800c588:	f47f aec1 	bne.w	800c30e <_strtod_l+0x76>
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f47f aedb 	bne.w	800c348 <_strtod_l+0xb0>
 800c592:	2a69      	cmp	r2, #105	; 0x69
 800c594:	d029      	beq.n	800c5ea <_strtod_l+0x352>
 800c596:	dc26      	bgt.n	800c5e6 <_strtod_l+0x34e>
 800c598:	2a49      	cmp	r2, #73	; 0x49
 800c59a:	d026      	beq.n	800c5ea <_strtod_l+0x352>
 800c59c:	2a4e      	cmp	r2, #78	; 0x4e
 800c59e:	f47f aed3 	bne.w	800c348 <_strtod_l+0xb0>
 800c5a2:	499b      	ldr	r1, [pc, #620]	; (800c810 <_strtod_l+0x578>)
 800c5a4:	a815      	add	r0, sp, #84	; 0x54
 800c5a6:	f002 fc4d 	bl	800ee44 <__match>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f43f aecc 	beq.w	800c348 <_strtod_l+0xb0>
 800c5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	2b28      	cmp	r3, #40	; 0x28
 800c5b6:	d12f      	bne.n	800c618 <_strtod_l+0x380>
 800c5b8:	4996      	ldr	r1, [pc, #600]	; (800c814 <_strtod_l+0x57c>)
 800c5ba:	aa18      	add	r2, sp, #96	; 0x60
 800c5bc:	a815      	add	r0, sp, #84	; 0x54
 800c5be:	f002 fc55 	bl	800ee6c <__hexnan>
 800c5c2:	2805      	cmp	r0, #5
 800c5c4:	d128      	bne.n	800c618 <_strtod_l+0x380>
 800c5c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c5cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c5d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c5d4:	e69b      	b.n	800c30e <_strtod_l+0x76>
 800c5d6:	9f08      	ldr	r7, [sp, #32]
 800c5d8:	210a      	movs	r1, #10
 800c5da:	fb01 2107 	mla	r1, r1, r7, r2
 800c5de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c5e2:	9208      	str	r2, [sp, #32]
 800c5e4:	e7b5      	b.n	800c552 <_strtod_l+0x2ba>
 800c5e6:	2a6e      	cmp	r2, #110	; 0x6e
 800c5e8:	e7d9      	b.n	800c59e <_strtod_l+0x306>
 800c5ea:	498b      	ldr	r1, [pc, #556]	; (800c818 <_strtod_l+0x580>)
 800c5ec:	a815      	add	r0, sp, #84	; 0x54
 800c5ee:	f002 fc29 	bl	800ee44 <__match>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	f43f aea8 	beq.w	800c348 <_strtod_l+0xb0>
 800c5f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5fa:	4988      	ldr	r1, [pc, #544]	; (800c81c <_strtod_l+0x584>)
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	a815      	add	r0, sp, #84	; 0x54
 800c600:	9315      	str	r3, [sp, #84]	; 0x54
 800c602:	f002 fc1f 	bl	800ee44 <__match>
 800c606:	b910      	cbnz	r0, 800c60e <_strtod_l+0x376>
 800c608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c60a:	3301      	adds	r3, #1
 800c60c:	9315      	str	r3, [sp, #84]	; 0x54
 800c60e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c82c <_strtod_l+0x594>
 800c612:	f04f 0800 	mov.w	r8, #0
 800c616:	e67a      	b.n	800c30e <_strtod_l+0x76>
 800c618:	4881      	ldr	r0, [pc, #516]	; (800c820 <_strtod_l+0x588>)
 800c61a:	f001 fa9d 	bl	800db58 <nan>
 800c61e:	ec59 8b10 	vmov	r8, r9, d0
 800c622:	e674      	b.n	800c30e <_strtod_l+0x76>
 800c624:	9b05      	ldr	r3, [sp, #20]
 800c626:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c628:	1afb      	subs	r3, r7, r3
 800c62a:	f1bb 0f00 	cmp.w	fp, #0
 800c62e:	bf08      	it	eq
 800c630:	46b3      	moveq	fp, r6
 800c632:	2e10      	cmp	r6, #16
 800c634:	9308      	str	r3, [sp, #32]
 800c636:	4635      	mov	r5, r6
 800c638:	bfa8      	it	ge
 800c63a:	2510      	movge	r5, #16
 800c63c:	f7f3 ff82 	bl	8000544 <__aeabi_ui2d>
 800c640:	2e09      	cmp	r6, #9
 800c642:	4680      	mov	r8, r0
 800c644:	4689      	mov	r9, r1
 800c646:	dd13      	ble.n	800c670 <_strtod_l+0x3d8>
 800c648:	4b76      	ldr	r3, [pc, #472]	; (800c824 <_strtod_l+0x58c>)
 800c64a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c64e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c652:	f7f3 fff1 	bl	8000638 <__aeabi_dmul>
 800c656:	4680      	mov	r8, r0
 800c658:	4650      	mov	r0, sl
 800c65a:	4689      	mov	r9, r1
 800c65c:	f7f3 ff72 	bl	8000544 <__aeabi_ui2d>
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	4640      	mov	r0, r8
 800c666:	4649      	mov	r1, r9
 800c668:	f7f3 fe30 	bl	80002cc <__adddf3>
 800c66c:	4680      	mov	r8, r0
 800c66e:	4689      	mov	r9, r1
 800c670:	2e0f      	cmp	r6, #15
 800c672:	dc38      	bgt.n	800c6e6 <_strtod_l+0x44e>
 800c674:	9b08      	ldr	r3, [sp, #32]
 800c676:	2b00      	cmp	r3, #0
 800c678:	f43f ae49 	beq.w	800c30e <_strtod_l+0x76>
 800c67c:	dd24      	ble.n	800c6c8 <_strtod_l+0x430>
 800c67e:	2b16      	cmp	r3, #22
 800c680:	dc0b      	bgt.n	800c69a <_strtod_l+0x402>
 800c682:	4968      	ldr	r1, [pc, #416]	; (800c824 <_strtod_l+0x58c>)
 800c684:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c68c:	4642      	mov	r2, r8
 800c68e:	464b      	mov	r3, r9
 800c690:	f7f3 ffd2 	bl	8000638 <__aeabi_dmul>
 800c694:	4680      	mov	r8, r0
 800c696:	4689      	mov	r9, r1
 800c698:	e639      	b.n	800c30e <_strtod_l+0x76>
 800c69a:	9a08      	ldr	r2, [sp, #32]
 800c69c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	db20      	blt.n	800c6e6 <_strtod_l+0x44e>
 800c6a4:	4c5f      	ldr	r4, [pc, #380]	; (800c824 <_strtod_l+0x58c>)
 800c6a6:	f1c6 060f 	rsb	r6, r6, #15
 800c6aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c6ae:	4642      	mov	r2, r8
 800c6b0:	464b      	mov	r3, r9
 800c6b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b6:	f7f3 ffbf 	bl	8000638 <__aeabi_dmul>
 800c6ba:	9b08      	ldr	r3, [sp, #32]
 800c6bc:	1b9e      	subs	r6, r3, r6
 800c6be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c6c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6c6:	e7e3      	b.n	800c690 <_strtod_l+0x3f8>
 800c6c8:	9b08      	ldr	r3, [sp, #32]
 800c6ca:	3316      	adds	r3, #22
 800c6cc:	db0b      	blt.n	800c6e6 <_strtod_l+0x44e>
 800c6ce:	9b05      	ldr	r3, [sp, #20]
 800c6d0:	1bdf      	subs	r7, r3, r7
 800c6d2:	4b54      	ldr	r3, [pc, #336]	; (800c824 <_strtod_l+0x58c>)
 800c6d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6dc:	4640      	mov	r0, r8
 800c6de:	4649      	mov	r1, r9
 800c6e0:	f7f4 f8d4 	bl	800088c <__aeabi_ddiv>
 800c6e4:	e7d6      	b.n	800c694 <_strtod_l+0x3fc>
 800c6e6:	9b08      	ldr	r3, [sp, #32]
 800c6e8:	1b75      	subs	r5, r6, r5
 800c6ea:	441d      	add	r5, r3
 800c6ec:	2d00      	cmp	r5, #0
 800c6ee:	dd70      	ble.n	800c7d2 <_strtod_l+0x53a>
 800c6f0:	f015 030f 	ands.w	r3, r5, #15
 800c6f4:	d00a      	beq.n	800c70c <_strtod_l+0x474>
 800c6f6:	494b      	ldr	r1, [pc, #300]	; (800c824 <_strtod_l+0x58c>)
 800c6f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6fc:	4642      	mov	r2, r8
 800c6fe:	464b      	mov	r3, r9
 800c700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c704:	f7f3 ff98 	bl	8000638 <__aeabi_dmul>
 800c708:	4680      	mov	r8, r0
 800c70a:	4689      	mov	r9, r1
 800c70c:	f035 050f 	bics.w	r5, r5, #15
 800c710:	d04d      	beq.n	800c7ae <_strtod_l+0x516>
 800c712:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c716:	dd22      	ble.n	800c75e <_strtod_l+0x4c6>
 800c718:	2500      	movs	r5, #0
 800c71a:	46ab      	mov	fp, r5
 800c71c:	9509      	str	r5, [sp, #36]	; 0x24
 800c71e:	9505      	str	r5, [sp, #20]
 800c720:	2322      	movs	r3, #34	; 0x22
 800c722:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c82c <_strtod_l+0x594>
 800c726:	6023      	str	r3, [r4, #0]
 800c728:	f04f 0800 	mov.w	r8, #0
 800c72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f43f aded 	beq.w	800c30e <_strtod_l+0x76>
 800c734:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c736:	4620      	mov	r0, r4
 800c738:	f002 fd3a 	bl	800f1b0 <_Bfree>
 800c73c:	9905      	ldr	r1, [sp, #20]
 800c73e:	4620      	mov	r0, r4
 800c740:	f002 fd36 	bl	800f1b0 <_Bfree>
 800c744:	4659      	mov	r1, fp
 800c746:	4620      	mov	r0, r4
 800c748:	f002 fd32 	bl	800f1b0 <_Bfree>
 800c74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c74e:	4620      	mov	r0, r4
 800c750:	f002 fd2e 	bl	800f1b0 <_Bfree>
 800c754:	4629      	mov	r1, r5
 800c756:	4620      	mov	r0, r4
 800c758:	f002 fd2a 	bl	800f1b0 <_Bfree>
 800c75c:	e5d7      	b.n	800c30e <_strtod_l+0x76>
 800c75e:	4b32      	ldr	r3, [pc, #200]	; (800c828 <_strtod_l+0x590>)
 800c760:	9304      	str	r3, [sp, #16]
 800c762:	2300      	movs	r3, #0
 800c764:	112d      	asrs	r5, r5, #4
 800c766:	4640      	mov	r0, r8
 800c768:	4649      	mov	r1, r9
 800c76a:	469a      	mov	sl, r3
 800c76c:	2d01      	cmp	r5, #1
 800c76e:	dc21      	bgt.n	800c7b4 <_strtod_l+0x51c>
 800c770:	b10b      	cbz	r3, 800c776 <_strtod_l+0x4de>
 800c772:	4680      	mov	r8, r0
 800c774:	4689      	mov	r9, r1
 800c776:	492c      	ldr	r1, [pc, #176]	; (800c828 <_strtod_l+0x590>)
 800c778:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c77c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c780:	4642      	mov	r2, r8
 800c782:	464b      	mov	r3, r9
 800c784:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c788:	f7f3 ff56 	bl	8000638 <__aeabi_dmul>
 800c78c:	4b27      	ldr	r3, [pc, #156]	; (800c82c <_strtod_l+0x594>)
 800c78e:	460a      	mov	r2, r1
 800c790:	400b      	ands	r3, r1
 800c792:	4927      	ldr	r1, [pc, #156]	; (800c830 <_strtod_l+0x598>)
 800c794:	428b      	cmp	r3, r1
 800c796:	4680      	mov	r8, r0
 800c798:	d8be      	bhi.n	800c718 <_strtod_l+0x480>
 800c79a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c79e:	428b      	cmp	r3, r1
 800c7a0:	bf86      	itte	hi
 800c7a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c834 <_strtod_l+0x59c>
 800c7a6:	f04f 38ff 	movhi.w	r8, #4294967295
 800c7aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	9304      	str	r3, [sp, #16]
 800c7b2:	e07b      	b.n	800c8ac <_strtod_l+0x614>
 800c7b4:	07ea      	lsls	r2, r5, #31
 800c7b6:	d505      	bpl.n	800c7c4 <_strtod_l+0x52c>
 800c7b8:	9b04      	ldr	r3, [sp, #16]
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	f7f3 ff3b 	bl	8000638 <__aeabi_dmul>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	9a04      	ldr	r2, [sp, #16]
 800c7c6:	3208      	adds	r2, #8
 800c7c8:	f10a 0a01 	add.w	sl, sl, #1
 800c7cc:	106d      	asrs	r5, r5, #1
 800c7ce:	9204      	str	r2, [sp, #16]
 800c7d0:	e7cc      	b.n	800c76c <_strtod_l+0x4d4>
 800c7d2:	d0ec      	beq.n	800c7ae <_strtod_l+0x516>
 800c7d4:	426d      	negs	r5, r5
 800c7d6:	f015 020f 	ands.w	r2, r5, #15
 800c7da:	d00a      	beq.n	800c7f2 <_strtod_l+0x55a>
 800c7dc:	4b11      	ldr	r3, [pc, #68]	; (800c824 <_strtod_l+0x58c>)
 800c7de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f4 f84f 	bl	800088c <__aeabi_ddiv>
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	4689      	mov	r9, r1
 800c7f2:	112d      	asrs	r5, r5, #4
 800c7f4:	d0db      	beq.n	800c7ae <_strtod_l+0x516>
 800c7f6:	2d1f      	cmp	r5, #31
 800c7f8:	dd1e      	ble.n	800c838 <_strtod_l+0x5a0>
 800c7fa:	2500      	movs	r5, #0
 800c7fc:	46ab      	mov	fp, r5
 800c7fe:	9509      	str	r5, [sp, #36]	; 0x24
 800c800:	9505      	str	r5, [sp, #20]
 800c802:	2322      	movs	r3, #34	; 0x22
 800c804:	f04f 0800 	mov.w	r8, #0
 800c808:	f04f 0900 	mov.w	r9, #0
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	e78d      	b.n	800c72c <_strtod_l+0x494>
 800c810:	08010d1e 	.word	0x08010d1e
 800c814:	08010bd4 	.word	0x08010bd4
 800c818:	08010d16 	.word	0x08010d16
 800c81c:	08010d50 	.word	0x08010d50
 800c820:	08010fe0 	.word	0x08010fe0
 800c824:	08010ec0 	.word	0x08010ec0
 800c828:	08010e98 	.word	0x08010e98
 800c82c:	7ff00000 	.word	0x7ff00000
 800c830:	7ca00000 	.word	0x7ca00000
 800c834:	7fefffff 	.word	0x7fefffff
 800c838:	f015 0310 	ands.w	r3, r5, #16
 800c83c:	bf18      	it	ne
 800c83e:	236a      	movne	r3, #106	; 0x6a
 800c840:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800cbe4 <_strtod_l+0x94c>
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	4640      	mov	r0, r8
 800c848:	4649      	mov	r1, r9
 800c84a:	2300      	movs	r3, #0
 800c84c:	07ea      	lsls	r2, r5, #31
 800c84e:	d504      	bpl.n	800c85a <_strtod_l+0x5c2>
 800c850:	e9da 2300 	ldrd	r2, r3, [sl]
 800c854:	f7f3 fef0 	bl	8000638 <__aeabi_dmul>
 800c858:	2301      	movs	r3, #1
 800c85a:	106d      	asrs	r5, r5, #1
 800c85c:	f10a 0a08 	add.w	sl, sl, #8
 800c860:	d1f4      	bne.n	800c84c <_strtod_l+0x5b4>
 800c862:	b10b      	cbz	r3, 800c868 <_strtod_l+0x5d0>
 800c864:	4680      	mov	r8, r0
 800c866:	4689      	mov	r9, r1
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	b1bb      	cbz	r3, 800c89c <_strtod_l+0x604>
 800c86c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c870:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c874:	2b00      	cmp	r3, #0
 800c876:	4649      	mov	r1, r9
 800c878:	dd10      	ble.n	800c89c <_strtod_l+0x604>
 800c87a:	2b1f      	cmp	r3, #31
 800c87c:	f340 811e 	ble.w	800cabc <_strtod_l+0x824>
 800c880:	2b34      	cmp	r3, #52	; 0x34
 800c882:	bfde      	ittt	le
 800c884:	f04f 33ff 	movle.w	r3, #4294967295
 800c888:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c88c:	4093      	lslle	r3, r2
 800c88e:	f04f 0800 	mov.w	r8, #0
 800c892:	bfcc      	ite	gt
 800c894:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c898:	ea03 0901 	andle.w	r9, r3, r1
 800c89c:	2200      	movs	r2, #0
 800c89e:	2300      	movs	r3, #0
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	f7f4 f930 	bl	8000b08 <__aeabi_dcmpeq>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d1a6      	bne.n	800c7fa <_strtod_l+0x562>
 800c8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8b2:	4633      	mov	r3, r6
 800c8b4:	465a      	mov	r2, fp
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f002 fce2 	bl	800f280 <__s2b>
 800c8bc:	9009      	str	r0, [sp, #36]	; 0x24
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	f43f af2a 	beq.w	800c718 <_strtod_l+0x480>
 800c8c4:	9a08      	ldr	r2, [sp, #32]
 800c8c6:	9b05      	ldr	r3, [sp, #20]
 800c8c8:	2a00      	cmp	r2, #0
 800c8ca:	eba3 0307 	sub.w	r3, r3, r7
 800c8ce:	bfa8      	it	ge
 800c8d0:	2300      	movge	r3, #0
 800c8d2:	930c      	str	r3, [sp, #48]	; 0x30
 800c8d4:	2500      	movs	r5, #0
 800c8d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c8da:	9312      	str	r3, [sp, #72]	; 0x48
 800c8dc:	46ab      	mov	fp, r5
 800c8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	6859      	ldr	r1, [r3, #4]
 800c8e4:	f002 fc24 	bl	800f130 <_Balloc>
 800c8e8:	9005      	str	r0, [sp, #20]
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	f43f af18 	beq.w	800c720 <_strtod_l+0x488>
 800c8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f2:	691a      	ldr	r2, [r3, #16]
 800c8f4:	3202      	adds	r2, #2
 800c8f6:	f103 010c 	add.w	r1, r3, #12
 800c8fa:	0092      	lsls	r2, r2, #2
 800c8fc:	300c      	adds	r0, #12
 800c8fe:	f001 f91c 	bl	800db3a <memcpy>
 800c902:	ec49 8b10 	vmov	d0, r8, r9
 800c906:	aa18      	add	r2, sp, #96	; 0x60
 800c908:	a917      	add	r1, sp, #92	; 0x5c
 800c90a:	4620      	mov	r0, r4
 800c90c:	f002 ffec 	bl	800f8e8 <__d2b>
 800c910:	ec49 8b18 	vmov	d8, r8, r9
 800c914:	9016      	str	r0, [sp, #88]	; 0x58
 800c916:	2800      	cmp	r0, #0
 800c918:	f43f af02 	beq.w	800c720 <_strtod_l+0x488>
 800c91c:	2101      	movs	r1, #1
 800c91e:	4620      	mov	r0, r4
 800c920:	f002 fd46 	bl	800f3b0 <__i2b>
 800c924:	4683      	mov	fp, r0
 800c926:	2800      	cmp	r0, #0
 800c928:	f43f aefa 	beq.w	800c720 <_strtod_l+0x488>
 800c92c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c92e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c930:	2e00      	cmp	r6, #0
 800c932:	bfab      	itete	ge
 800c934:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c936:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c93a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c93e:	bfac      	ite	ge
 800c940:	eb06 0a03 	addge.w	sl, r6, r3
 800c944:	1b9f      	sublt	r7, r3, r6
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	1af6      	subs	r6, r6, r3
 800c94a:	4416      	add	r6, r2
 800c94c:	4ba0      	ldr	r3, [pc, #640]	; (800cbd0 <_strtod_l+0x938>)
 800c94e:	3e01      	subs	r6, #1
 800c950:	429e      	cmp	r6, r3
 800c952:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c956:	f280 80c4 	bge.w	800cae2 <_strtod_l+0x84a>
 800c95a:	1b9b      	subs	r3, r3, r6
 800c95c:	2b1f      	cmp	r3, #31
 800c95e:	eba2 0203 	sub.w	r2, r2, r3
 800c962:	f04f 0101 	mov.w	r1, #1
 800c966:	f300 80b0 	bgt.w	800caca <_strtod_l+0x832>
 800c96a:	fa01 f303 	lsl.w	r3, r1, r3
 800c96e:	930e      	str	r3, [sp, #56]	; 0x38
 800c970:	2300      	movs	r3, #0
 800c972:	930d      	str	r3, [sp, #52]	; 0x34
 800c974:	eb0a 0602 	add.w	r6, sl, r2
 800c978:	9b04      	ldr	r3, [sp, #16]
 800c97a:	45b2      	cmp	sl, r6
 800c97c:	4417      	add	r7, r2
 800c97e:	441f      	add	r7, r3
 800c980:	4653      	mov	r3, sl
 800c982:	bfa8      	it	ge
 800c984:	4633      	movge	r3, r6
 800c986:	42bb      	cmp	r3, r7
 800c988:	bfa8      	it	ge
 800c98a:	463b      	movge	r3, r7
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	bfc2      	ittt	gt
 800c990:	1af6      	subgt	r6, r6, r3
 800c992:	1aff      	subgt	r7, r7, r3
 800c994:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	dd17      	ble.n	800c9ce <_strtod_l+0x736>
 800c99e:	4659      	mov	r1, fp
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f002 fdc4 	bl	800f530 <__pow5mult>
 800c9a8:	4683      	mov	fp, r0
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	f43f aeb8 	beq.w	800c720 <_strtod_l+0x488>
 800c9b0:	4601      	mov	r1, r0
 800c9b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f002 fd11 	bl	800f3dc <__multiply>
 800c9ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	f43f aeaf 	beq.w	800c720 <_strtod_l+0x488>
 800c9c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f002 fbf3 	bl	800f1b0 <_Bfree>
 800c9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9cc:	9316      	str	r3, [sp, #88]	; 0x58
 800c9ce:	2e00      	cmp	r6, #0
 800c9d0:	f300 808c 	bgt.w	800caec <_strtod_l+0x854>
 800c9d4:	9b08      	ldr	r3, [sp, #32]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dd08      	ble.n	800c9ec <_strtod_l+0x754>
 800c9da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9dc:	9905      	ldr	r1, [sp, #20]
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f002 fda6 	bl	800f530 <__pow5mult>
 800c9e4:	9005      	str	r0, [sp, #20]
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f43f ae9a 	beq.w	800c720 <_strtod_l+0x488>
 800c9ec:	2f00      	cmp	r7, #0
 800c9ee:	dd08      	ble.n	800ca02 <_strtod_l+0x76a>
 800c9f0:	9905      	ldr	r1, [sp, #20]
 800c9f2:	463a      	mov	r2, r7
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f002 fdf5 	bl	800f5e4 <__lshift>
 800c9fa:	9005      	str	r0, [sp, #20]
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	f43f ae8f 	beq.w	800c720 <_strtod_l+0x488>
 800ca02:	f1ba 0f00 	cmp.w	sl, #0
 800ca06:	dd08      	ble.n	800ca1a <_strtod_l+0x782>
 800ca08:	4659      	mov	r1, fp
 800ca0a:	4652      	mov	r2, sl
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f002 fde9 	bl	800f5e4 <__lshift>
 800ca12:	4683      	mov	fp, r0
 800ca14:	2800      	cmp	r0, #0
 800ca16:	f43f ae83 	beq.w	800c720 <_strtod_l+0x488>
 800ca1a:	9a05      	ldr	r2, [sp, #20]
 800ca1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f002 fe68 	bl	800f6f4 <__mdiff>
 800ca24:	4605      	mov	r5, r0
 800ca26:	2800      	cmp	r0, #0
 800ca28:	f43f ae7a 	beq.w	800c720 <_strtod_l+0x488>
 800ca2c:	68c3      	ldr	r3, [r0, #12]
 800ca2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca30:	2300      	movs	r3, #0
 800ca32:	60c3      	str	r3, [r0, #12]
 800ca34:	4659      	mov	r1, fp
 800ca36:	f002 fe41 	bl	800f6bc <__mcmp>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	da60      	bge.n	800cb00 <_strtod_l+0x868>
 800ca3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca40:	ea53 0308 	orrs.w	r3, r3, r8
 800ca44:	f040 8084 	bne.w	800cb50 <_strtod_l+0x8b8>
 800ca48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d17f      	bne.n	800cb50 <_strtod_l+0x8b8>
 800ca50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca54:	0d1b      	lsrs	r3, r3, #20
 800ca56:	051b      	lsls	r3, r3, #20
 800ca58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ca5c:	d978      	bls.n	800cb50 <_strtod_l+0x8b8>
 800ca5e:	696b      	ldr	r3, [r5, #20]
 800ca60:	b913      	cbnz	r3, 800ca68 <_strtod_l+0x7d0>
 800ca62:	692b      	ldr	r3, [r5, #16]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	dd73      	ble.n	800cb50 <_strtod_l+0x8b8>
 800ca68:	4629      	mov	r1, r5
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f002 fdb9 	bl	800f5e4 <__lshift>
 800ca72:	4659      	mov	r1, fp
 800ca74:	4605      	mov	r5, r0
 800ca76:	f002 fe21 	bl	800f6bc <__mcmp>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	dd68      	ble.n	800cb50 <_strtod_l+0x8b8>
 800ca7e:	9904      	ldr	r1, [sp, #16]
 800ca80:	4a54      	ldr	r2, [pc, #336]	; (800cbd4 <_strtod_l+0x93c>)
 800ca82:	464b      	mov	r3, r9
 800ca84:	2900      	cmp	r1, #0
 800ca86:	f000 8084 	beq.w	800cb92 <_strtod_l+0x8fa>
 800ca8a:	ea02 0109 	and.w	r1, r2, r9
 800ca8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca92:	dc7e      	bgt.n	800cb92 <_strtod_l+0x8fa>
 800ca94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca98:	f77f aeb3 	ble.w	800c802 <_strtod_l+0x56a>
 800ca9c:	4b4e      	ldr	r3, [pc, #312]	; (800cbd8 <_strtod_l+0x940>)
 800ca9e:	4640      	mov	r0, r8
 800caa0:	4649      	mov	r1, r9
 800caa2:	2200      	movs	r2, #0
 800caa4:	f7f3 fdc8 	bl	8000638 <__aeabi_dmul>
 800caa8:	4b4a      	ldr	r3, [pc, #296]	; (800cbd4 <_strtod_l+0x93c>)
 800caaa:	400b      	ands	r3, r1
 800caac:	4680      	mov	r8, r0
 800caae:	4689      	mov	r9, r1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f47f ae3f 	bne.w	800c734 <_strtod_l+0x49c>
 800cab6:	2322      	movs	r3, #34	; 0x22
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	e63b      	b.n	800c734 <_strtod_l+0x49c>
 800cabc:	f04f 32ff 	mov.w	r2, #4294967295
 800cac0:	fa02 f303 	lsl.w	r3, r2, r3
 800cac4:	ea03 0808 	and.w	r8, r3, r8
 800cac8:	e6e8      	b.n	800c89c <_strtod_l+0x604>
 800caca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800cace:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800cad2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800cad6:	36e2      	adds	r6, #226	; 0xe2
 800cad8:	fa01 f306 	lsl.w	r3, r1, r6
 800cadc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800cae0:	e748      	b.n	800c974 <_strtod_l+0x6dc>
 800cae2:	2100      	movs	r1, #0
 800cae4:	2301      	movs	r3, #1
 800cae6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800caea:	e743      	b.n	800c974 <_strtod_l+0x6dc>
 800caec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800caee:	4632      	mov	r2, r6
 800caf0:	4620      	mov	r0, r4
 800caf2:	f002 fd77 	bl	800f5e4 <__lshift>
 800caf6:	9016      	str	r0, [sp, #88]	; 0x58
 800caf8:	2800      	cmp	r0, #0
 800cafa:	f47f af6b 	bne.w	800c9d4 <_strtod_l+0x73c>
 800cafe:	e60f      	b.n	800c720 <_strtod_l+0x488>
 800cb00:	46ca      	mov	sl, r9
 800cb02:	d171      	bne.n	800cbe8 <_strtod_l+0x950>
 800cb04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb0a:	b352      	cbz	r2, 800cb62 <_strtod_l+0x8ca>
 800cb0c:	4a33      	ldr	r2, [pc, #204]	; (800cbdc <_strtod_l+0x944>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d12a      	bne.n	800cb68 <_strtod_l+0x8d0>
 800cb12:	9b04      	ldr	r3, [sp, #16]
 800cb14:	4641      	mov	r1, r8
 800cb16:	b1fb      	cbz	r3, 800cb58 <_strtod_l+0x8c0>
 800cb18:	4b2e      	ldr	r3, [pc, #184]	; (800cbd4 <_strtod_l+0x93c>)
 800cb1a:	ea09 0303 	and.w	r3, r9, r3
 800cb1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb22:	f04f 32ff 	mov.w	r2, #4294967295
 800cb26:	d81a      	bhi.n	800cb5e <_strtod_l+0x8c6>
 800cb28:	0d1b      	lsrs	r3, r3, #20
 800cb2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb32:	4299      	cmp	r1, r3
 800cb34:	d118      	bne.n	800cb68 <_strtod_l+0x8d0>
 800cb36:	4b2a      	ldr	r3, [pc, #168]	; (800cbe0 <_strtod_l+0x948>)
 800cb38:	459a      	cmp	sl, r3
 800cb3a:	d102      	bne.n	800cb42 <_strtod_l+0x8aa>
 800cb3c:	3101      	adds	r1, #1
 800cb3e:	f43f adef 	beq.w	800c720 <_strtod_l+0x488>
 800cb42:	4b24      	ldr	r3, [pc, #144]	; (800cbd4 <_strtod_l+0x93c>)
 800cb44:	ea0a 0303 	and.w	r3, sl, r3
 800cb48:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cb4c:	f04f 0800 	mov.w	r8, #0
 800cb50:	9b04      	ldr	r3, [sp, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1a2      	bne.n	800ca9c <_strtod_l+0x804>
 800cb56:	e5ed      	b.n	800c734 <_strtod_l+0x49c>
 800cb58:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5c:	e7e9      	b.n	800cb32 <_strtod_l+0x89a>
 800cb5e:	4613      	mov	r3, r2
 800cb60:	e7e7      	b.n	800cb32 <_strtod_l+0x89a>
 800cb62:	ea53 0308 	orrs.w	r3, r3, r8
 800cb66:	d08a      	beq.n	800ca7e <_strtod_l+0x7e6>
 800cb68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb6a:	b1e3      	cbz	r3, 800cba6 <_strtod_l+0x90e>
 800cb6c:	ea13 0f0a 	tst.w	r3, sl
 800cb70:	d0ee      	beq.n	800cb50 <_strtod_l+0x8b8>
 800cb72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb74:	9a04      	ldr	r2, [sp, #16]
 800cb76:	4640      	mov	r0, r8
 800cb78:	4649      	mov	r1, r9
 800cb7a:	b1c3      	cbz	r3, 800cbae <_strtod_l+0x916>
 800cb7c:	f7ff fb6f 	bl	800c25e <sulp>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	ec51 0b18 	vmov	r0, r1, d8
 800cb88:	f7f3 fba0 	bl	80002cc <__adddf3>
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	4689      	mov	r9, r1
 800cb90:	e7de      	b.n	800cb50 <_strtod_l+0x8b8>
 800cb92:	4013      	ands	r3, r2
 800cb94:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb98:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cb9c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cba0:	f04f 38ff 	mov.w	r8, #4294967295
 800cba4:	e7d4      	b.n	800cb50 <_strtod_l+0x8b8>
 800cba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cba8:	ea13 0f08 	tst.w	r3, r8
 800cbac:	e7e0      	b.n	800cb70 <_strtod_l+0x8d8>
 800cbae:	f7ff fb56 	bl	800c25e <sulp>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	ec51 0b18 	vmov	r0, r1, d8
 800cbba:	f7f3 fb85 	bl	80002c8 <__aeabi_dsub>
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4680      	mov	r8, r0
 800cbc4:	4689      	mov	r9, r1
 800cbc6:	f7f3 ff9f 	bl	8000b08 <__aeabi_dcmpeq>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d0c0      	beq.n	800cb50 <_strtod_l+0x8b8>
 800cbce:	e618      	b.n	800c802 <_strtod_l+0x56a>
 800cbd0:	fffffc02 	.word	0xfffffc02
 800cbd4:	7ff00000 	.word	0x7ff00000
 800cbd8:	39500000 	.word	0x39500000
 800cbdc:	000fffff 	.word	0x000fffff
 800cbe0:	7fefffff 	.word	0x7fefffff
 800cbe4:	08010be8 	.word	0x08010be8
 800cbe8:	4659      	mov	r1, fp
 800cbea:	4628      	mov	r0, r5
 800cbec:	f002 fed6 	bl	800f99c <__ratio>
 800cbf0:	ec57 6b10 	vmov	r6, r7, d0
 800cbf4:	ee10 0a10 	vmov	r0, s0
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbfe:	4639      	mov	r1, r7
 800cc00:	f7f3 ff96 	bl	8000b30 <__aeabi_dcmple>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d071      	beq.n	800ccec <_strtod_l+0xa54>
 800cc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d17c      	bne.n	800cd08 <_strtod_l+0xa70>
 800cc0e:	f1b8 0f00 	cmp.w	r8, #0
 800cc12:	d15a      	bne.n	800ccca <_strtod_l+0xa32>
 800cc14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d15d      	bne.n	800ccd8 <_strtod_l+0xa40>
 800cc1c:	4b90      	ldr	r3, [pc, #576]	; (800ce60 <_strtod_l+0xbc8>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	4630      	mov	r0, r6
 800cc22:	4639      	mov	r1, r7
 800cc24:	f7f3 ff7a 	bl	8000b1c <__aeabi_dcmplt>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d15c      	bne.n	800cce6 <_strtod_l+0xa4e>
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	4b8c      	ldr	r3, [pc, #560]	; (800ce64 <_strtod_l+0xbcc>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	f7f3 fd00 	bl	8000638 <__aeabi_dmul>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	460f      	mov	r7, r1
 800cc3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cc40:	9606      	str	r6, [sp, #24]
 800cc42:	9307      	str	r3, [sp, #28]
 800cc44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cc4c:	4b86      	ldr	r3, [pc, #536]	; (800ce68 <_strtod_l+0xbd0>)
 800cc4e:	ea0a 0303 	and.w	r3, sl, r3
 800cc52:	930d      	str	r3, [sp, #52]	; 0x34
 800cc54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc56:	4b85      	ldr	r3, [pc, #532]	; (800ce6c <_strtod_l+0xbd4>)
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	f040 8090 	bne.w	800cd7e <_strtod_l+0xae6>
 800cc5e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800cc62:	ec49 8b10 	vmov	d0, r8, r9
 800cc66:	f002 fdcf 	bl	800f808 <__ulp>
 800cc6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc6e:	ec51 0b10 	vmov	r0, r1, d0
 800cc72:	f7f3 fce1 	bl	8000638 <__aeabi_dmul>
 800cc76:	4642      	mov	r2, r8
 800cc78:	464b      	mov	r3, r9
 800cc7a:	f7f3 fb27 	bl	80002cc <__adddf3>
 800cc7e:	460b      	mov	r3, r1
 800cc80:	4979      	ldr	r1, [pc, #484]	; (800ce68 <_strtod_l+0xbd0>)
 800cc82:	4a7b      	ldr	r2, [pc, #492]	; (800ce70 <_strtod_l+0xbd8>)
 800cc84:	4019      	ands	r1, r3
 800cc86:	4291      	cmp	r1, r2
 800cc88:	4680      	mov	r8, r0
 800cc8a:	d944      	bls.n	800cd16 <_strtod_l+0xa7e>
 800cc8c:	ee18 2a90 	vmov	r2, s17
 800cc90:	4b78      	ldr	r3, [pc, #480]	; (800ce74 <_strtod_l+0xbdc>)
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d104      	bne.n	800cca0 <_strtod_l+0xa08>
 800cc96:	ee18 3a10 	vmov	r3, s16
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	f43f ad40 	beq.w	800c720 <_strtod_l+0x488>
 800cca0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ce74 <_strtod_l+0xbdc>
 800cca4:	f04f 38ff 	mov.w	r8, #4294967295
 800cca8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f002 fa80 	bl	800f1b0 <_Bfree>
 800ccb0:	9905      	ldr	r1, [sp, #20]
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f002 fa7c 	bl	800f1b0 <_Bfree>
 800ccb8:	4659      	mov	r1, fp
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f002 fa78 	bl	800f1b0 <_Bfree>
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f002 fa74 	bl	800f1b0 <_Bfree>
 800ccc8:	e609      	b.n	800c8de <_strtod_l+0x646>
 800ccca:	f1b8 0f01 	cmp.w	r8, #1
 800ccce:	d103      	bne.n	800ccd8 <_strtod_l+0xa40>
 800ccd0:	f1b9 0f00 	cmp.w	r9, #0
 800ccd4:	f43f ad95 	beq.w	800c802 <_strtod_l+0x56a>
 800ccd8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ce30 <_strtod_l+0xb98>
 800ccdc:	4f60      	ldr	r7, [pc, #384]	; (800ce60 <_strtod_l+0xbc8>)
 800ccde:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cce2:	2600      	movs	r6, #0
 800cce4:	e7ae      	b.n	800cc44 <_strtod_l+0x9ac>
 800cce6:	4f5f      	ldr	r7, [pc, #380]	; (800ce64 <_strtod_l+0xbcc>)
 800cce8:	2600      	movs	r6, #0
 800ccea:	e7a7      	b.n	800cc3c <_strtod_l+0x9a4>
 800ccec:	4b5d      	ldr	r3, [pc, #372]	; (800ce64 <_strtod_l+0xbcc>)
 800ccee:	4630      	mov	r0, r6
 800ccf0:	4639      	mov	r1, r7
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f7f3 fca0 	bl	8000638 <__aeabi_dmul>
 800ccf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	460f      	mov	r7, r1
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d09c      	beq.n	800cc3c <_strtod_l+0x9a4>
 800cd02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cd06:	e79d      	b.n	800cc44 <_strtod_l+0x9ac>
 800cd08:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ce38 <_strtod_l+0xba0>
 800cd0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd10:	ec57 6b17 	vmov	r6, r7, d7
 800cd14:	e796      	b.n	800cc44 <_strtod_l+0x9ac>
 800cd16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cd1a:	9b04      	ldr	r3, [sp, #16]
 800cd1c:	46ca      	mov	sl, r9
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1c2      	bne.n	800cca8 <_strtod_l+0xa10>
 800cd22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd28:	0d1b      	lsrs	r3, r3, #20
 800cd2a:	051b      	lsls	r3, r3, #20
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d1bb      	bne.n	800cca8 <_strtod_l+0xa10>
 800cd30:	4630      	mov	r0, r6
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f3 ffe0 	bl	8000cf8 <__aeabi_d2lz>
 800cd38:	f7f3 fc50 	bl	80005dc <__aeabi_l2d>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	4630      	mov	r0, r6
 800cd42:	4639      	mov	r1, r7
 800cd44:	f7f3 fac0 	bl	80002c8 <__aeabi_dsub>
 800cd48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd4e:	ea43 0308 	orr.w	r3, r3, r8
 800cd52:	4313      	orrs	r3, r2
 800cd54:	4606      	mov	r6, r0
 800cd56:	460f      	mov	r7, r1
 800cd58:	d054      	beq.n	800ce04 <_strtod_l+0xb6c>
 800cd5a:	a339      	add	r3, pc, #228	; (adr r3, 800ce40 <_strtod_l+0xba8>)
 800cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd60:	f7f3 fedc 	bl	8000b1c <__aeabi_dcmplt>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	f47f ace5 	bne.w	800c734 <_strtod_l+0x49c>
 800cd6a:	a337      	add	r3, pc, #220	; (adr r3, 800ce48 <_strtod_l+0xbb0>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	4630      	mov	r0, r6
 800cd72:	4639      	mov	r1, r7
 800cd74:	f7f3 fef0 	bl	8000b58 <__aeabi_dcmpgt>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d095      	beq.n	800cca8 <_strtod_l+0xa10>
 800cd7c:	e4da      	b.n	800c734 <_strtod_l+0x49c>
 800cd7e:	9b04      	ldr	r3, [sp, #16]
 800cd80:	b333      	cbz	r3, 800cdd0 <_strtod_l+0xb38>
 800cd82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd88:	d822      	bhi.n	800cdd0 <_strtod_l+0xb38>
 800cd8a:	a331      	add	r3, pc, #196	; (adr r3, 800ce50 <_strtod_l+0xbb8>)
 800cd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd90:	4630      	mov	r0, r6
 800cd92:	4639      	mov	r1, r7
 800cd94:	f7f3 fecc 	bl	8000b30 <__aeabi_dcmple>
 800cd98:	b1a0      	cbz	r0, 800cdc4 <_strtod_l+0xb2c>
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f7f3 ff23 	bl	8000be8 <__aeabi_d2uiz>
 800cda2:	2801      	cmp	r0, #1
 800cda4:	bf38      	it	cc
 800cda6:	2001      	movcc	r0, #1
 800cda8:	f7f3 fbcc 	bl	8000544 <__aeabi_ui2d>
 800cdac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdae:	4606      	mov	r6, r0
 800cdb0:	460f      	mov	r7, r1
 800cdb2:	bb23      	cbnz	r3, 800cdfe <_strtod_l+0xb66>
 800cdb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdb8:	9010      	str	r0, [sp, #64]	; 0x40
 800cdba:	9311      	str	r3, [sp, #68]	; 0x44
 800cdbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cdc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cdc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdc8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cdcc:	1a9b      	subs	r3, r3, r2
 800cdce:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cdd4:	eeb0 0a48 	vmov.f32	s0, s16
 800cdd8:	eef0 0a68 	vmov.f32	s1, s17
 800cddc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cde0:	f002 fd12 	bl	800f808 <__ulp>
 800cde4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cde8:	ec53 2b10 	vmov	r2, r3, d0
 800cdec:	f7f3 fc24 	bl	8000638 <__aeabi_dmul>
 800cdf0:	ec53 2b18 	vmov	r2, r3, d8
 800cdf4:	f7f3 fa6a 	bl	80002cc <__adddf3>
 800cdf8:	4680      	mov	r8, r0
 800cdfa:	4689      	mov	r9, r1
 800cdfc:	e78d      	b.n	800cd1a <_strtod_l+0xa82>
 800cdfe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ce02:	e7db      	b.n	800cdbc <_strtod_l+0xb24>
 800ce04:	a314      	add	r3, pc, #80	; (adr r3, 800ce58 <_strtod_l+0xbc0>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f7f3 fe87 	bl	8000b1c <__aeabi_dcmplt>
 800ce0e:	e7b3      	b.n	800cd78 <_strtod_l+0xae0>
 800ce10:	2300      	movs	r3, #0
 800ce12:	930a      	str	r3, [sp, #40]	; 0x28
 800ce14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	f7ff ba7c 	b.w	800c316 <_strtod_l+0x7e>
 800ce1e:	2a65      	cmp	r2, #101	; 0x65
 800ce20:	f43f ab75 	beq.w	800c50e <_strtod_l+0x276>
 800ce24:	2a45      	cmp	r2, #69	; 0x45
 800ce26:	f43f ab72 	beq.w	800c50e <_strtod_l+0x276>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	f7ff bbaa 	b.w	800c584 <_strtod_l+0x2ec>
 800ce30:	00000000 	.word	0x00000000
 800ce34:	bff00000 	.word	0xbff00000
 800ce38:	00000000 	.word	0x00000000
 800ce3c:	3ff00000 	.word	0x3ff00000
 800ce40:	94a03595 	.word	0x94a03595
 800ce44:	3fdfffff 	.word	0x3fdfffff
 800ce48:	35afe535 	.word	0x35afe535
 800ce4c:	3fe00000 	.word	0x3fe00000
 800ce50:	ffc00000 	.word	0xffc00000
 800ce54:	41dfffff 	.word	0x41dfffff
 800ce58:	94a03595 	.word	0x94a03595
 800ce5c:	3fcfffff 	.word	0x3fcfffff
 800ce60:	3ff00000 	.word	0x3ff00000
 800ce64:	3fe00000 	.word	0x3fe00000
 800ce68:	7ff00000 	.word	0x7ff00000
 800ce6c:	7fe00000 	.word	0x7fe00000
 800ce70:	7c9fffff 	.word	0x7c9fffff
 800ce74:	7fefffff 	.word	0x7fefffff

0800ce78 <strtod>:
 800ce78:	460a      	mov	r2, r1
 800ce7a:	4601      	mov	r1, r0
 800ce7c:	4802      	ldr	r0, [pc, #8]	; (800ce88 <strtod+0x10>)
 800ce7e:	4b03      	ldr	r3, [pc, #12]	; (800ce8c <strtod+0x14>)
 800ce80:	6800      	ldr	r0, [r0, #0]
 800ce82:	f7ff ba09 	b.w	800c298 <_strtod_l>
 800ce86:	bf00      	nop
 800ce88:	2000023c 	.word	0x2000023c
 800ce8c:	20000084 	.word	0x20000084

0800ce90 <__cvt>:
 800ce90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce94:	ec55 4b10 	vmov	r4, r5, d0
 800ce98:	2d00      	cmp	r5, #0
 800ce9a:	460e      	mov	r6, r1
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	462b      	mov	r3, r5
 800cea0:	bfbb      	ittet	lt
 800cea2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cea6:	461d      	movlt	r5, r3
 800cea8:	2300      	movge	r3, #0
 800ceaa:	232d      	movlt	r3, #45	; 0x2d
 800ceac:	700b      	strb	r3, [r1, #0]
 800ceae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ceb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ceb4:	4691      	mov	r9, r2
 800ceb6:	f023 0820 	bic.w	r8, r3, #32
 800ceba:	bfbc      	itt	lt
 800cebc:	4622      	movlt	r2, r4
 800cebe:	4614      	movlt	r4, r2
 800cec0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cec4:	d005      	beq.n	800ced2 <__cvt+0x42>
 800cec6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ceca:	d100      	bne.n	800cece <__cvt+0x3e>
 800cecc:	3601      	adds	r6, #1
 800cece:	2102      	movs	r1, #2
 800ced0:	e000      	b.n	800ced4 <__cvt+0x44>
 800ced2:	2103      	movs	r1, #3
 800ced4:	ab03      	add	r3, sp, #12
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	ab02      	add	r3, sp, #8
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	ec45 4b10 	vmov	d0, r4, r5
 800cee0:	4653      	mov	r3, sl
 800cee2:	4632      	mov	r2, r6
 800cee4:	f000 fec8 	bl	800dc78 <_dtoa_r>
 800cee8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ceec:	4607      	mov	r7, r0
 800ceee:	d102      	bne.n	800cef6 <__cvt+0x66>
 800cef0:	f019 0f01 	tst.w	r9, #1
 800cef4:	d022      	beq.n	800cf3c <__cvt+0xac>
 800cef6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cefa:	eb07 0906 	add.w	r9, r7, r6
 800cefe:	d110      	bne.n	800cf22 <__cvt+0x92>
 800cf00:	783b      	ldrb	r3, [r7, #0]
 800cf02:	2b30      	cmp	r3, #48	; 0x30
 800cf04:	d10a      	bne.n	800cf1c <__cvt+0x8c>
 800cf06:	2200      	movs	r2, #0
 800cf08:	2300      	movs	r3, #0
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	f7f3 fdfb 	bl	8000b08 <__aeabi_dcmpeq>
 800cf12:	b918      	cbnz	r0, 800cf1c <__cvt+0x8c>
 800cf14:	f1c6 0601 	rsb	r6, r6, #1
 800cf18:	f8ca 6000 	str.w	r6, [sl]
 800cf1c:	f8da 3000 	ldr.w	r3, [sl]
 800cf20:	4499      	add	r9, r3
 800cf22:	2200      	movs	r2, #0
 800cf24:	2300      	movs	r3, #0
 800cf26:	4620      	mov	r0, r4
 800cf28:	4629      	mov	r1, r5
 800cf2a:	f7f3 fded 	bl	8000b08 <__aeabi_dcmpeq>
 800cf2e:	b108      	cbz	r0, 800cf34 <__cvt+0xa4>
 800cf30:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf34:	2230      	movs	r2, #48	; 0x30
 800cf36:	9b03      	ldr	r3, [sp, #12]
 800cf38:	454b      	cmp	r3, r9
 800cf3a:	d307      	bcc.n	800cf4c <__cvt+0xbc>
 800cf3c:	9b03      	ldr	r3, [sp, #12]
 800cf3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf40:	1bdb      	subs	r3, r3, r7
 800cf42:	4638      	mov	r0, r7
 800cf44:	6013      	str	r3, [r2, #0]
 800cf46:	b004      	add	sp, #16
 800cf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4c:	1c59      	adds	r1, r3, #1
 800cf4e:	9103      	str	r1, [sp, #12]
 800cf50:	701a      	strb	r2, [r3, #0]
 800cf52:	e7f0      	b.n	800cf36 <__cvt+0xa6>

0800cf54 <__exponent>:
 800cf54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf56:	4603      	mov	r3, r0
 800cf58:	2900      	cmp	r1, #0
 800cf5a:	bfb8      	it	lt
 800cf5c:	4249      	neglt	r1, r1
 800cf5e:	f803 2b02 	strb.w	r2, [r3], #2
 800cf62:	bfb4      	ite	lt
 800cf64:	222d      	movlt	r2, #45	; 0x2d
 800cf66:	222b      	movge	r2, #43	; 0x2b
 800cf68:	2909      	cmp	r1, #9
 800cf6a:	7042      	strb	r2, [r0, #1]
 800cf6c:	dd2a      	ble.n	800cfc4 <__exponent+0x70>
 800cf6e:	f10d 0207 	add.w	r2, sp, #7
 800cf72:	4617      	mov	r7, r2
 800cf74:	260a      	movs	r6, #10
 800cf76:	4694      	mov	ip, r2
 800cf78:	fb91 f5f6 	sdiv	r5, r1, r6
 800cf7c:	fb06 1415 	mls	r4, r6, r5, r1
 800cf80:	3430      	adds	r4, #48	; 0x30
 800cf82:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cf86:	460c      	mov	r4, r1
 800cf88:	2c63      	cmp	r4, #99	; 0x63
 800cf8a:	f102 32ff 	add.w	r2, r2, #4294967295
 800cf8e:	4629      	mov	r1, r5
 800cf90:	dcf1      	bgt.n	800cf76 <__exponent+0x22>
 800cf92:	3130      	adds	r1, #48	; 0x30
 800cf94:	f1ac 0402 	sub.w	r4, ip, #2
 800cf98:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cf9c:	1c41      	adds	r1, r0, #1
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	42ba      	cmp	r2, r7
 800cfa2:	d30a      	bcc.n	800cfba <__exponent+0x66>
 800cfa4:	f10d 0209 	add.w	r2, sp, #9
 800cfa8:	eba2 020c 	sub.w	r2, r2, ip
 800cfac:	42bc      	cmp	r4, r7
 800cfae:	bf88      	it	hi
 800cfb0:	2200      	movhi	r2, #0
 800cfb2:	4413      	add	r3, r2
 800cfb4:	1a18      	subs	r0, r3, r0
 800cfb6:	b003      	add	sp, #12
 800cfb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfba:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cfbe:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cfc2:	e7ed      	b.n	800cfa0 <__exponent+0x4c>
 800cfc4:	2330      	movs	r3, #48	; 0x30
 800cfc6:	3130      	adds	r1, #48	; 0x30
 800cfc8:	7083      	strb	r3, [r0, #2]
 800cfca:	70c1      	strb	r1, [r0, #3]
 800cfcc:	1d03      	adds	r3, r0, #4
 800cfce:	e7f1      	b.n	800cfb4 <__exponent+0x60>

0800cfd0 <_printf_float>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	ed2d 8b02 	vpush	{d8}
 800cfd8:	b08d      	sub	sp, #52	; 0x34
 800cfda:	460c      	mov	r4, r1
 800cfdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cfe0:	4616      	mov	r6, r2
 800cfe2:	461f      	mov	r7, r3
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	f000 fd31 	bl	800da4c <_localeconv_r>
 800cfea:	f8d0 a000 	ldr.w	sl, [r0]
 800cfee:	4650      	mov	r0, sl
 800cff0:	f7f3 f95e 	bl	80002b0 <strlen>
 800cff4:	2300      	movs	r3, #0
 800cff6:	930a      	str	r3, [sp, #40]	; 0x28
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	9305      	str	r3, [sp, #20]
 800cffc:	f8d8 3000 	ldr.w	r3, [r8]
 800d000:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d004:	3307      	adds	r3, #7
 800d006:	f023 0307 	bic.w	r3, r3, #7
 800d00a:	f103 0208 	add.w	r2, r3, #8
 800d00e:	f8c8 2000 	str.w	r2, [r8]
 800d012:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d016:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d01a:	9307      	str	r3, [sp, #28]
 800d01c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d020:	ee08 0a10 	vmov	s16, r0
 800d024:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d02c:	4b9e      	ldr	r3, [pc, #632]	; (800d2a8 <_printf_float+0x2d8>)
 800d02e:	f04f 32ff 	mov.w	r2, #4294967295
 800d032:	f7f3 fd9b 	bl	8000b6c <__aeabi_dcmpun>
 800d036:	bb88      	cbnz	r0, 800d09c <_printf_float+0xcc>
 800d038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d03c:	4b9a      	ldr	r3, [pc, #616]	; (800d2a8 <_printf_float+0x2d8>)
 800d03e:	f04f 32ff 	mov.w	r2, #4294967295
 800d042:	f7f3 fd75 	bl	8000b30 <__aeabi_dcmple>
 800d046:	bb48      	cbnz	r0, 800d09c <_printf_float+0xcc>
 800d048:	2200      	movs	r2, #0
 800d04a:	2300      	movs	r3, #0
 800d04c:	4640      	mov	r0, r8
 800d04e:	4649      	mov	r1, r9
 800d050:	f7f3 fd64 	bl	8000b1c <__aeabi_dcmplt>
 800d054:	b110      	cbz	r0, 800d05c <_printf_float+0x8c>
 800d056:	232d      	movs	r3, #45	; 0x2d
 800d058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d05c:	4a93      	ldr	r2, [pc, #588]	; (800d2ac <_printf_float+0x2dc>)
 800d05e:	4b94      	ldr	r3, [pc, #592]	; (800d2b0 <_printf_float+0x2e0>)
 800d060:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d064:	bf94      	ite	ls
 800d066:	4690      	movls	r8, r2
 800d068:	4698      	movhi	r8, r3
 800d06a:	2303      	movs	r3, #3
 800d06c:	6123      	str	r3, [r4, #16]
 800d06e:	9b05      	ldr	r3, [sp, #20]
 800d070:	f023 0304 	bic.w	r3, r3, #4
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	f04f 0900 	mov.w	r9, #0
 800d07a:	9700      	str	r7, [sp, #0]
 800d07c:	4633      	mov	r3, r6
 800d07e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d080:	4621      	mov	r1, r4
 800d082:	4628      	mov	r0, r5
 800d084:	f000 f9da 	bl	800d43c <_printf_common>
 800d088:	3001      	adds	r0, #1
 800d08a:	f040 8090 	bne.w	800d1ae <_printf_float+0x1de>
 800d08e:	f04f 30ff 	mov.w	r0, #4294967295
 800d092:	b00d      	add	sp, #52	; 0x34
 800d094:	ecbd 8b02 	vpop	{d8}
 800d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09c:	4642      	mov	r2, r8
 800d09e:	464b      	mov	r3, r9
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	f7f3 fd62 	bl	8000b6c <__aeabi_dcmpun>
 800d0a8:	b140      	cbz	r0, 800d0bc <_printf_float+0xec>
 800d0aa:	464b      	mov	r3, r9
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	bfbc      	itt	lt
 800d0b0:	232d      	movlt	r3, #45	; 0x2d
 800d0b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d0b6:	4a7f      	ldr	r2, [pc, #508]	; (800d2b4 <_printf_float+0x2e4>)
 800d0b8:	4b7f      	ldr	r3, [pc, #508]	; (800d2b8 <_printf_float+0x2e8>)
 800d0ba:	e7d1      	b.n	800d060 <_printf_float+0x90>
 800d0bc:	6863      	ldr	r3, [r4, #4]
 800d0be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d0c2:	9206      	str	r2, [sp, #24]
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	d13f      	bne.n	800d148 <_printf_float+0x178>
 800d0c8:	2306      	movs	r3, #6
 800d0ca:	6063      	str	r3, [r4, #4]
 800d0cc:	9b05      	ldr	r3, [sp, #20]
 800d0ce:	6861      	ldr	r1, [r4, #4]
 800d0d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9303      	str	r3, [sp, #12]
 800d0d8:	ab0a      	add	r3, sp, #40	; 0x28
 800d0da:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d0de:	ab09      	add	r3, sp, #36	; 0x24
 800d0e0:	ec49 8b10 	vmov	d0, r8, r9
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	6022      	str	r2, [r4, #0]
 800d0e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	f7ff fecf 	bl	800ce90 <__cvt>
 800d0f2:	9b06      	ldr	r3, [sp, #24]
 800d0f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0f6:	2b47      	cmp	r3, #71	; 0x47
 800d0f8:	4680      	mov	r8, r0
 800d0fa:	d108      	bne.n	800d10e <_printf_float+0x13e>
 800d0fc:	1cc8      	adds	r0, r1, #3
 800d0fe:	db02      	blt.n	800d106 <_printf_float+0x136>
 800d100:	6863      	ldr	r3, [r4, #4]
 800d102:	4299      	cmp	r1, r3
 800d104:	dd41      	ble.n	800d18a <_printf_float+0x1ba>
 800d106:	f1ab 0302 	sub.w	r3, fp, #2
 800d10a:	fa5f fb83 	uxtb.w	fp, r3
 800d10e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d112:	d820      	bhi.n	800d156 <_printf_float+0x186>
 800d114:	3901      	subs	r1, #1
 800d116:	465a      	mov	r2, fp
 800d118:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d11c:	9109      	str	r1, [sp, #36]	; 0x24
 800d11e:	f7ff ff19 	bl	800cf54 <__exponent>
 800d122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d124:	1813      	adds	r3, r2, r0
 800d126:	2a01      	cmp	r2, #1
 800d128:	4681      	mov	r9, r0
 800d12a:	6123      	str	r3, [r4, #16]
 800d12c:	dc02      	bgt.n	800d134 <_printf_float+0x164>
 800d12e:	6822      	ldr	r2, [r4, #0]
 800d130:	07d2      	lsls	r2, r2, #31
 800d132:	d501      	bpl.n	800d138 <_printf_float+0x168>
 800d134:	3301      	adds	r3, #1
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d09c      	beq.n	800d07a <_printf_float+0xaa>
 800d140:	232d      	movs	r3, #45	; 0x2d
 800d142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d146:	e798      	b.n	800d07a <_printf_float+0xaa>
 800d148:	9a06      	ldr	r2, [sp, #24]
 800d14a:	2a47      	cmp	r2, #71	; 0x47
 800d14c:	d1be      	bne.n	800d0cc <_printf_float+0xfc>
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1bc      	bne.n	800d0cc <_printf_float+0xfc>
 800d152:	2301      	movs	r3, #1
 800d154:	e7b9      	b.n	800d0ca <_printf_float+0xfa>
 800d156:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d15a:	d118      	bne.n	800d18e <_printf_float+0x1be>
 800d15c:	2900      	cmp	r1, #0
 800d15e:	6863      	ldr	r3, [r4, #4]
 800d160:	dd0b      	ble.n	800d17a <_printf_float+0x1aa>
 800d162:	6121      	str	r1, [r4, #16]
 800d164:	b913      	cbnz	r3, 800d16c <_printf_float+0x19c>
 800d166:	6822      	ldr	r2, [r4, #0]
 800d168:	07d0      	lsls	r0, r2, #31
 800d16a:	d502      	bpl.n	800d172 <_printf_float+0x1a2>
 800d16c:	3301      	adds	r3, #1
 800d16e:	440b      	add	r3, r1
 800d170:	6123      	str	r3, [r4, #16]
 800d172:	65a1      	str	r1, [r4, #88]	; 0x58
 800d174:	f04f 0900 	mov.w	r9, #0
 800d178:	e7de      	b.n	800d138 <_printf_float+0x168>
 800d17a:	b913      	cbnz	r3, 800d182 <_printf_float+0x1b2>
 800d17c:	6822      	ldr	r2, [r4, #0]
 800d17e:	07d2      	lsls	r2, r2, #31
 800d180:	d501      	bpl.n	800d186 <_printf_float+0x1b6>
 800d182:	3302      	adds	r3, #2
 800d184:	e7f4      	b.n	800d170 <_printf_float+0x1a0>
 800d186:	2301      	movs	r3, #1
 800d188:	e7f2      	b.n	800d170 <_printf_float+0x1a0>
 800d18a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d190:	4299      	cmp	r1, r3
 800d192:	db05      	blt.n	800d1a0 <_printf_float+0x1d0>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	6121      	str	r1, [r4, #16]
 800d198:	07d8      	lsls	r0, r3, #31
 800d19a:	d5ea      	bpl.n	800d172 <_printf_float+0x1a2>
 800d19c:	1c4b      	adds	r3, r1, #1
 800d19e:	e7e7      	b.n	800d170 <_printf_float+0x1a0>
 800d1a0:	2900      	cmp	r1, #0
 800d1a2:	bfd4      	ite	le
 800d1a4:	f1c1 0202 	rsble	r2, r1, #2
 800d1a8:	2201      	movgt	r2, #1
 800d1aa:	4413      	add	r3, r2
 800d1ac:	e7e0      	b.n	800d170 <_printf_float+0x1a0>
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	055a      	lsls	r2, r3, #21
 800d1b2:	d407      	bmi.n	800d1c4 <_printf_float+0x1f4>
 800d1b4:	6923      	ldr	r3, [r4, #16]
 800d1b6:	4642      	mov	r2, r8
 800d1b8:	4631      	mov	r1, r6
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	47b8      	blx	r7
 800d1be:	3001      	adds	r0, #1
 800d1c0:	d12c      	bne.n	800d21c <_printf_float+0x24c>
 800d1c2:	e764      	b.n	800d08e <_printf_float+0xbe>
 800d1c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1c8:	f240 80e0 	bls.w	800d38c <_printf_float+0x3bc>
 800d1cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	f7f3 fc98 	bl	8000b08 <__aeabi_dcmpeq>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d034      	beq.n	800d246 <_printf_float+0x276>
 800d1dc:	4a37      	ldr	r2, [pc, #220]	; (800d2bc <_printf_float+0x2ec>)
 800d1de:	2301      	movs	r3, #1
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	47b8      	blx	r7
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	f43f af51 	beq.w	800d08e <_printf_float+0xbe>
 800d1ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	db02      	blt.n	800d1fa <_printf_float+0x22a>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	07d8      	lsls	r0, r3, #31
 800d1f8:	d510      	bpl.n	800d21c <_printf_float+0x24c>
 800d1fa:	ee18 3a10 	vmov	r3, s16
 800d1fe:	4652      	mov	r2, sl
 800d200:	4631      	mov	r1, r6
 800d202:	4628      	mov	r0, r5
 800d204:	47b8      	blx	r7
 800d206:	3001      	adds	r0, #1
 800d208:	f43f af41 	beq.w	800d08e <_printf_float+0xbe>
 800d20c:	f04f 0800 	mov.w	r8, #0
 800d210:	f104 091a 	add.w	r9, r4, #26
 800d214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d216:	3b01      	subs	r3, #1
 800d218:	4543      	cmp	r3, r8
 800d21a:	dc09      	bgt.n	800d230 <_printf_float+0x260>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	079b      	lsls	r3, r3, #30
 800d220:	f100 8107 	bmi.w	800d432 <_printf_float+0x462>
 800d224:	68e0      	ldr	r0, [r4, #12]
 800d226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d228:	4298      	cmp	r0, r3
 800d22a:	bfb8      	it	lt
 800d22c:	4618      	movlt	r0, r3
 800d22e:	e730      	b.n	800d092 <_printf_float+0xc2>
 800d230:	2301      	movs	r3, #1
 800d232:	464a      	mov	r2, r9
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	47b8      	blx	r7
 800d23a:	3001      	adds	r0, #1
 800d23c:	f43f af27 	beq.w	800d08e <_printf_float+0xbe>
 800d240:	f108 0801 	add.w	r8, r8, #1
 800d244:	e7e6      	b.n	800d214 <_printf_float+0x244>
 800d246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dc39      	bgt.n	800d2c0 <_printf_float+0x2f0>
 800d24c:	4a1b      	ldr	r2, [pc, #108]	; (800d2bc <_printf_float+0x2ec>)
 800d24e:	2301      	movs	r3, #1
 800d250:	4631      	mov	r1, r6
 800d252:	4628      	mov	r0, r5
 800d254:	47b8      	blx	r7
 800d256:	3001      	adds	r0, #1
 800d258:	f43f af19 	beq.w	800d08e <_printf_float+0xbe>
 800d25c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d260:	4313      	orrs	r3, r2
 800d262:	d102      	bne.n	800d26a <_printf_float+0x29a>
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	07d9      	lsls	r1, r3, #31
 800d268:	d5d8      	bpl.n	800d21c <_printf_float+0x24c>
 800d26a:	ee18 3a10 	vmov	r3, s16
 800d26e:	4652      	mov	r2, sl
 800d270:	4631      	mov	r1, r6
 800d272:	4628      	mov	r0, r5
 800d274:	47b8      	blx	r7
 800d276:	3001      	adds	r0, #1
 800d278:	f43f af09 	beq.w	800d08e <_printf_float+0xbe>
 800d27c:	f04f 0900 	mov.w	r9, #0
 800d280:	f104 0a1a 	add.w	sl, r4, #26
 800d284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d286:	425b      	negs	r3, r3
 800d288:	454b      	cmp	r3, r9
 800d28a:	dc01      	bgt.n	800d290 <_printf_float+0x2c0>
 800d28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d28e:	e792      	b.n	800d1b6 <_printf_float+0x1e6>
 800d290:	2301      	movs	r3, #1
 800d292:	4652      	mov	r2, sl
 800d294:	4631      	mov	r1, r6
 800d296:	4628      	mov	r0, r5
 800d298:	47b8      	blx	r7
 800d29a:	3001      	adds	r0, #1
 800d29c:	f43f aef7 	beq.w	800d08e <_printf_float+0xbe>
 800d2a0:	f109 0901 	add.w	r9, r9, #1
 800d2a4:	e7ee      	b.n	800d284 <_printf_float+0x2b4>
 800d2a6:	bf00      	nop
 800d2a8:	7fefffff 	.word	0x7fefffff
 800d2ac:	08010d11 	.word	0x08010d11
 800d2b0:	08010d15 	.word	0x08010d15
 800d2b4:	08010d19 	.word	0x08010d19
 800d2b8:	08010d1d 	.word	0x08010d1d
 800d2bc:	08010d21 	.word	0x08010d21
 800d2c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	bfa8      	it	ge
 800d2c8:	461a      	movge	r2, r3
 800d2ca:	2a00      	cmp	r2, #0
 800d2cc:	4691      	mov	r9, r2
 800d2ce:	dc37      	bgt.n	800d340 <_printf_float+0x370>
 800d2d0:	f04f 0b00 	mov.w	fp, #0
 800d2d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2d8:	f104 021a 	add.w	r2, r4, #26
 800d2dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2de:	9305      	str	r3, [sp, #20]
 800d2e0:	eba3 0309 	sub.w	r3, r3, r9
 800d2e4:	455b      	cmp	r3, fp
 800d2e6:	dc33      	bgt.n	800d350 <_printf_float+0x380>
 800d2e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	db3b      	blt.n	800d368 <_printf_float+0x398>
 800d2f0:	6823      	ldr	r3, [r4, #0]
 800d2f2:	07da      	lsls	r2, r3, #31
 800d2f4:	d438      	bmi.n	800d368 <_printf_float+0x398>
 800d2f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d2fa:	eba2 0903 	sub.w	r9, r2, r3
 800d2fe:	9b05      	ldr	r3, [sp, #20]
 800d300:	1ad2      	subs	r2, r2, r3
 800d302:	4591      	cmp	r9, r2
 800d304:	bfa8      	it	ge
 800d306:	4691      	movge	r9, r2
 800d308:	f1b9 0f00 	cmp.w	r9, #0
 800d30c:	dc35      	bgt.n	800d37a <_printf_float+0x3aa>
 800d30e:	f04f 0800 	mov.w	r8, #0
 800d312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d316:	f104 0a1a 	add.w	sl, r4, #26
 800d31a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d31e:	1a9b      	subs	r3, r3, r2
 800d320:	eba3 0309 	sub.w	r3, r3, r9
 800d324:	4543      	cmp	r3, r8
 800d326:	f77f af79 	ble.w	800d21c <_printf_float+0x24c>
 800d32a:	2301      	movs	r3, #1
 800d32c:	4652      	mov	r2, sl
 800d32e:	4631      	mov	r1, r6
 800d330:	4628      	mov	r0, r5
 800d332:	47b8      	blx	r7
 800d334:	3001      	adds	r0, #1
 800d336:	f43f aeaa 	beq.w	800d08e <_printf_float+0xbe>
 800d33a:	f108 0801 	add.w	r8, r8, #1
 800d33e:	e7ec      	b.n	800d31a <_printf_float+0x34a>
 800d340:	4613      	mov	r3, r2
 800d342:	4631      	mov	r1, r6
 800d344:	4642      	mov	r2, r8
 800d346:	4628      	mov	r0, r5
 800d348:	47b8      	blx	r7
 800d34a:	3001      	adds	r0, #1
 800d34c:	d1c0      	bne.n	800d2d0 <_printf_float+0x300>
 800d34e:	e69e      	b.n	800d08e <_printf_float+0xbe>
 800d350:	2301      	movs	r3, #1
 800d352:	4631      	mov	r1, r6
 800d354:	4628      	mov	r0, r5
 800d356:	9205      	str	r2, [sp, #20]
 800d358:	47b8      	blx	r7
 800d35a:	3001      	adds	r0, #1
 800d35c:	f43f ae97 	beq.w	800d08e <_printf_float+0xbe>
 800d360:	9a05      	ldr	r2, [sp, #20]
 800d362:	f10b 0b01 	add.w	fp, fp, #1
 800d366:	e7b9      	b.n	800d2dc <_printf_float+0x30c>
 800d368:	ee18 3a10 	vmov	r3, s16
 800d36c:	4652      	mov	r2, sl
 800d36e:	4631      	mov	r1, r6
 800d370:	4628      	mov	r0, r5
 800d372:	47b8      	blx	r7
 800d374:	3001      	adds	r0, #1
 800d376:	d1be      	bne.n	800d2f6 <_printf_float+0x326>
 800d378:	e689      	b.n	800d08e <_printf_float+0xbe>
 800d37a:	9a05      	ldr	r2, [sp, #20]
 800d37c:	464b      	mov	r3, r9
 800d37e:	4442      	add	r2, r8
 800d380:	4631      	mov	r1, r6
 800d382:	4628      	mov	r0, r5
 800d384:	47b8      	blx	r7
 800d386:	3001      	adds	r0, #1
 800d388:	d1c1      	bne.n	800d30e <_printf_float+0x33e>
 800d38a:	e680      	b.n	800d08e <_printf_float+0xbe>
 800d38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d38e:	2a01      	cmp	r2, #1
 800d390:	dc01      	bgt.n	800d396 <_printf_float+0x3c6>
 800d392:	07db      	lsls	r3, r3, #31
 800d394:	d53a      	bpl.n	800d40c <_printf_float+0x43c>
 800d396:	2301      	movs	r3, #1
 800d398:	4642      	mov	r2, r8
 800d39a:	4631      	mov	r1, r6
 800d39c:	4628      	mov	r0, r5
 800d39e:	47b8      	blx	r7
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	f43f ae74 	beq.w	800d08e <_printf_float+0xbe>
 800d3a6:	ee18 3a10 	vmov	r3, s16
 800d3aa:	4652      	mov	r2, sl
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	47b8      	blx	r7
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	f43f ae6b 	beq.w	800d08e <_printf_float+0xbe>
 800d3b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3bc:	2200      	movs	r2, #0
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d3c4:	f7f3 fba0 	bl	8000b08 <__aeabi_dcmpeq>
 800d3c8:	b9d8      	cbnz	r0, 800d402 <_printf_float+0x432>
 800d3ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d3ce:	f108 0201 	add.w	r2, r8, #1
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b8      	blx	r7
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d10e      	bne.n	800d3fa <_printf_float+0x42a>
 800d3dc:	e657      	b.n	800d08e <_printf_float+0xbe>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	4652      	mov	r2, sl
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	47b8      	blx	r7
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	f43f ae50 	beq.w	800d08e <_printf_float+0xbe>
 800d3ee:	f108 0801 	add.w	r8, r8, #1
 800d3f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	4543      	cmp	r3, r8
 800d3f8:	dcf1      	bgt.n	800d3de <_printf_float+0x40e>
 800d3fa:	464b      	mov	r3, r9
 800d3fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d400:	e6da      	b.n	800d1b8 <_printf_float+0x1e8>
 800d402:	f04f 0800 	mov.w	r8, #0
 800d406:	f104 0a1a 	add.w	sl, r4, #26
 800d40a:	e7f2      	b.n	800d3f2 <_printf_float+0x422>
 800d40c:	2301      	movs	r3, #1
 800d40e:	4642      	mov	r2, r8
 800d410:	e7df      	b.n	800d3d2 <_printf_float+0x402>
 800d412:	2301      	movs	r3, #1
 800d414:	464a      	mov	r2, r9
 800d416:	4631      	mov	r1, r6
 800d418:	4628      	mov	r0, r5
 800d41a:	47b8      	blx	r7
 800d41c:	3001      	adds	r0, #1
 800d41e:	f43f ae36 	beq.w	800d08e <_printf_float+0xbe>
 800d422:	f108 0801 	add.w	r8, r8, #1
 800d426:	68e3      	ldr	r3, [r4, #12]
 800d428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d42a:	1a5b      	subs	r3, r3, r1
 800d42c:	4543      	cmp	r3, r8
 800d42e:	dcf0      	bgt.n	800d412 <_printf_float+0x442>
 800d430:	e6f8      	b.n	800d224 <_printf_float+0x254>
 800d432:	f04f 0800 	mov.w	r8, #0
 800d436:	f104 0919 	add.w	r9, r4, #25
 800d43a:	e7f4      	b.n	800d426 <_printf_float+0x456>

0800d43c <_printf_common>:
 800d43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d440:	4616      	mov	r6, r2
 800d442:	4699      	mov	r9, r3
 800d444:	688a      	ldr	r2, [r1, #8]
 800d446:	690b      	ldr	r3, [r1, #16]
 800d448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d44c:	4293      	cmp	r3, r2
 800d44e:	bfb8      	it	lt
 800d450:	4613      	movlt	r3, r2
 800d452:	6033      	str	r3, [r6, #0]
 800d454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d458:	4607      	mov	r7, r0
 800d45a:	460c      	mov	r4, r1
 800d45c:	b10a      	cbz	r2, 800d462 <_printf_common+0x26>
 800d45e:	3301      	adds	r3, #1
 800d460:	6033      	str	r3, [r6, #0]
 800d462:	6823      	ldr	r3, [r4, #0]
 800d464:	0699      	lsls	r1, r3, #26
 800d466:	bf42      	ittt	mi
 800d468:	6833      	ldrmi	r3, [r6, #0]
 800d46a:	3302      	addmi	r3, #2
 800d46c:	6033      	strmi	r3, [r6, #0]
 800d46e:	6825      	ldr	r5, [r4, #0]
 800d470:	f015 0506 	ands.w	r5, r5, #6
 800d474:	d106      	bne.n	800d484 <_printf_common+0x48>
 800d476:	f104 0a19 	add.w	sl, r4, #25
 800d47a:	68e3      	ldr	r3, [r4, #12]
 800d47c:	6832      	ldr	r2, [r6, #0]
 800d47e:	1a9b      	subs	r3, r3, r2
 800d480:	42ab      	cmp	r3, r5
 800d482:	dc26      	bgt.n	800d4d2 <_printf_common+0x96>
 800d484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d488:	1e13      	subs	r3, r2, #0
 800d48a:	6822      	ldr	r2, [r4, #0]
 800d48c:	bf18      	it	ne
 800d48e:	2301      	movne	r3, #1
 800d490:	0692      	lsls	r2, r2, #26
 800d492:	d42b      	bmi.n	800d4ec <_printf_common+0xb0>
 800d494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d498:	4649      	mov	r1, r9
 800d49a:	4638      	mov	r0, r7
 800d49c:	47c0      	blx	r8
 800d49e:	3001      	adds	r0, #1
 800d4a0:	d01e      	beq.n	800d4e0 <_printf_common+0xa4>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	6922      	ldr	r2, [r4, #16]
 800d4a6:	f003 0306 	and.w	r3, r3, #6
 800d4aa:	2b04      	cmp	r3, #4
 800d4ac:	bf02      	ittt	eq
 800d4ae:	68e5      	ldreq	r5, [r4, #12]
 800d4b0:	6833      	ldreq	r3, [r6, #0]
 800d4b2:	1aed      	subeq	r5, r5, r3
 800d4b4:	68a3      	ldr	r3, [r4, #8]
 800d4b6:	bf0c      	ite	eq
 800d4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4bc:	2500      	movne	r5, #0
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	bfc4      	itt	gt
 800d4c2:	1a9b      	subgt	r3, r3, r2
 800d4c4:	18ed      	addgt	r5, r5, r3
 800d4c6:	2600      	movs	r6, #0
 800d4c8:	341a      	adds	r4, #26
 800d4ca:	42b5      	cmp	r5, r6
 800d4cc:	d11a      	bne.n	800d504 <_printf_common+0xc8>
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	e008      	b.n	800d4e4 <_printf_common+0xa8>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	4652      	mov	r2, sl
 800d4d6:	4649      	mov	r1, r9
 800d4d8:	4638      	mov	r0, r7
 800d4da:	47c0      	blx	r8
 800d4dc:	3001      	adds	r0, #1
 800d4de:	d103      	bne.n	800d4e8 <_printf_common+0xac>
 800d4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e8:	3501      	adds	r5, #1
 800d4ea:	e7c6      	b.n	800d47a <_printf_common+0x3e>
 800d4ec:	18e1      	adds	r1, r4, r3
 800d4ee:	1c5a      	adds	r2, r3, #1
 800d4f0:	2030      	movs	r0, #48	; 0x30
 800d4f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4f6:	4422      	add	r2, r4
 800d4f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d500:	3302      	adds	r3, #2
 800d502:	e7c7      	b.n	800d494 <_printf_common+0x58>
 800d504:	2301      	movs	r3, #1
 800d506:	4622      	mov	r2, r4
 800d508:	4649      	mov	r1, r9
 800d50a:	4638      	mov	r0, r7
 800d50c:	47c0      	blx	r8
 800d50e:	3001      	adds	r0, #1
 800d510:	d0e6      	beq.n	800d4e0 <_printf_common+0xa4>
 800d512:	3601      	adds	r6, #1
 800d514:	e7d9      	b.n	800d4ca <_printf_common+0x8e>
	...

0800d518 <_printf_i>:
 800d518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d51c:	7e0f      	ldrb	r7, [r1, #24]
 800d51e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d520:	2f78      	cmp	r7, #120	; 0x78
 800d522:	4691      	mov	r9, r2
 800d524:	4680      	mov	r8, r0
 800d526:	460c      	mov	r4, r1
 800d528:	469a      	mov	sl, r3
 800d52a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d52e:	d807      	bhi.n	800d540 <_printf_i+0x28>
 800d530:	2f62      	cmp	r7, #98	; 0x62
 800d532:	d80a      	bhi.n	800d54a <_printf_i+0x32>
 800d534:	2f00      	cmp	r7, #0
 800d536:	f000 80d4 	beq.w	800d6e2 <_printf_i+0x1ca>
 800d53a:	2f58      	cmp	r7, #88	; 0x58
 800d53c:	f000 80c0 	beq.w	800d6c0 <_printf_i+0x1a8>
 800d540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d548:	e03a      	b.n	800d5c0 <_printf_i+0xa8>
 800d54a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d54e:	2b15      	cmp	r3, #21
 800d550:	d8f6      	bhi.n	800d540 <_printf_i+0x28>
 800d552:	a101      	add	r1, pc, #4	; (adr r1, 800d558 <_printf_i+0x40>)
 800d554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d558:	0800d5b1 	.word	0x0800d5b1
 800d55c:	0800d5c5 	.word	0x0800d5c5
 800d560:	0800d541 	.word	0x0800d541
 800d564:	0800d541 	.word	0x0800d541
 800d568:	0800d541 	.word	0x0800d541
 800d56c:	0800d541 	.word	0x0800d541
 800d570:	0800d5c5 	.word	0x0800d5c5
 800d574:	0800d541 	.word	0x0800d541
 800d578:	0800d541 	.word	0x0800d541
 800d57c:	0800d541 	.word	0x0800d541
 800d580:	0800d541 	.word	0x0800d541
 800d584:	0800d6c9 	.word	0x0800d6c9
 800d588:	0800d5f1 	.word	0x0800d5f1
 800d58c:	0800d683 	.word	0x0800d683
 800d590:	0800d541 	.word	0x0800d541
 800d594:	0800d541 	.word	0x0800d541
 800d598:	0800d6eb 	.word	0x0800d6eb
 800d59c:	0800d541 	.word	0x0800d541
 800d5a0:	0800d5f1 	.word	0x0800d5f1
 800d5a4:	0800d541 	.word	0x0800d541
 800d5a8:	0800d541 	.word	0x0800d541
 800d5ac:	0800d68b 	.word	0x0800d68b
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	1d1a      	adds	r2, r3, #4
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	602a      	str	r2, [r5, #0]
 800d5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e09f      	b.n	800d704 <_printf_i+0x1ec>
 800d5c4:	6820      	ldr	r0, [r4, #0]
 800d5c6:	682b      	ldr	r3, [r5, #0]
 800d5c8:	0607      	lsls	r7, r0, #24
 800d5ca:	f103 0104 	add.w	r1, r3, #4
 800d5ce:	6029      	str	r1, [r5, #0]
 800d5d0:	d501      	bpl.n	800d5d6 <_printf_i+0xbe>
 800d5d2:	681e      	ldr	r6, [r3, #0]
 800d5d4:	e003      	b.n	800d5de <_printf_i+0xc6>
 800d5d6:	0646      	lsls	r6, r0, #25
 800d5d8:	d5fb      	bpl.n	800d5d2 <_printf_i+0xba>
 800d5da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d5de:	2e00      	cmp	r6, #0
 800d5e0:	da03      	bge.n	800d5ea <_printf_i+0xd2>
 800d5e2:	232d      	movs	r3, #45	; 0x2d
 800d5e4:	4276      	negs	r6, r6
 800d5e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5ea:	485a      	ldr	r0, [pc, #360]	; (800d754 <_printf_i+0x23c>)
 800d5ec:	230a      	movs	r3, #10
 800d5ee:	e012      	b.n	800d616 <_printf_i+0xfe>
 800d5f0:	682b      	ldr	r3, [r5, #0]
 800d5f2:	6820      	ldr	r0, [r4, #0]
 800d5f4:	1d19      	adds	r1, r3, #4
 800d5f6:	6029      	str	r1, [r5, #0]
 800d5f8:	0605      	lsls	r5, r0, #24
 800d5fa:	d501      	bpl.n	800d600 <_printf_i+0xe8>
 800d5fc:	681e      	ldr	r6, [r3, #0]
 800d5fe:	e002      	b.n	800d606 <_printf_i+0xee>
 800d600:	0641      	lsls	r1, r0, #25
 800d602:	d5fb      	bpl.n	800d5fc <_printf_i+0xe4>
 800d604:	881e      	ldrh	r6, [r3, #0]
 800d606:	4853      	ldr	r0, [pc, #332]	; (800d754 <_printf_i+0x23c>)
 800d608:	2f6f      	cmp	r7, #111	; 0x6f
 800d60a:	bf0c      	ite	eq
 800d60c:	2308      	moveq	r3, #8
 800d60e:	230a      	movne	r3, #10
 800d610:	2100      	movs	r1, #0
 800d612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d616:	6865      	ldr	r5, [r4, #4]
 800d618:	60a5      	str	r5, [r4, #8]
 800d61a:	2d00      	cmp	r5, #0
 800d61c:	bfa2      	ittt	ge
 800d61e:	6821      	ldrge	r1, [r4, #0]
 800d620:	f021 0104 	bicge.w	r1, r1, #4
 800d624:	6021      	strge	r1, [r4, #0]
 800d626:	b90e      	cbnz	r6, 800d62c <_printf_i+0x114>
 800d628:	2d00      	cmp	r5, #0
 800d62a:	d04b      	beq.n	800d6c4 <_printf_i+0x1ac>
 800d62c:	4615      	mov	r5, r2
 800d62e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d632:	fb03 6711 	mls	r7, r3, r1, r6
 800d636:	5dc7      	ldrb	r7, [r0, r7]
 800d638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d63c:	4637      	mov	r7, r6
 800d63e:	42bb      	cmp	r3, r7
 800d640:	460e      	mov	r6, r1
 800d642:	d9f4      	bls.n	800d62e <_printf_i+0x116>
 800d644:	2b08      	cmp	r3, #8
 800d646:	d10b      	bne.n	800d660 <_printf_i+0x148>
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	07de      	lsls	r6, r3, #31
 800d64c:	d508      	bpl.n	800d660 <_printf_i+0x148>
 800d64e:	6923      	ldr	r3, [r4, #16]
 800d650:	6861      	ldr	r1, [r4, #4]
 800d652:	4299      	cmp	r1, r3
 800d654:	bfde      	ittt	le
 800d656:	2330      	movle	r3, #48	; 0x30
 800d658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d65c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d660:	1b52      	subs	r2, r2, r5
 800d662:	6122      	str	r2, [r4, #16]
 800d664:	f8cd a000 	str.w	sl, [sp]
 800d668:	464b      	mov	r3, r9
 800d66a:	aa03      	add	r2, sp, #12
 800d66c:	4621      	mov	r1, r4
 800d66e:	4640      	mov	r0, r8
 800d670:	f7ff fee4 	bl	800d43c <_printf_common>
 800d674:	3001      	adds	r0, #1
 800d676:	d14a      	bne.n	800d70e <_printf_i+0x1f6>
 800d678:	f04f 30ff 	mov.w	r0, #4294967295
 800d67c:	b004      	add	sp, #16
 800d67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	f043 0320 	orr.w	r3, r3, #32
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	4833      	ldr	r0, [pc, #204]	; (800d758 <_printf_i+0x240>)
 800d68c:	2778      	movs	r7, #120	; 0x78
 800d68e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	6829      	ldr	r1, [r5, #0]
 800d696:	061f      	lsls	r7, r3, #24
 800d698:	f851 6b04 	ldr.w	r6, [r1], #4
 800d69c:	d402      	bmi.n	800d6a4 <_printf_i+0x18c>
 800d69e:	065f      	lsls	r7, r3, #25
 800d6a0:	bf48      	it	mi
 800d6a2:	b2b6      	uxthmi	r6, r6
 800d6a4:	07df      	lsls	r7, r3, #31
 800d6a6:	bf48      	it	mi
 800d6a8:	f043 0320 	orrmi.w	r3, r3, #32
 800d6ac:	6029      	str	r1, [r5, #0]
 800d6ae:	bf48      	it	mi
 800d6b0:	6023      	strmi	r3, [r4, #0]
 800d6b2:	b91e      	cbnz	r6, 800d6bc <_printf_i+0x1a4>
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	f023 0320 	bic.w	r3, r3, #32
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	2310      	movs	r3, #16
 800d6be:	e7a7      	b.n	800d610 <_printf_i+0xf8>
 800d6c0:	4824      	ldr	r0, [pc, #144]	; (800d754 <_printf_i+0x23c>)
 800d6c2:	e7e4      	b.n	800d68e <_printf_i+0x176>
 800d6c4:	4615      	mov	r5, r2
 800d6c6:	e7bd      	b.n	800d644 <_printf_i+0x12c>
 800d6c8:	682b      	ldr	r3, [r5, #0]
 800d6ca:	6826      	ldr	r6, [r4, #0]
 800d6cc:	6961      	ldr	r1, [r4, #20]
 800d6ce:	1d18      	adds	r0, r3, #4
 800d6d0:	6028      	str	r0, [r5, #0]
 800d6d2:	0635      	lsls	r5, r6, #24
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	d501      	bpl.n	800d6dc <_printf_i+0x1c4>
 800d6d8:	6019      	str	r1, [r3, #0]
 800d6da:	e002      	b.n	800d6e2 <_printf_i+0x1ca>
 800d6dc:	0670      	lsls	r0, r6, #25
 800d6de:	d5fb      	bpl.n	800d6d8 <_printf_i+0x1c0>
 800d6e0:	8019      	strh	r1, [r3, #0]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	6123      	str	r3, [r4, #16]
 800d6e6:	4615      	mov	r5, r2
 800d6e8:	e7bc      	b.n	800d664 <_printf_i+0x14c>
 800d6ea:	682b      	ldr	r3, [r5, #0]
 800d6ec:	1d1a      	adds	r2, r3, #4
 800d6ee:	602a      	str	r2, [r5, #0]
 800d6f0:	681d      	ldr	r5, [r3, #0]
 800d6f2:	6862      	ldr	r2, [r4, #4]
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f7f2 fd8a 	bl	8000210 <memchr>
 800d6fc:	b108      	cbz	r0, 800d702 <_printf_i+0x1ea>
 800d6fe:	1b40      	subs	r0, r0, r5
 800d700:	6060      	str	r0, [r4, #4]
 800d702:	6863      	ldr	r3, [r4, #4]
 800d704:	6123      	str	r3, [r4, #16]
 800d706:	2300      	movs	r3, #0
 800d708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d70c:	e7aa      	b.n	800d664 <_printf_i+0x14c>
 800d70e:	6923      	ldr	r3, [r4, #16]
 800d710:	462a      	mov	r2, r5
 800d712:	4649      	mov	r1, r9
 800d714:	4640      	mov	r0, r8
 800d716:	47d0      	blx	sl
 800d718:	3001      	adds	r0, #1
 800d71a:	d0ad      	beq.n	800d678 <_printf_i+0x160>
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	079b      	lsls	r3, r3, #30
 800d720:	d413      	bmi.n	800d74a <_printf_i+0x232>
 800d722:	68e0      	ldr	r0, [r4, #12]
 800d724:	9b03      	ldr	r3, [sp, #12]
 800d726:	4298      	cmp	r0, r3
 800d728:	bfb8      	it	lt
 800d72a:	4618      	movlt	r0, r3
 800d72c:	e7a6      	b.n	800d67c <_printf_i+0x164>
 800d72e:	2301      	movs	r3, #1
 800d730:	4632      	mov	r2, r6
 800d732:	4649      	mov	r1, r9
 800d734:	4640      	mov	r0, r8
 800d736:	47d0      	blx	sl
 800d738:	3001      	adds	r0, #1
 800d73a:	d09d      	beq.n	800d678 <_printf_i+0x160>
 800d73c:	3501      	adds	r5, #1
 800d73e:	68e3      	ldr	r3, [r4, #12]
 800d740:	9903      	ldr	r1, [sp, #12]
 800d742:	1a5b      	subs	r3, r3, r1
 800d744:	42ab      	cmp	r3, r5
 800d746:	dcf2      	bgt.n	800d72e <_printf_i+0x216>
 800d748:	e7eb      	b.n	800d722 <_printf_i+0x20a>
 800d74a:	2500      	movs	r5, #0
 800d74c:	f104 0619 	add.w	r6, r4, #25
 800d750:	e7f5      	b.n	800d73e <_printf_i+0x226>
 800d752:	bf00      	nop
 800d754:	08010d23 	.word	0x08010d23
 800d758:	08010d34 	.word	0x08010d34

0800d75c <std>:
 800d75c:	2300      	movs	r3, #0
 800d75e:	b510      	push	{r4, lr}
 800d760:	4604      	mov	r4, r0
 800d762:	e9c0 3300 	strd	r3, r3, [r0]
 800d766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d76a:	6083      	str	r3, [r0, #8]
 800d76c:	8181      	strh	r1, [r0, #12]
 800d76e:	6643      	str	r3, [r0, #100]	; 0x64
 800d770:	81c2      	strh	r2, [r0, #14]
 800d772:	6183      	str	r3, [r0, #24]
 800d774:	4619      	mov	r1, r3
 800d776:	2208      	movs	r2, #8
 800d778:	305c      	adds	r0, #92	; 0x5c
 800d77a:	f000 f94d 	bl	800da18 <memset>
 800d77e:	4b0d      	ldr	r3, [pc, #52]	; (800d7b4 <std+0x58>)
 800d780:	6263      	str	r3, [r4, #36]	; 0x24
 800d782:	4b0d      	ldr	r3, [pc, #52]	; (800d7b8 <std+0x5c>)
 800d784:	62a3      	str	r3, [r4, #40]	; 0x28
 800d786:	4b0d      	ldr	r3, [pc, #52]	; (800d7bc <std+0x60>)
 800d788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d78a:	4b0d      	ldr	r3, [pc, #52]	; (800d7c0 <std+0x64>)
 800d78c:	6323      	str	r3, [r4, #48]	; 0x30
 800d78e:	4b0d      	ldr	r3, [pc, #52]	; (800d7c4 <std+0x68>)
 800d790:	6224      	str	r4, [r4, #32]
 800d792:	429c      	cmp	r4, r3
 800d794:	d006      	beq.n	800d7a4 <std+0x48>
 800d796:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d79a:	4294      	cmp	r4, r2
 800d79c:	d002      	beq.n	800d7a4 <std+0x48>
 800d79e:	33d0      	adds	r3, #208	; 0xd0
 800d7a0:	429c      	cmp	r4, r3
 800d7a2:	d105      	bne.n	800d7b0 <std+0x54>
 800d7a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ac:	f000 b9c2 	b.w	800db34 <__retarget_lock_init_recursive>
 800d7b0:	bd10      	pop	{r4, pc}
 800d7b2:	bf00      	nop
 800d7b4:	0800d921 	.word	0x0800d921
 800d7b8:	0800d943 	.word	0x0800d943
 800d7bc:	0800d97b 	.word	0x0800d97b
 800d7c0:	0800d99f 	.word	0x0800d99f
 800d7c4:	20002cd8 	.word	0x20002cd8

0800d7c8 <stdio_exit_handler>:
 800d7c8:	4a02      	ldr	r2, [pc, #8]	; (800d7d4 <stdio_exit_handler+0xc>)
 800d7ca:	4903      	ldr	r1, [pc, #12]	; (800d7d8 <stdio_exit_handler+0x10>)
 800d7cc:	4803      	ldr	r0, [pc, #12]	; (800d7dc <stdio_exit_handler+0x14>)
 800d7ce:	f000 b869 	b.w	800d8a4 <_fwalk_sglue>
 800d7d2:	bf00      	nop
 800d7d4:	20000078 	.word	0x20000078
 800d7d8:	0800fe61 	.word	0x0800fe61
 800d7dc:	200001f0 	.word	0x200001f0

0800d7e0 <cleanup_stdio>:
 800d7e0:	6841      	ldr	r1, [r0, #4]
 800d7e2:	4b0c      	ldr	r3, [pc, #48]	; (800d814 <cleanup_stdio+0x34>)
 800d7e4:	4299      	cmp	r1, r3
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	d001      	beq.n	800d7f0 <cleanup_stdio+0x10>
 800d7ec:	f002 fb38 	bl	800fe60 <_fflush_r>
 800d7f0:	68a1      	ldr	r1, [r4, #8]
 800d7f2:	4b09      	ldr	r3, [pc, #36]	; (800d818 <cleanup_stdio+0x38>)
 800d7f4:	4299      	cmp	r1, r3
 800d7f6:	d002      	beq.n	800d7fe <cleanup_stdio+0x1e>
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f002 fb31 	bl	800fe60 <_fflush_r>
 800d7fe:	68e1      	ldr	r1, [r4, #12]
 800d800:	4b06      	ldr	r3, [pc, #24]	; (800d81c <cleanup_stdio+0x3c>)
 800d802:	4299      	cmp	r1, r3
 800d804:	d004      	beq.n	800d810 <cleanup_stdio+0x30>
 800d806:	4620      	mov	r0, r4
 800d808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d80c:	f002 bb28 	b.w	800fe60 <_fflush_r>
 800d810:	bd10      	pop	{r4, pc}
 800d812:	bf00      	nop
 800d814:	20002cd8 	.word	0x20002cd8
 800d818:	20002d40 	.word	0x20002d40
 800d81c:	20002da8 	.word	0x20002da8

0800d820 <global_stdio_init.part.0>:
 800d820:	b510      	push	{r4, lr}
 800d822:	4b0b      	ldr	r3, [pc, #44]	; (800d850 <global_stdio_init.part.0+0x30>)
 800d824:	4c0b      	ldr	r4, [pc, #44]	; (800d854 <global_stdio_init.part.0+0x34>)
 800d826:	4a0c      	ldr	r2, [pc, #48]	; (800d858 <global_stdio_init.part.0+0x38>)
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	4620      	mov	r0, r4
 800d82c:	2200      	movs	r2, #0
 800d82e:	2104      	movs	r1, #4
 800d830:	f7ff ff94 	bl	800d75c <std>
 800d834:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d838:	2201      	movs	r2, #1
 800d83a:	2109      	movs	r1, #9
 800d83c:	f7ff ff8e 	bl	800d75c <std>
 800d840:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d844:	2202      	movs	r2, #2
 800d846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d84a:	2112      	movs	r1, #18
 800d84c:	f7ff bf86 	b.w	800d75c <std>
 800d850:	20002e10 	.word	0x20002e10
 800d854:	20002cd8 	.word	0x20002cd8
 800d858:	0800d7c9 	.word	0x0800d7c9

0800d85c <__sfp_lock_acquire>:
 800d85c:	4801      	ldr	r0, [pc, #4]	; (800d864 <__sfp_lock_acquire+0x8>)
 800d85e:	f000 b96a 	b.w	800db36 <__retarget_lock_acquire_recursive>
 800d862:	bf00      	nop
 800d864:	20002e19 	.word	0x20002e19

0800d868 <__sfp_lock_release>:
 800d868:	4801      	ldr	r0, [pc, #4]	; (800d870 <__sfp_lock_release+0x8>)
 800d86a:	f000 b965 	b.w	800db38 <__retarget_lock_release_recursive>
 800d86e:	bf00      	nop
 800d870:	20002e19 	.word	0x20002e19

0800d874 <__sinit>:
 800d874:	b510      	push	{r4, lr}
 800d876:	4604      	mov	r4, r0
 800d878:	f7ff fff0 	bl	800d85c <__sfp_lock_acquire>
 800d87c:	6a23      	ldr	r3, [r4, #32]
 800d87e:	b11b      	cbz	r3, 800d888 <__sinit+0x14>
 800d880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d884:	f7ff bff0 	b.w	800d868 <__sfp_lock_release>
 800d888:	4b04      	ldr	r3, [pc, #16]	; (800d89c <__sinit+0x28>)
 800d88a:	6223      	str	r3, [r4, #32]
 800d88c:	4b04      	ldr	r3, [pc, #16]	; (800d8a0 <__sinit+0x2c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1f5      	bne.n	800d880 <__sinit+0xc>
 800d894:	f7ff ffc4 	bl	800d820 <global_stdio_init.part.0>
 800d898:	e7f2      	b.n	800d880 <__sinit+0xc>
 800d89a:	bf00      	nop
 800d89c:	0800d7e1 	.word	0x0800d7e1
 800d8a0:	20002e10 	.word	0x20002e10

0800d8a4 <_fwalk_sglue>:
 800d8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a8:	4607      	mov	r7, r0
 800d8aa:	4688      	mov	r8, r1
 800d8ac:	4614      	mov	r4, r2
 800d8ae:	2600      	movs	r6, #0
 800d8b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8b4:	f1b9 0901 	subs.w	r9, r9, #1
 800d8b8:	d505      	bpl.n	800d8c6 <_fwalk_sglue+0x22>
 800d8ba:	6824      	ldr	r4, [r4, #0]
 800d8bc:	2c00      	cmp	r4, #0
 800d8be:	d1f7      	bne.n	800d8b0 <_fwalk_sglue+0xc>
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c6:	89ab      	ldrh	r3, [r5, #12]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d907      	bls.n	800d8dc <_fwalk_sglue+0x38>
 800d8cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	d003      	beq.n	800d8dc <_fwalk_sglue+0x38>
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	4638      	mov	r0, r7
 800d8d8:	47c0      	blx	r8
 800d8da:	4306      	orrs	r6, r0
 800d8dc:	3568      	adds	r5, #104	; 0x68
 800d8de:	e7e9      	b.n	800d8b4 <_fwalk_sglue+0x10>

0800d8e0 <siprintf>:
 800d8e0:	b40e      	push	{r1, r2, r3}
 800d8e2:	b500      	push	{lr}
 800d8e4:	b09c      	sub	sp, #112	; 0x70
 800d8e6:	ab1d      	add	r3, sp, #116	; 0x74
 800d8e8:	9002      	str	r0, [sp, #8]
 800d8ea:	9006      	str	r0, [sp, #24]
 800d8ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8f0:	4809      	ldr	r0, [pc, #36]	; (800d918 <siprintf+0x38>)
 800d8f2:	9107      	str	r1, [sp, #28]
 800d8f4:	9104      	str	r1, [sp, #16]
 800d8f6:	4909      	ldr	r1, [pc, #36]	; (800d91c <siprintf+0x3c>)
 800d8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8fc:	9105      	str	r1, [sp, #20]
 800d8fe:	6800      	ldr	r0, [r0, #0]
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	a902      	add	r1, sp, #8
 800d904:	f002 f928 	bl	800fb58 <_svfiprintf_r>
 800d908:	9b02      	ldr	r3, [sp, #8]
 800d90a:	2200      	movs	r2, #0
 800d90c:	701a      	strb	r2, [r3, #0]
 800d90e:	b01c      	add	sp, #112	; 0x70
 800d910:	f85d eb04 	ldr.w	lr, [sp], #4
 800d914:	b003      	add	sp, #12
 800d916:	4770      	bx	lr
 800d918:	2000023c 	.word	0x2000023c
 800d91c:	ffff0208 	.word	0xffff0208

0800d920 <__sread>:
 800d920:	b510      	push	{r4, lr}
 800d922:	460c      	mov	r4, r1
 800d924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d928:	f000 f8b6 	bl	800da98 <_read_r>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	bfab      	itete	ge
 800d930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d932:	89a3      	ldrhlt	r3, [r4, #12]
 800d934:	181b      	addge	r3, r3, r0
 800d936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d93a:	bfac      	ite	ge
 800d93c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d93e:	81a3      	strhlt	r3, [r4, #12]
 800d940:	bd10      	pop	{r4, pc}

0800d942 <__swrite>:
 800d942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d946:	461f      	mov	r7, r3
 800d948:	898b      	ldrh	r3, [r1, #12]
 800d94a:	05db      	lsls	r3, r3, #23
 800d94c:	4605      	mov	r5, r0
 800d94e:	460c      	mov	r4, r1
 800d950:	4616      	mov	r6, r2
 800d952:	d505      	bpl.n	800d960 <__swrite+0x1e>
 800d954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d958:	2302      	movs	r3, #2
 800d95a:	2200      	movs	r2, #0
 800d95c:	f000 f88a 	bl	800da74 <_lseek_r>
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	4632      	mov	r2, r6
 800d96e:	463b      	mov	r3, r7
 800d970:	4628      	mov	r0, r5
 800d972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d976:	f000 b8a1 	b.w	800dabc <_write_r>

0800d97a <__sseek>:
 800d97a:	b510      	push	{r4, lr}
 800d97c:	460c      	mov	r4, r1
 800d97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d982:	f000 f877 	bl	800da74 <_lseek_r>
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	bf15      	itete	ne
 800d98c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d98e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d996:	81a3      	strheq	r3, [r4, #12]
 800d998:	bf18      	it	ne
 800d99a:	81a3      	strhne	r3, [r4, #12]
 800d99c:	bd10      	pop	{r4, pc}

0800d99e <__sclose>:
 800d99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a2:	f000 b857 	b.w	800da54 <_close_r>

0800d9a6 <_vsniprintf_r>:
 800d9a6:	b530      	push	{r4, r5, lr}
 800d9a8:	4614      	mov	r4, r2
 800d9aa:	2c00      	cmp	r4, #0
 800d9ac:	b09b      	sub	sp, #108	; 0x6c
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	da05      	bge.n	800d9c0 <_vsniprintf_r+0x1a>
 800d9b4:	238b      	movs	r3, #139	; 0x8b
 800d9b6:	6003      	str	r3, [r0, #0]
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9bc:	b01b      	add	sp, #108	; 0x6c
 800d9be:	bd30      	pop	{r4, r5, pc}
 800d9c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d9c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d9c8:	bf14      	ite	ne
 800d9ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d9ce:	4623      	moveq	r3, r4
 800d9d0:	9302      	str	r3, [sp, #8]
 800d9d2:	9305      	str	r3, [sp, #20]
 800d9d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9d8:	9100      	str	r1, [sp, #0]
 800d9da:	9104      	str	r1, [sp, #16]
 800d9dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d9e0:	4669      	mov	r1, sp
 800d9e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d9e4:	f002 f8b8 	bl	800fb58 <_svfiprintf_r>
 800d9e8:	1c43      	adds	r3, r0, #1
 800d9ea:	bfbc      	itt	lt
 800d9ec:	238b      	movlt	r3, #139	; 0x8b
 800d9ee:	602b      	strlt	r3, [r5, #0]
 800d9f0:	2c00      	cmp	r4, #0
 800d9f2:	d0e3      	beq.n	800d9bc <_vsniprintf_r+0x16>
 800d9f4:	9b00      	ldr	r3, [sp, #0]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	701a      	strb	r2, [r3, #0]
 800d9fa:	e7df      	b.n	800d9bc <_vsniprintf_r+0x16>

0800d9fc <vsniprintf>:
 800d9fc:	b507      	push	{r0, r1, r2, lr}
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	4613      	mov	r3, r2
 800da02:	460a      	mov	r2, r1
 800da04:	4601      	mov	r1, r0
 800da06:	4803      	ldr	r0, [pc, #12]	; (800da14 <vsniprintf+0x18>)
 800da08:	6800      	ldr	r0, [r0, #0]
 800da0a:	f7ff ffcc 	bl	800d9a6 <_vsniprintf_r>
 800da0e:	b003      	add	sp, #12
 800da10:	f85d fb04 	ldr.w	pc, [sp], #4
 800da14:	2000023c 	.word	0x2000023c

0800da18 <memset>:
 800da18:	4402      	add	r2, r0
 800da1a:	4603      	mov	r3, r0
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d100      	bne.n	800da22 <memset+0xa>
 800da20:	4770      	bx	lr
 800da22:	f803 1b01 	strb.w	r1, [r3], #1
 800da26:	e7f9      	b.n	800da1c <memset+0x4>

0800da28 <strncmp>:
 800da28:	b510      	push	{r4, lr}
 800da2a:	b16a      	cbz	r2, 800da48 <strncmp+0x20>
 800da2c:	3901      	subs	r1, #1
 800da2e:	1884      	adds	r4, r0, r2
 800da30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da38:	429a      	cmp	r2, r3
 800da3a:	d103      	bne.n	800da44 <strncmp+0x1c>
 800da3c:	42a0      	cmp	r0, r4
 800da3e:	d001      	beq.n	800da44 <strncmp+0x1c>
 800da40:	2a00      	cmp	r2, #0
 800da42:	d1f5      	bne.n	800da30 <strncmp+0x8>
 800da44:	1ad0      	subs	r0, r2, r3
 800da46:	bd10      	pop	{r4, pc}
 800da48:	4610      	mov	r0, r2
 800da4a:	e7fc      	b.n	800da46 <strncmp+0x1e>

0800da4c <_localeconv_r>:
 800da4c:	4800      	ldr	r0, [pc, #0]	; (800da50 <_localeconv_r+0x4>)
 800da4e:	4770      	bx	lr
 800da50:	20000174 	.word	0x20000174

0800da54 <_close_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4d06      	ldr	r5, [pc, #24]	; (800da70 <_close_r+0x1c>)
 800da58:	2300      	movs	r3, #0
 800da5a:	4604      	mov	r4, r0
 800da5c:	4608      	mov	r0, r1
 800da5e:	602b      	str	r3, [r5, #0]
 800da60:	f7f5 fd39 	bl	80034d6 <_close>
 800da64:	1c43      	adds	r3, r0, #1
 800da66:	d102      	bne.n	800da6e <_close_r+0x1a>
 800da68:	682b      	ldr	r3, [r5, #0]
 800da6a:	b103      	cbz	r3, 800da6e <_close_r+0x1a>
 800da6c:	6023      	str	r3, [r4, #0]
 800da6e:	bd38      	pop	{r3, r4, r5, pc}
 800da70:	20002e14 	.word	0x20002e14

0800da74 <_lseek_r>:
 800da74:	b538      	push	{r3, r4, r5, lr}
 800da76:	4d07      	ldr	r5, [pc, #28]	; (800da94 <_lseek_r+0x20>)
 800da78:	4604      	mov	r4, r0
 800da7a:	4608      	mov	r0, r1
 800da7c:	4611      	mov	r1, r2
 800da7e:	2200      	movs	r2, #0
 800da80:	602a      	str	r2, [r5, #0]
 800da82:	461a      	mov	r2, r3
 800da84:	f7f5 fd4e 	bl	8003524 <_lseek>
 800da88:	1c43      	adds	r3, r0, #1
 800da8a:	d102      	bne.n	800da92 <_lseek_r+0x1e>
 800da8c:	682b      	ldr	r3, [r5, #0]
 800da8e:	b103      	cbz	r3, 800da92 <_lseek_r+0x1e>
 800da90:	6023      	str	r3, [r4, #0]
 800da92:	bd38      	pop	{r3, r4, r5, pc}
 800da94:	20002e14 	.word	0x20002e14

0800da98 <_read_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4d07      	ldr	r5, [pc, #28]	; (800dab8 <_read_r+0x20>)
 800da9c:	4604      	mov	r4, r0
 800da9e:	4608      	mov	r0, r1
 800daa0:	4611      	mov	r1, r2
 800daa2:	2200      	movs	r2, #0
 800daa4:	602a      	str	r2, [r5, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	f7f5 fcdc 	bl	8003464 <_read>
 800daac:	1c43      	adds	r3, r0, #1
 800daae:	d102      	bne.n	800dab6 <_read_r+0x1e>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	b103      	cbz	r3, 800dab6 <_read_r+0x1e>
 800dab4:	6023      	str	r3, [r4, #0]
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	20002e14 	.word	0x20002e14

0800dabc <_write_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	4d07      	ldr	r5, [pc, #28]	; (800dadc <_write_r+0x20>)
 800dac0:	4604      	mov	r4, r0
 800dac2:	4608      	mov	r0, r1
 800dac4:	4611      	mov	r1, r2
 800dac6:	2200      	movs	r2, #0
 800dac8:	602a      	str	r2, [r5, #0]
 800daca:	461a      	mov	r2, r3
 800dacc:	f7f5 fce7 	bl	800349e <_write>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d102      	bne.n	800dada <_write_r+0x1e>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b103      	cbz	r3, 800dada <_write_r+0x1e>
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	20002e14 	.word	0x20002e14

0800dae0 <__errno>:
 800dae0:	4b01      	ldr	r3, [pc, #4]	; (800dae8 <__errno+0x8>)
 800dae2:	6818      	ldr	r0, [r3, #0]
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	2000023c 	.word	0x2000023c

0800daec <__libc_init_array>:
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	4d0d      	ldr	r5, [pc, #52]	; (800db24 <__libc_init_array+0x38>)
 800daf0:	4c0d      	ldr	r4, [pc, #52]	; (800db28 <__libc_init_array+0x3c>)
 800daf2:	1b64      	subs	r4, r4, r5
 800daf4:	10a4      	asrs	r4, r4, #2
 800daf6:	2600      	movs	r6, #0
 800daf8:	42a6      	cmp	r6, r4
 800dafa:	d109      	bne.n	800db10 <__libc_init_array+0x24>
 800dafc:	4d0b      	ldr	r5, [pc, #44]	; (800db2c <__libc_init_array+0x40>)
 800dafe:	4c0c      	ldr	r4, [pc, #48]	; (800db30 <__libc_init_array+0x44>)
 800db00:	f002 fd26 	bl	8010550 <_init>
 800db04:	1b64      	subs	r4, r4, r5
 800db06:	10a4      	asrs	r4, r4, #2
 800db08:	2600      	movs	r6, #0
 800db0a:	42a6      	cmp	r6, r4
 800db0c:	d105      	bne.n	800db1a <__libc_init_array+0x2e>
 800db0e:	bd70      	pop	{r4, r5, r6, pc}
 800db10:	f855 3b04 	ldr.w	r3, [r5], #4
 800db14:	4798      	blx	r3
 800db16:	3601      	adds	r6, #1
 800db18:	e7ee      	b.n	800daf8 <__libc_init_array+0xc>
 800db1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db1e:	4798      	blx	r3
 800db20:	3601      	adds	r6, #1
 800db22:	e7f2      	b.n	800db0a <__libc_init_array+0x1e>
 800db24:	08010fec 	.word	0x08010fec
 800db28:	08010fec 	.word	0x08010fec
 800db2c:	08010fec 	.word	0x08010fec
 800db30:	08010ff0 	.word	0x08010ff0

0800db34 <__retarget_lock_init_recursive>:
 800db34:	4770      	bx	lr

0800db36 <__retarget_lock_acquire_recursive>:
 800db36:	4770      	bx	lr

0800db38 <__retarget_lock_release_recursive>:
 800db38:	4770      	bx	lr

0800db3a <memcpy>:
 800db3a:	440a      	add	r2, r1
 800db3c:	4291      	cmp	r1, r2
 800db3e:	f100 33ff 	add.w	r3, r0, #4294967295
 800db42:	d100      	bne.n	800db46 <memcpy+0xc>
 800db44:	4770      	bx	lr
 800db46:	b510      	push	{r4, lr}
 800db48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db50:	4291      	cmp	r1, r2
 800db52:	d1f9      	bne.n	800db48 <memcpy+0xe>
 800db54:	bd10      	pop	{r4, pc}
	...

0800db58 <nan>:
 800db58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800db60 <nan+0x8>
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	00000000 	.word	0x00000000
 800db64:	7ff80000 	.word	0x7ff80000

0800db68 <quorem>:
 800db68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	6903      	ldr	r3, [r0, #16]
 800db6e:	690c      	ldr	r4, [r1, #16]
 800db70:	42a3      	cmp	r3, r4
 800db72:	4607      	mov	r7, r0
 800db74:	db7e      	blt.n	800dc74 <quorem+0x10c>
 800db76:	3c01      	subs	r4, #1
 800db78:	f101 0814 	add.w	r8, r1, #20
 800db7c:	f100 0514 	add.w	r5, r0, #20
 800db80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db84:	9301      	str	r3, [sp, #4]
 800db86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db8e:	3301      	adds	r3, #1
 800db90:	429a      	cmp	r2, r3
 800db92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800db96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800db9e:	d331      	bcc.n	800dc04 <quorem+0x9c>
 800dba0:	f04f 0e00 	mov.w	lr, #0
 800dba4:	4640      	mov	r0, r8
 800dba6:	46ac      	mov	ip, r5
 800dba8:	46f2      	mov	sl, lr
 800dbaa:	f850 2b04 	ldr.w	r2, [r0], #4
 800dbae:	b293      	uxth	r3, r2
 800dbb0:	fb06 e303 	mla	r3, r6, r3, lr
 800dbb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dbb8:	0c1a      	lsrs	r2, r3, #16
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	ebaa 0303 	sub.w	r3, sl, r3
 800dbc0:	f8dc a000 	ldr.w	sl, [ip]
 800dbc4:	fa13 f38a 	uxtah	r3, r3, sl
 800dbc8:	fb06 220e 	mla	r2, r6, lr, r2
 800dbcc:	9300      	str	r3, [sp, #0]
 800dbce:	9b00      	ldr	r3, [sp, #0]
 800dbd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dbd4:	b292      	uxth	r2, r2
 800dbd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dbda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dbde:	f8bd 3000 	ldrh.w	r3, [sp]
 800dbe2:	4581      	cmp	r9, r0
 800dbe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbe8:	f84c 3b04 	str.w	r3, [ip], #4
 800dbec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dbf0:	d2db      	bcs.n	800dbaa <quorem+0x42>
 800dbf2:	f855 300b 	ldr.w	r3, [r5, fp]
 800dbf6:	b92b      	cbnz	r3, 800dc04 <quorem+0x9c>
 800dbf8:	9b01      	ldr	r3, [sp, #4]
 800dbfa:	3b04      	subs	r3, #4
 800dbfc:	429d      	cmp	r5, r3
 800dbfe:	461a      	mov	r2, r3
 800dc00:	d32c      	bcc.n	800dc5c <quorem+0xf4>
 800dc02:	613c      	str	r4, [r7, #16]
 800dc04:	4638      	mov	r0, r7
 800dc06:	f001 fd59 	bl	800f6bc <__mcmp>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	db22      	blt.n	800dc54 <quorem+0xec>
 800dc0e:	3601      	adds	r6, #1
 800dc10:	4629      	mov	r1, r5
 800dc12:	2000      	movs	r0, #0
 800dc14:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc18:	f8d1 c000 	ldr.w	ip, [r1]
 800dc1c:	b293      	uxth	r3, r2
 800dc1e:	1ac3      	subs	r3, r0, r3
 800dc20:	0c12      	lsrs	r2, r2, #16
 800dc22:	fa13 f38c 	uxtah	r3, r3, ip
 800dc26:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dc2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc34:	45c1      	cmp	r9, r8
 800dc36:	f841 3b04 	str.w	r3, [r1], #4
 800dc3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc3e:	d2e9      	bcs.n	800dc14 <quorem+0xac>
 800dc40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc48:	b922      	cbnz	r2, 800dc54 <quorem+0xec>
 800dc4a:	3b04      	subs	r3, #4
 800dc4c:	429d      	cmp	r5, r3
 800dc4e:	461a      	mov	r2, r3
 800dc50:	d30a      	bcc.n	800dc68 <quorem+0x100>
 800dc52:	613c      	str	r4, [r7, #16]
 800dc54:	4630      	mov	r0, r6
 800dc56:	b003      	add	sp, #12
 800dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5c:	6812      	ldr	r2, [r2, #0]
 800dc5e:	3b04      	subs	r3, #4
 800dc60:	2a00      	cmp	r2, #0
 800dc62:	d1ce      	bne.n	800dc02 <quorem+0x9a>
 800dc64:	3c01      	subs	r4, #1
 800dc66:	e7c9      	b.n	800dbfc <quorem+0x94>
 800dc68:	6812      	ldr	r2, [r2, #0]
 800dc6a:	3b04      	subs	r3, #4
 800dc6c:	2a00      	cmp	r2, #0
 800dc6e:	d1f0      	bne.n	800dc52 <quorem+0xea>
 800dc70:	3c01      	subs	r4, #1
 800dc72:	e7eb      	b.n	800dc4c <quorem+0xe4>
 800dc74:	2000      	movs	r0, #0
 800dc76:	e7ee      	b.n	800dc56 <quorem+0xee>

0800dc78 <_dtoa_r>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	ed2d 8b04 	vpush	{d8-d9}
 800dc80:	69c5      	ldr	r5, [r0, #28]
 800dc82:	b093      	sub	sp, #76	; 0x4c
 800dc84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dc88:	ec57 6b10 	vmov	r6, r7, d0
 800dc8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dc90:	9107      	str	r1, [sp, #28]
 800dc92:	4604      	mov	r4, r0
 800dc94:	920a      	str	r2, [sp, #40]	; 0x28
 800dc96:	930d      	str	r3, [sp, #52]	; 0x34
 800dc98:	b975      	cbnz	r5, 800dcb8 <_dtoa_r+0x40>
 800dc9a:	2010      	movs	r0, #16
 800dc9c:	f001 f982 	bl	800efa4 <malloc>
 800dca0:	4602      	mov	r2, r0
 800dca2:	61e0      	str	r0, [r4, #28]
 800dca4:	b920      	cbnz	r0, 800dcb0 <_dtoa_r+0x38>
 800dca6:	4bae      	ldr	r3, [pc, #696]	; (800df60 <_dtoa_r+0x2e8>)
 800dca8:	21ef      	movs	r1, #239	; 0xef
 800dcaa:	48ae      	ldr	r0, [pc, #696]	; (800df64 <_dtoa_r+0x2ec>)
 800dcac:	f002 f92a 	bl	800ff04 <__assert_func>
 800dcb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dcb4:	6005      	str	r5, [r0, #0]
 800dcb6:	60c5      	str	r5, [r0, #12]
 800dcb8:	69e3      	ldr	r3, [r4, #28]
 800dcba:	6819      	ldr	r1, [r3, #0]
 800dcbc:	b151      	cbz	r1, 800dcd4 <_dtoa_r+0x5c>
 800dcbe:	685a      	ldr	r2, [r3, #4]
 800dcc0:	604a      	str	r2, [r1, #4]
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	4093      	lsls	r3, r2
 800dcc6:	608b      	str	r3, [r1, #8]
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f001 fa71 	bl	800f1b0 <_Bfree>
 800dcce:	69e3      	ldr	r3, [r4, #28]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	1e3b      	subs	r3, r7, #0
 800dcd6:	bfbb      	ittet	lt
 800dcd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dcdc:	9303      	strlt	r3, [sp, #12]
 800dcde:	2300      	movge	r3, #0
 800dce0:	2201      	movlt	r2, #1
 800dce2:	bfac      	ite	ge
 800dce4:	f8c8 3000 	strge.w	r3, [r8]
 800dce8:	f8c8 2000 	strlt.w	r2, [r8]
 800dcec:	4b9e      	ldr	r3, [pc, #632]	; (800df68 <_dtoa_r+0x2f0>)
 800dcee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dcf2:	ea33 0308 	bics.w	r3, r3, r8
 800dcf6:	d11b      	bne.n	800dd30 <_dtoa_r+0xb8>
 800dcf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcfa:	f242 730f 	movw	r3, #9999	; 0x270f
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dd04:	4333      	orrs	r3, r6
 800dd06:	f000 8593 	beq.w	800e830 <_dtoa_r+0xbb8>
 800dd0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd0c:	b963      	cbnz	r3, 800dd28 <_dtoa_r+0xb0>
 800dd0e:	4b97      	ldr	r3, [pc, #604]	; (800df6c <_dtoa_r+0x2f4>)
 800dd10:	e027      	b.n	800dd62 <_dtoa_r+0xea>
 800dd12:	4b97      	ldr	r3, [pc, #604]	; (800df70 <_dtoa_r+0x2f8>)
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	3308      	adds	r3, #8
 800dd18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd1a:	6013      	str	r3, [r2, #0]
 800dd1c:	9800      	ldr	r0, [sp, #0]
 800dd1e:	b013      	add	sp, #76	; 0x4c
 800dd20:	ecbd 8b04 	vpop	{d8-d9}
 800dd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd28:	4b90      	ldr	r3, [pc, #576]	; (800df6c <_dtoa_r+0x2f4>)
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	3303      	adds	r3, #3
 800dd2e:	e7f3      	b.n	800dd18 <_dtoa_r+0xa0>
 800dd30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd34:	2200      	movs	r2, #0
 800dd36:	ec51 0b17 	vmov	r0, r1, d7
 800dd3a:	eeb0 8a47 	vmov.f32	s16, s14
 800dd3e:	eef0 8a67 	vmov.f32	s17, s15
 800dd42:	2300      	movs	r3, #0
 800dd44:	f7f2 fee0 	bl	8000b08 <__aeabi_dcmpeq>
 800dd48:	4681      	mov	r9, r0
 800dd4a:	b160      	cbz	r0, 800dd66 <_dtoa_r+0xee>
 800dd4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd4e:	2301      	movs	r3, #1
 800dd50:	6013      	str	r3, [r2, #0]
 800dd52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f000 8568 	beq.w	800e82a <_dtoa_r+0xbb2>
 800dd5a:	4b86      	ldr	r3, [pc, #536]	; (800df74 <_dtoa_r+0x2fc>)
 800dd5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	3b01      	subs	r3, #1
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	e7da      	b.n	800dd1c <_dtoa_r+0xa4>
 800dd66:	aa10      	add	r2, sp, #64	; 0x40
 800dd68:	a911      	add	r1, sp, #68	; 0x44
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	eeb0 0a48 	vmov.f32	s0, s16
 800dd70:	eef0 0a68 	vmov.f32	s1, s17
 800dd74:	f001 fdb8 	bl	800f8e8 <__d2b>
 800dd78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dd7c:	4682      	mov	sl, r0
 800dd7e:	2d00      	cmp	r5, #0
 800dd80:	d07f      	beq.n	800de82 <_dtoa_r+0x20a>
 800dd82:	ee18 3a90 	vmov	r3, s17
 800dd86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dd8e:	ec51 0b18 	vmov	r0, r1, d8
 800dd92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dd9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dd9e:	4619      	mov	r1, r3
 800dda0:	2200      	movs	r2, #0
 800dda2:	4b75      	ldr	r3, [pc, #468]	; (800df78 <_dtoa_r+0x300>)
 800dda4:	f7f2 fa90 	bl	80002c8 <__aeabi_dsub>
 800dda8:	a367      	add	r3, pc, #412	; (adr r3, 800df48 <_dtoa_r+0x2d0>)
 800ddaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddae:	f7f2 fc43 	bl	8000638 <__aeabi_dmul>
 800ddb2:	a367      	add	r3, pc, #412	; (adr r3, 800df50 <_dtoa_r+0x2d8>)
 800ddb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb8:	f7f2 fa88 	bl	80002cc <__adddf3>
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	460f      	mov	r7, r1
 800ddc2:	f7f2 fbcf 	bl	8000564 <__aeabi_i2d>
 800ddc6:	a364      	add	r3, pc, #400	; (adr r3, 800df58 <_dtoa_r+0x2e0>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f7f2 fc34 	bl	8000638 <__aeabi_dmul>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	4639      	mov	r1, r7
 800ddd8:	f7f2 fa78 	bl	80002cc <__adddf3>
 800dddc:	4606      	mov	r6, r0
 800ddde:	460f      	mov	r7, r1
 800dde0:	f7f2 feda 	bl	8000b98 <__aeabi_d2iz>
 800dde4:	2200      	movs	r2, #0
 800dde6:	4683      	mov	fp, r0
 800dde8:	2300      	movs	r3, #0
 800ddea:	4630      	mov	r0, r6
 800ddec:	4639      	mov	r1, r7
 800ddee:	f7f2 fe95 	bl	8000b1c <__aeabi_dcmplt>
 800ddf2:	b148      	cbz	r0, 800de08 <_dtoa_r+0x190>
 800ddf4:	4658      	mov	r0, fp
 800ddf6:	f7f2 fbb5 	bl	8000564 <__aeabi_i2d>
 800ddfa:	4632      	mov	r2, r6
 800ddfc:	463b      	mov	r3, r7
 800ddfe:	f7f2 fe83 	bl	8000b08 <__aeabi_dcmpeq>
 800de02:	b908      	cbnz	r0, 800de08 <_dtoa_r+0x190>
 800de04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de08:	f1bb 0f16 	cmp.w	fp, #22
 800de0c:	d857      	bhi.n	800debe <_dtoa_r+0x246>
 800de0e:	4b5b      	ldr	r3, [pc, #364]	; (800df7c <_dtoa_r+0x304>)
 800de10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	ec51 0b18 	vmov	r0, r1, d8
 800de1c:	f7f2 fe7e 	bl	8000b1c <__aeabi_dcmplt>
 800de20:	2800      	cmp	r0, #0
 800de22:	d04e      	beq.n	800dec2 <_dtoa_r+0x24a>
 800de24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de28:	2300      	movs	r3, #0
 800de2a:	930c      	str	r3, [sp, #48]	; 0x30
 800de2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de2e:	1b5b      	subs	r3, r3, r5
 800de30:	1e5a      	subs	r2, r3, #1
 800de32:	bf45      	ittet	mi
 800de34:	f1c3 0301 	rsbmi	r3, r3, #1
 800de38:	9305      	strmi	r3, [sp, #20]
 800de3a:	2300      	movpl	r3, #0
 800de3c:	2300      	movmi	r3, #0
 800de3e:	9206      	str	r2, [sp, #24]
 800de40:	bf54      	ite	pl
 800de42:	9305      	strpl	r3, [sp, #20]
 800de44:	9306      	strmi	r3, [sp, #24]
 800de46:	f1bb 0f00 	cmp.w	fp, #0
 800de4a:	db3c      	blt.n	800dec6 <_dtoa_r+0x24e>
 800de4c:	9b06      	ldr	r3, [sp, #24]
 800de4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800de52:	445b      	add	r3, fp
 800de54:	9306      	str	r3, [sp, #24]
 800de56:	2300      	movs	r3, #0
 800de58:	9308      	str	r3, [sp, #32]
 800de5a:	9b07      	ldr	r3, [sp, #28]
 800de5c:	2b09      	cmp	r3, #9
 800de5e:	d868      	bhi.n	800df32 <_dtoa_r+0x2ba>
 800de60:	2b05      	cmp	r3, #5
 800de62:	bfc4      	itt	gt
 800de64:	3b04      	subgt	r3, #4
 800de66:	9307      	strgt	r3, [sp, #28]
 800de68:	9b07      	ldr	r3, [sp, #28]
 800de6a:	f1a3 0302 	sub.w	r3, r3, #2
 800de6e:	bfcc      	ite	gt
 800de70:	2500      	movgt	r5, #0
 800de72:	2501      	movle	r5, #1
 800de74:	2b03      	cmp	r3, #3
 800de76:	f200 8085 	bhi.w	800df84 <_dtoa_r+0x30c>
 800de7a:	e8df f003 	tbb	[pc, r3]
 800de7e:	3b2e      	.short	0x3b2e
 800de80:	5839      	.short	0x5839
 800de82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800de86:	441d      	add	r5, r3
 800de88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800de8c:	2b20      	cmp	r3, #32
 800de8e:	bfc1      	itttt	gt
 800de90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800de94:	fa08 f803 	lslgt.w	r8, r8, r3
 800de98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800de9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dea0:	bfd6      	itet	le
 800dea2:	f1c3 0320 	rsble	r3, r3, #32
 800dea6:	ea48 0003 	orrgt.w	r0, r8, r3
 800deaa:	fa06 f003 	lslle.w	r0, r6, r3
 800deae:	f7f2 fb49 	bl	8000544 <__aeabi_ui2d>
 800deb2:	2201      	movs	r2, #1
 800deb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800deb8:	3d01      	subs	r5, #1
 800deba:	920e      	str	r2, [sp, #56]	; 0x38
 800debc:	e76f      	b.n	800dd9e <_dtoa_r+0x126>
 800debe:	2301      	movs	r3, #1
 800dec0:	e7b3      	b.n	800de2a <_dtoa_r+0x1b2>
 800dec2:	900c      	str	r0, [sp, #48]	; 0x30
 800dec4:	e7b2      	b.n	800de2c <_dtoa_r+0x1b4>
 800dec6:	9b05      	ldr	r3, [sp, #20]
 800dec8:	eba3 030b 	sub.w	r3, r3, fp
 800decc:	9305      	str	r3, [sp, #20]
 800dece:	f1cb 0300 	rsb	r3, fp, #0
 800ded2:	9308      	str	r3, [sp, #32]
 800ded4:	2300      	movs	r3, #0
 800ded6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ded8:	e7bf      	b.n	800de5a <_dtoa_r+0x1e2>
 800deda:	2300      	movs	r3, #0
 800dedc:	9309      	str	r3, [sp, #36]	; 0x24
 800dede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	dc52      	bgt.n	800df8a <_dtoa_r+0x312>
 800dee4:	2301      	movs	r3, #1
 800dee6:	9301      	str	r3, [sp, #4]
 800dee8:	9304      	str	r3, [sp, #16]
 800deea:	461a      	mov	r2, r3
 800deec:	920a      	str	r2, [sp, #40]	; 0x28
 800deee:	e00b      	b.n	800df08 <_dtoa_r+0x290>
 800def0:	2301      	movs	r3, #1
 800def2:	e7f3      	b.n	800dedc <_dtoa_r+0x264>
 800def4:	2300      	movs	r3, #0
 800def6:	9309      	str	r3, [sp, #36]	; 0x24
 800def8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800defa:	445b      	add	r3, fp
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	3301      	adds	r3, #1
 800df00:	2b01      	cmp	r3, #1
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	bfb8      	it	lt
 800df06:	2301      	movlt	r3, #1
 800df08:	69e0      	ldr	r0, [r4, #28]
 800df0a:	2100      	movs	r1, #0
 800df0c:	2204      	movs	r2, #4
 800df0e:	f102 0614 	add.w	r6, r2, #20
 800df12:	429e      	cmp	r6, r3
 800df14:	d93d      	bls.n	800df92 <_dtoa_r+0x31a>
 800df16:	6041      	str	r1, [r0, #4]
 800df18:	4620      	mov	r0, r4
 800df1a:	f001 f909 	bl	800f130 <_Balloc>
 800df1e:	9000      	str	r0, [sp, #0]
 800df20:	2800      	cmp	r0, #0
 800df22:	d139      	bne.n	800df98 <_dtoa_r+0x320>
 800df24:	4b16      	ldr	r3, [pc, #88]	; (800df80 <_dtoa_r+0x308>)
 800df26:	4602      	mov	r2, r0
 800df28:	f240 11af 	movw	r1, #431	; 0x1af
 800df2c:	e6bd      	b.n	800dcaa <_dtoa_r+0x32>
 800df2e:	2301      	movs	r3, #1
 800df30:	e7e1      	b.n	800def6 <_dtoa_r+0x27e>
 800df32:	2501      	movs	r5, #1
 800df34:	2300      	movs	r3, #0
 800df36:	9307      	str	r3, [sp, #28]
 800df38:	9509      	str	r5, [sp, #36]	; 0x24
 800df3a:	f04f 33ff 	mov.w	r3, #4294967295
 800df3e:	9301      	str	r3, [sp, #4]
 800df40:	9304      	str	r3, [sp, #16]
 800df42:	2200      	movs	r2, #0
 800df44:	2312      	movs	r3, #18
 800df46:	e7d1      	b.n	800deec <_dtoa_r+0x274>
 800df48:	636f4361 	.word	0x636f4361
 800df4c:	3fd287a7 	.word	0x3fd287a7
 800df50:	8b60c8b3 	.word	0x8b60c8b3
 800df54:	3fc68a28 	.word	0x3fc68a28
 800df58:	509f79fb 	.word	0x509f79fb
 800df5c:	3fd34413 	.word	0x3fd34413
 800df60:	08010d5a 	.word	0x08010d5a
 800df64:	08010d71 	.word	0x08010d71
 800df68:	7ff00000 	.word	0x7ff00000
 800df6c:	08010d56 	.word	0x08010d56
 800df70:	08010d4d 	.word	0x08010d4d
 800df74:	08010d22 	.word	0x08010d22
 800df78:	3ff80000 	.word	0x3ff80000
 800df7c:	08010ec0 	.word	0x08010ec0
 800df80:	08010dc9 	.word	0x08010dc9
 800df84:	2301      	movs	r3, #1
 800df86:	9309      	str	r3, [sp, #36]	; 0x24
 800df88:	e7d7      	b.n	800df3a <_dtoa_r+0x2c2>
 800df8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	9304      	str	r3, [sp, #16]
 800df90:	e7ba      	b.n	800df08 <_dtoa_r+0x290>
 800df92:	3101      	adds	r1, #1
 800df94:	0052      	lsls	r2, r2, #1
 800df96:	e7ba      	b.n	800df0e <_dtoa_r+0x296>
 800df98:	69e3      	ldr	r3, [r4, #28]
 800df9a:	9a00      	ldr	r2, [sp, #0]
 800df9c:	601a      	str	r2, [r3, #0]
 800df9e:	9b04      	ldr	r3, [sp, #16]
 800dfa0:	2b0e      	cmp	r3, #14
 800dfa2:	f200 80a8 	bhi.w	800e0f6 <_dtoa_r+0x47e>
 800dfa6:	2d00      	cmp	r5, #0
 800dfa8:	f000 80a5 	beq.w	800e0f6 <_dtoa_r+0x47e>
 800dfac:	f1bb 0f00 	cmp.w	fp, #0
 800dfb0:	dd38      	ble.n	800e024 <_dtoa_r+0x3ac>
 800dfb2:	4bc0      	ldr	r3, [pc, #768]	; (800e2b4 <_dtoa_r+0x63c>)
 800dfb4:	f00b 020f 	and.w	r2, fp, #15
 800dfb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dfc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dfc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dfc8:	d019      	beq.n	800dffe <_dtoa_r+0x386>
 800dfca:	4bbb      	ldr	r3, [pc, #748]	; (800e2b8 <_dtoa_r+0x640>)
 800dfcc:	ec51 0b18 	vmov	r0, r1, d8
 800dfd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dfd4:	f7f2 fc5a 	bl	800088c <__aeabi_ddiv>
 800dfd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfdc:	f008 080f 	and.w	r8, r8, #15
 800dfe0:	2503      	movs	r5, #3
 800dfe2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e2b8 <_dtoa_r+0x640>
 800dfe6:	f1b8 0f00 	cmp.w	r8, #0
 800dfea:	d10a      	bne.n	800e002 <_dtoa_r+0x38a>
 800dfec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dff0:	4632      	mov	r2, r6
 800dff2:	463b      	mov	r3, r7
 800dff4:	f7f2 fc4a 	bl	800088c <__aeabi_ddiv>
 800dff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dffc:	e02b      	b.n	800e056 <_dtoa_r+0x3de>
 800dffe:	2502      	movs	r5, #2
 800e000:	e7ef      	b.n	800dfe2 <_dtoa_r+0x36a>
 800e002:	f018 0f01 	tst.w	r8, #1
 800e006:	d008      	beq.n	800e01a <_dtoa_r+0x3a2>
 800e008:	4630      	mov	r0, r6
 800e00a:	4639      	mov	r1, r7
 800e00c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e010:	f7f2 fb12 	bl	8000638 <__aeabi_dmul>
 800e014:	3501      	adds	r5, #1
 800e016:	4606      	mov	r6, r0
 800e018:	460f      	mov	r7, r1
 800e01a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e01e:	f109 0908 	add.w	r9, r9, #8
 800e022:	e7e0      	b.n	800dfe6 <_dtoa_r+0x36e>
 800e024:	f000 809f 	beq.w	800e166 <_dtoa_r+0x4ee>
 800e028:	f1cb 0600 	rsb	r6, fp, #0
 800e02c:	4ba1      	ldr	r3, [pc, #644]	; (800e2b4 <_dtoa_r+0x63c>)
 800e02e:	4fa2      	ldr	r7, [pc, #648]	; (800e2b8 <_dtoa_r+0x640>)
 800e030:	f006 020f 	and.w	r2, r6, #15
 800e034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	ec51 0b18 	vmov	r0, r1, d8
 800e040:	f7f2 fafa 	bl	8000638 <__aeabi_dmul>
 800e044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e048:	1136      	asrs	r6, r6, #4
 800e04a:	2300      	movs	r3, #0
 800e04c:	2502      	movs	r5, #2
 800e04e:	2e00      	cmp	r6, #0
 800e050:	d17e      	bne.n	800e150 <_dtoa_r+0x4d8>
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1d0      	bne.n	800dff8 <_dtoa_r+0x380>
 800e056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e058:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f000 8084 	beq.w	800e16a <_dtoa_r+0x4f2>
 800e062:	4b96      	ldr	r3, [pc, #600]	; (800e2bc <_dtoa_r+0x644>)
 800e064:	2200      	movs	r2, #0
 800e066:	4640      	mov	r0, r8
 800e068:	4649      	mov	r1, r9
 800e06a:	f7f2 fd57 	bl	8000b1c <__aeabi_dcmplt>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d07b      	beq.n	800e16a <_dtoa_r+0x4f2>
 800e072:	9b04      	ldr	r3, [sp, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d078      	beq.n	800e16a <_dtoa_r+0x4f2>
 800e078:	9b01      	ldr	r3, [sp, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	dd39      	ble.n	800e0f2 <_dtoa_r+0x47a>
 800e07e:	4b90      	ldr	r3, [pc, #576]	; (800e2c0 <_dtoa_r+0x648>)
 800e080:	2200      	movs	r2, #0
 800e082:	4640      	mov	r0, r8
 800e084:	4649      	mov	r1, r9
 800e086:	f7f2 fad7 	bl	8000638 <__aeabi_dmul>
 800e08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e08e:	9e01      	ldr	r6, [sp, #4]
 800e090:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e094:	3501      	adds	r5, #1
 800e096:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e09a:	4628      	mov	r0, r5
 800e09c:	f7f2 fa62 	bl	8000564 <__aeabi_i2d>
 800e0a0:	4642      	mov	r2, r8
 800e0a2:	464b      	mov	r3, r9
 800e0a4:	f7f2 fac8 	bl	8000638 <__aeabi_dmul>
 800e0a8:	4b86      	ldr	r3, [pc, #536]	; (800e2c4 <_dtoa_r+0x64c>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f7f2 f90e 	bl	80002cc <__adddf3>
 800e0b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0b8:	9303      	str	r3, [sp, #12]
 800e0ba:	2e00      	cmp	r6, #0
 800e0bc:	d158      	bne.n	800e170 <_dtoa_r+0x4f8>
 800e0be:	4b82      	ldr	r3, [pc, #520]	; (800e2c8 <_dtoa_r+0x650>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	4640      	mov	r0, r8
 800e0c4:	4649      	mov	r1, r9
 800e0c6:	f7f2 f8ff 	bl	80002c8 <__aeabi_dsub>
 800e0ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0ce:	4680      	mov	r8, r0
 800e0d0:	4689      	mov	r9, r1
 800e0d2:	f7f2 fd41 	bl	8000b58 <__aeabi_dcmpgt>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	f040 8296 	bne.w	800e608 <_dtoa_r+0x990>
 800e0dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0e6:	4649      	mov	r1, r9
 800e0e8:	f7f2 fd18 	bl	8000b1c <__aeabi_dcmplt>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	f040 8289 	bne.w	800e604 <_dtoa_r+0x98c>
 800e0f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e0f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f2c0 814e 	blt.w	800e39a <_dtoa_r+0x722>
 800e0fe:	f1bb 0f0e 	cmp.w	fp, #14
 800e102:	f300 814a 	bgt.w	800e39a <_dtoa_r+0x722>
 800e106:	4b6b      	ldr	r3, [pc, #428]	; (800e2b4 <_dtoa_r+0x63c>)
 800e108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e10c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e112:	2b00      	cmp	r3, #0
 800e114:	f280 80dc 	bge.w	800e2d0 <_dtoa_r+0x658>
 800e118:	9b04      	ldr	r3, [sp, #16]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	f300 80d8 	bgt.w	800e2d0 <_dtoa_r+0x658>
 800e120:	f040 826f 	bne.w	800e602 <_dtoa_r+0x98a>
 800e124:	4b68      	ldr	r3, [pc, #416]	; (800e2c8 <_dtoa_r+0x650>)
 800e126:	2200      	movs	r2, #0
 800e128:	4640      	mov	r0, r8
 800e12a:	4649      	mov	r1, r9
 800e12c:	f7f2 fa84 	bl	8000638 <__aeabi_dmul>
 800e130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e134:	f7f2 fd06 	bl	8000b44 <__aeabi_dcmpge>
 800e138:	9e04      	ldr	r6, [sp, #16]
 800e13a:	4637      	mov	r7, r6
 800e13c:	2800      	cmp	r0, #0
 800e13e:	f040 8245 	bne.w	800e5cc <_dtoa_r+0x954>
 800e142:	9d00      	ldr	r5, [sp, #0]
 800e144:	2331      	movs	r3, #49	; 0x31
 800e146:	f805 3b01 	strb.w	r3, [r5], #1
 800e14a:	f10b 0b01 	add.w	fp, fp, #1
 800e14e:	e241      	b.n	800e5d4 <_dtoa_r+0x95c>
 800e150:	07f2      	lsls	r2, r6, #31
 800e152:	d505      	bpl.n	800e160 <_dtoa_r+0x4e8>
 800e154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e158:	f7f2 fa6e 	bl	8000638 <__aeabi_dmul>
 800e15c:	3501      	adds	r5, #1
 800e15e:	2301      	movs	r3, #1
 800e160:	1076      	asrs	r6, r6, #1
 800e162:	3708      	adds	r7, #8
 800e164:	e773      	b.n	800e04e <_dtoa_r+0x3d6>
 800e166:	2502      	movs	r5, #2
 800e168:	e775      	b.n	800e056 <_dtoa_r+0x3de>
 800e16a:	9e04      	ldr	r6, [sp, #16]
 800e16c:	465f      	mov	r7, fp
 800e16e:	e792      	b.n	800e096 <_dtoa_r+0x41e>
 800e170:	9900      	ldr	r1, [sp, #0]
 800e172:	4b50      	ldr	r3, [pc, #320]	; (800e2b4 <_dtoa_r+0x63c>)
 800e174:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e178:	4431      	add	r1, r6
 800e17a:	9102      	str	r1, [sp, #8]
 800e17c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e17e:	eeb0 9a47 	vmov.f32	s18, s14
 800e182:	eef0 9a67 	vmov.f32	s19, s15
 800e186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e18a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e18e:	2900      	cmp	r1, #0
 800e190:	d044      	beq.n	800e21c <_dtoa_r+0x5a4>
 800e192:	494e      	ldr	r1, [pc, #312]	; (800e2cc <_dtoa_r+0x654>)
 800e194:	2000      	movs	r0, #0
 800e196:	f7f2 fb79 	bl	800088c <__aeabi_ddiv>
 800e19a:	ec53 2b19 	vmov	r2, r3, d9
 800e19e:	f7f2 f893 	bl	80002c8 <__aeabi_dsub>
 800e1a2:	9d00      	ldr	r5, [sp, #0]
 800e1a4:	ec41 0b19 	vmov	d9, r0, r1
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	4640      	mov	r0, r8
 800e1ac:	f7f2 fcf4 	bl	8000b98 <__aeabi_d2iz>
 800e1b0:	4606      	mov	r6, r0
 800e1b2:	f7f2 f9d7 	bl	8000564 <__aeabi_i2d>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	4649      	mov	r1, r9
 800e1be:	f7f2 f883 	bl	80002c8 <__aeabi_dsub>
 800e1c2:	3630      	adds	r6, #48	; 0x30
 800e1c4:	f805 6b01 	strb.w	r6, [r5], #1
 800e1c8:	ec53 2b19 	vmov	r2, r3, d9
 800e1cc:	4680      	mov	r8, r0
 800e1ce:	4689      	mov	r9, r1
 800e1d0:	f7f2 fca4 	bl	8000b1c <__aeabi_dcmplt>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d164      	bne.n	800e2a2 <_dtoa_r+0x62a>
 800e1d8:	4642      	mov	r2, r8
 800e1da:	464b      	mov	r3, r9
 800e1dc:	4937      	ldr	r1, [pc, #220]	; (800e2bc <_dtoa_r+0x644>)
 800e1de:	2000      	movs	r0, #0
 800e1e0:	f7f2 f872 	bl	80002c8 <__aeabi_dsub>
 800e1e4:	ec53 2b19 	vmov	r2, r3, d9
 800e1e8:	f7f2 fc98 	bl	8000b1c <__aeabi_dcmplt>
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	f040 80b6 	bne.w	800e35e <_dtoa_r+0x6e6>
 800e1f2:	9b02      	ldr	r3, [sp, #8]
 800e1f4:	429d      	cmp	r5, r3
 800e1f6:	f43f af7c 	beq.w	800e0f2 <_dtoa_r+0x47a>
 800e1fa:	4b31      	ldr	r3, [pc, #196]	; (800e2c0 <_dtoa_r+0x648>)
 800e1fc:	ec51 0b19 	vmov	r0, r1, d9
 800e200:	2200      	movs	r2, #0
 800e202:	f7f2 fa19 	bl	8000638 <__aeabi_dmul>
 800e206:	4b2e      	ldr	r3, [pc, #184]	; (800e2c0 <_dtoa_r+0x648>)
 800e208:	ec41 0b19 	vmov	d9, r0, r1
 800e20c:	2200      	movs	r2, #0
 800e20e:	4640      	mov	r0, r8
 800e210:	4649      	mov	r1, r9
 800e212:	f7f2 fa11 	bl	8000638 <__aeabi_dmul>
 800e216:	4680      	mov	r8, r0
 800e218:	4689      	mov	r9, r1
 800e21a:	e7c5      	b.n	800e1a8 <_dtoa_r+0x530>
 800e21c:	ec51 0b17 	vmov	r0, r1, d7
 800e220:	f7f2 fa0a 	bl	8000638 <__aeabi_dmul>
 800e224:	9b02      	ldr	r3, [sp, #8]
 800e226:	9d00      	ldr	r5, [sp, #0]
 800e228:	930f      	str	r3, [sp, #60]	; 0x3c
 800e22a:	ec41 0b19 	vmov	d9, r0, r1
 800e22e:	4649      	mov	r1, r9
 800e230:	4640      	mov	r0, r8
 800e232:	f7f2 fcb1 	bl	8000b98 <__aeabi_d2iz>
 800e236:	4606      	mov	r6, r0
 800e238:	f7f2 f994 	bl	8000564 <__aeabi_i2d>
 800e23c:	3630      	adds	r6, #48	; 0x30
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	4640      	mov	r0, r8
 800e244:	4649      	mov	r1, r9
 800e246:	f7f2 f83f 	bl	80002c8 <__aeabi_dsub>
 800e24a:	f805 6b01 	strb.w	r6, [r5], #1
 800e24e:	9b02      	ldr	r3, [sp, #8]
 800e250:	429d      	cmp	r5, r3
 800e252:	4680      	mov	r8, r0
 800e254:	4689      	mov	r9, r1
 800e256:	f04f 0200 	mov.w	r2, #0
 800e25a:	d124      	bne.n	800e2a6 <_dtoa_r+0x62e>
 800e25c:	4b1b      	ldr	r3, [pc, #108]	; (800e2cc <_dtoa_r+0x654>)
 800e25e:	ec51 0b19 	vmov	r0, r1, d9
 800e262:	f7f2 f833 	bl	80002cc <__adddf3>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4640      	mov	r0, r8
 800e26c:	4649      	mov	r1, r9
 800e26e:	f7f2 fc73 	bl	8000b58 <__aeabi_dcmpgt>
 800e272:	2800      	cmp	r0, #0
 800e274:	d173      	bne.n	800e35e <_dtoa_r+0x6e6>
 800e276:	ec53 2b19 	vmov	r2, r3, d9
 800e27a:	4914      	ldr	r1, [pc, #80]	; (800e2cc <_dtoa_r+0x654>)
 800e27c:	2000      	movs	r0, #0
 800e27e:	f7f2 f823 	bl	80002c8 <__aeabi_dsub>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	4640      	mov	r0, r8
 800e288:	4649      	mov	r1, r9
 800e28a:	f7f2 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800e28e:	2800      	cmp	r0, #0
 800e290:	f43f af2f 	beq.w	800e0f2 <_dtoa_r+0x47a>
 800e294:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e296:	1e6b      	subs	r3, r5, #1
 800e298:	930f      	str	r3, [sp, #60]	; 0x3c
 800e29a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e29e:	2b30      	cmp	r3, #48	; 0x30
 800e2a0:	d0f8      	beq.n	800e294 <_dtoa_r+0x61c>
 800e2a2:	46bb      	mov	fp, r7
 800e2a4:	e04a      	b.n	800e33c <_dtoa_r+0x6c4>
 800e2a6:	4b06      	ldr	r3, [pc, #24]	; (800e2c0 <_dtoa_r+0x648>)
 800e2a8:	f7f2 f9c6 	bl	8000638 <__aeabi_dmul>
 800e2ac:	4680      	mov	r8, r0
 800e2ae:	4689      	mov	r9, r1
 800e2b0:	e7bd      	b.n	800e22e <_dtoa_r+0x5b6>
 800e2b2:	bf00      	nop
 800e2b4:	08010ec0 	.word	0x08010ec0
 800e2b8:	08010e98 	.word	0x08010e98
 800e2bc:	3ff00000 	.word	0x3ff00000
 800e2c0:	40240000 	.word	0x40240000
 800e2c4:	401c0000 	.word	0x401c0000
 800e2c8:	40140000 	.word	0x40140000
 800e2cc:	3fe00000 	.word	0x3fe00000
 800e2d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e2d4:	9d00      	ldr	r5, [sp, #0]
 800e2d6:	4642      	mov	r2, r8
 800e2d8:	464b      	mov	r3, r9
 800e2da:	4630      	mov	r0, r6
 800e2dc:	4639      	mov	r1, r7
 800e2de:	f7f2 fad5 	bl	800088c <__aeabi_ddiv>
 800e2e2:	f7f2 fc59 	bl	8000b98 <__aeabi_d2iz>
 800e2e6:	9001      	str	r0, [sp, #4]
 800e2e8:	f7f2 f93c 	bl	8000564 <__aeabi_i2d>
 800e2ec:	4642      	mov	r2, r8
 800e2ee:	464b      	mov	r3, r9
 800e2f0:	f7f2 f9a2 	bl	8000638 <__aeabi_dmul>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	4639      	mov	r1, r7
 800e2fc:	f7f1 ffe4 	bl	80002c8 <__aeabi_dsub>
 800e300:	9e01      	ldr	r6, [sp, #4]
 800e302:	9f04      	ldr	r7, [sp, #16]
 800e304:	3630      	adds	r6, #48	; 0x30
 800e306:	f805 6b01 	strb.w	r6, [r5], #1
 800e30a:	9e00      	ldr	r6, [sp, #0]
 800e30c:	1bae      	subs	r6, r5, r6
 800e30e:	42b7      	cmp	r7, r6
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	d134      	bne.n	800e380 <_dtoa_r+0x708>
 800e316:	f7f1 ffd9 	bl	80002cc <__adddf3>
 800e31a:	4642      	mov	r2, r8
 800e31c:	464b      	mov	r3, r9
 800e31e:	4606      	mov	r6, r0
 800e320:	460f      	mov	r7, r1
 800e322:	f7f2 fc19 	bl	8000b58 <__aeabi_dcmpgt>
 800e326:	b9c8      	cbnz	r0, 800e35c <_dtoa_r+0x6e4>
 800e328:	4642      	mov	r2, r8
 800e32a:	464b      	mov	r3, r9
 800e32c:	4630      	mov	r0, r6
 800e32e:	4639      	mov	r1, r7
 800e330:	f7f2 fbea 	bl	8000b08 <__aeabi_dcmpeq>
 800e334:	b110      	cbz	r0, 800e33c <_dtoa_r+0x6c4>
 800e336:	9b01      	ldr	r3, [sp, #4]
 800e338:	07db      	lsls	r3, r3, #31
 800e33a:	d40f      	bmi.n	800e35c <_dtoa_r+0x6e4>
 800e33c:	4651      	mov	r1, sl
 800e33e:	4620      	mov	r0, r4
 800e340:	f000 ff36 	bl	800f1b0 <_Bfree>
 800e344:	2300      	movs	r3, #0
 800e346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e348:	702b      	strb	r3, [r5, #0]
 800e34a:	f10b 0301 	add.w	r3, fp, #1
 800e34e:	6013      	str	r3, [r2, #0]
 800e350:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e352:	2b00      	cmp	r3, #0
 800e354:	f43f ace2 	beq.w	800dd1c <_dtoa_r+0xa4>
 800e358:	601d      	str	r5, [r3, #0]
 800e35a:	e4df      	b.n	800dd1c <_dtoa_r+0xa4>
 800e35c:	465f      	mov	r7, fp
 800e35e:	462b      	mov	r3, r5
 800e360:	461d      	mov	r5, r3
 800e362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e366:	2a39      	cmp	r2, #57	; 0x39
 800e368:	d106      	bne.n	800e378 <_dtoa_r+0x700>
 800e36a:	9a00      	ldr	r2, [sp, #0]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d1f7      	bne.n	800e360 <_dtoa_r+0x6e8>
 800e370:	9900      	ldr	r1, [sp, #0]
 800e372:	2230      	movs	r2, #48	; 0x30
 800e374:	3701      	adds	r7, #1
 800e376:	700a      	strb	r2, [r1, #0]
 800e378:	781a      	ldrb	r2, [r3, #0]
 800e37a:	3201      	adds	r2, #1
 800e37c:	701a      	strb	r2, [r3, #0]
 800e37e:	e790      	b.n	800e2a2 <_dtoa_r+0x62a>
 800e380:	4ba3      	ldr	r3, [pc, #652]	; (800e610 <_dtoa_r+0x998>)
 800e382:	2200      	movs	r2, #0
 800e384:	f7f2 f958 	bl	8000638 <__aeabi_dmul>
 800e388:	2200      	movs	r2, #0
 800e38a:	2300      	movs	r3, #0
 800e38c:	4606      	mov	r6, r0
 800e38e:	460f      	mov	r7, r1
 800e390:	f7f2 fbba 	bl	8000b08 <__aeabi_dcmpeq>
 800e394:	2800      	cmp	r0, #0
 800e396:	d09e      	beq.n	800e2d6 <_dtoa_r+0x65e>
 800e398:	e7d0      	b.n	800e33c <_dtoa_r+0x6c4>
 800e39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e39c:	2a00      	cmp	r2, #0
 800e39e:	f000 80ca 	beq.w	800e536 <_dtoa_r+0x8be>
 800e3a2:	9a07      	ldr	r2, [sp, #28]
 800e3a4:	2a01      	cmp	r2, #1
 800e3a6:	f300 80ad 	bgt.w	800e504 <_dtoa_r+0x88c>
 800e3aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3ac:	2a00      	cmp	r2, #0
 800e3ae:	f000 80a5 	beq.w	800e4fc <_dtoa_r+0x884>
 800e3b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e3b6:	9e08      	ldr	r6, [sp, #32]
 800e3b8:	9d05      	ldr	r5, [sp, #20]
 800e3ba:	9a05      	ldr	r2, [sp, #20]
 800e3bc:	441a      	add	r2, r3
 800e3be:	9205      	str	r2, [sp, #20]
 800e3c0:	9a06      	ldr	r2, [sp, #24]
 800e3c2:	2101      	movs	r1, #1
 800e3c4:	441a      	add	r2, r3
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	9206      	str	r2, [sp, #24]
 800e3ca:	f000 fff1 	bl	800f3b0 <__i2b>
 800e3ce:	4607      	mov	r7, r0
 800e3d0:	b165      	cbz	r5, 800e3ec <_dtoa_r+0x774>
 800e3d2:	9b06      	ldr	r3, [sp, #24]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	dd09      	ble.n	800e3ec <_dtoa_r+0x774>
 800e3d8:	42ab      	cmp	r3, r5
 800e3da:	9a05      	ldr	r2, [sp, #20]
 800e3dc:	bfa8      	it	ge
 800e3de:	462b      	movge	r3, r5
 800e3e0:	1ad2      	subs	r2, r2, r3
 800e3e2:	9205      	str	r2, [sp, #20]
 800e3e4:	9a06      	ldr	r2, [sp, #24]
 800e3e6:	1aed      	subs	r5, r5, r3
 800e3e8:	1ad3      	subs	r3, r2, r3
 800e3ea:	9306      	str	r3, [sp, #24]
 800e3ec:	9b08      	ldr	r3, [sp, #32]
 800e3ee:	b1f3      	cbz	r3, 800e42e <_dtoa_r+0x7b6>
 800e3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f000 80a3 	beq.w	800e53e <_dtoa_r+0x8c6>
 800e3f8:	2e00      	cmp	r6, #0
 800e3fa:	dd10      	ble.n	800e41e <_dtoa_r+0x7a6>
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	4632      	mov	r2, r6
 800e400:	4620      	mov	r0, r4
 800e402:	f001 f895 	bl	800f530 <__pow5mult>
 800e406:	4652      	mov	r2, sl
 800e408:	4601      	mov	r1, r0
 800e40a:	4607      	mov	r7, r0
 800e40c:	4620      	mov	r0, r4
 800e40e:	f000 ffe5 	bl	800f3dc <__multiply>
 800e412:	4651      	mov	r1, sl
 800e414:	4680      	mov	r8, r0
 800e416:	4620      	mov	r0, r4
 800e418:	f000 feca 	bl	800f1b0 <_Bfree>
 800e41c:	46c2      	mov	sl, r8
 800e41e:	9b08      	ldr	r3, [sp, #32]
 800e420:	1b9a      	subs	r2, r3, r6
 800e422:	d004      	beq.n	800e42e <_dtoa_r+0x7b6>
 800e424:	4651      	mov	r1, sl
 800e426:	4620      	mov	r0, r4
 800e428:	f001 f882 	bl	800f530 <__pow5mult>
 800e42c:	4682      	mov	sl, r0
 800e42e:	2101      	movs	r1, #1
 800e430:	4620      	mov	r0, r4
 800e432:	f000 ffbd 	bl	800f3b0 <__i2b>
 800e436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e438:	2b00      	cmp	r3, #0
 800e43a:	4606      	mov	r6, r0
 800e43c:	f340 8081 	ble.w	800e542 <_dtoa_r+0x8ca>
 800e440:	461a      	mov	r2, r3
 800e442:	4601      	mov	r1, r0
 800e444:	4620      	mov	r0, r4
 800e446:	f001 f873 	bl	800f530 <__pow5mult>
 800e44a:	9b07      	ldr	r3, [sp, #28]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	4606      	mov	r6, r0
 800e450:	dd7a      	ble.n	800e548 <_dtoa_r+0x8d0>
 800e452:	f04f 0800 	mov.w	r8, #0
 800e456:	6933      	ldr	r3, [r6, #16]
 800e458:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e45c:	6918      	ldr	r0, [r3, #16]
 800e45e:	f000 ff59 	bl	800f314 <__hi0bits>
 800e462:	f1c0 0020 	rsb	r0, r0, #32
 800e466:	9b06      	ldr	r3, [sp, #24]
 800e468:	4418      	add	r0, r3
 800e46a:	f010 001f 	ands.w	r0, r0, #31
 800e46e:	f000 8094 	beq.w	800e59a <_dtoa_r+0x922>
 800e472:	f1c0 0320 	rsb	r3, r0, #32
 800e476:	2b04      	cmp	r3, #4
 800e478:	f340 8085 	ble.w	800e586 <_dtoa_r+0x90e>
 800e47c:	9b05      	ldr	r3, [sp, #20]
 800e47e:	f1c0 001c 	rsb	r0, r0, #28
 800e482:	4403      	add	r3, r0
 800e484:	9305      	str	r3, [sp, #20]
 800e486:	9b06      	ldr	r3, [sp, #24]
 800e488:	4403      	add	r3, r0
 800e48a:	4405      	add	r5, r0
 800e48c:	9306      	str	r3, [sp, #24]
 800e48e:	9b05      	ldr	r3, [sp, #20]
 800e490:	2b00      	cmp	r3, #0
 800e492:	dd05      	ble.n	800e4a0 <_dtoa_r+0x828>
 800e494:	4651      	mov	r1, sl
 800e496:	461a      	mov	r2, r3
 800e498:	4620      	mov	r0, r4
 800e49a:	f001 f8a3 	bl	800f5e4 <__lshift>
 800e49e:	4682      	mov	sl, r0
 800e4a0:	9b06      	ldr	r3, [sp, #24]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	dd05      	ble.n	800e4b2 <_dtoa_r+0x83a>
 800e4a6:	4631      	mov	r1, r6
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f001 f89a 	bl	800f5e4 <__lshift>
 800e4b0:	4606      	mov	r6, r0
 800e4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d072      	beq.n	800e59e <_dtoa_r+0x926>
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	4650      	mov	r0, sl
 800e4bc:	f001 f8fe 	bl	800f6bc <__mcmp>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	da6c      	bge.n	800e59e <_dtoa_r+0x926>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	4651      	mov	r1, sl
 800e4c8:	220a      	movs	r2, #10
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	f000 fe92 	bl	800f1f4 <__multadd>
 800e4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4d6:	4682      	mov	sl, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 81b0 	beq.w	800e83e <_dtoa_r+0xbc6>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	4639      	mov	r1, r7
 800e4e2:	220a      	movs	r2, #10
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f000 fe85 	bl	800f1f4 <__multadd>
 800e4ea:	9b01      	ldr	r3, [sp, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	4607      	mov	r7, r0
 800e4f0:	f300 8096 	bgt.w	800e620 <_dtoa_r+0x9a8>
 800e4f4:	9b07      	ldr	r3, [sp, #28]
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	dc59      	bgt.n	800e5ae <_dtoa_r+0x936>
 800e4fa:	e091      	b.n	800e620 <_dtoa_r+0x9a8>
 800e4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e502:	e758      	b.n	800e3b6 <_dtoa_r+0x73e>
 800e504:	9b04      	ldr	r3, [sp, #16]
 800e506:	1e5e      	subs	r6, r3, #1
 800e508:	9b08      	ldr	r3, [sp, #32]
 800e50a:	42b3      	cmp	r3, r6
 800e50c:	bfbf      	itttt	lt
 800e50e:	9b08      	ldrlt	r3, [sp, #32]
 800e510:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e512:	9608      	strlt	r6, [sp, #32]
 800e514:	1af3      	sublt	r3, r6, r3
 800e516:	bfb4      	ite	lt
 800e518:	18d2      	addlt	r2, r2, r3
 800e51a:	1b9e      	subge	r6, r3, r6
 800e51c:	9b04      	ldr	r3, [sp, #16]
 800e51e:	bfbc      	itt	lt
 800e520:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e522:	2600      	movlt	r6, #0
 800e524:	2b00      	cmp	r3, #0
 800e526:	bfb7      	itett	lt
 800e528:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e52c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e530:	1a9d      	sublt	r5, r3, r2
 800e532:	2300      	movlt	r3, #0
 800e534:	e741      	b.n	800e3ba <_dtoa_r+0x742>
 800e536:	9e08      	ldr	r6, [sp, #32]
 800e538:	9d05      	ldr	r5, [sp, #20]
 800e53a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e53c:	e748      	b.n	800e3d0 <_dtoa_r+0x758>
 800e53e:	9a08      	ldr	r2, [sp, #32]
 800e540:	e770      	b.n	800e424 <_dtoa_r+0x7ac>
 800e542:	9b07      	ldr	r3, [sp, #28]
 800e544:	2b01      	cmp	r3, #1
 800e546:	dc19      	bgt.n	800e57c <_dtoa_r+0x904>
 800e548:	9b02      	ldr	r3, [sp, #8]
 800e54a:	b9bb      	cbnz	r3, 800e57c <_dtoa_r+0x904>
 800e54c:	9b03      	ldr	r3, [sp, #12]
 800e54e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e552:	b99b      	cbnz	r3, 800e57c <_dtoa_r+0x904>
 800e554:	9b03      	ldr	r3, [sp, #12]
 800e556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e55a:	0d1b      	lsrs	r3, r3, #20
 800e55c:	051b      	lsls	r3, r3, #20
 800e55e:	b183      	cbz	r3, 800e582 <_dtoa_r+0x90a>
 800e560:	9b05      	ldr	r3, [sp, #20]
 800e562:	3301      	adds	r3, #1
 800e564:	9305      	str	r3, [sp, #20]
 800e566:	9b06      	ldr	r3, [sp, #24]
 800e568:	3301      	adds	r3, #1
 800e56a:	9306      	str	r3, [sp, #24]
 800e56c:	f04f 0801 	mov.w	r8, #1
 800e570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e572:	2b00      	cmp	r3, #0
 800e574:	f47f af6f 	bne.w	800e456 <_dtoa_r+0x7de>
 800e578:	2001      	movs	r0, #1
 800e57a:	e774      	b.n	800e466 <_dtoa_r+0x7ee>
 800e57c:	f04f 0800 	mov.w	r8, #0
 800e580:	e7f6      	b.n	800e570 <_dtoa_r+0x8f8>
 800e582:	4698      	mov	r8, r3
 800e584:	e7f4      	b.n	800e570 <_dtoa_r+0x8f8>
 800e586:	d082      	beq.n	800e48e <_dtoa_r+0x816>
 800e588:	9a05      	ldr	r2, [sp, #20]
 800e58a:	331c      	adds	r3, #28
 800e58c:	441a      	add	r2, r3
 800e58e:	9205      	str	r2, [sp, #20]
 800e590:	9a06      	ldr	r2, [sp, #24]
 800e592:	441a      	add	r2, r3
 800e594:	441d      	add	r5, r3
 800e596:	9206      	str	r2, [sp, #24]
 800e598:	e779      	b.n	800e48e <_dtoa_r+0x816>
 800e59a:	4603      	mov	r3, r0
 800e59c:	e7f4      	b.n	800e588 <_dtoa_r+0x910>
 800e59e:	9b04      	ldr	r3, [sp, #16]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	dc37      	bgt.n	800e614 <_dtoa_r+0x99c>
 800e5a4:	9b07      	ldr	r3, [sp, #28]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	dd34      	ble.n	800e614 <_dtoa_r+0x99c>
 800e5aa:	9b04      	ldr	r3, [sp, #16]
 800e5ac:	9301      	str	r3, [sp, #4]
 800e5ae:	9b01      	ldr	r3, [sp, #4]
 800e5b0:	b963      	cbnz	r3, 800e5cc <_dtoa_r+0x954>
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	2205      	movs	r2, #5
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f000 fe1c 	bl	800f1f4 <__multadd>
 800e5bc:	4601      	mov	r1, r0
 800e5be:	4606      	mov	r6, r0
 800e5c0:	4650      	mov	r0, sl
 800e5c2:	f001 f87b 	bl	800f6bc <__mcmp>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	f73f adbb 	bgt.w	800e142 <_dtoa_r+0x4ca>
 800e5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ce:	9d00      	ldr	r5, [sp, #0]
 800e5d0:	ea6f 0b03 	mvn.w	fp, r3
 800e5d4:	f04f 0800 	mov.w	r8, #0
 800e5d8:	4631      	mov	r1, r6
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f000 fde8 	bl	800f1b0 <_Bfree>
 800e5e0:	2f00      	cmp	r7, #0
 800e5e2:	f43f aeab 	beq.w	800e33c <_dtoa_r+0x6c4>
 800e5e6:	f1b8 0f00 	cmp.w	r8, #0
 800e5ea:	d005      	beq.n	800e5f8 <_dtoa_r+0x980>
 800e5ec:	45b8      	cmp	r8, r7
 800e5ee:	d003      	beq.n	800e5f8 <_dtoa_r+0x980>
 800e5f0:	4641      	mov	r1, r8
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	f000 fddc 	bl	800f1b0 <_Bfree>
 800e5f8:	4639      	mov	r1, r7
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f000 fdd8 	bl	800f1b0 <_Bfree>
 800e600:	e69c      	b.n	800e33c <_dtoa_r+0x6c4>
 800e602:	2600      	movs	r6, #0
 800e604:	4637      	mov	r7, r6
 800e606:	e7e1      	b.n	800e5cc <_dtoa_r+0x954>
 800e608:	46bb      	mov	fp, r7
 800e60a:	4637      	mov	r7, r6
 800e60c:	e599      	b.n	800e142 <_dtoa_r+0x4ca>
 800e60e:	bf00      	nop
 800e610:	40240000 	.word	0x40240000
 800e614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e616:	2b00      	cmp	r3, #0
 800e618:	f000 80c8 	beq.w	800e7ac <_dtoa_r+0xb34>
 800e61c:	9b04      	ldr	r3, [sp, #16]
 800e61e:	9301      	str	r3, [sp, #4]
 800e620:	2d00      	cmp	r5, #0
 800e622:	dd05      	ble.n	800e630 <_dtoa_r+0x9b8>
 800e624:	4639      	mov	r1, r7
 800e626:	462a      	mov	r2, r5
 800e628:	4620      	mov	r0, r4
 800e62a:	f000 ffdb 	bl	800f5e4 <__lshift>
 800e62e:	4607      	mov	r7, r0
 800e630:	f1b8 0f00 	cmp.w	r8, #0
 800e634:	d05b      	beq.n	800e6ee <_dtoa_r+0xa76>
 800e636:	6879      	ldr	r1, [r7, #4]
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 fd79 	bl	800f130 <_Balloc>
 800e63e:	4605      	mov	r5, r0
 800e640:	b928      	cbnz	r0, 800e64e <_dtoa_r+0x9d6>
 800e642:	4b83      	ldr	r3, [pc, #524]	; (800e850 <_dtoa_r+0xbd8>)
 800e644:	4602      	mov	r2, r0
 800e646:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e64a:	f7ff bb2e 	b.w	800dcaa <_dtoa_r+0x32>
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	3202      	adds	r2, #2
 800e652:	0092      	lsls	r2, r2, #2
 800e654:	f107 010c 	add.w	r1, r7, #12
 800e658:	300c      	adds	r0, #12
 800e65a:	f7ff fa6e 	bl	800db3a <memcpy>
 800e65e:	2201      	movs	r2, #1
 800e660:	4629      	mov	r1, r5
 800e662:	4620      	mov	r0, r4
 800e664:	f000 ffbe 	bl	800f5e4 <__lshift>
 800e668:	9b00      	ldr	r3, [sp, #0]
 800e66a:	3301      	adds	r3, #1
 800e66c:	9304      	str	r3, [sp, #16]
 800e66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e672:	4413      	add	r3, r2
 800e674:	9308      	str	r3, [sp, #32]
 800e676:	9b02      	ldr	r3, [sp, #8]
 800e678:	f003 0301 	and.w	r3, r3, #1
 800e67c:	46b8      	mov	r8, r7
 800e67e:	9306      	str	r3, [sp, #24]
 800e680:	4607      	mov	r7, r0
 800e682:	9b04      	ldr	r3, [sp, #16]
 800e684:	4631      	mov	r1, r6
 800e686:	3b01      	subs	r3, #1
 800e688:	4650      	mov	r0, sl
 800e68a:	9301      	str	r3, [sp, #4]
 800e68c:	f7ff fa6c 	bl	800db68 <quorem>
 800e690:	4641      	mov	r1, r8
 800e692:	9002      	str	r0, [sp, #8]
 800e694:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e698:	4650      	mov	r0, sl
 800e69a:	f001 f80f 	bl	800f6bc <__mcmp>
 800e69e:	463a      	mov	r2, r7
 800e6a0:	9005      	str	r0, [sp, #20]
 800e6a2:	4631      	mov	r1, r6
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f001 f825 	bl	800f6f4 <__mdiff>
 800e6aa:	68c2      	ldr	r2, [r0, #12]
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	bb02      	cbnz	r2, 800e6f2 <_dtoa_r+0xa7a>
 800e6b0:	4601      	mov	r1, r0
 800e6b2:	4650      	mov	r0, sl
 800e6b4:	f001 f802 	bl	800f6bc <__mcmp>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	4620      	mov	r0, r4
 800e6be:	9209      	str	r2, [sp, #36]	; 0x24
 800e6c0:	f000 fd76 	bl	800f1b0 <_Bfree>
 800e6c4:	9b07      	ldr	r3, [sp, #28]
 800e6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6c8:	9d04      	ldr	r5, [sp, #16]
 800e6ca:	ea43 0102 	orr.w	r1, r3, r2
 800e6ce:	9b06      	ldr	r3, [sp, #24]
 800e6d0:	4319      	orrs	r1, r3
 800e6d2:	d110      	bne.n	800e6f6 <_dtoa_r+0xa7e>
 800e6d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e6d8:	d029      	beq.n	800e72e <_dtoa_r+0xab6>
 800e6da:	9b05      	ldr	r3, [sp, #20]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	dd02      	ble.n	800e6e6 <_dtoa_r+0xa6e>
 800e6e0:	9b02      	ldr	r3, [sp, #8]
 800e6e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e6e6:	9b01      	ldr	r3, [sp, #4]
 800e6e8:	f883 9000 	strb.w	r9, [r3]
 800e6ec:	e774      	b.n	800e5d8 <_dtoa_r+0x960>
 800e6ee:	4638      	mov	r0, r7
 800e6f0:	e7ba      	b.n	800e668 <_dtoa_r+0x9f0>
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	e7e1      	b.n	800e6ba <_dtoa_r+0xa42>
 800e6f6:	9b05      	ldr	r3, [sp, #20]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	db04      	blt.n	800e706 <_dtoa_r+0xa8e>
 800e6fc:	9907      	ldr	r1, [sp, #28]
 800e6fe:	430b      	orrs	r3, r1
 800e700:	9906      	ldr	r1, [sp, #24]
 800e702:	430b      	orrs	r3, r1
 800e704:	d120      	bne.n	800e748 <_dtoa_r+0xad0>
 800e706:	2a00      	cmp	r2, #0
 800e708:	dded      	ble.n	800e6e6 <_dtoa_r+0xa6e>
 800e70a:	4651      	mov	r1, sl
 800e70c:	2201      	movs	r2, #1
 800e70e:	4620      	mov	r0, r4
 800e710:	f000 ff68 	bl	800f5e4 <__lshift>
 800e714:	4631      	mov	r1, r6
 800e716:	4682      	mov	sl, r0
 800e718:	f000 ffd0 	bl	800f6bc <__mcmp>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	dc03      	bgt.n	800e728 <_dtoa_r+0xab0>
 800e720:	d1e1      	bne.n	800e6e6 <_dtoa_r+0xa6e>
 800e722:	f019 0f01 	tst.w	r9, #1
 800e726:	d0de      	beq.n	800e6e6 <_dtoa_r+0xa6e>
 800e728:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e72c:	d1d8      	bne.n	800e6e0 <_dtoa_r+0xa68>
 800e72e:	9a01      	ldr	r2, [sp, #4]
 800e730:	2339      	movs	r3, #57	; 0x39
 800e732:	7013      	strb	r3, [r2, #0]
 800e734:	462b      	mov	r3, r5
 800e736:	461d      	mov	r5, r3
 800e738:	3b01      	subs	r3, #1
 800e73a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e73e:	2a39      	cmp	r2, #57	; 0x39
 800e740:	d06c      	beq.n	800e81c <_dtoa_r+0xba4>
 800e742:	3201      	adds	r2, #1
 800e744:	701a      	strb	r2, [r3, #0]
 800e746:	e747      	b.n	800e5d8 <_dtoa_r+0x960>
 800e748:	2a00      	cmp	r2, #0
 800e74a:	dd07      	ble.n	800e75c <_dtoa_r+0xae4>
 800e74c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e750:	d0ed      	beq.n	800e72e <_dtoa_r+0xab6>
 800e752:	9a01      	ldr	r2, [sp, #4]
 800e754:	f109 0301 	add.w	r3, r9, #1
 800e758:	7013      	strb	r3, [r2, #0]
 800e75a:	e73d      	b.n	800e5d8 <_dtoa_r+0x960>
 800e75c:	9b04      	ldr	r3, [sp, #16]
 800e75e:	9a08      	ldr	r2, [sp, #32]
 800e760:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e764:	4293      	cmp	r3, r2
 800e766:	d043      	beq.n	800e7f0 <_dtoa_r+0xb78>
 800e768:	4651      	mov	r1, sl
 800e76a:	2300      	movs	r3, #0
 800e76c:	220a      	movs	r2, #10
 800e76e:	4620      	mov	r0, r4
 800e770:	f000 fd40 	bl	800f1f4 <__multadd>
 800e774:	45b8      	cmp	r8, r7
 800e776:	4682      	mov	sl, r0
 800e778:	f04f 0300 	mov.w	r3, #0
 800e77c:	f04f 020a 	mov.w	r2, #10
 800e780:	4641      	mov	r1, r8
 800e782:	4620      	mov	r0, r4
 800e784:	d107      	bne.n	800e796 <_dtoa_r+0xb1e>
 800e786:	f000 fd35 	bl	800f1f4 <__multadd>
 800e78a:	4680      	mov	r8, r0
 800e78c:	4607      	mov	r7, r0
 800e78e:	9b04      	ldr	r3, [sp, #16]
 800e790:	3301      	adds	r3, #1
 800e792:	9304      	str	r3, [sp, #16]
 800e794:	e775      	b.n	800e682 <_dtoa_r+0xa0a>
 800e796:	f000 fd2d 	bl	800f1f4 <__multadd>
 800e79a:	4639      	mov	r1, r7
 800e79c:	4680      	mov	r8, r0
 800e79e:	2300      	movs	r3, #0
 800e7a0:	220a      	movs	r2, #10
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f000 fd26 	bl	800f1f4 <__multadd>
 800e7a8:	4607      	mov	r7, r0
 800e7aa:	e7f0      	b.n	800e78e <_dtoa_r+0xb16>
 800e7ac:	9b04      	ldr	r3, [sp, #16]
 800e7ae:	9301      	str	r3, [sp, #4]
 800e7b0:	9d00      	ldr	r5, [sp, #0]
 800e7b2:	4631      	mov	r1, r6
 800e7b4:	4650      	mov	r0, sl
 800e7b6:	f7ff f9d7 	bl	800db68 <quorem>
 800e7ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e7be:	9b00      	ldr	r3, [sp, #0]
 800e7c0:	f805 9b01 	strb.w	r9, [r5], #1
 800e7c4:	1aea      	subs	r2, r5, r3
 800e7c6:	9b01      	ldr	r3, [sp, #4]
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	dd07      	ble.n	800e7dc <_dtoa_r+0xb64>
 800e7cc:	4651      	mov	r1, sl
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	220a      	movs	r2, #10
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f000 fd0e 	bl	800f1f4 <__multadd>
 800e7d8:	4682      	mov	sl, r0
 800e7da:	e7ea      	b.n	800e7b2 <_dtoa_r+0xb3a>
 800e7dc:	9b01      	ldr	r3, [sp, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	bfc8      	it	gt
 800e7e2:	461d      	movgt	r5, r3
 800e7e4:	9b00      	ldr	r3, [sp, #0]
 800e7e6:	bfd8      	it	le
 800e7e8:	2501      	movle	r5, #1
 800e7ea:	441d      	add	r5, r3
 800e7ec:	f04f 0800 	mov.w	r8, #0
 800e7f0:	4651      	mov	r1, sl
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	f000 fef5 	bl	800f5e4 <__lshift>
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	4682      	mov	sl, r0
 800e7fe:	f000 ff5d 	bl	800f6bc <__mcmp>
 800e802:	2800      	cmp	r0, #0
 800e804:	dc96      	bgt.n	800e734 <_dtoa_r+0xabc>
 800e806:	d102      	bne.n	800e80e <_dtoa_r+0xb96>
 800e808:	f019 0f01 	tst.w	r9, #1
 800e80c:	d192      	bne.n	800e734 <_dtoa_r+0xabc>
 800e80e:	462b      	mov	r3, r5
 800e810:	461d      	mov	r5, r3
 800e812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e816:	2a30      	cmp	r2, #48	; 0x30
 800e818:	d0fa      	beq.n	800e810 <_dtoa_r+0xb98>
 800e81a:	e6dd      	b.n	800e5d8 <_dtoa_r+0x960>
 800e81c:	9a00      	ldr	r2, [sp, #0]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d189      	bne.n	800e736 <_dtoa_r+0xabe>
 800e822:	f10b 0b01 	add.w	fp, fp, #1
 800e826:	2331      	movs	r3, #49	; 0x31
 800e828:	e796      	b.n	800e758 <_dtoa_r+0xae0>
 800e82a:	4b0a      	ldr	r3, [pc, #40]	; (800e854 <_dtoa_r+0xbdc>)
 800e82c:	f7ff ba99 	b.w	800dd62 <_dtoa_r+0xea>
 800e830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e832:	2b00      	cmp	r3, #0
 800e834:	f47f aa6d 	bne.w	800dd12 <_dtoa_r+0x9a>
 800e838:	4b07      	ldr	r3, [pc, #28]	; (800e858 <_dtoa_r+0xbe0>)
 800e83a:	f7ff ba92 	b.w	800dd62 <_dtoa_r+0xea>
 800e83e:	9b01      	ldr	r3, [sp, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	dcb5      	bgt.n	800e7b0 <_dtoa_r+0xb38>
 800e844:	9b07      	ldr	r3, [sp, #28]
 800e846:	2b02      	cmp	r3, #2
 800e848:	f73f aeb1 	bgt.w	800e5ae <_dtoa_r+0x936>
 800e84c:	e7b0      	b.n	800e7b0 <_dtoa_r+0xb38>
 800e84e:	bf00      	nop
 800e850:	08010dc9 	.word	0x08010dc9
 800e854:	08010d21 	.word	0x08010d21
 800e858:	08010d4d 	.word	0x08010d4d

0800e85c <_free_r>:
 800e85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e85e:	2900      	cmp	r1, #0
 800e860:	d044      	beq.n	800e8ec <_free_r+0x90>
 800e862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e866:	9001      	str	r0, [sp, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f1a1 0404 	sub.w	r4, r1, #4
 800e86e:	bfb8      	it	lt
 800e870:	18e4      	addlt	r4, r4, r3
 800e872:	f000 fc51 	bl	800f118 <__malloc_lock>
 800e876:	4a1e      	ldr	r2, [pc, #120]	; (800e8f0 <_free_r+0x94>)
 800e878:	9801      	ldr	r0, [sp, #4]
 800e87a:	6813      	ldr	r3, [r2, #0]
 800e87c:	b933      	cbnz	r3, 800e88c <_free_r+0x30>
 800e87e:	6063      	str	r3, [r4, #4]
 800e880:	6014      	str	r4, [r2, #0]
 800e882:	b003      	add	sp, #12
 800e884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e888:	f000 bc4c 	b.w	800f124 <__malloc_unlock>
 800e88c:	42a3      	cmp	r3, r4
 800e88e:	d908      	bls.n	800e8a2 <_free_r+0x46>
 800e890:	6825      	ldr	r5, [r4, #0]
 800e892:	1961      	adds	r1, r4, r5
 800e894:	428b      	cmp	r3, r1
 800e896:	bf01      	itttt	eq
 800e898:	6819      	ldreq	r1, [r3, #0]
 800e89a:	685b      	ldreq	r3, [r3, #4]
 800e89c:	1949      	addeq	r1, r1, r5
 800e89e:	6021      	streq	r1, [r4, #0]
 800e8a0:	e7ed      	b.n	800e87e <_free_r+0x22>
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	b10b      	cbz	r3, 800e8ac <_free_r+0x50>
 800e8a8:	42a3      	cmp	r3, r4
 800e8aa:	d9fa      	bls.n	800e8a2 <_free_r+0x46>
 800e8ac:	6811      	ldr	r1, [r2, #0]
 800e8ae:	1855      	adds	r5, r2, r1
 800e8b0:	42a5      	cmp	r5, r4
 800e8b2:	d10b      	bne.n	800e8cc <_free_r+0x70>
 800e8b4:	6824      	ldr	r4, [r4, #0]
 800e8b6:	4421      	add	r1, r4
 800e8b8:	1854      	adds	r4, r2, r1
 800e8ba:	42a3      	cmp	r3, r4
 800e8bc:	6011      	str	r1, [r2, #0]
 800e8be:	d1e0      	bne.n	800e882 <_free_r+0x26>
 800e8c0:	681c      	ldr	r4, [r3, #0]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	6053      	str	r3, [r2, #4]
 800e8c6:	440c      	add	r4, r1
 800e8c8:	6014      	str	r4, [r2, #0]
 800e8ca:	e7da      	b.n	800e882 <_free_r+0x26>
 800e8cc:	d902      	bls.n	800e8d4 <_free_r+0x78>
 800e8ce:	230c      	movs	r3, #12
 800e8d0:	6003      	str	r3, [r0, #0]
 800e8d2:	e7d6      	b.n	800e882 <_free_r+0x26>
 800e8d4:	6825      	ldr	r5, [r4, #0]
 800e8d6:	1961      	adds	r1, r4, r5
 800e8d8:	428b      	cmp	r3, r1
 800e8da:	bf04      	itt	eq
 800e8dc:	6819      	ldreq	r1, [r3, #0]
 800e8de:	685b      	ldreq	r3, [r3, #4]
 800e8e0:	6063      	str	r3, [r4, #4]
 800e8e2:	bf04      	itt	eq
 800e8e4:	1949      	addeq	r1, r1, r5
 800e8e6:	6021      	streq	r1, [r4, #0]
 800e8e8:	6054      	str	r4, [r2, #4]
 800e8ea:	e7ca      	b.n	800e882 <_free_r+0x26>
 800e8ec:	b003      	add	sp, #12
 800e8ee:	bd30      	pop	{r4, r5, pc}
 800e8f0:	20002e1c 	.word	0x20002e1c

0800e8f4 <rshift>:
 800e8f4:	6903      	ldr	r3, [r0, #16]
 800e8f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e8fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e902:	f100 0414 	add.w	r4, r0, #20
 800e906:	dd45      	ble.n	800e994 <rshift+0xa0>
 800e908:	f011 011f 	ands.w	r1, r1, #31
 800e90c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e910:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e914:	d10c      	bne.n	800e930 <rshift+0x3c>
 800e916:	f100 0710 	add.w	r7, r0, #16
 800e91a:	4629      	mov	r1, r5
 800e91c:	42b1      	cmp	r1, r6
 800e91e:	d334      	bcc.n	800e98a <rshift+0x96>
 800e920:	1a9b      	subs	r3, r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	1eea      	subs	r2, r5, #3
 800e926:	4296      	cmp	r6, r2
 800e928:	bf38      	it	cc
 800e92a:	2300      	movcc	r3, #0
 800e92c:	4423      	add	r3, r4
 800e92e:	e015      	b.n	800e95c <rshift+0x68>
 800e930:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e934:	f1c1 0820 	rsb	r8, r1, #32
 800e938:	40cf      	lsrs	r7, r1
 800e93a:	f105 0e04 	add.w	lr, r5, #4
 800e93e:	46a1      	mov	r9, r4
 800e940:	4576      	cmp	r6, lr
 800e942:	46f4      	mov	ip, lr
 800e944:	d815      	bhi.n	800e972 <rshift+0x7e>
 800e946:	1a9a      	subs	r2, r3, r2
 800e948:	0092      	lsls	r2, r2, #2
 800e94a:	3a04      	subs	r2, #4
 800e94c:	3501      	adds	r5, #1
 800e94e:	42ae      	cmp	r6, r5
 800e950:	bf38      	it	cc
 800e952:	2200      	movcc	r2, #0
 800e954:	18a3      	adds	r3, r4, r2
 800e956:	50a7      	str	r7, [r4, r2]
 800e958:	b107      	cbz	r7, 800e95c <rshift+0x68>
 800e95a:	3304      	adds	r3, #4
 800e95c:	1b1a      	subs	r2, r3, r4
 800e95e:	42a3      	cmp	r3, r4
 800e960:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e964:	bf08      	it	eq
 800e966:	2300      	moveq	r3, #0
 800e968:	6102      	str	r2, [r0, #16]
 800e96a:	bf08      	it	eq
 800e96c:	6143      	streq	r3, [r0, #20]
 800e96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e972:	f8dc c000 	ldr.w	ip, [ip]
 800e976:	fa0c fc08 	lsl.w	ip, ip, r8
 800e97a:	ea4c 0707 	orr.w	r7, ip, r7
 800e97e:	f849 7b04 	str.w	r7, [r9], #4
 800e982:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e986:	40cf      	lsrs	r7, r1
 800e988:	e7da      	b.n	800e940 <rshift+0x4c>
 800e98a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e98e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e992:	e7c3      	b.n	800e91c <rshift+0x28>
 800e994:	4623      	mov	r3, r4
 800e996:	e7e1      	b.n	800e95c <rshift+0x68>

0800e998 <__hexdig_fun>:
 800e998:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e99c:	2b09      	cmp	r3, #9
 800e99e:	d802      	bhi.n	800e9a6 <__hexdig_fun+0xe>
 800e9a0:	3820      	subs	r0, #32
 800e9a2:	b2c0      	uxtb	r0, r0
 800e9a4:	4770      	bx	lr
 800e9a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e9aa:	2b05      	cmp	r3, #5
 800e9ac:	d801      	bhi.n	800e9b2 <__hexdig_fun+0x1a>
 800e9ae:	3847      	subs	r0, #71	; 0x47
 800e9b0:	e7f7      	b.n	800e9a2 <__hexdig_fun+0xa>
 800e9b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e9b6:	2b05      	cmp	r3, #5
 800e9b8:	d801      	bhi.n	800e9be <__hexdig_fun+0x26>
 800e9ba:	3827      	subs	r0, #39	; 0x27
 800e9bc:	e7f1      	b.n	800e9a2 <__hexdig_fun+0xa>
 800e9be:	2000      	movs	r0, #0
 800e9c0:	4770      	bx	lr
	...

0800e9c4 <__gethex>:
 800e9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c8:	4617      	mov	r7, r2
 800e9ca:	680a      	ldr	r2, [r1, #0]
 800e9cc:	b085      	sub	sp, #20
 800e9ce:	f102 0b02 	add.w	fp, r2, #2
 800e9d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e9d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e9da:	4681      	mov	r9, r0
 800e9dc:	468a      	mov	sl, r1
 800e9de:	9302      	str	r3, [sp, #8]
 800e9e0:	32fe      	adds	r2, #254	; 0xfe
 800e9e2:	eb02 030b 	add.w	r3, r2, fp
 800e9e6:	46d8      	mov	r8, fp
 800e9e8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e9ec:	9301      	str	r3, [sp, #4]
 800e9ee:	2830      	cmp	r0, #48	; 0x30
 800e9f0:	d0f7      	beq.n	800e9e2 <__gethex+0x1e>
 800e9f2:	f7ff ffd1 	bl	800e998 <__hexdig_fun>
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d138      	bne.n	800ea6e <__gethex+0xaa>
 800e9fc:	49a7      	ldr	r1, [pc, #668]	; (800ec9c <__gethex+0x2d8>)
 800e9fe:	2201      	movs	r2, #1
 800ea00:	4640      	mov	r0, r8
 800ea02:	f7ff f811 	bl	800da28 <strncmp>
 800ea06:	4606      	mov	r6, r0
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d169      	bne.n	800eae0 <__gethex+0x11c>
 800ea0c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ea10:	465d      	mov	r5, fp
 800ea12:	f7ff ffc1 	bl	800e998 <__hexdig_fun>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d064      	beq.n	800eae4 <__gethex+0x120>
 800ea1a:	465a      	mov	r2, fp
 800ea1c:	7810      	ldrb	r0, [r2, #0]
 800ea1e:	2830      	cmp	r0, #48	; 0x30
 800ea20:	4690      	mov	r8, r2
 800ea22:	f102 0201 	add.w	r2, r2, #1
 800ea26:	d0f9      	beq.n	800ea1c <__gethex+0x58>
 800ea28:	f7ff ffb6 	bl	800e998 <__hexdig_fun>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	fab0 f480 	clz	r4, r0
 800ea32:	0964      	lsrs	r4, r4, #5
 800ea34:	465e      	mov	r6, fp
 800ea36:	9301      	str	r3, [sp, #4]
 800ea38:	4642      	mov	r2, r8
 800ea3a:	4615      	mov	r5, r2
 800ea3c:	3201      	adds	r2, #1
 800ea3e:	7828      	ldrb	r0, [r5, #0]
 800ea40:	f7ff ffaa 	bl	800e998 <__hexdig_fun>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d1f8      	bne.n	800ea3a <__gethex+0x76>
 800ea48:	4994      	ldr	r1, [pc, #592]	; (800ec9c <__gethex+0x2d8>)
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f7fe ffeb 	bl	800da28 <strncmp>
 800ea52:	b978      	cbnz	r0, 800ea74 <__gethex+0xb0>
 800ea54:	b946      	cbnz	r6, 800ea68 <__gethex+0xa4>
 800ea56:	1c6e      	adds	r6, r5, #1
 800ea58:	4632      	mov	r2, r6
 800ea5a:	4615      	mov	r5, r2
 800ea5c:	3201      	adds	r2, #1
 800ea5e:	7828      	ldrb	r0, [r5, #0]
 800ea60:	f7ff ff9a 	bl	800e998 <__hexdig_fun>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d1f8      	bne.n	800ea5a <__gethex+0x96>
 800ea68:	1b73      	subs	r3, r6, r5
 800ea6a:	009e      	lsls	r6, r3, #2
 800ea6c:	e004      	b.n	800ea78 <__gethex+0xb4>
 800ea6e:	2400      	movs	r4, #0
 800ea70:	4626      	mov	r6, r4
 800ea72:	e7e1      	b.n	800ea38 <__gethex+0x74>
 800ea74:	2e00      	cmp	r6, #0
 800ea76:	d1f7      	bne.n	800ea68 <__gethex+0xa4>
 800ea78:	782b      	ldrb	r3, [r5, #0]
 800ea7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ea7e:	2b50      	cmp	r3, #80	; 0x50
 800ea80:	d13d      	bne.n	800eafe <__gethex+0x13a>
 800ea82:	786b      	ldrb	r3, [r5, #1]
 800ea84:	2b2b      	cmp	r3, #43	; 0x2b
 800ea86:	d02f      	beq.n	800eae8 <__gethex+0x124>
 800ea88:	2b2d      	cmp	r3, #45	; 0x2d
 800ea8a:	d031      	beq.n	800eaf0 <__gethex+0x12c>
 800ea8c:	1c69      	adds	r1, r5, #1
 800ea8e:	f04f 0b00 	mov.w	fp, #0
 800ea92:	7808      	ldrb	r0, [r1, #0]
 800ea94:	f7ff ff80 	bl	800e998 <__hexdig_fun>
 800ea98:	1e42      	subs	r2, r0, #1
 800ea9a:	b2d2      	uxtb	r2, r2
 800ea9c:	2a18      	cmp	r2, #24
 800ea9e:	d82e      	bhi.n	800eafe <__gethex+0x13a>
 800eaa0:	f1a0 0210 	sub.w	r2, r0, #16
 800eaa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eaa8:	f7ff ff76 	bl	800e998 <__hexdig_fun>
 800eaac:	f100 3cff 	add.w	ip, r0, #4294967295
 800eab0:	fa5f fc8c 	uxtb.w	ip, ip
 800eab4:	f1bc 0f18 	cmp.w	ip, #24
 800eab8:	d91d      	bls.n	800eaf6 <__gethex+0x132>
 800eaba:	f1bb 0f00 	cmp.w	fp, #0
 800eabe:	d000      	beq.n	800eac2 <__gethex+0xfe>
 800eac0:	4252      	negs	r2, r2
 800eac2:	4416      	add	r6, r2
 800eac4:	f8ca 1000 	str.w	r1, [sl]
 800eac8:	b1dc      	cbz	r4, 800eb02 <__gethex+0x13e>
 800eaca:	9b01      	ldr	r3, [sp, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	bf14      	ite	ne
 800ead0:	f04f 0800 	movne.w	r8, #0
 800ead4:	f04f 0806 	moveq.w	r8, #6
 800ead8:	4640      	mov	r0, r8
 800eada:	b005      	add	sp, #20
 800eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae0:	4645      	mov	r5, r8
 800eae2:	4626      	mov	r6, r4
 800eae4:	2401      	movs	r4, #1
 800eae6:	e7c7      	b.n	800ea78 <__gethex+0xb4>
 800eae8:	f04f 0b00 	mov.w	fp, #0
 800eaec:	1ca9      	adds	r1, r5, #2
 800eaee:	e7d0      	b.n	800ea92 <__gethex+0xce>
 800eaf0:	f04f 0b01 	mov.w	fp, #1
 800eaf4:	e7fa      	b.n	800eaec <__gethex+0x128>
 800eaf6:	230a      	movs	r3, #10
 800eaf8:	fb03 0002 	mla	r0, r3, r2, r0
 800eafc:	e7d0      	b.n	800eaa0 <__gethex+0xdc>
 800eafe:	4629      	mov	r1, r5
 800eb00:	e7e0      	b.n	800eac4 <__gethex+0x100>
 800eb02:	eba5 0308 	sub.w	r3, r5, r8
 800eb06:	3b01      	subs	r3, #1
 800eb08:	4621      	mov	r1, r4
 800eb0a:	2b07      	cmp	r3, #7
 800eb0c:	dc0a      	bgt.n	800eb24 <__gethex+0x160>
 800eb0e:	4648      	mov	r0, r9
 800eb10:	f000 fb0e 	bl	800f130 <_Balloc>
 800eb14:	4604      	mov	r4, r0
 800eb16:	b940      	cbnz	r0, 800eb2a <__gethex+0x166>
 800eb18:	4b61      	ldr	r3, [pc, #388]	; (800eca0 <__gethex+0x2dc>)
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	21e4      	movs	r1, #228	; 0xe4
 800eb1e:	4861      	ldr	r0, [pc, #388]	; (800eca4 <__gethex+0x2e0>)
 800eb20:	f001 f9f0 	bl	800ff04 <__assert_func>
 800eb24:	3101      	adds	r1, #1
 800eb26:	105b      	asrs	r3, r3, #1
 800eb28:	e7ef      	b.n	800eb0a <__gethex+0x146>
 800eb2a:	f100 0a14 	add.w	sl, r0, #20
 800eb2e:	2300      	movs	r3, #0
 800eb30:	495a      	ldr	r1, [pc, #360]	; (800ec9c <__gethex+0x2d8>)
 800eb32:	f8cd a004 	str.w	sl, [sp, #4]
 800eb36:	469b      	mov	fp, r3
 800eb38:	45a8      	cmp	r8, r5
 800eb3a:	d342      	bcc.n	800ebc2 <__gethex+0x1fe>
 800eb3c:	9801      	ldr	r0, [sp, #4]
 800eb3e:	f840 bb04 	str.w	fp, [r0], #4
 800eb42:	eba0 000a 	sub.w	r0, r0, sl
 800eb46:	1080      	asrs	r0, r0, #2
 800eb48:	6120      	str	r0, [r4, #16]
 800eb4a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800eb4e:	4658      	mov	r0, fp
 800eb50:	f000 fbe0 	bl	800f314 <__hi0bits>
 800eb54:	683d      	ldr	r5, [r7, #0]
 800eb56:	eba8 0000 	sub.w	r0, r8, r0
 800eb5a:	42a8      	cmp	r0, r5
 800eb5c:	dd59      	ble.n	800ec12 <__gethex+0x24e>
 800eb5e:	eba0 0805 	sub.w	r8, r0, r5
 800eb62:	4641      	mov	r1, r8
 800eb64:	4620      	mov	r0, r4
 800eb66:	f000 ff6f 	bl	800fa48 <__any_on>
 800eb6a:	4683      	mov	fp, r0
 800eb6c:	b1b8      	cbz	r0, 800eb9e <__gethex+0x1da>
 800eb6e:	f108 33ff 	add.w	r3, r8, #4294967295
 800eb72:	1159      	asrs	r1, r3, #5
 800eb74:	f003 021f 	and.w	r2, r3, #31
 800eb78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eb7c:	f04f 0b01 	mov.w	fp, #1
 800eb80:	fa0b f202 	lsl.w	r2, fp, r2
 800eb84:	420a      	tst	r2, r1
 800eb86:	d00a      	beq.n	800eb9e <__gethex+0x1da>
 800eb88:	455b      	cmp	r3, fp
 800eb8a:	dd06      	ble.n	800eb9a <__gethex+0x1d6>
 800eb8c:	f1a8 0102 	sub.w	r1, r8, #2
 800eb90:	4620      	mov	r0, r4
 800eb92:	f000 ff59 	bl	800fa48 <__any_on>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d138      	bne.n	800ec0c <__gethex+0x248>
 800eb9a:	f04f 0b02 	mov.w	fp, #2
 800eb9e:	4641      	mov	r1, r8
 800eba0:	4620      	mov	r0, r4
 800eba2:	f7ff fea7 	bl	800e8f4 <rshift>
 800eba6:	4446      	add	r6, r8
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	42b3      	cmp	r3, r6
 800ebac:	da41      	bge.n	800ec32 <__gethex+0x26e>
 800ebae:	4621      	mov	r1, r4
 800ebb0:	4648      	mov	r0, r9
 800ebb2:	f000 fafd 	bl	800f1b0 <_Bfree>
 800ebb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebb8:	2300      	movs	r3, #0
 800ebba:	6013      	str	r3, [r2, #0]
 800ebbc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ebc0:	e78a      	b.n	800ead8 <__gethex+0x114>
 800ebc2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ebc6:	2a2e      	cmp	r2, #46	; 0x2e
 800ebc8:	d014      	beq.n	800ebf4 <__gethex+0x230>
 800ebca:	2b20      	cmp	r3, #32
 800ebcc:	d106      	bne.n	800ebdc <__gethex+0x218>
 800ebce:	9b01      	ldr	r3, [sp, #4]
 800ebd0:	f843 bb04 	str.w	fp, [r3], #4
 800ebd4:	f04f 0b00 	mov.w	fp, #0
 800ebd8:	9301      	str	r3, [sp, #4]
 800ebda:	465b      	mov	r3, fp
 800ebdc:	7828      	ldrb	r0, [r5, #0]
 800ebde:	9303      	str	r3, [sp, #12]
 800ebe0:	f7ff feda 	bl	800e998 <__hexdig_fun>
 800ebe4:	9b03      	ldr	r3, [sp, #12]
 800ebe6:	f000 000f 	and.w	r0, r0, #15
 800ebea:	4098      	lsls	r0, r3
 800ebec:	ea4b 0b00 	orr.w	fp, fp, r0
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	e7a1      	b.n	800eb38 <__gethex+0x174>
 800ebf4:	45a8      	cmp	r8, r5
 800ebf6:	d8e8      	bhi.n	800ebca <__gethex+0x206>
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	9303      	str	r3, [sp, #12]
 800ebfe:	f7fe ff13 	bl	800da28 <strncmp>
 800ec02:	4926      	ldr	r1, [pc, #152]	; (800ec9c <__gethex+0x2d8>)
 800ec04:	9b03      	ldr	r3, [sp, #12]
 800ec06:	2800      	cmp	r0, #0
 800ec08:	d1df      	bne.n	800ebca <__gethex+0x206>
 800ec0a:	e795      	b.n	800eb38 <__gethex+0x174>
 800ec0c:	f04f 0b03 	mov.w	fp, #3
 800ec10:	e7c5      	b.n	800eb9e <__gethex+0x1da>
 800ec12:	da0b      	bge.n	800ec2c <__gethex+0x268>
 800ec14:	eba5 0800 	sub.w	r8, r5, r0
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4642      	mov	r2, r8
 800ec1c:	4648      	mov	r0, r9
 800ec1e:	f000 fce1 	bl	800f5e4 <__lshift>
 800ec22:	eba6 0608 	sub.w	r6, r6, r8
 800ec26:	4604      	mov	r4, r0
 800ec28:	f100 0a14 	add.w	sl, r0, #20
 800ec2c:	f04f 0b00 	mov.w	fp, #0
 800ec30:	e7ba      	b.n	800eba8 <__gethex+0x1e4>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	42b3      	cmp	r3, r6
 800ec36:	dd73      	ble.n	800ed20 <__gethex+0x35c>
 800ec38:	1b9e      	subs	r6, r3, r6
 800ec3a:	42b5      	cmp	r5, r6
 800ec3c:	dc34      	bgt.n	800eca8 <__gethex+0x2e4>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b02      	cmp	r3, #2
 800ec42:	d023      	beq.n	800ec8c <__gethex+0x2c8>
 800ec44:	2b03      	cmp	r3, #3
 800ec46:	d025      	beq.n	800ec94 <__gethex+0x2d0>
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d115      	bne.n	800ec78 <__gethex+0x2b4>
 800ec4c:	42b5      	cmp	r5, r6
 800ec4e:	d113      	bne.n	800ec78 <__gethex+0x2b4>
 800ec50:	2d01      	cmp	r5, #1
 800ec52:	d10b      	bne.n	800ec6c <__gethex+0x2a8>
 800ec54:	9a02      	ldr	r2, [sp, #8]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	6123      	str	r3, [r4, #16]
 800ec5e:	f8ca 3000 	str.w	r3, [sl]
 800ec62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec64:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ec68:	601c      	str	r4, [r3, #0]
 800ec6a:	e735      	b.n	800ead8 <__gethex+0x114>
 800ec6c:	1e69      	subs	r1, r5, #1
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f000 feea 	bl	800fa48 <__any_on>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d1ed      	bne.n	800ec54 <__gethex+0x290>
 800ec78:	4621      	mov	r1, r4
 800ec7a:	4648      	mov	r0, r9
 800ec7c:	f000 fa98 	bl	800f1b0 <_Bfree>
 800ec80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec82:	2300      	movs	r3, #0
 800ec84:	6013      	str	r3, [r2, #0]
 800ec86:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ec8a:	e725      	b.n	800ead8 <__gethex+0x114>
 800ec8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1f2      	bne.n	800ec78 <__gethex+0x2b4>
 800ec92:	e7df      	b.n	800ec54 <__gethex+0x290>
 800ec94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d1dc      	bne.n	800ec54 <__gethex+0x290>
 800ec9a:	e7ed      	b.n	800ec78 <__gethex+0x2b4>
 800ec9c:	08010bbc 	.word	0x08010bbc
 800eca0:	08010dc9 	.word	0x08010dc9
 800eca4:	08010dda 	.word	0x08010dda
 800eca8:	f106 38ff 	add.w	r8, r6, #4294967295
 800ecac:	f1bb 0f00 	cmp.w	fp, #0
 800ecb0:	d133      	bne.n	800ed1a <__gethex+0x356>
 800ecb2:	f1b8 0f00 	cmp.w	r8, #0
 800ecb6:	d004      	beq.n	800ecc2 <__gethex+0x2fe>
 800ecb8:	4641      	mov	r1, r8
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f000 fec4 	bl	800fa48 <__any_on>
 800ecc0:	4683      	mov	fp, r0
 800ecc2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eccc:	f008 081f 	and.w	r8, r8, #31
 800ecd0:	fa03 f308 	lsl.w	r3, r3, r8
 800ecd4:	4213      	tst	r3, r2
 800ecd6:	4631      	mov	r1, r6
 800ecd8:	4620      	mov	r0, r4
 800ecda:	bf18      	it	ne
 800ecdc:	f04b 0b02 	orrne.w	fp, fp, #2
 800ece0:	1bad      	subs	r5, r5, r6
 800ece2:	f7ff fe07 	bl	800e8f4 <rshift>
 800ece6:	687e      	ldr	r6, [r7, #4]
 800ece8:	f04f 0802 	mov.w	r8, #2
 800ecec:	f1bb 0f00 	cmp.w	fp, #0
 800ecf0:	d04a      	beq.n	800ed88 <__gethex+0x3c4>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d016      	beq.n	800ed26 <__gethex+0x362>
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	d018      	beq.n	800ed2e <__gethex+0x36a>
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d109      	bne.n	800ed14 <__gethex+0x350>
 800ed00:	f01b 0f02 	tst.w	fp, #2
 800ed04:	d006      	beq.n	800ed14 <__gethex+0x350>
 800ed06:	f8da 3000 	ldr.w	r3, [sl]
 800ed0a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ed0e:	f01b 0f01 	tst.w	fp, #1
 800ed12:	d10f      	bne.n	800ed34 <__gethex+0x370>
 800ed14:	f048 0810 	orr.w	r8, r8, #16
 800ed18:	e036      	b.n	800ed88 <__gethex+0x3c4>
 800ed1a:	f04f 0b01 	mov.w	fp, #1
 800ed1e:	e7d0      	b.n	800ecc2 <__gethex+0x2fe>
 800ed20:	f04f 0801 	mov.w	r8, #1
 800ed24:	e7e2      	b.n	800ecec <__gethex+0x328>
 800ed26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed28:	f1c3 0301 	rsb	r3, r3, #1
 800ed2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d0ef      	beq.n	800ed14 <__gethex+0x350>
 800ed34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed38:	f104 0214 	add.w	r2, r4, #20
 800ed3c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ed40:	9301      	str	r3, [sp, #4]
 800ed42:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ed46:	2300      	movs	r3, #0
 800ed48:	4694      	mov	ip, r2
 800ed4a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ed4e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ed52:	d01e      	beq.n	800ed92 <__gethex+0x3ce>
 800ed54:	3101      	adds	r1, #1
 800ed56:	f8cc 1000 	str.w	r1, [ip]
 800ed5a:	f1b8 0f02 	cmp.w	r8, #2
 800ed5e:	f104 0214 	add.w	r2, r4, #20
 800ed62:	d13d      	bne.n	800ede0 <__gethex+0x41c>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	3b01      	subs	r3, #1
 800ed68:	42ab      	cmp	r3, r5
 800ed6a:	d10b      	bne.n	800ed84 <__gethex+0x3c0>
 800ed6c:	1169      	asrs	r1, r5, #5
 800ed6e:	2301      	movs	r3, #1
 800ed70:	f005 051f 	and.w	r5, r5, #31
 800ed74:	fa03 f505 	lsl.w	r5, r3, r5
 800ed78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed7c:	421d      	tst	r5, r3
 800ed7e:	bf18      	it	ne
 800ed80:	f04f 0801 	movne.w	r8, #1
 800ed84:	f048 0820 	orr.w	r8, r8, #32
 800ed88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed8a:	601c      	str	r4, [r3, #0]
 800ed8c:	9b02      	ldr	r3, [sp, #8]
 800ed8e:	601e      	str	r6, [r3, #0]
 800ed90:	e6a2      	b.n	800ead8 <__gethex+0x114>
 800ed92:	4290      	cmp	r0, r2
 800ed94:	f842 3c04 	str.w	r3, [r2, #-4]
 800ed98:	d8d6      	bhi.n	800ed48 <__gethex+0x384>
 800ed9a:	68a2      	ldr	r2, [r4, #8]
 800ed9c:	4593      	cmp	fp, r2
 800ed9e:	db17      	blt.n	800edd0 <__gethex+0x40c>
 800eda0:	6861      	ldr	r1, [r4, #4]
 800eda2:	4648      	mov	r0, r9
 800eda4:	3101      	adds	r1, #1
 800eda6:	f000 f9c3 	bl	800f130 <_Balloc>
 800edaa:	4682      	mov	sl, r0
 800edac:	b918      	cbnz	r0, 800edb6 <__gethex+0x3f2>
 800edae:	4b1b      	ldr	r3, [pc, #108]	; (800ee1c <__gethex+0x458>)
 800edb0:	4602      	mov	r2, r0
 800edb2:	2184      	movs	r1, #132	; 0x84
 800edb4:	e6b3      	b.n	800eb1e <__gethex+0x15a>
 800edb6:	6922      	ldr	r2, [r4, #16]
 800edb8:	3202      	adds	r2, #2
 800edba:	f104 010c 	add.w	r1, r4, #12
 800edbe:	0092      	lsls	r2, r2, #2
 800edc0:	300c      	adds	r0, #12
 800edc2:	f7fe feba 	bl	800db3a <memcpy>
 800edc6:	4621      	mov	r1, r4
 800edc8:	4648      	mov	r0, r9
 800edca:	f000 f9f1 	bl	800f1b0 <_Bfree>
 800edce:	4654      	mov	r4, sl
 800edd0:	6922      	ldr	r2, [r4, #16]
 800edd2:	1c51      	adds	r1, r2, #1
 800edd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800edd8:	6121      	str	r1, [r4, #16]
 800edda:	2101      	movs	r1, #1
 800eddc:	6151      	str	r1, [r2, #20]
 800edde:	e7bc      	b.n	800ed5a <__gethex+0x396>
 800ede0:	6921      	ldr	r1, [r4, #16]
 800ede2:	4559      	cmp	r1, fp
 800ede4:	dd0b      	ble.n	800edfe <__gethex+0x43a>
 800ede6:	2101      	movs	r1, #1
 800ede8:	4620      	mov	r0, r4
 800edea:	f7ff fd83 	bl	800e8f4 <rshift>
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	3601      	adds	r6, #1
 800edf2:	42b3      	cmp	r3, r6
 800edf4:	f6ff aedb 	blt.w	800ebae <__gethex+0x1ea>
 800edf8:	f04f 0801 	mov.w	r8, #1
 800edfc:	e7c2      	b.n	800ed84 <__gethex+0x3c0>
 800edfe:	f015 051f 	ands.w	r5, r5, #31
 800ee02:	d0f9      	beq.n	800edf8 <__gethex+0x434>
 800ee04:	9b01      	ldr	r3, [sp, #4]
 800ee06:	441a      	add	r2, r3
 800ee08:	f1c5 0520 	rsb	r5, r5, #32
 800ee0c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ee10:	f000 fa80 	bl	800f314 <__hi0bits>
 800ee14:	42a8      	cmp	r0, r5
 800ee16:	dbe6      	blt.n	800ede6 <__gethex+0x422>
 800ee18:	e7ee      	b.n	800edf8 <__gethex+0x434>
 800ee1a:	bf00      	nop
 800ee1c:	08010dc9 	.word	0x08010dc9

0800ee20 <L_shift>:
 800ee20:	f1c2 0208 	rsb	r2, r2, #8
 800ee24:	0092      	lsls	r2, r2, #2
 800ee26:	b570      	push	{r4, r5, r6, lr}
 800ee28:	f1c2 0620 	rsb	r6, r2, #32
 800ee2c:	6843      	ldr	r3, [r0, #4]
 800ee2e:	6804      	ldr	r4, [r0, #0]
 800ee30:	fa03 f506 	lsl.w	r5, r3, r6
 800ee34:	432c      	orrs	r4, r5
 800ee36:	40d3      	lsrs	r3, r2
 800ee38:	6004      	str	r4, [r0, #0]
 800ee3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee3e:	4288      	cmp	r0, r1
 800ee40:	d3f4      	bcc.n	800ee2c <L_shift+0xc>
 800ee42:	bd70      	pop	{r4, r5, r6, pc}

0800ee44 <__match>:
 800ee44:	b530      	push	{r4, r5, lr}
 800ee46:	6803      	ldr	r3, [r0, #0]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee4e:	b914      	cbnz	r4, 800ee56 <__match+0x12>
 800ee50:	6003      	str	r3, [r0, #0]
 800ee52:	2001      	movs	r0, #1
 800ee54:	bd30      	pop	{r4, r5, pc}
 800ee56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ee5e:	2d19      	cmp	r5, #25
 800ee60:	bf98      	it	ls
 800ee62:	3220      	addls	r2, #32
 800ee64:	42a2      	cmp	r2, r4
 800ee66:	d0f0      	beq.n	800ee4a <__match+0x6>
 800ee68:	2000      	movs	r0, #0
 800ee6a:	e7f3      	b.n	800ee54 <__match+0x10>

0800ee6c <__hexnan>:
 800ee6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee70:	680b      	ldr	r3, [r1, #0]
 800ee72:	6801      	ldr	r1, [r0, #0]
 800ee74:	115e      	asrs	r6, r3, #5
 800ee76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee7a:	f013 031f 	ands.w	r3, r3, #31
 800ee7e:	b087      	sub	sp, #28
 800ee80:	bf18      	it	ne
 800ee82:	3604      	addne	r6, #4
 800ee84:	2500      	movs	r5, #0
 800ee86:	1f37      	subs	r7, r6, #4
 800ee88:	4682      	mov	sl, r0
 800ee8a:	4690      	mov	r8, r2
 800ee8c:	9301      	str	r3, [sp, #4]
 800ee8e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee92:	46b9      	mov	r9, r7
 800ee94:	463c      	mov	r4, r7
 800ee96:	9502      	str	r5, [sp, #8]
 800ee98:	46ab      	mov	fp, r5
 800ee9a:	784a      	ldrb	r2, [r1, #1]
 800ee9c:	1c4b      	adds	r3, r1, #1
 800ee9e:	9303      	str	r3, [sp, #12]
 800eea0:	b342      	cbz	r2, 800eef4 <__hexnan+0x88>
 800eea2:	4610      	mov	r0, r2
 800eea4:	9105      	str	r1, [sp, #20]
 800eea6:	9204      	str	r2, [sp, #16]
 800eea8:	f7ff fd76 	bl	800e998 <__hexdig_fun>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d14f      	bne.n	800ef50 <__hexnan+0xe4>
 800eeb0:	9a04      	ldr	r2, [sp, #16]
 800eeb2:	9905      	ldr	r1, [sp, #20]
 800eeb4:	2a20      	cmp	r2, #32
 800eeb6:	d818      	bhi.n	800eeea <__hexnan+0x7e>
 800eeb8:	9b02      	ldr	r3, [sp, #8]
 800eeba:	459b      	cmp	fp, r3
 800eebc:	dd13      	ble.n	800eee6 <__hexnan+0x7a>
 800eebe:	454c      	cmp	r4, r9
 800eec0:	d206      	bcs.n	800eed0 <__hexnan+0x64>
 800eec2:	2d07      	cmp	r5, #7
 800eec4:	dc04      	bgt.n	800eed0 <__hexnan+0x64>
 800eec6:	462a      	mov	r2, r5
 800eec8:	4649      	mov	r1, r9
 800eeca:	4620      	mov	r0, r4
 800eecc:	f7ff ffa8 	bl	800ee20 <L_shift>
 800eed0:	4544      	cmp	r4, r8
 800eed2:	d950      	bls.n	800ef76 <__hexnan+0x10a>
 800eed4:	2300      	movs	r3, #0
 800eed6:	f1a4 0904 	sub.w	r9, r4, #4
 800eeda:	f844 3c04 	str.w	r3, [r4, #-4]
 800eede:	f8cd b008 	str.w	fp, [sp, #8]
 800eee2:	464c      	mov	r4, r9
 800eee4:	461d      	mov	r5, r3
 800eee6:	9903      	ldr	r1, [sp, #12]
 800eee8:	e7d7      	b.n	800ee9a <__hexnan+0x2e>
 800eeea:	2a29      	cmp	r2, #41	; 0x29
 800eeec:	d155      	bne.n	800ef9a <__hexnan+0x12e>
 800eeee:	3102      	adds	r1, #2
 800eef0:	f8ca 1000 	str.w	r1, [sl]
 800eef4:	f1bb 0f00 	cmp.w	fp, #0
 800eef8:	d04f      	beq.n	800ef9a <__hexnan+0x12e>
 800eefa:	454c      	cmp	r4, r9
 800eefc:	d206      	bcs.n	800ef0c <__hexnan+0xa0>
 800eefe:	2d07      	cmp	r5, #7
 800ef00:	dc04      	bgt.n	800ef0c <__hexnan+0xa0>
 800ef02:	462a      	mov	r2, r5
 800ef04:	4649      	mov	r1, r9
 800ef06:	4620      	mov	r0, r4
 800ef08:	f7ff ff8a 	bl	800ee20 <L_shift>
 800ef0c:	4544      	cmp	r4, r8
 800ef0e:	d934      	bls.n	800ef7a <__hexnan+0x10e>
 800ef10:	f1a8 0204 	sub.w	r2, r8, #4
 800ef14:	4623      	mov	r3, r4
 800ef16:	f853 1b04 	ldr.w	r1, [r3], #4
 800ef1a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ef1e:	429f      	cmp	r7, r3
 800ef20:	d2f9      	bcs.n	800ef16 <__hexnan+0xaa>
 800ef22:	1b3b      	subs	r3, r7, r4
 800ef24:	f023 0303 	bic.w	r3, r3, #3
 800ef28:	3304      	adds	r3, #4
 800ef2a:	3e03      	subs	r6, #3
 800ef2c:	3401      	adds	r4, #1
 800ef2e:	42a6      	cmp	r6, r4
 800ef30:	bf38      	it	cc
 800ef32:	2304      	movcc	r3, #4
 800ef34:	4443      	add	r3, r8
 800ef36:	2200      	movs	r2, #0
 800ef38:	f843 2b04 	str.w	r2, [r3], #4
 800ef3c:	429f      	cmp	r7, r3
 800ef3e:	d2fb      	bcs.n	800ef38 <__hexnan+0xcc>
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	b91b      	cbnz	r3, 800ef4c <__hexnan+0xe0>
 800ef44:	4547      	cmp	r7, r8
 800ef46:	d126      	bne.n	800ef96 <__hexnan+0x12a>
 800ef48:	2301      	movs	r3, #1
 800ef4a:	603b      	str	r3, [r7, #0]
 800ef4c:	2005      	movs	r0, #5
 800ef4e:	e025      	b.n	800ef9c <__hexnan+0x130>
 800ef50:	3501      	adds	r5, #1
 800ef52:	2d08      	cmp	r5, #8
 800ef54:	f10b 0b01 	add.w	fp, fp, #1
 800ef58:	dd06      	ble.n	800ef68 <__hexnan+0xfc>
 800ef5a:	4544      	cmp	r4, r8
 800ef5c:	d9c3      	bls.n	800eee6 <__hexnan+0x7a>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef64:	2501      	movs	r5, #1
 800ef66:	3c04      	subs	r4, #4
 800ef68:	6822      	ldr	r2, [r4, #0]
 800ef6a:	f000 000f 	and.w	r0, r0, #15
 800ef6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef72:	6020      	str	r0, [r4, #0]
 800ef74:	e7b7      	b.n	800eee6 <__hexnan+0x7a>
 800ef76:	2508      	movs	r5, #8
 800ef78:	e7b5      	b.n	800eee6 <__hexnan+0x7a>
 800ef7a:	9b01      	ldr	r3, [sp, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d0df      	beq.n	800ef40 <__hexnan+0xd4>
 800ef80:	f1c3 0320 	rsb	r3, r3, #32
 800ef84:	f04f 32ff 	mov.w	r2, #4294967295
 800ef88:	40da      	lsrs	r2, r3
 800ef8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef8e:	4013      	ands	r3, r2
 800ef90:	f846 3c04 	str.w	r3, [r6, #-4]
 800ef94:	e7d4      	b.n	800ef40 <__hexnan+0xd4>
 800ef96:	3f04      	subs	r7, #4
 800ef98:	e7d2      	b.n	800ef40 <__hexnan+0xd4>
 800ef9a:	2004      	movs	r0, #4
 800ef9c:	b007      	add	sp, #28
 800ef9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800efa4 <malloc>:
 800efa4:	4b02      	ldr	r3, [pc, #8]	; (800efb0 <malloc+0xc>)
 800efa6:	4601      	mov	r1, r0
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	f000 b823 	b.w	800eff4 <_malloc_r>
 800efae:	bf00      	nop
 800efb0:	2000023c 	.word	0x2000023c

0800efb4 <sbrk_aligned>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	4e0e      	ldr	r6, [pc, #56]	; (800eff0 <sbrk_aligned+0x3c>)
 800efb8:	460c      	mov	r4, r1
 800efba:	6831      	ldr	r1, [r6, #0]
 800efbc:	4605      	mov	r5, r0
 800efbe:	b911      	cbnz	r1, 800efc6 <sbrk_aligned+0x12>
 800efc0:	f000 ff90 	bl	800fee4 <_sbrk_r>
 800efc4:	6030      	str	r0, [r6, #0]
 800efc6:	4621      	mov	r1, r4
 800efc8:	4628      	mov	r0, r5
 800efca:	f000 ff8b 	bl	800fee4 <_sbrk_r>
 800efce:	1c43      	adds	r3, r0, #1
 800efd0:	d00a      	beq.n	800efe8 <sbrk_aligned+0x34>
 800efd2:	1cc4      	adds	r4, r0, #3
 800efd4:	f024 0403 	bic.w	r4, r4, #3
 800efd8:	42a0      	cmp	r0, r4
 800efda:	d007      	beq.n	800efec <sbrk_aligned+0x38>
 800efdc:	1a21      	subs	r1, r4, r0
 800efde:	4628      	mov	r0, r5
 800efe0:	f000 ff80 	bl	800fee4 <_sbrk_r>
 800efe4:	3001      	adds	r0, #1
 800efe6:	d101      	bne.n	800efec <sbrk_aligned+0x38>
 800efe8:	f04f 34ff 	mov.w	r4, #4294967295
 800efec:	4620      	mov	r0, r4
 800efee:	bd70      	pop	{r4, r5, r6, pc}
 800eff0:	20002e20 	.word	0x20002e20

0800eff4 <_malloc_r>:
 800eff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eff8:	1ccd      	adds	r5, r1, #3
 800effa:	f025 0503 	bic.w	r5, r5, #3
 800effe:	3508      	adds	r5, #8
 800f000:	2d0c      	cmp	r5, #12
 800f002:	bf38      	it	cc
 800f004:	250c      	movcc	r5, #12
 800f006:	2d00      	cmp	r5, #0
 800f008:	4607      	mov	r7, r0
 800f00a:	db01      	blt.n	800f010 <_malloc_r+0x1c>
 800f00c:	42a9      	cmp	r1, r5
 800f00e:	d905      	bls.n	800f01c <_malloc_r+0x28>
 800f010:	230c      	movs	r3, #12
 800f012:	603b      	str	r3, [r7, #0]
 800f014:	2600      	movs	r6, #0
 800f016:	4630      	mov	r0, r6
 800f018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f01c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f0f0 <_malloc_r+0xfc>
 800f020:	f000 f87a 	bl	800f118 <__malloc_lock>
 800f024:	f8d8 3000 	ldr.w	r3, [r8]
 800f028:	461c      	mov	r4, r3
 800f02a:	bb5c      	cbnz	r4, 800f084 <_malloc_r+0x90>
 800f02c:	4629      	mov	r1, r5
 800f02e:	4638      	mov	r0, r7
 800f030:	f7ff ffc0 	bl	800efb4 <sbrk_aligned>
 800f034:	1c43      	adds	r3, r0, #1
 800f036:	4604      	mov	r4, r0
 800f038:	d155      	bne.n	800f0e6 <_malloc_r+0xf2>
 800f03a:	f8d8 4000 	ldr.w	r4, [r8]
 800f03e:	4626      	mov	r6, r4
 800f040:	2e00      	cmp	r6, #0
 800f042:	d145      	bne.n	800f0d0 <_malloc_r+0xdc>
 800f044:	2c00      	cmp	r4, #0
 800f046:	d048      	beq.n	800f0da <_malloc_r+0xe6>
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	4631      	mov	r1, r6
 800f04c:	4638      	mov	r0, r7
 800f04e:	eb04 0903 	add.w	r9, r4, r3
 800f052:	f000 ff47 	bl	800fee4 <_sbrk_r>
 800f056:	4581      	cmp	r9, r0
 800f058:	d13f      	bne.n	800f0da <_malloc_r+0xe6>
 800f05a:	6821      	ldr	r1, [r4, #0]
 800f05c:	1a6d      	subs	r5, r5, r1
 800f05e:	4629      	mov	r1, r5
 800f060:	4638      	mov	r0, r7
 800f062:	f7ff ffa7 	bl	800efb4 <sbrk_aligned>
 800f066:	3001      	adds	r0, #1
 800f068:	d037      	beq.n	800f0da <_malloc_r+0xe6>
 800f06a:	6823      	ldr	r3, [r4, #0]
 800f06c:	442b      	add	r3, r5
 800f06e:	6023      	str	r3, [r4, #0]
 800f070:	f8d8 3000 	ldr.w	r3, [r8]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d038      	beq.n	800f0ea <_malloc_r+0xf6>
 800f078:	685a      	ldr	r2, [r3, #4]
 800f07a:	42a2      	cmp	r2, r4
 800f07c:	d12b      	bne.n	800f0d6 <_malloc_r+0xe2>
 800f07e:	2200      	movs	r2, #0
 800f080:	605a      	str	r2, [r3, #4]
 800f082:	e00f      	b.n	800f0a4 <_malloc_r+0xb0>
 800f084:	6822      	ldr	r2, [r4, #0]
 800f086:	1b52      	subs	r2, r2, r5
 800f088:	d41f      	bmi.n	800f0ca <_malloc_r+0xd6>
 800f08a:	2a0b      	cmp	r2, #11
 800f08c:	d917      	bls.n	800f0be <_malloc_r+0xca>
 800f08e:	1961      	adds	r1, r4, r5
 800f090:	42a3      	cmp	r3, r4
 800f092:	6025      	str	r5, [r4, #0]
 800f094:	bf18      	it	ne
 800f096:	6059      	strne	r1, [r3, #4]
 800f098:	6863      	ldr	r3, [r4, #4]
 800f09a:	bf08      	it	eq
 800f09c:	f8c8 1000 	streq.w	r1, [r8]
 800f0a0:	5162      	str	r2, [r4, r5]
 800f0a2:	604b      	str	r3, [r1, #4]
 800f0a4:	4638      	mov	r0, r7
 800f0a6:	f104 060b 	add.w	r6, r4, #11
 800f0aa:	f000 f83b 	bl	800f124 <__malloc_unlock>
 800f0ae:	f026 0607 	bic.w	r6, r6, #7
 800f0b2:	1d23      	adds	r3, r4, #4
 800f0b4:	1af2      	subs	r2, r6, r3
 800f0b6:	d0ae      	beq.n	800f016 <_malloc_r+0x22>
 800f0b8:	1b9b      	subs	r3, r3, r6
 800f0ba:	50a3      	str	r3, [r4, r2]
 800f0bc:	e7ab      	b.n	800f016 <_malloc_r+0x22>
 800f0be:	42a3      	cmp	r3, r4
 800f0c0:	6862      	ldr	r2, [r4, #4]
 800f0c2:	d1dd      	bne.n	800f080 <_malloc_r+0x8c>
 800f0c4:	f8c8 2000 	str.w	r2, [r8]
 800f0c8:	e7ec      	b.n	800f0a4 <_malloc_r+0xb0>
 800f0ca:	4623      	mov	r3, r4
 800f0cc:	6864      	ldr	r4, [r4, #4]
 800f0ce:	e7ac      	b.n	800f02a <_malloc_r+0x36>
 800f0d0:	4634      	mov	r4, r6
 800f0d2:	6876      	ldr	r6, [r6, #4]
 800f0d4:	e7b4      	b.n	800f040 <_malloc_r+0x4c>
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	e7cc      	b.n	800f074 <_malloc_r+0x80>
 800f0da:	230c      	movs	r3, #12
 800f0dc:	603b      	str	r3, [r7, #0]
 800f0de:	4638      	mov	r0, r7
 800f0e0:	f000 f820 	bl	800f124 <__malloc_unlock>
 800f0e4:	e797      	b.n	800f016 <_malloc_r+0x22>
 800f0e6:	6025      	str	r5, [r4, #0]
 800f0e8:	e7dc      	b.n	800f0a4 <_malloc_r+0xb0>
 800f0ea:	605b      	str	r3, [r3, #4]
 800f0ec:	deff      	udf	#255	; 0xff
 800f0ee:	bf00      	nop
 800f0f0:	20002e1c 	.word	0x20002e1c

0800f0f4 <__ascii_mbtowc>:
 800f0f4:	b082      	sub	sp, #8
 800f0f6:	b901      	cbnz	r1, 800f0fa <__ascii_mbtowc+0x6>
 800f0f8:	a901      	add	r1, sp, #4
 800f0fa:	b142      	cbz	r2, 800f10e <__ascii_mbtowc+0x1a>
 800f0fc:	b14b      	cbz	r3, 800f112 <__ascii_mbtowc+0x1e>
 800f0fe:	7813      	ldrb	r3, [r2, #0]
 800f100:	600b      	str	r3, [r1, #0]
 800f102:	7812      	ldrb	r2, [r2, #0]
 800f104:	1e10      	subs	r0, r2, #0
 800f106:	bf18      	it	ne
 800f108:	2001      	movne	r0, #1
 800f10a:	b002      	add	sp, #8
 800f10c:	4770      	bx	lr
 800f10e:	4610      	mov	r0, r2
 800f110:	e7fb      	b.n	800f10a <__ascii_mbtowc+0x16>
 800f112:	f06f 0001 	mvn.w	r0, #1
 800f116:	e7f8      	b.n	800f10a <__ascii_mbtowc+0x16>

0800f118 <__malloc_lock>:
 800f118:	4801      	ldr	r0, [pc, #4]	; (800f120 <__malloc_lock+0x8>)
 800f11a:	f7fe bd0c 	b.w	800db36 <__retarget_lock_acquire_recursive>
 800f11e:	bf00      	nop
 800f120:	20002e18 	.word	0x20002e18

0800f124 <__malloc_unlock>:
 800f124:	4801      	ldr	r0, [pc, #4]	; (800f12c <__malloc_unlock+0x8>)
 800f126:	f7fe bd07 	b.w	800db38 <__retarget_lock_release_recursive>
 800f12a:	bf00      	nop
 800f12c:	20002e18 	.word	0x20002e18

0800f130 <_Balloc>:
 800f130:	b570      	push	{r4, r5, r6, lr}
 800f132:	69c6      	ldr	r6, [r0, #28]
 800f134:	4604      	mov	r4, r0
 800f136:	460d      	mov	r5, r1
 800f138:	b976      	cbnz	r6, 800f158 <_Balloc+0x28>
 800f13a:	2010      	movs	r0, #16
 800f13c:	f7ff ff32 	bl	800efa4 <malloc>
 800f140:	4602      	mov	r2, r0
 800f142:	61e0      	str	r0, [r4, #28]
 800f144:	b920      	cbnz	r0, 800f150 <_Balloc+0x20>
 800f146:	4b18      	ldr	r3, [pc, #96]	; (800f1a8 <_Balloc+0x78>)
 800f148:	4818      	ldr	r0, [pc, #96]	; (800f1ac <_Balloc+0x7c>)
 800f14a:	216b      	movs	r1, #107	; 0x6b
 800f14c:	f000 feda 	bl	800ff04 <__assert_func>
 800f150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f154:	6006      	str	r6, [r0, #0]
 800f156:	60c6      	str	r6, [r0, #12]
 800f158:	69e6      	ldr	r6, [r4, #28]
 800f15a:	68f3      	ldr	r3, [r6, #12]
 800f15c:	b183      	cbz	r3, 800f180 <_Balloc+0x50>
 800f15e:	69e3      	ldr	r3, [r4, #28]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f166:	b9b8      	cbnz	r0, 800f198 <_Balloc+0x68>
 800f168:	2101      	movs	r1, #1
 800f16a:	fa01 f605 	lsl.w	r6, r1, r5
 800f16e:	1d72      	adds	r2, r6, #5
 800f170:	0092      	lsls	r2, r2, #2
 800f172:	4620      	mov	r0, r4
 800f174:	f000 fee4 	bl	800ff40 <_calloc_r>
 800f178:	b160      	cbz	r0, 800f194 <_Balloc+0x64>
 800f17a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f17e:	e00e      	b.n	800f19e <_Balloc+0x6e>
 800f180:	2221      	movs	r2, #33	; 0x21
 800f182:	2104      	movs	r1, #4
 800f184:	4620      	mov	r0, r4
 800f186:	f000 fedb 	bl	800ff40 <_calloc_r>
 800f18a:	69e3      	ldr	r3, [r4, #28]
 800f18c:	60f0      	str	r0, [r6, #12]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1e4      	bne.n	800f15e <_Balloc+0x2e>
 800f194:	2000      	movs	r0, #0
 800f196:	bd70      	pop	{r4, r5, r6, pc}
 800f198:	6802      	ldr	r2, [r0, #0]
 800f19a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f19e:	2300      	movs	r3, #0
 800f1a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1a4:	e7f7      	b.n	800f196 <_Balloc+0x66>
 800f1a6:	bf00      	nop
 800f1a8:	08010d5a 	.word	0x08010d5a
 800f1ac:	08010e3a 	.word	0x08010e3a

0800f1b0 <_Bfree>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	69c6      	ldr	r6, [r0, #28]
 800f1b4:	4605      	mov	r5, r0
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	b976      	cbnz	r6, 800f1d8 <_Bfree+0x28>
 800f1ba:	2010      	movs	r0, #16
 800f1bc:	f7ff fef2 	bl	800efa4 <malloc>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	61e8      	str	r0, [r5, #28]
 800f1c4:	b920      	cbnz	r0, 800f1d0 <_Bfree+0x20>
 800f1c6:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <_Bfree+0x3c>)
 800f1c8:	4809      	ldr	r0, [pc, #36]	; (800f1f0 <_Bfree+0x40>)
 800f1ca:	218f      	movs	r1, #143	; 0x8f
 800f1cc:	f000 fe9a 	bl	800ff04 <__assert_func>
 800f1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1d4:	6006      	str	r6, [r0, #0]
 800f1d6:	60c6      	str	r6, [r0, #12]
 800f1d8:	b13c      	cbz	r4, 800f1ea <_Bfree+0x3a>
 800f1da:	69eb      	ldr	r3, [r5, #28]
 800f1dc:	6862      	ldr	r2, [r4, #4]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f1e4:	6021      	str	r1, [r4, #0]
 800f1e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f1ea:	bd70      	pop	{r4, r5, r6, pc}
 800f1ec:	08010d5a 	.word	0x08010d5a
 800f1f0:	08010e3a 	.word	0x08010e3a

0800f1f4 <__multadd>:
 800f1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f8:	690d      	ldr	r5, [r1, #16]
 800f1fa:	4607      	mov	r7, r0
 800f1fc:	460c      	mov	r4, r1
 800f1fe:	461e      	mov	r6, r3
 800f200:	f101 0c14 	add.w	ip, r1, #20
 800f204:	2000      	movs	r0, #0
 800f206:	f8dc 3000 	ldr.w	r3, [ip]
 800f20a:	b299      	uxth	r1, r3
 800f20c:	fb02 6101 	mla	r1, r2, r1, r6
 800f210:	0c1e      	lsrs	r6, r3, #16
 800f212:	0c0b      	lsrs	r3, r1, #16
 800f214:	fb02 3306 	mla	r3, r2, r6, r3
 800f218:	b289      	uxth	r1, r1
 800f21a:	3001      	adds	r0, #1
 800f21c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f220:	4285      	cmp	r5, r0
 800f222:	f84c 1b04 	str.w	r1, [ip], #4
 800f226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f22a:	dcec      	bgt.n	800f206 <__multadd+0x12>
 800f22c:	b30e      	cbz	r6, 800f272 <__multadd+0x7e>
 800f22e:	68a3      	ldr	r3, [r4, #8]
 800f230:	42ab      	cmp	r3, r5
 800f232:	dc19      	bgt.n	800f268 <__multadd+0x74>
 800f234:	6861      	ldr	r1, [r4, #4]
 800f236:	4638      	mov	r0, r7
 800f238:	3101      	adds	r1, #1
 800f23a:	f7ff ff79 	bl	800f130 <_Balloc>
 800f23e:	4680      	mov	r8, r0
 800f240:	b928      	cbnz	r0, 800f24e <__multadd+0x5a>
 800f242:	4602      	mov	r2, r0
 800f244:	4b0c      	ldr	r3, [pc, #48]	; (800f278 <__multadd+0x84>)
 800f246:	480d      	ldr	r0, [pc, #52]	; (800f27c <__multadd+0x88>)
 800f248:	21ba      	movs	r1, #186	; 0xba
 800f24a:	f000 fe5b 	bl	800ff04 <__assert_func>
 800f24e:	6922      	ldr	r2, [r4, #16]
 800f250:	3202      	adds	r2, #2
 800f252:	f104 010c 	add.w	r1, r4, #12
 800f256:	0092      	lsls	r2, r2, #2
 800f258:	300c      	adds	r0, #12
 800f25a:	f7fe fc6e 	bl	800db3a <memcpy>
 800f25e:	4621      	mov	r1, r4
 800f260:	4638      	mov	r0, r7
 800f262:	f7ff ffa5 	bl	800f1b0 <_Bfree>
 800f266:	4644      	mov	r4, r8
 800f268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f26c:	3501      	adds	r5, #1
 800f26e:	615e      	str	r6, [r3, #20]
 800f270:	6125      	str	r5, [r4, #16]
 800f272:	4620      	mov	r0, r4
 800f274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f278:	08010dc9 	.word	0x08010dc9
 800f27c:	08010e3a 	.word	0x08010e3a

0800f280 <__s2b>:
 800f280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f284:	460c      	mov	r4, r1
 800f286:	4615      	mov	r5, r2
 800f288:	461f      	mov	r7, r3
 800f28a:	2209      	movs	r2, #9
 800f28c:	3308      	adds	r3, #8
 800f28e:	4606      	mov	r6, r0
 800f290:	fb93 f3f2 	sdiv	r3, r3, r2
 800f294:	2100      	movs	r1, #0
 800f296:	2201      	movs	r2, #1
 800f298:	429a      	cmp	r2, r3
 800f29a:	db09      	blt.n	800f2b0 <__s2b+0x30>
 800f29c:	4630      	mov	r0, r6
 800f29e:	f7ff ff47 	bl	800f130 <_Balloc>
 800f2a2:	b940      	cbnz	r0, 800f2b6 <__s2b+0x36>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	4b19      	ldr	r3, [pc, #100]	; (800f30c <__s2b+0x8c>)
 800f2a8:	4819      	ldr	r0, [pc, #100]	; (800f310 <__s2b+0x90>)
 800f2aa:	21d3      	movs	r1, #211	; 0xd3
 800f2ac:	f000 fe2a 	bl	800ff04 <__assert_func>
 800f2b0:	0052      	lsls	r2, r2, #1
 800f2b2:	3101      	adds	r1, #1
 800f2b4:	e7f0      	b.n	800f298 <__s2b+0x18>
 800f2b6:	9b08      	ldr	r3, [sp, #32]
 800f2b8:	6143      	str	r3, [r0, #20]
 800f2ba:	2d09      	cmp	r5, #9
 800f2bc:	f04f 0301 	mov.w	r3, #1
 800f2c0:	6103      	str	r3, [r0, #16]
 800f2c2:	dd16      	ble.n	800f2f2 <__s2b+0x72>
 800f2c4:	f104 0909 	add.w	r9, r4, #9
 800f2c8:	46c8      	mov	r8, r9
 800f2ca:	442c      	add	r4, r5
 800f2cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f2d0:	4601      	mov	r1, r0
 800f2d2:	3b30      	subs	r3, #48	; 0x30
 800f2d4:	220a      	movs	r2, #10
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f7ff ff8c 	bl	800f1f4 <__multadd>
 800f2dc:	45a0      	cmp	r8, r4
 800f2de:	d1f5      	bne.n	800f2cc <__s2b+0x4c>
 800f2e0:	f1a5 0408 	sub.w	r4, r5, #8
 800f2e4:	444c      	add	r4, r9
 800f2e6:	1b2d      	subs	r5, r5, r4
 800f2e8:	1963      	adds	r3, r4, r5
 800f2ea:	42bb      	cmp	r3, r7
 800f2ec:	db04      	blt.n	800f2f8 <__s2b+0x78>
 800f2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2f2:	340a      	adds	r4, #10
 800f2f4:	2509      	movs	r5, #9
 800f2f6:	e7f6      	b.n	800f2e6 <__s2b+0x66>
 800f2f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f2fc:	4601      	mov	r1, r0
 800f2fe:	3b30      	subs	r3, #48	; 0x30
 800f300:	220a      	movs	r2, #10
 800f302:	4630      	mov	r0, r6
 800f304:	f7ff ff76 	bl	800f1f4 <__multadd>
 800f308:	e7ee      	b.n	800f2e8 <__s2b+0x68>
 800f30a:	bf00      	nop
 800f30c:	08010dc9 	.word	0x08010dc9
 800f310:	08010e3a 	.word	0x08010e3a

0800f314 <__hi0bits>:
 800f314:	0c03      	lsrs	r3, r0, #16
 800f316:	041b      	lsls	r3, r3, #16
 800f318:	b9d3      	cbnz	r3, 800f350 <__hi0bits+0x3c>
 800f31a:	0400      	lsls	r0, r0, #16
 800f31c:	2310      	movs	r3, #16
 800f31e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f322:	bf04      	itt	eq
 800f324:	0200      	lsleq	r0, r0, #8
 800f326:	3308      	addeq	r3, #8
 800f328:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f32c:	bf04      	itt	eq
 800f32e:	0100      	lsleq	r0, r0, #4
 800f330:	3304      	addeq	r3, #4
 800f332:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f336:	bf04      	itt	eq
 800f338:	0080      	lsleq	r0, r0, #2
 800f33a:	3302      	addeq	r3, #2
 800f33c:	2800      	cmp	r0, #0
 800f33e:	db05      	blt.n	800f34c <__hi0bits+0x38>
 800f340:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f344:	f103 0301 	add.w	r3, r3, #1
 800f348:	bf08      	it	eq
 800f34a:	2320      	moveq	r3, #32
 800f34c:	4618      	mov	r0, r3
 800f34e:	4770      	bx	lr
 800f350:	2300      	movs	r3, #0
 800f352:	e7e4      	b.n	800f31e <__hi0bits+0xa>

0800f354 <__lo0bits>:
 800f354:	6803      	ldr	r3, [r0, #0]
 800f356:	f013 0207 	ands.w	r2, r3, #7
 800f35a:	d00c      	beq.n	800f376 <__lo0bits+0x22>
 800f35c:	07d9      	lsls	r1, r3, #31
 800f35e:	d422      	bmi.n	800f3a6 <__lo0bits+0x52>
 800f360:	079a      	lsls	r2, r3, #30
 800f362:	bf49      	itett	mi
 800f364:	085b      	lsrmi	r3, r3, #1
 800f366:	089b      	lsrpl	r3, r3, #2
 800f368:	6003      	strmi	r3, [r0, #0]
 800f36a:	2201      	movmi	r2, #1
 800f36c:	bf5c      	itt	pl
 800f36e:	6003      	strpl	r3, [r0, #0]
 800f370:	2202      	movpl	r2, #2
 800f372:	4610      	mov	r0, r2
 800f374:	4770      	bx	lr
 800f376:	b299      	uxth	r1, r3
 800f378:	b909      	cbnz	r1, 800f37e <__lo0bits+0x2a>
 800f37a:	0c1b      	lsrs	r3, r3, #16
 800f37c:	2210      	movs	r2, #16
 800f37e:	b2d9      	uxtb	r1, r3
 800f380:	b909      	cbnz	r1, 800f386 <__lo0bits+0x32>
 800f382:	3208      	adds	r2, #8
 800f384:	0a1b      	lsrs	r3, r3, #8
 800f386:	0719      	lsls	r1, r3, #28
 800f388:	bf04      	itt	eq
 800f38a:	091b      	lsreq	r3, r3, #4
 800f38c:	3204      	addeq	r2, #4
 800f38e:	0799      	lsls	r1, r3, #30
 800f390:	bf04      	itt	eq
 800f392:	089b      	lsreq	r3, r3, #2
 800f394:	3202      	addeq	r2, #2
 800f396:	07d9      	lsls	r1, r3, #31
 800f398:	d403      	bmi.n	800f3a2 <__lo0bits+0x4e>
 800f39a:	085b      	lsrs	r3, r3, #1
 800f39c:	f102 0201 	add.w	r2, r2, #1
 800f3a0:	d003      	beq.n	800f3aa <__lo0bits+0x56>
 800f3a2:	6003      	str	r3, [r0, #0]
 800f3a4:	e7e5      	b.n	800f372 <__lo0bits+0x1e>
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	e7e3      	b.n	800f372 <__lo0bits+0x1e>
 800f3aa:	2220      	movs	r2, #32
 800f3ac:	e7e1      	b.n	800f372 <__lo0bits+0x1e>
	...

0800f3b0 <__i2b>:
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	f7ff febb 	bl	800f130 <_Balloc>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	b928      	cbnz	r0, 800f3ca <__i2b+0x1a>
 800f3be:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <__i2b+0x24>)
 800f3c0:	4805      	ldr	r0, [pc, #20]	; (800f3d8 <__i2b+0x28>)
 800f3c2:	f240 1145 	movw	r1, #325	; 0x145
 800f3c6:	f000 fd9d 	bl	800ff04 <__assert_func>
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	6144      	str	r4, [r0, #20]
 800f3ce:	6103      	str	r3, [r0, #16]
 800f3d0:	bd10      	pop	{r4, pc}
 800f3d2:	bf00      	nop
 800f3d4:	08010dc9 	.word	0x08010dc9
 800f3d8:	08010e3a 	.word	0x08010e3a

0800f3dc <__multiply>:
 800f3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e0:	4691      	mov	r9, r2
 800f3e2:	690a      	ldr	r2, [r1, #16]
 800f3e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	bfb8      	it	lt
 800f3ec:	460b      	movlt	r3, r1
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	bfbc      	itt	lt
 800f3f2:	464c      	movlt	r4, r9
 800f3f4:	4699      	movlt	r9, r3
 800f3f6:	6927      	ldr	r7, [r4, #16]
 800f3f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f3fc:	68a3      	ldr	r3, [r4, #8]
 800f3fe:	6861      	ldr	r1, [r4, #4]
 800f400:	eb07 060a 	add.w	r6, r7, sl
 800f404:	42b3      	cmp	r3, r6
 800f406:	b085      	sub	sp, #20
 800f408:	bfb8      	it	lt
 800f40a:	3101      	addlt	r1, #1
 800f40c:	f7ff fe90 	bl	800f130 <_Balloc>
 800f410:	b930      	cbnz	r0, 800f420 <__multiply+0x44>
 800f412:	4602      	mov	r2, r0
 800f414:	4b44      	ldr	r3, [pc, #272]	; (800f528 <__multiply+0x14c>)
 800f416:	4845      	ldr	r0, [pc, #276]	; (800f52c <__multiply+0x150>)
 800f418:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f41c:	f000 fd72 	bl	800ff04 <__assert_func>
 800f420:	f100 0514 	add.w	r5, r0, #20
 800f424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f428:	462b      	mov	r3, r5
 800f42a:	2200      	movs	r2, #0
 800f42c:	4543      	cmp	r3, r8
 800f42e:	d321      	bcc.n	800f474 <__multiply+0x98>
 800f430:	f104 0314 	add.w	r3, r4, #20
 800f434:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f438:	f109 0314 	add.w	r3, r9, #20
 800f43c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f440:	9202      	str	r2, [sp, #8]
 800f442:	1b3a      	subs	r2, r7, r4
 800f444:	3a15      	subs	r2, #21
 800f446:	f022 0203 	bic.w	r2, r2, #3
 800f44a:	3204      	adds	r2, #4
 800f44c:	f104 0115 	add.w	r1, r4, #21
 800f450:	428f      	cmp	r7, r1
 800f452:	bf38      	it	cc
 800f454:	2204      	movcc	r2, #4
 800f456:	9201      	str	r2, [sp, #4]
 800f458:	9a02      	ldr	r2, [sp, #8]
 800f45a:	9303      	str	r3, [sp, #12]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d80c      	bhi.n	800f47a <__multiply+0x9e>
 800f460:	2e00      	cmp	r6, #0
 800f462:	dd03      	ble.n	800f46c <__multiply+0x90>
 800f464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d05b      	beq.n	800f524 <__multiply+0x148>
 800f46c:	6106      	str	r6, [r0, #16]
 800f46e:	b005      	add	sp, #20
 800f470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f474:	f843 2b04 	str.w	r2, [r3], #4
 800f478:	e7d8      	b.n	800f42c <__multiply+0x50>
 800f47a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f47e:	f1ba 0f00 	cmp.w	sl, #0
 800f482:	d024      	beq.n	800f4ce <__multiply+0xf2>
 800f484:	f104 0e14 	add.w	lr, r4, #20
 800f488:	46a9      	mov	r9, r5
 800f48a:	f04f 0c00 	mov.w	ip, #0
 800f48e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f492:	f8d9 1000 	ldr.w	r1, [r9]
 800f496:	fa1f fb82 	uxth.w	fp, r2
 800f49a:	b289      	uxth	r1, r1
 800f49c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f4a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f4a4:	f8d9 2000 	ldr.w	r2, [r9]
 800f4a8:	4461      	add	r1, ip
 800f4aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800f4b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f4b6:	b289      	uxth	r1, r1
 800f4b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f4bc:	4577      	cmp	r7, lr
 800f4be:	f849 1b04 	str.w	r1, [r9], #4
 800f4c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4c6:	d8e2      	bhi.n	800f48e <__multiply+0xb2>
 800f4c8:	9a01      	ldr	r2, [sp, #4]
 800f4ca:	f845 c002 	str.w	ip, [r5, r2]
 800f4ce:	9a03      	ldr	r2, [sp, #12]
 800f4d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	f1b9 0f00 	cmp.w	r9, #0
 800f4da:	d021      	beq.n	800f520 <__multiply+0x144>
 800f4dc:	6829      	ldr	r1, [r5, #0]
 800f4de:	f104 0c14 	add.w	ip, r4, #20
 800f4e2:	46ae      	mov	lr, r5
 800f4e4:	f04f 0a00 	mov.w	sl, #0
 800f4e8:	f8bc b000 	ldrh.w	fp, [ip]
 800f4ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f4f0:	fb09 220b 	mla	r2, r9, fp, r2
 800f4f4:	4452      	add	r2, sl
 800f4f6:	b289      	uxth	r1, r1
 800f4f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f4fc:	f84e 1b04 	str.w	r1, [lr], #4
 800f500:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f504:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f508:	f8be 1000 	ldrh.w	r1, [lr]
 800f50c:	fb09 110a 	mla	r1, r9, sl, r1
 800f510:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f514:	4567      	cmp	r7, ip
 800f516:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f51a:	d8e5      	bhi.n	800f4e8 <__multiply+0x10c>
 800f51c:	9a01      	ldr	r2, [sp, #4]
 800f51e:	50a9      	str	r1, [r5, r2]
 800f520:	3504      	adds	r5, #4
 800f522:	e799      	b.n	800f458 <__multiply+0x7c>
 800f524:	3e01      	subs	r6, #1
 800f526:	e79b      	b.n	800f460 <__multiply+0x84>
 800f528:	08010dc9 	.word	0x08010dc9
 800f52c:	08010e3a 	.word	0x08010e3a

0800f530 <__pow5mult>:
 800f530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f534:	4615      	mov	r5, r2
 800f536:	f012 0203 	ands.w	r2, r2, #3
 800f53a:	4606      	mov	r6, r0
 800f53c:	460f      	mov	r7, r1
 800f53e:	d007      	beq.n	800f550 <__pow5mult+0x20>
 800f540:	4c25      	ldr	r4, [pc, #148]	; (800f5d8 <__pow5mult+0xa8>)
 800f542:	3a01      	subs	r2, #1
 800f544:	2300      	movs	r3, #0
 800f546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f54a:	f7ff fe53 	bl	800f1f4 <__multadd>
 800f54e:	4607      	mov	r7, r0
 800f550:	10ad      	asrs	r5, r5, #2
 800f552:	d03d      	beq.n	800f5d0 <__pow5mult+0xa0>
 800f554:	69f4      	ldr	r4, [r6, #28]
 800f556:	b97c      	cbnz	r4, 800f578 <__pow5mult+0x48>
 800f558:	2010      	movs	r0, #16
 800f55a:	f7ff fd23 	bl	800efa4 <malloc>
 800f55e:	4602      	mov	r2, r0
 800f560:	61f0      	str	r0, [r6, #28]
 800f562:	b928      	cbnz	r0, 800f570 <__pow5mult+0x40>
 800f564:	4b1d      	ldr	r3, [pc, #116]	; (800f5dc <__pow5mult+0xac>)
 800f566:	481e      	ldr	r0, [pc, #120]	; (800f5e0 <__pow5mult+0xb0>)
 800f568:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f56c:	f000 fcca 	bl	800ff04 <__assert_func>
 800f570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f574:	6004      	str	r4, [r0, #0]
 800f576:	60c4      	str	r4, [r0, #12]
 800f578:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f57c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f580:	b94c      	cbnz	r4, 800f596 <__pow5mult+0x66>
 800f582:	f240 2171 	movw	r1, #625	; 0x271
 800f586:	4630      	mov	r0, r6
 800f588:	f7ff ff12 	bl	800f3b0 <__i2b>
 800f58c:	2300      	movs	r3, #0
 800f58e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f592:	4604      	mov	r4, r0
 800f594:	6003      	str	r3, [r0, #0]
 800f596:	f04f 0900 	mov.w	r9, #0
 800f59a:	07eb      	lsls	r3, r5, #31
 800f59c:	d50a      	bpl.n	800f5b4 <__pow5mult+0x84>
 800f59e:	4639      	mov	r1, r7
 800f5a0:	4622      	mov	r2, r4
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f7ff ff1a 	bl	800f3dc <__multiply>
 800f5a8:	4639      	mov	r1, r7
 800f5aa:	4680      	mov	r8, r0
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f7ff fdff 	bl	800f1b0 <_Bfree>
 800f5b2:	4647      	mov	r7, r8
 800f5b4:	106d      	asrs	r5, r5, #1
 800f5b6:	d00b      	beq.n	800f5d0 <__pow5mult+0xa0>
 800f5b8:	6820      	ldr	r0, [r4, #0]
 800f5ba:	b938      	cbnz	r0, 800f5cc <__pow5mult+0x9c>
 800f5bc:	4622      	mov	r2, r4
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	f7ff ff0b 	bl	800f3dc <__multiply>
 800f5c6:	6020      	str	r0, [r4, #0]
 800f5c8:	f8c0 9000 	str.w	r9, [r0]
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	e7e4      	b.n	800f59a <__pow5mult+0x6a>
 800f5d0:	4638      	mov	r0, r7
 800f5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5d6:	bf00      	nop
 800f5d8:	08010f88 	.word	0x08010f88
 800f5dc:	08010d5a 	.word	0x08010d5a
 800f5e0:	08010e3a 	.word	0x08010e3a

0800f5e4 <__lshift>:
 800f5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e8:	460c      	mov	r4, r1
 800f5ea:	6849      	ldr	r1, [r1, #4]
 800f5ec:	6923      	ldr	r3, [r4, #16]
 800f5ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f5f2:	68a3      	ldr	r3, [r4, #8]
 800f5f4:	4607      	mov	r7, r0
 800f5f6:	4691      	mov	r9, r2
 800f5f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5fc:	f108 0601 	add.w	r6, r8, #1
 800f600:	42b3      	cmp	r3, r6
 800f602:	db0b      	blt.n	800f61c <__lshift+0x38>
 800f604:	4638      	mov	r0, r7
 800f606:	f7ff fd93 	bl	800f130 <_Balloc>
 800f60a:	4605      	mov	r5, r0
 800f60c:	b948      	cbnz	r0, 800f622 <__lshift+0x3e>
 800f60e:	4602      	mov	r2, r0
 800f610:	4b28      	ldr	r3, [pc, #160]	; (800f6b4 <__lshift+0xd0>)
 800f612:	4829      	ldr	r0, [pc, #164]	; (800f6b8 <__lshift+0xd4>)
 800f614:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f618:	f000 fc74 	bl	800ff04 <__assert_func>
 800f61c:	3101      	adds	r1, #1
 800f61e:	005b      	lsls	r3, r3, #1
 800f620:	e7ee      	b.n	800f600 <__lshift+0x1c>
 800f622:	2300      	movs	r3, #0
 800f624:	f100 0114 	add.w	r1, r0, #20
 800f628:	f100 0210 	add.w	r2, r0, #16
 800f62c:	4618      	mov	r0, r3
 800f62e:	4553      	cmp	r3, sl
 800f630:	db33      	blt.n	800f69a <__lshift+0xb6>
 800f632:	6920      	ldr	r0, [r4, #16]
 800f634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f638:	f104 0314 	add.w	r3, r4, #20
 800f63c:	f019 091f 	ands.w	r9, r9, #31
 800f640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f644:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f648:	d02b      	beq.n	800f6a2 <__lshift+0xbe>
 800f64a:	f1c9 0e20 	rsb	lr, r9, #32
 800f64e:	468a      	mov	sl, r1
 800f650:	2200      	movs	r2, #0
 800f652:	6818      	ldr	r0, [r3, #0]
 800f654:	fa00 f009 	lsl.w	r0, r0, r9
 800f658:	4310      	orrs	r0, r2
 800f65a:	f84a 0b04 	str.w	r0, [sl], #4
 800f65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f662:	459c      	cmp	ip, r3
 800f664:	fa22 f20e 	lsr.w	r2, r2, lr
 800f668:	d8f3      	bhi.n	800f652 <__lshift+0x6e>
 800f66a:	ebac 0304 	sub.w	r3, ip, r4
 800f66e:	3b15      	subs	r3, #21
 800f670:	f023 0303 	bic.w	r3, r3, #3
 800f674:	3304      	adds	r3, #4
 800f676:	f104 0015 	add.w	r0, r4, #21
 800f67a:	4584      	cmp	ip, r0
 800f67c:	bf38      	it	cc
 800f67e:	2304      	movcc	r3, #4
 800f680:	50ca      	str	r2, [r1, r3]
 800f682:	b10a      	cbz	r2, 800f688 <__lshift+0xa4>
 800f684:	f108 0602 	add.w	r6, r8, #2
 800f688:	3e01      	subs	r6, #1
 800f68a:	4638      	mov	r0, r7
 800f68c:	612e      	str	r6, [r5, #16]
 800f68e:	4621      	mov	r1, r4
 800f690:	f7ff fd8e 	bl	800f1b0 <_Bfree>
 800f694:	4628      	mov	r0, r5
 800f696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f69a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f69e:	3301      	adds	r3, #1
 800f6a0:	e7c5      	b.n	800f62e <__lshift+0x4a>
 800f6a2:	3904      	subs	r1, #4
 800f6a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6ac:	459c      	cmp	ip, r3
 800f6ae:	d8f9      	bhi.n	800f6a4 <__lshift+0xc0>
 800f6b0:	e7ea      	b.n	800f688 <__lshift+0xa4>
 800f6b2:	bf00      	nop
 800f6b4:	08010dc9 	.word	0x08010dc9
 800f6b8:	08010e3a 	.word	0x08010e3a

0800f6bc <__mcmp>:
 800f6bc:	b530      	push	{r4, r5, lr}
 800f6be:	6902      	ldr	r2, [r0, #16]
 800f6c0:	690c      	ldr	r4, [r1, #16]
 800f6c2:	1b12      	subs	r2, r2, r4
 800f6c4:	d10e      	bne.n	800f6e4 <__mcmp+0x28>
 800f6c6:	f100 0314 	add.w	r3, r0, #20
 800f6ca:	3114      	adds	r1, #20
 800f6cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f6d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f6d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f6d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f6dc:	42a5      	cmp	r5, r4
 800f6de:	d003      	beq.n	800f6e8 <__mcmp+0x2c>
 800f6e0:	d305      	bcc.n	800f6ee <__mcmp+0x32>
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	4610      	mov	r0, r2
 800f6e6:	bd30      	pop	{r4, r5, pc}
 800f6e8:	4283      	cmp	r3, r0
 800f6ea:	d3f3      	bcc.n	800f6d4 <__mcmp+0x18>
 800f6ec:	e7fa      	b.n	800f6e4 <__mcmp+0x28>
 800f6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f6f2:	e7f7      	b.n	800f6e4 <__mcmp+0x28>

0800f6f4 <__mdiff>:
 800f6f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f8:	460c      	mov	r4, r1
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	4620      	mov	r0, r4
 800f700:	4690      	mov	r8, r2
 800f702:	f7ff ffdb 	bl	800f6bc <__mcmp>
 800f706:	1e05      	subs	r5, r0, #0
 800f708:	d110      	bne.n	800f72c <__mdiff+0x38>
 800f70a:	4629      	mov	r1, r5
 800f70c:	4630      	mov	r0, r6
 800f70e:	f7ff fd0f 	bl	800f130 <_Balloc>
 800f712:	b930      	cbnz	r0, 800f722 <__mdiff+0x2e>
 800f714:	4b3a      	ldr	r3, [pc, #232]	; (800f800 <__mdiff+0x10c>)
 800f716:	4602      	mov	r2, r0
 800f718:	f240 2137 	movw	r1, #567	; 0x237
 800f71c:	4839      	ldr	r0, [pc, #228]	; (800f804 <__mdiff+0x110>)
 800f71e:	f000 fbf1 	bl	800ff04 <__assert_func>
 800f722:	2301      	movs	r3, #1
 800f724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f72c:	bfa4      	itt	ge
 800f72e:	4643      	movge	r3, r8
 800f730:	46a0      	movge	r8, r4
 800f732:	4630      	mov	r0, r6
 800f734:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f738:	bfa6      	itte	ge
 800f73a:	461c      	movge	r4, r3
 800f73c:	2500      	movge	r5, #0
 800f73e:	2501      	movlt	r5, #1
 800f740:	f7ff fcf6 	bl	800f130 <_Balloc>
 800f744:	b920      	cbnz	r0, 800f750 <__mdiff+0x5c>
 800f746:	4b2e      	ldr	r3, [pc, #184]	; (800f800 <__mdiff+0x10c>)
 800f748:	4602      	mov	r2, r0
 800f74a:	f240 2145 	movw	r1, #581	; 0x245
 800f74e:	e7e5      	b.n	800f71c <__mdiff+0x28>
 800f750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f754:	6926      	ldr	r6, [r4, #16]
 800f756:	60c5      	str	r5, [r0, #12]
 800f758:	f104 0914 	add.w	r9, r4, #20
 800f75c:	f108 0514 	add.w	r5, r8, #20
 800f760:	f100 0e14 	add.w	lr, r0, #20
 800f764:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f768:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f76c:	f108 0210 	add.w	r2, r8, #16
 800f770:	46f2      	mov	sl, lr
 800f772:	2100      	movs	r1, #0
 800f774:	f859 3b04 	ldr.w	r3, [r9], #4
 800f778:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f77c:	fa11 f88b 	uxtah	r8, r1, fp
 800f780:	b299      	uxth	r1, r3
 800f782:	0c1b      	lsrs	r3, r3, #16
 800f784:	eba8 0801 	sub.w	r8, r8, r1
 800f788:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f78c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f790:	fa1f f888 	uxth.w	r8, r8
 800f794:	1419      	asrs	r1, r3, #16
 800f796:	454e      	cmp	r6, r9
 800f798:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f79c:	f84a 3b04 	str.w	r3, [sl], #4
 800f7a0:	d8e8      	bhi.n	800f774 <__mdiff+0x80>
 800f7a2:	1b33      	subs	r3, r6, r4
 800f7a4:	3b15      	subs	r3, #21
 800f7a6:	f023 0303 	bic.w	r3, r3, #3
 800f7aa:	3304      	adds	r3, #4
 800f7ac:	3415      	adds	r4, #21
 800f7ae:	42a6      	cmp	r6, r4
 800f7b0:	bf38      	it	cc
 800f7b2:	2304      	movcc	r3, #4
 800f7b4:	441d      	add	r5, r3
 800f7b6:	4473      	add	r3, lr
 800f7b8:	469e      	mov	lr, r3
 800f7ba:	462e      	mov	r6, r5
 800f7bc:	4566      	cmp	r6, ip
 800f7be:	d30e      	bcc.n	800f7de <__mdiff+0xea>
 800f7c0:	f10c 0203 	add.w	r2, ip, #3
 800f7c4:	1b52      	subs	r2, r2, r5
 800f7c6:	f022 0203 	bic.w	r2, r2, #3
 800f7ca:	3d03      	subs	r5, #3
 800f7cc:	45ac      	cmp	ip, r5
 800f7ce:	bf38      	it	cc
 800f7d0:	2200      	movcc	r2, #0
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f7d8:	b17a      	cbz	r2, 800f7fa <__mdiff+0x106>
 800f7da:	6107      	str	r7, [r0, #16]
 800f7dc:	e7a4      	b.n	800f728 <__mdiff+0x34>
 800f7de:	f856 8b04 	ldr.w	r8, [r6], #4
 800f7e2:	fa11 f288 	uxtah	r2, r1, r8
 800f7e6:	1414      	asrs	r4, r2, #16
 800f7e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f7ec:	b292      	uxth	r2, r2
 800f7ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f7f2:	f84e 2b04 	str.w	r2, [lr], #4
 800f7f6:	1421      	asrs	r1, r4, #16
 800f7f8:	e7e0      	b.n	800f7bc <__mdiff+0xc8>
 800f7fa:	3f01      	subs	r7, #1
 800f7fc:	e7ea      	b.n	800f7d4 <__mdiff+0xe0>
 800f7fe:	bf00      	nop
 800f800:	08010dc9 	.word	0x08010dc9
 800f804:	08010e3a 	.word	0x08010e3a

0800f808 <__ulp>:
 800f808:	b082      	sub	sp, #8
 800f80a:	ed8d 0b00 	vstr	d0, [sp]
 800f80e:	9a01      	ldr	r2, [sp, #4]
 800f810:	4b0f      	ldr	r3, [pc, #60]	; (800f850 <__ulp+0x48>)
 800f812:	4013      	ands	r3, r2
 800f814:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f818:	2b00      	cmp	r3, #0
 800f81a:	dc08      	bgt.n	800f82e <__ulp+0x26>
 800f81c:	425b      	negs	r3, r3
 800f81e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f822:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f826:	da04      	bge.n	800f832 <__ulp+0x2a>
 800f828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f82c:	4113      	asrs	r3, r2
 800f82e:	2200      	movs	r2, #0
 800f830:	e008      	b.n	800f844 <__ulp+0x3c>
 800f832:	f1a2 0314 	sub.w	r3, r2, #20
 800f836:	2b1e      	cmp	r3, #30
 800f838:	bfda      	itte	le
 800f83a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f83e:	40da      	lsrle	r2, r3
 800f840:	2201      	movgt	r2, #1
 800f842:	2300      	movs	r3, #0
 800f844:	4619      	mov	r1, r3
 800f846:	4610      	mov	r0, r2
 800f848:	ec41 0b10 	vmov	d0, r0, r1
 800f84c:	b002      	add	sp, #8
 800f84e:	4770      	bx	lr
 800f850:	7ff00000 	.word	0x7ff00000

0800f854 <__b2d>:
 800f854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f858:	6906      	ldr	r6, [r0, #16]
 800f85a:	f100 0814 	add.w	r8, r0, #20
 800f85e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f862:	1f37      	subs	r7, r6, #4
 800f864:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f868:	4610      	mov	r0, r2
 800f86a:	f7ff fd53 	bl	800f314 <__hi0bits>
 800f86e:	f1c0 0320 	rsb	r3, r0, #32
 800f872:	280a      	cmp	r0, #10
 800f874:	600b      	str	r3, [r1, #0]
 800f876:	491b      	ldr	r1, [pc, #108]	; (800f8e4 <__b2d+0x90>)
 800f878:	dc15      	bgt.n	800f8a6 <__b2d+0x52>
 800f87a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f87e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f882:	45b8      	cmp	r8, r7
 800f884:	ea43 0501 	orr.w	r5, r3, r1
 800f888:	bf34      	ite	cc
 800f88a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f88e:	2300      	movcs	r3, #0
 800f890:	3015      	adds	r0, #21
 800f892:	fa02 f000 	lsl.w	r0, r2, r0
 800f896:	fa23 f30c 	lsr.w	r3, r3, ip
 800f89a:	4303      	orrs	r3, r0
 800f89c:	461c      	mov	r4, r3
 800f89e:	ec45 4b10 	vmov	d0, r4, r5
 800f8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a6:	45b8      	cmp	r8, r7
 800f8a8:	bf3a      	itte	cc
 800f8aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f8ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800f8b2:	2300      	movcs	r3, #0
 800f8b4:	380b      	subs	r0, #11
 800f8b6:	d012      	beq.n	800f8de <__b2d+0x8a>
 800f8b8:	f1c0 0120 	rsb	r1, r0, #32
 800f8bc:	fa23 f401 	lsr.w	r4, r3, r1
 800f8c0:	4082      	lsls	r2, r0
 800f8c2:	4322      	orrs	r2, r4
 800f8c4:	4547      	cmp	r7, r8
 800f8c6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f8ca:	bf8c      	ite	hi
 800f8cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f8d0:	2200      	movls	r2, #0
 800f8d2:	4083      	lsls	r3, r0
 800f8d4:	40ca      	lsrs	r2, r1
 800f8d6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	e7de      	b.n	800f89c <__b2d+0x48>
 800f8de:	ea42 0501 	orr.w	r5, r2, r1
 800f8e2:	e7db      	b.n	800f89c <__b2d+0x48>
 800f8e4:	3ff00000 	.word	0x3ff00000

0800f8e8 <__d2b>:
 800f8e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f8ec:	460f      	mov	r7, r1
 800f8ee:	2101      	movs	r1, #1
 800f8f0:	ec59 8b10 	vmov	r8, r9, d0
 800f8f4:	4616      	mov	r6, r2
 800f8f6:	f7ff fc1b 	bl	800f130 <_Balloc>
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	b930      	cbnz	r0, 800f90c <__d2b+0x24>
 800f8fe:	4602      	mov	r2, r0
 800f900:	4b24      	ldr	r3, [pc, #144]	; (800f994 <__d2b+0xac>)
 800f902:	4825      	ldr	r0, [pc, #148]	; (800f998 <__d2b+0xb0>)
 800f904:	f240 310f 	movw	r1, #783	; 0x30f
 800f908:	f000 fafc 	bl	800ff04 <__assert_func>
 800f90c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f914:	bb2d      	cbnz	r5, 800f962 <__d2b+0x7a>
 800f916:	9301      	str	r3, [sp, #4]
 800f918:	f1b8 0300 	subs.w	r3, r8, #0
 800f91c:	d026      	beq.n	800f96c <__d2b+0x84>
 800f91e:	4668      	mov	r0, sp
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	f7ff fd17 	bl	800f354 <__lo0bits>
 800f926:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f92a:	b1e8      	cbz	r0, 800f968 <__d2b+0x80>
 800f92c:	f1c0 0320 	rsb	r3, r0, #32
 800f930:	fa02 f303 	lsl.w	r3, r2, r3
 800f934:	430b      	orrs	r3, r1
 800f936:	40c2      	lsrs	r2, r0
 800f938:	6163      	str	r3, [r4, #20]
 800f93a:	9201      	str	r2, [sp, #4]
 800f93c:	9b01      	ldr	r3, [sp, #4]
 800f93e:	61a3      	str	r3, [r4, #24]
 800f940:	2b00      	cmp	r3, #0
 800f942:	bf14      	ite	ne
 800f944:	2202      	movne	r2, #2
 800f946:	2201      	moveq	r2, #1
 800f948:	6122      	str	r2, [r4, #16]
 800f94a:	b1bd      	cbz	r5, 800f97c <__d2b+0x94>
 800f94c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f950:	4405      	add	r5, r0
 800f952:	603d      	str	r5, [r7, #0]
 800f954:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f958:	6030      	str	r0, [r6, #0]
 800f95a:	4620      	mov	r0, r4
 800f95c:	b003      	add	sp, #12
 800f95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f966:	e7d6      	b.n	800f916 <__d2b+0x2e>
 800f968:	6161      	str	r1, [r4, #20]
 800f96a:	e7e7      	b.n	800f93c <__d2b+0x54>
 800f96c:	a801      	add	r0, sp, #4
 800f96e:	f7ff fcf1 	bl	800f354 <__lo0bits>
 800f972:	9b01      	ldr	r3, [sp, #4]
 800f974:	6163      	str	r3, [r4, #20]
 800f976:	3020      	adds	r0, #32
 800f978:	2201      	movs	r2, #1
 800f97a:	e7e5      	b.n	800f948 <__d2b+0x60>
 800f97c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f984:	6038      	str	r0, [r7, #0]
 800f986:	6918      	ldr	r0, [r3, #16]
 800f988:	f7ff fcc4 	bl	800f314 <__hi0bits>
 800f98c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f990:	e7e2      	b.n	800f958 <__d2b+0x70>
 800f992:	bf00      	nop
 800f994:	08010dc9 	.word	0x08010dc9
 800f998:	08010e3a 	.word	0x08010e3a

0800f99c <__ratio>:
 800f99c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a0:	4688      	mov	r8, r1
 800f9a2:	4669      	mov	r1, sp
 800f9a4:	4681      	mov	r9, r0
 800f9a6:	f7ff ff55 	bl	800f854 <__b2d>
 800f9aa:	a901      	add	r1, sp, #4
 800f9ac:	4640      	mov	r0, r8
 800f9ae:	ec55 4b10 	vmov	r4, r5, d0
 800f9b2:	f7ff ff4f 	bl	800f854 <__b2d>
 800f9b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f9be:	eba3 0c02 	sub.w	ip, r3, r2
 800f9c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f9c6:	1a9b      	subs	r3, r3, r2
 800f9c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f9cc:	ec51 0b10 	vmov	r0, r1, d0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	bfd6      	itet	le
 800f9d4:	460a      	movle	r2, r1
 800f9d6:	462a      	movgt	r2, r5
 800f9d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f9dc:	468b      	mov	fp, r1
 800f9de:	462f      	mov	r7, r5
 800f9e0:	bfd4      	ite	le
 800f9e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f9e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	ee10 2a10 	vmov	r2, s0
 800f9f0:	465b      	mov	r3, fp
 800f9f2:	4639      	mov	r1, r7
 800f9f4:	f7f0 ff4a 	bl	800088c <__aeabi_ddiv>
 800f9f8:	ec41 0b10 	vmov	d0, r0, r1
 800f9fc:	b003      	add	sp, #12
 800f9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa02 <__copybits>:
 800fa02:	3901      	subs	r1, #1
 800fa04:	b570      	push	{r4, r5, r6, lr}
 800fa06:	1149      	asrs	r1, r1, #5
 800fa08:	6914      	ldr	r4, [r2, #16]
 800fa0a:	3101      	adds	r1, #1
 800fa0c:	f102 0314 	add.w	r3, r2, #20
 800fa10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa18:	1f05      	subs	r5, r0, #4
 800fa1a:	42a3      	cmp	r3, r4
 800fa1c:	d30c      	bcc.n	800fa38 <__copybits+0x36>
 800fa1e:	1aa3      	subs	r3, r4, r2
 800fa20:	3b11      	subs	r3, #17
 800fa22:	f023 0303 	bic.w	r3, r3, #3
 800fa26:	3211      	adds	r2, #17
 800fa28:	42a2      	cmp	r2, r4
 800fa2a:	bf88      	it	hi
 800fa2c:	2300      	movhi	r3, #0
 800fa2e:	4418      	add	r0, r3
 800fa30:	2300      	movs	r3, #0
 800fa32:	4288      	cmp	r0, r1
 800fa34:	d305      	bcc.n	800fa42 <__copybits+0x40>
 800fa36:	bd70      	pop	{r4, r5, r6, pc}
 800fa38:	f853 6b04 	ldr.w	r6, [r3], #4
 800fa3c:	f845 6f04 	str.w	r6, [r5, #4]!
 800fa40:	e7eb      	b.n	800fa1a <__copybits+0x18>
 800fa42:	f840 3b04 	str.w	r3, [r0], #4
 800fa46:	e7f4      	b.n	800fa32 <__copybits+0x30>

0800fa48 <__any_on>:
 800fa48:	f100 0214 	add.w	r2, r0, #20
 800fa4c:	6900      	ldr	r0, [r0, #16]
 800fa4e:	114b      	asrs	r3, r1, #5
 800fa50:	4298      	cmp	r0, r3
 800fa52:	b510      	push	{r4, lr}
 800fa54:	db11      	blt.n	800fa7a <__any_on+0x32>
 800fa56:	dd0a      	ble.n	800fa6e <__any_on+0x26>
 800fa58:	f011 011f 	ands.w	r1, r1, #31
 800fa5c:	d007      	beq.n	800fa6e <__any_on+0x26>
 800fa5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fa62:	fa24 f001 	lsr.w	r0, r4, r1
 800fa66:	fa00 f101 	lsl.w	r1, r0, r1
 800fa6a:	428c      	cmp	r4, r1
 800fa6c:	d10b      	bne.n	800fa86 <__any_on+0x3e>
 800fa6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d803      	bhi.n	800fa7e <__any_on+0x36>
 800fa76:	2000      	movs	r0, #0
 800fa78:	bd10      	pop	{r4, pc}
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	e7f7      	b.n	800fa6e <__any_on+0x26>
 800fa7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa82:	2900      	cmp	r1, #0
 800fa84:	d0f5      	beq.n	800fa72 <__any_on+0x2a>
 800fa86:	2001      	movs	r0, #1
 800fa88:	e7f6      	b.n	800fa78 <__any_on+0x30>

0800fa8a <__ascii_wctomb>:
 800fa8a:	b149      	cbz	r1, 800faa0 <__ascii_wctomb+0x16>
 800fa8c:	2aff      	cmp	r2, #255	; 0xff
 800fa8e:	bf85      	ittet	hi
 800fa90:	238a      	movhi	r3, #138	; 0x8a
 800fa92:	6003      	strhi	r3, [r0, #0]
 800fa94:	700a      	strbls	r2, [r1, #0]
 800fa96:	f04f 30ff 	movhi.w	r0, #4294967295
 800fa9a:	bf98      	it	ls
 800fa9c:	2001      	movls	r0, #1
 800fa9e:	4770      	bx	lr
 800faa0:	4608      	mov	r0, r1
 800faa2:	4770      	bx	lr

0800faa4 <__ssputs_r>:
 800faa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faa8:	688e      	ldr	r6, [r1, #8]
 800faaa:	461f      	mov	r7, r3
 800faac:	42be      	cmp	r6, r7
 800faae:	680b      	ldr	r3, [r1, #0]
 800fab0:	4682      	mov	sl, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	4690      	mov	r8, r2
 800fab6:	d82c      	bhi.n	800fb12 <__ssputs_r+0x6e>
 800fab8:	898a      	ldrh	r2, [r1, #12]
 800faba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fabe:	d026      	beq.n	800fb0e <__ssputs_r+0x6a>
 800fac0:	6965      	ldr	r5, [r4, #20]
 800fac2:	6909      	ldr	r1, [r1, #16]
 800fac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fac8:	eba3 0901 	sub.w	r9, r3, r1
 800facc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fad0:	1c7b      	adds	r3, r7, #1
 800fad2:	444b      	add	r3, r9
 800fad4:	106d      	asrs	r5, r5, #1
 800fad6:	429d      	cmp	r5, r3
 800fad8:	bf38      	it	cc
 800fada:	461d      	movcc	r5, r3
 800fadc:	0553      	lsls	r3, r2, #21
 800fade:	d527      	bpl.n	800fb30 <__ssputs_r+0x8c>
 800fae0:	4629      	mov	r1, r5
 800fae2:	f7ff fa87 	bl	800eff4 <_malloc_r>
 800fae6:	4606      	mov	r6, r0
 800fae8:	b360      	cbz	r0, 800fb44 <__ssputs_r+0xa0>
 800faea:	6921      	ldr	r1, [r4, #16]
 800faec:	464a      	mov	r2, r9
 800faee:	f7fe f824 	bl	800db3a <memcpy>
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800faf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fafc:	81a3      	strh	r3, [r4, #12]
 800fafe:	6126      	str	r6, [r4, #16]
 800fb00:	6165      	str	r5, [r4, #20]
 800fb02:	444e      	add	r6, r9
 800fb04:	eba5 0509 	sub.w	r5, r5, r9
 800fb08:	6026      	str	r6, [r4, #0]
 800fb0a:	60a5      	str	r5, [r4, #8]
 800fb0c:	463e      	mov	r6, r7
 800fb0e:	42be      	cmp	r6, r7
 800fb10:	d900      	bls.n	800fb14 <__ssputs_r+0x70>
 800fb12:	463e      	mov	r6, r7
 800fb14:	6820      	ldr	r0, [r4, #0]
 800fb16:	4632      	mov	r2, r6
 800fb18:	4641      	mov	r1, r8
 800fb1a:	f000 f9c9 	bl	800feb0 <memmove>
 800fb1e:	68a3      	ldr	r3, [r4, #8]
 800fb20:	1b9b      	subs	r3, r3, r6
 800fb22:	60a3      	str	r3, [r4, #8]
 800fb24:	6823      	ldr	r3, [r4, #0]
 800fb26:	4433      	add	r3, r6
 800fb28:	6023      	str	r3, [r4, #0]
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb30:	462a      	mov	r2, r5
 800fb32:	f000 fa1b 	bl	800ff6c <_realloc_r>
 800fb36:	4606      	mov	r6, r0
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d1e0      	bne.n	800fafe <__ssputs_r+0x5a>
 800fb3c:	6921      	ldr	r1, [r4, #16]
 800fb3e:	4650      	mov	r0, sl
 800fb40:	f7fe fe8c 	bl	800e85c <_free_r>
 800fb44:	230c      	movs	r3, #12
 800fb46:	f8ca 3000 	str.w	r3, [sl]
 800fb4a:	89a3      	ldrh	r3, [r4, #12]
 800fb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb50:	81a3      	strh	r3, [r4, #12]
 800fb52:	f04f 30ff 	mov.w	r0, #4294967295
 800fb56:	e7e9      	b.n	800fb2c <__ssputs_r+0x88>

0800fb58 <_svfiprintf_r>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	4698      	mov	r8, r3
 800fb5e:	898b      	ldrh	r3, [r1, #12]
 800fb60:	061b      	lsls	r3, r3, #24
 800fb62:	b09d      	sub	sp, #116	; 0x74
 800fb64:	4607      	mov	r7, r0
 800fb66:	460d      	mov	r5, r1
 800fb68:	4614      	mov	r4, r2
 800fb6a:	d50e      	bpl.n	800fb8a <_svfiprintf_r+0x32>
 800fb6c:	690b      	ldr	r3, [r1, #16]
 800fb6e:	b963      	cbnz	r3, 800fb8a <_svfiprintf_r+0x32>
 800fb70:	2140      	movs	r1, #64	; 0x40
 800fb72:	f7ff fa3f 	bl	800eff4 <_malloc_r>
 800fb76:	6028      	str	r0, [r5, #0]
 800fb78:	6128      	str	r0, [r5, #16]
 800fb7a:	b920      	cbnz	r0, 800fb86 <_svfiprintf_r+0x2e>
 800fb7c:	230c      	movs	r3, #12
 800fb7e:	603b      	str	r3, [r7, #0]
 800fb80:	f04f 30ff 	mov.w	r0, #4294967295
 800fb84:	e0d0      	b.n	800fd28 <_svfiprintf_r+0x1d0>
 800fb86:	2340      	movs	r3, #64	; 0x40
 800fb88:	616b      	str	r3, [r5, #20]
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	9309      	str	r3, [sp, #36]	; 0x24
 800fb8e:	2320      	movs	r3, #32
 800fb90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb94:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb98:	2330      	movs	r3, #48	; 0x30
 800fb9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fd40 <_svfiprintf_r+0x1e8>
 800fb9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fba2:	f04f 0901 	mov.w	r9, #1
 800fba6:	4623      	mov	r3, r4
 800fba8:	469a      	mov	sl, r3
 800fbaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbae:	b10a      	cbz	r2, 800fbb4 <_svfiprintf_r+0x5c>
 800fbb0:	2a25      	cmp	r2, #37	; 0x25
 800fbb2:	d1f9      	bne.n	800fba8 <_svfiprintf_r+0x50>
 800fbb4:	ebba 0b04 	subs.w	fp, sl, r4
 800fbb8:	d00b      	beq.n	800fbd2 <_svfiprintf_r+0x7a>
 800fbba:	465b      	mov	r3, fp
 800fbbc:	4622      	mov	r2, r4
 800fbbe:	4629      	mov	r1, r5
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	f7ff ff6f 	bl	800faa4 <__ssputs_r>
 800fbc6:	3001      	adds	r0, #1
 800fbc8:	f000 80a9 	beq.w	800fd1e <_svfiprintf_r+0x1c6>
 800fbcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbce:	445a      	add	r2, fp
 800fbd0:	9209      	str	r2, [sp, #36]	; 0x24
 800fbd2:	f89a 3000 	ldrb.w	r3, [sl]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f000 80a1 	beq.w	800fd1e <_svfiprintf_r+0x1c6>
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f04f 32ff 	mov.w	r2, #4294967295
 800fbe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbe6:	f10a 0a01 	add.w	sl, sl, #1
 800fbea:	9304      	str	r3, [sp, #16]
 800fbec:	9307      	str	r3, [sp, #28]
 800fbee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbf2:	931a      	str	r3, [sp, #104]	; 0x68
 800fbf4:	4654      	mov	r4, sl
 800fbf6:	2205      	movs	r2, #5
 800fbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbfc:	4850      	ldr	r0, [pc, #320]	; (800fd40 <_svfiprintf_r+0x1e8>)
 800fbfe:	f7f0 fb07 	bl	8000210 <memchr>
 800fc02:	9a04      	ldr	r2, [sp, #16]
 800fc04:	b9d8      	cbnz	r0, 800fc3e <_svfiprintf_r+0xe6>
 800fc06:	06d0      	lsls	r0, r2, #27
 800fc08:	bf44      	itt	mi
 800fc0a:	2320      	movmi	r3, #32
 800fc0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc10:	0711      	lsls	r1, r2, #28
 800fc12:	bf44      	itt	mi
 800fc14:	232b      	movmi	r3, #43	; 0x2b
 800fc16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc1a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc1e:	2b2a      	cmp	r3, #42	; 0x2a
 800fc20:	d015      	beq.n	800fc4e <_svfiprintf_r+0xf6>
 800fc22:	9a07      	ldr	r2, [sp, #28]
 800fc24:	4654      	mov	r4, sl
 800fc26:	2000      	movs	r0, #0
 800fc28:	f04f 0c0a 	mov.w	ip, #10
 800fc2c:	4621      	mov	r1, r4
 800fc2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc32:	3b30      	subs	r3, #48	; 0x30
 800fc34:	2b09      	cmp	r3, #9
 800fc36:	d94d      	bls.n	800fcd4 <_svfiprintf_r+0x17c>
 800fc38:	b1b0      	cbz	r0, 800fc68 <_svfiprintf_r+0x110>
 800fc3a:	9207      	str	r2, [sp, #28]
 800fc3c:	e014      	b.n	800fc68 <_svfiprintf_r+0x110>
 800fc3e:	eba0 0308 	sub.w	r3, r0, r8
 800fc42:	fa09 f303 	lsl.w	r3, r9, r3
 800fc46:	4313      	orrs	r3, r2
 800fc48:	9304      	str	r3, [sp, #16]
 800fc4a:	46a2      	mov	sl, r4
 800fc4c:	e7d2      	b.n	800fbf4 <_svfiprintf_r+0x9c>
 800fc4e:	9b03      	ldr	r3, [sp, #12]
 800fc50:	1d19      	adds	r1, r3, #4
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	9103      	str	r1, [sp, #12]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	bfbb      	ittet	lt
 800fc5a:	425b      	neglt	r3, r3
 800fc5c:	f042 0202 	orrlt.w	r2, r2, #2
 800fc60:	9307      	strge	r3, [sp, #28]
 800fc62:	9307      	strlt	r3, [sp, #28]
 800fc64:	bfb8      	it	lt
 800fc66:	9204      	strlt	r2, [sp, #16]
 800fc68:	7823      	ldrb	r3, [r4, #0]
 800fc6a:	2b2e      	cmp	r3, #46	; 0x2e
 800fc6c:	d10c      	bne.n	800fc88 <_svfiprintf_r+0x130>
 800fc6e:	7863      	ldrb	r3, [r4, #1]
 800fc70:	2b2a      	cmp	r3, #42	; 0x2a
 800fc72:	d134      	bne.n	800fcde <_svfiprintf_r+0x186>
 800fc74:	9b03      	ldr	r3, [sp, #12]
 800fc76:	1d1a      	adds	r2, r3, #4
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	9203      	str	r2, [sp, #12]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	bfb8      	it	lt
 800fc80:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc84:	3402      	adds	r4, #2
 800fc86:	9305      	str	r3, [sp, #20]
 800fc88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fd50 <_svfiprintf_r+0x1f8>
 800fc8c:	7821      	ldrb	r1, [r4, #0]
 800fc8e:	2203      	movs	r2, #3
 800fc90:	4650      	mov	r0, sl
 800fc92:	f7f0 fabd 	bl	8000210 <memchr>
 800fc96:	b138      	cbz	r0, 800fca8 <_svfiprintf_r+0x150>
 800fc98:	9b04      	ldr	r3, [sp, #16]
 800fc9a:	eba0 000a 	sub.w	r0, r0, sl
 800fc9e:	2240      	movs	r2, #64	; 0x40
 800fca0:	4082      	lsls	r2, r0
 800fca2:	4313      	orrs	r3, r2
 800fca4:	3401      	adds	r4, #1
 800fca6:	9304      	str	r3, [sp, #16]
 800fca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcac:	4825      	ldr	r0, [pc, #148]	; (800fd44 <_svfiprintf_r+0x1ec>)
 800fcae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcb2:	2206      	movs	r2, #6
 800fcb4:	f7f0 faac 	bl	8000210 <memchr>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	d038      	beq.n	800fd2e <_svfiprintf_r+0x1d6>
 800fcbc:	4b22      	ldr	r3, [pc, #136]	; (800fd48 <_svfiprintf_r+0x1f0>)
 800fcbe:	bb1b      	cbnz	r3, 800fd08 <_svfiprintf_r+0x1b0>
 800fcc0:	9b03      	ldr	r3, [sp, #12]
 800fcc2:	3307      	adds	r3, #7
 800fcc4:	f023 0307 	bic.w	r3, r3, #7
 800fcc8:	3308      	adds	r3, #8
 800fcca:	9303      	str	r3, [sp, #12]
 800fccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcce:	4433      	add	r3, r6
 800fcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800fcd2:	e768      	b.n	800fba6 <_svfiprintf_r+0x4e>
 800fcd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcd8:	460c      	mov	r4, r1
 800fcda:	2001      	movs	r0, #1
 800fcdc:	e7a6      	b.n	800fc2c <_svfiprintf_r+0xd4>
 800fcde:	2300      	movs	r3, #0
 800fce0:	3401      	adds	r4, #1
 800fce2:	9305      	str	r3, [sp, #20]
 800fce4:	4619      	mov	r1, r3
 800fce6:	f04f 0c0a 	mov.w	ip, #10
 800fcea:	4620      	mov	r0, r4
 800fcec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcf0:	3a30      	subs	r2, #48	; 0x30
 800fcf2:	2a09      	cmp	r2, #9
 800fcf4:	d903      	bls.n	800fcfe <_svfiprintf_r+0x1a6>
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d0c6      	beq.n	800fc88 <_svfiprintf_r+0x130>
 800fcfa:	9105      	str	r1, [sp, #20]
 800fcfc:	e7c4      	b.n	800fc88 <_svfiprintf_r+0x130>
 800fcfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd02:	4604      	mov	r4, r0
 800fd04:	2301      	movs	r3, #1
 800fd06:	e7f0      	b.n	800fcea <_svfiprintf_r+0x192>
 800fd08:	ab03      	add	r3, sp, #12
 800fd0a:	9300      	str	r3, [sp, #0]
 800fd0c:	462a      	mov	r2, r5
 800fd0e:	4b0f      	ldr	r3, [pc, #60]	; (800fd4c <_svfiprintf_r+0x1f4>)
 800fd10:	a904      	add	r1, sp, #16
 800fd12:	4638      	mov	r0, r7
 800fd14:	f7fd f95c 	bl	800cfd0 <_printf_float>
 800fd18:	1c42      	adds	r2, r0, #1
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	d1d6      	bne.n	800fccc <_svfiprintf_r+0x174>
 800fd1e:	89ab      	ldrh	r3, [r5, #12]
 800fd20:	065b      	lsls	r3, r3, #25
 800fd22:	f53f af2d 	bmi.w	800fb80 <_svfiprintf_r+0x28>
 800fd26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd28:	b01d      	add	sp, #116	; 0x74
 800fd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2e:	ab03      	add	r3, sp, #12
 800fd30:	9300      	str	r3, [sp, #0]
 800fd32:	462a      	mov	r2, r5
 800fd34:	4b05      	ldr	r3, [pc, #20]	; (800fd4c <_svfiprintf_r+0x1f4>)
 800fd36:	a904      	add	r1, sp, #16
 800fd38:	4638      	mov	r0, r7
 800fd3a:	f7fd fbed 	bl	800d518 <_printf_i>
 800fd3e:	e7eb      	b.n	800fd18 <_svfiprintf_r+0x1c0>
 800fd40:	08010f94 	.word	0x08010f94
 800fd44:	08010f9e 	.word	0x08010f9e
 800fd48:	0800cfd1 	.word	0x0800cfd1
 800fd4c:	0800faa5 	.word	0x0800faa5
 800fd50:	08010f9a 	.word	0x08010f9a

0800fd54 <__sflush_r>:
 800fd54:	898a      	ldrh	r2, [r1, #12]
 800fd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5a:	4605      	mov	r5, r0
 800fd5c:	0710      	lsls	r0, r2, #28
 800fd5e:	460c      	mov	r4, r1
 800fd60:	d458      	bmi.n	800fe14 <__sflush_r+0xc0>
 800fd62:	684b      	ldr	r3, [r1, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	dc05      	bgt.n	800fd74 <__sflush_r+0x20>
 800fd68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	dc02      	bgt.n	800fd74 <__sflush_r+0x20>
 800fd6e:	2000      	movs	r0, #0
 800fd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd76:	2e00      	cmp	r6, #0
 800fd78:	d0f9      	beq.n	800fd6e <__sflush_r+0x1a>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd80:	682f      	ldr	r7, [r5, #0]
 800fd82:	6a21      	ldr	r1, [r4, #32]
 800fd84:	602b      	str	r3, [r5, #0]
 800fd86:	d032      	beq.n	800fdee <__sflush_r+0x9a>
 800fd88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd8a:	89a3      	ldrh	r3, [r4, #12]
 800fd8c:	075a      	lsls	r2, r3, #29
 800fd8e:	d505      	bpl.n	800fd9c <__sflush_r+0x48>
 800fd90:	6863      	ldr	r3, [r4, #4]
 800fd92:	1ac0      	subs	r0, r0, r3
 800fd94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd96:	b10b      	cbz	r3, 800fd9c <__sflush_r+0x48>
 800fd98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd9a:	1ac0      	subs	r0, r0, r3
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	4602      	mov	r2, r0
 800fda0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fda2:	6a21      	ldr	r1, [r4, #32]
 800fda4:	4628      	mov	r0, r5
 800fda6:	47b0      	blx	r6
 800fda8:	1c43      	adds	r3, r0, #1
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	d106      	bne.n	800fdbc <__sflush_r+0x68>
 800fdae:	6829      	ldr	r1, [r5, #0]
 800fdb0:	291d      	cmp	r1, #29
 800fdb2:	d82b      	bhi.n	800fe0c <__sflush_r+0xb8>
 800fdb4:	4a29      	ldr	r2, [pc, #164]	; (800fe5c <__sflush_r+0x108>)
 800fdb6:	410a      	asrs	r2, r1
 800fdb8:	07d6      	lsls	r6, r2, #31
 800fdba:	d427      	bmi.n	800fe0c <__sflush_r+0xb8>
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	6062      	str	r2, [r4, #4]
 800fdc0:	04d9      	lsls	r1, r3, #19
 800fdc2:	6922      	ldr	r2, [r4, #16]
 800fdc4:	6022      	str	r2, [r4, #0]
 800fdc6:	d504      	bpl.n	800fdd2 <__sflush_r+0x7e>
 800fdc8:	1c42      	adds	r2, r0, #1
 800fdca:	d101      	bne.n	800fdd0 <__sflush_r+0x7c>
 800fdcc:	682b      	ldr	r3, [r5, #0]
 800fdce:	b903      	cbnz	r3, 800fdd2 <__sflush_r+0x7e>
 800fdd0:	6560      	str	r0, [r4, #84]	; 0x54
 800fdd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdd4:	602f      	str	r7, [r5, #0]
 800fdd6:	2900      	cmp	r1, #0
 800fdd8:	d0c9      	beq.n	800fd6e <__sflush_r+0x1a>
 800fdda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdde:	4299      	cmp	r1, r3
 800fde0:	d002      	beq.n	800fde8 <__sflush_r+0x94>
 800fde2:	4628      	mov	r0, r5
 800fde4:	f7fe fd3a 	bl	800e85c <_free_r>
 800fde8:	2000      	movs	r0, #0
 800fdea:	6360      	str	r0, [r4, #52]	; 0x34
 800fdec:	e7c0      	b.n	800fd70 <__sflush_r+0x1c>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	47b0      	blx	r6
 800fdf4:	1c41      	adds	r1, r0, #1
 800fdf6:	d1c8      	bne.n	800fd8a <__sflush_r+0x36>
 800fdf8:	682b      	ldr	r3, [r5, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d0c5      	beq.n	800fd8a <__sflush_r+0x36>
 800fdfe:	2b1d      	cmp	r3, #29
 800fe00:	d001      	beq.n	800fe06 <__sflush_r+0xb2>
 800fe02:	2b16      	cmp	r3, #22
 800fe04:	d101      	bne.n	800fe0a <__sflush_r+0xb6>
 800fe06:	602f      	str	r7, [r5, #0]
 800fe08:	e7b1      	b.n	800fd6e <__sflush_r+0x1a>
 800fe0a:	89a3      	ldrh	r3, [r4, #12]
 800fe0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe10:	81a3      	strh	r3, [r4, #12]
 800fe12:	e7ad      	b.n	800fd70 <__sflush_r+0x1c>
 800fe14:	690f      	ldr	r7, [r1, #16]
 800fe16:	2f00      	cmp	r7, #0
 800fe18:	d0a9      	beq.n	800fd6e <__sflush_r+0x1a>
 800fe1a:	0793      	lsls	r3, r2, #30
 800fe1c:	680e      	ldr	r6, [r1, #0]
 800fe1e:	bf08      	it	eq
 800fe20:	694b      	ldreq	r3, [r1, #20]
 800fe22:	600f      	str	r7, [r1, #0]
 800fe24:	bf18      	it	ne
 800fe26:	2300      	movne	r3, #0
 800fe28:	eba6 0807 	sub.w	r8, r6, r7
 800fe2c:	608b      	str	r3, [r1, #8]
 800fe2e:	f1b8 0f00 	cmp.w	r8, #0
 800fe32:	dd9c      	ble.n	800fd6e <__sflush_r+0x1a>
 800fe34:	6a21      	ldr	r1, [r4, #32]
 800fe36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe38:	4643      	mov	r3, r8
 800fe3a:	463a      	mov	r2, r7
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	47b0      	blx	r6
 800fe40:	2800      	cmp	r0, #0
 800fe42:	dc06      	bgt.n	800fe52 <__sflush_r+0xfe>
 800fe44:	89a3      	ldrh	r3, [r4, #12]
 800fe46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe4a:	81a3      	strh	r3, [r4, #12]
 800fe4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe50:	e78e      	b.n	800fd70 <__sflush_r+0x1c>
 800fe52:	4407      	add	r7, r0
 800fe54:	eba8 0800 	sub.w	r8, r8, r0
 800fe58:	e7e9      	b.n	800fe2e <__sflush_r+0xda>
 800fe5a:	bf00      	nop
 800fe5c:	dfbffffe 	.word	0xdfbffffe

0800fe60 <_fflush_r>:
 800fe60:	b538      	push	{r3, r4, r5, lr}
 800fe62:	690b      	ldr	r3, [r1, #16]
 800fe64:	4605      	mov	r5, r0
 800fe66:	460c      	mov	r4, r1
 800fe68:	b913      	cbnz	r3, 800fe70 <_fflush_r+0x10>
 800fe6a:	2500      	movs	r5, #0
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	bd38      	pop	{r3, r4, r5, pc}
 800fe70:	b118      	cbz	r0, 800fe7a <_fflush_r+0x1a>
 800fe72:	6a03      	ldr	r3, [r0, #32]
 800fe74:	b90b      	cbnz	r3, 800fe7a <_fflush_r+0x1a>
 800fe76:	f7fd fcfd 	bl	800d874 <__sinit>
 800fe7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d0f3      	beq.n	800fe6a <_fflush_r+0xa>
 800fe82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe84:	07d0      	lsls	r0, r2, #31
 800fe86:	d404      	bmi.n	800fe92 <_fflush_r+0x32>
 800fe88:	0599      	lsls	r1, r3, #22
 800fe8a:	d402      	bmi.n	800fe92 <_fflush_r+0x32>
 800fe8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe8e:	f7fd fe52 	bl	800db36 <__retarget_lock_acquire_recursive>
 800fe92:	4628      	mov	r0, r5
 800fe94:	4621      	mov	r1, r4
 800fe96:	f7ff ff5d 	bl	800fd54 <__sflush_r>
 800fe9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe9c:	07da      	lsls	r2, r3, #31
 800fe9e:	4605      	mov	r5, r0
 800fea0:	d4e4      	bmi.n	800fe6c <_fflush_r+0xc>
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	059b      	lsls	r3, r3, #22
 800fea6:	d4e1      	bmi.n	800fe6c <_fflush_r+0xc>
 800fea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feaa:	f7fd fe45 	bl	800db38 <__retarget_lock_release_recursive>
 800feae:	e7dd      	b.n	800fe6c <_fflush_r+0xc>

0800feb0 <memmove>:
 800feb0:	4288      	cmp	r0, r1
 800feb2:	b510      	push	{r4, lr}
 800feb4:	eb01 0402 	add.w	r4, r1, r2
 800feb8:	d902      	bls.n	800fec0 <memmove+0x10>
 800feba:	4284      	cmp	r4, r0
 800febc:	4623      	mov	r3, r4
 800febe:	d807      	bhi.n	800fed0 <memmove+0x20>
 800fec0:	1e43      	subs	r3, r0, #1
 800fec2:	42a1      	cmp	r1, r4
 800fec4:	d008      	beq.n	800fed8 <memmove+0x28>
 800fec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800feca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fece:	e7f8      	b.n	800fec2 <memmove+0x12>
 800fed0:	4402      	add	r2, r0
 800fed2:	4601      	mov	r1, r0
 800fed4:	428a      	cmp	r2, r1
 800fed6:	d100      	bne.n	800feda <memmove+0x2a>
 800fed8:	bd10      	pop	{r4, pc}
 800feda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fee2:	e7f7      	b.n	800fed4 <memmove+0x24>

0800fee4 <_sbrk_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4d06      	ldr	r5, [pc, #24]	; (800ff00 <_sbrk_r+0x1c>)
 800fee8:	2300      	movs	r3, #0
 800feea:	4604      	mov	r4, r0
 800feec:	4608      	mov	r0, r1
 800feee:	602b      	str	r3, [r5, #0]
 800fef0:	f7f3 fb26 	bl	8003540 <_sbrk>
 800fef4:	1c43      	adds	r3, r0, #1
 800fef6:	d102      	bne.n	800fefe <_sbrk_r+0x1a>
 800fef8:	682b      	ldr	r3, [r5, #0]
 800fefa:	b103      	cbz	r3, 800fefe <_sbrk_r+0x1a>
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	bd38      	pop	{r3, r4, r5, pc}
 800ff00:	20002e14 	.word	0x20002e14

0800ff04 <__assert_func>:
 800ff04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff06:	4614      	mov	r4, r2
 800ff08:	461a      	mov	r2, r3
 800ff0a:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <__assert_func+0x2c>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	4605      	mov	r5, r0
 800ff10:	68d8      	ldr	r0, [r3, #12]
 800ff12:	b14c      	cbz	r4, 800ff28 <__assert_func+0x24>
 800ff14:	4b07      	ldr	r3, [pc, #28]	; (800ff34 <__assert_func+0x30>)
 800ff16:	9100      	str	r1, [sp, #0]
 800ff18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff1c:	4906      	ldr	r1, [pc, #24]	; (800ff38 <__assert_func+0x34>)
 800ff1e:	462b      	mov	r3, r5
 800ff20:	f000 f854 	bl	800ffcc <fiprintf>
 800ff24:	f000 f864 	bl	800fff0 <abort>
 800ff28:	4b04      	ldr	r3, [pc, #16]	; (800ff3c <__assert_func+0x38>)
 800ff2a:	461c      	mov	r4, r3
 800ff2c:	e7f3      	b.n	800ff16 <__assert_func+0x12>
 800ff2e:	bf00      	nop
 800ff30:	2000023c 	.word	0x2000023c
 800ff34:	08010fa5 	.word	0x08010fa5
 800ff38:	08010fb2 	.word	0x08010fb2
 800ff3c:	08010fe0 	.word	0x08010fe0

0800ff40 <_calloc_r>:
 800ff40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff42:	fba1 2402 	umull	r2, r4, r1, r2
 800ff46:	b94c      	cbnz	r4, 800ff5c <_calloc_r+0x1c>
 800ff48:	4611      	mov	r1, r2
 800ff4a:	9201      	str	r2, [sp, #4]
 800ff4c:	f7ff f852 	bl	800eff4 <_malloc_r>
 800ff50:	9a01      	ldr	r2, [sp, #4]
 800ff52:	4605      	mov	r5, r0
 800ff54:	b930      	cbnz	r0, 800ff64 <_calloc_r+0x24>
 800ff56:	4628      	mov	r0, r5
 800ff58:	b003      	add	sp, #12
 800ff5a:	bd30      	pop	{r4, r5, pc}
 800ff5c:	220c      	movs	r2, #12
 800ff5e:	6002      	str	r2, [r0, #0]
 800ff60:	2500      	movs	r5, #0
 800ff62:	e7f8      	b.n	800ff56 <_calloc_r+0x16>
 800ff64:	4621      	mov	r1, r4
 800ff66:	f7fd fd57 	bl	800da18 <memset>
 800ff6a:	e7f4      	b.n	800ff56 <_calloc_r+0x16>

0800ff6c <_realloc_r>:
 800ff6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff70:	4680      	mov	r8, r0
 800ff72:	4614      	mov	r4, r2
 800ff74:	460e      	mov	r6, r1
 800ff76:	b921      	cbnz	r1, 800ff82 <_realloc_r+0x16>
 800ff78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	f7ff b839 	b.w	800eff4 <_malloc_r>
 800ff82:	b92a      	cbnz	r2, 800ff90 <_realloc_r+0x24>
 800ff84:	f7fe fc6a 	bl	800e85c <_free_r>
 800ff88:	4625      	mov	r5, r4
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff90:	f000 f835 	bl	800fffe <_malloc_usable_size_r>
 800ff94:	4284      	cmp	r4, r0
 800ff96:	4607      	mov	r7, r0
 800ff98:	d802      	bhi.n	800ffa0 <_realloc_r+0x34>
 800ff9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff9e:	d812      	bhi.n	800ffc6 <_realloc_r+0x5a>
 800ffa0:	4621      	mov	r1, r4
 800ffa2:	4640      	mov	r0, r8
 800ffa4:	f7ff f826 	bl	800eff4 <_malloc_r>
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	d0ed      	beq.n	800ff8a <_realloc_r+0x1e>
 800ffae:	42bc      	cmp	r4, r7
 800ffb0:	4622      	mov	r2, r4
 800ffb2:	4631      	mov	r1, r6
 800ffb4:	bf28      	it	cs
 800ffb6:	463a      	movcs	r2, r7
 800ffb8:	f7fd fdbf 	bl	800db3a <memcpy>
 800ffbc:	4631      	mov	r1, r6
 800ffbe:	4640      	mov	r0, r8
 800ffc0:	f7fe fc4c 	bl	800e85c <_free_r>
 800ffc4:	e7e1      	b.n	800ff8a <_realloc_r+0x1e>
 800ffc6:	4635      	mov	r5, r6
 800ffc8:	e7df      	b.n	800ff8a <_realloc_r+0x1e>
	...

0800ffcc <fiprintf>:
 800ffcc:	b40e      	push	{r1, r2, r3}
 800ffce:	b503      	push	{r0, r1, lr}
 800ffd0:	4601      	mov	r1, r0
 800ffd2:	ab03      	add	r3, sp, #12
 800ffd4:	4805      	ldr	r0, [pc, #20]	; (800ffec <fiprintf+0x20>)
 800ffd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffda:	6800      	ldr	r0, [r0, #0]
 800ffdc:	9301      	str	r3, [sp, #4]
 800ffde:	f000 f83f 	bl	8010060 <_vfiprintf_r>
 800ffe2:	b002      	add	sp, #8
 800ffe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffe8:	b003      	add	sp, #12
 800ffea:	4770      	bx	lr
 800ffec:	2000023c 	.word	0x2000023c

0800fff0 <abort>:
 800fff0:	b508      	push	{r3, lr}
 800fff2:	2006      	movs	r0, #6
 800fff4:	f000 fa0c 	bl	8010410 <raise>
 800fff8:	2001      	movs	r0, #1
 800fffa:	f7f3 fa29 	bl	8003450 <_exit>

0800fffe <_malloc_usable_size_r>:
 800fffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010002:	1f18      	subs	r0, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	bfbc      	itt	lt
 8010008:	580b      	ldrlt	r3, [r1, r0]
 801000a:	18c0      	addlt	r0, r0, r3
 801000c:	4770      	bx	lr

0801000e <__sfputc_r>:
 801000e:	6893      	ldr	r3, [r2, #8]
 8010010:	3b01      	subs	r3, #1
 8010012:	2b00      	cmp	r3, #0
 8010014:	b410      	push	{r4}
 8010016:	6093      	str	r3, [r2, #8]
 8010018:	da08      	bge.n	801002c <__sfputc_r+0x1e>
 801001a:	6994      	ldr	r4, [r2, #24]
 801001c:	42a3      	cmp	r3, r4
 801001e:	db01      	blt.n	8010024 <__sfputc_r+0x16>
 8010020:	290a      	cmp	r1, #10
 8010022:	d103      	bne.n	801002c <__sfputc_r+0x1e>
 8010024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010028:	f000 b934 	b.w	8010294 <__swbuf_r>
 801002c:	6813      	ldr	r3, [r2, #0]
 801002e:	1c58      	adds	r0, r3, #1
 8010030:	6010      	str	r0, [r2, #0]
 8010032:	7019      	strb	r1, [r3, #0]
 8010034:	4608      	mov	r0, r1
 8010036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801003a:	4770      	bx	lr

0801003c <__sfputs_r>:
 801003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003e:	4606      	mov	r6, r0
 8010040:	460f      	mov	r7, r1
 8010042:	4614      	mov	r4, r2
 8010044:	18d5      	adds	r5, r2, r3
 8010046:	42ac      	cmp	r4, r5
 8010048:	d101      	bne.n	801004e <__sfputs_r+0x12>
 801004a:	2000      	movs	r0, #0
 801004c:	e007      	b.n	801005e <__sfputs_r+0x22>
 801004e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010052:	463a      	mov	r2, r7
 8010054:	4630      	mov	r0, r6
 8010056:	f7ff ffda 	bl	801000e <__sfputc_r>
 801005a:	1c43      	adds	r3, r0, #1
 801005c:	d1f3      	bne.n	8010046 <__sfputs_r+0xa>
 801005e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010060 <_vfiprintf_r>:
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	460d      	mov	r5, r1
 8010066:	b09d      	sub	sp, #116	; 0x74
 8010068:	4614      	mov	r4, r2
 801006a:	4698      	mov	r8, r3
 801006c:	4606      	mov	r6, r0
 801006e:	b118      	cbz	r0, 8010078 <_vfiprintf_r+0x18>
 8010070:	6a03      	ldr	r3, [r0, #32]
 8010072:	b90b      	cbnz	r3, 8010078 <_vfiprintf_r+0x18>
 8010074:	f7fd fbfe 	bl	800d874 <__sinit>
 8010078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801007a:	07d9      	lsls	r1, r3, #31
 801007c:	d405      	bmi.n	801008a <_vfiprintf_r+0x2a>
 801007e:	89ab      	ldrh	r3, [r5, #12]
 8010080:	059a      	lsls	r2, r3, #22
 8010082:	d402      	bmi.n	801008a <_vfiprintf_r+0x2a>
 8010084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010086:	f7fd fd56 	bl	800db36 <__retarget_lock_acquire_recursive>
 801008a:	89ab      	ldrh	r3, [r5, #12]
 801008c:	071b      	lsls	r3, r3, #28
 801008e:	d501      	bpl.n	8010094 <_vfiprintf_r+0x34>
 8010090:	692b      	ldr	r3, [r5, #16]
 8010092:	b99b      	cbnz	r3, 80100bc <_vfiprintf_r+0x5c>
 8010094:	4629      	mov	r1, r5
 8010096:	4630      	mov	r0, r6
 8010098:	f000 f93a 	bl	8010310 <__swsetup_r>
 801009c:	b170      	cbz	r0, 80100bc <_vfiprintf_r+0x5c>
 801009e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100a0:	07dc      	lsls	r4, r3, #31
 80100a2:	d504      	bpl.n	80100ae <_vfiprintf_r+0x4e>
 80100a4:	f04f 30ff 	mov.w	r0, #4294967295
 80100a8:	b01d      	add	sp, #116	; 0x74
 80100aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ae:	89ab      	ldrh	r3, [r5, #12]
 80100b0:	0598      	lsls	r0, r3, #22
 80100b2:	d4f7      	bmi.n	80100a4 <_vfiprintf_r+0x44>
 80100b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100b6:	f7fd fd3f 	bl	800db38 <__retarget_lock_release_recursive>
 80100ba:	e7f3      	b.n	80100a4 <_vfiprintf_r+0x44>
 80100bc:	2300      	movs	r3, #0
 80100be:	9309      	str	r3, [sp, #36]	; 0x24
 80100c0:	2320      	movs	r3, #32
 80100c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80100ca:	2330      	movs	r3, #48	; 0x30
 80100cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010280 <_vfiprintf_r+0x220>
 80100d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100d4:	f04f 0901 	mov.w	r9, #1
 80100d8:	4623      	mov	r3, r4
 80100da:	469a      	mov	sl, r3
 80100dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100e0:	b10a      	cbz	r2, 80100e6 <_vfiprintf_r+0x86>
 80100e2:	2a25      	cmp	r2, #37	; 0x25
 80100e4:	d1f9      	bne.n	80100da <_vfiprintf_r+0x7a>
 80100e6:	ebba 0b04 	subs.w	fp, sl, r4
 80100ea:	d00b      	beq.n	8010104 <_vfiprintf_r+0xa4>
 80100ec:	465b      	mov	r3, fp
 80100ee:	4622      	mov	r2, r4
 80100f0:	4629      	mov	r1, r5
 80100f2:	4630      	mov	r0, r6
 80100f4:	f7ff ffa2 	bl	801003c <__sfputs_r>
 80100f8:	3001      	adds	r0, #1
 80100fa:	f000 80a9 	beq.w	8010250 <_vfiprintf_r+0x1f0>
 80100fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010100:	445a      	add	r2, fp
 8010102:	9209      	str	r2, [sp, #36]	; 0x24
 8010104:	f89a 3000 	ldrb.w	r3, [sl]
 8010108:	2b00      	cmp	r3, #0
 801010a:	f000 80a1 	beq.w	8010250 <_vfiprintf_r+0x1f0>
 801010e:	2300      	movs	r3, #0
 8010110:	f04f 32ff 	mov.w	r2, #4294967295
 8010114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010118:	f10a 0a01 	add.w	sl, sl, #1
 801011c:	9304      	str	r3, [sp, #16]
 801011e:	9307      	str	r3, [sp, #28]
 8010120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010124:	931a      	str	r3, [sp, #104]	; 0x68
 8010126:	4654      	mov	r4, sl
 8010128:	2205      	movs	r2, #5
 801012a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801012e:	4854      	ldr	r0, [pc, #336]	; (8010280 <_vfiprintf_r+0x220>)
 8010130:	f7f0 f86e 	bl	8000210 <memchr>
 8010134:	9a04      	ldr	r2, [sp, #16]
 8010136:	b9d8      	cbnz	r0, 8010170 <_vfiprintf_r+0x110>
 8010138:	06d1      	lsls	r1, r2, #27
 801013a:	bf44      	itt	mi
 801013c:	2320      	movmi	r3, #32
 801013e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010142:	0713      	lsls	r3, r2, #28
 8010144:	bf44      	itt	mi
 8010146:	232b      	movmi	r3, #43	; 0x2b
 8010148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801014c:	f89a 3000 	ldrb.w	r3, [sl]
 8010150:	2b2a      	cmp	r3, #42	; 0x2a
 8010152:	d015      	beq.n	8010180 <_vfiprintf_r+0x120>
 8010154:	9a07      	ldr	r2, [sp, #28]
 8010156:	4654      	mov	r4, sl
 8010158:	2000      	movs	r0, #0
 801015a:	f04f 0c0a 	mov.w	ip, #10
 801015e:	4621      	mov	r1, r4
 8010160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010164:	3b30      	subs	r3, #48	; 0x30
 8010166:	2b09      	cmp	r3, #9
 8010168:	d94d      	bls.n	8010206 <_vfiprintf_r+0x1a6>
 801016a:	b1b0      	cbz	r0, 801019a <_vfiprintf_r+0x13a>
 801016c:	9207      	str	r2, [sp, #28]
 801016e:	e014      	b.n	801019a <_vfiprintf_r+0x13a>
 8010170:	eba0 0308 	sub.w	r3, r0, r8
 8010174:	fa09 f303 	lsl.w	r3, r9, r3
 8010178:	4313      	orrs	r3, r2
 801017a:	9304      	str	r3, [sp, #16]
 801017c:	46a2      	mov	sl, r4
 801017e:	e7d2      	b.n	8010126 <_vfiprintf_r+0xc6>
 8010180:	9b03      	ldr	r3, [sp, #12]
 8010182:	1d19      	adds	r1, r3, #4
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	9103      	str	r1, [sp, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	bfbb      	ittet	lt
 801018c:	425b      	neglt	r3, r3
 801018e:	f042 0202 	orrlt.w	r2, r2, #2
 8010192:	9307      	strge	r3, [sp, #28]
 8010194:	9307      	strlt	r3, [sp, #28]
 8010196:	bfb8      	it	lt
 8010198:	9204      	strlt	r2, [sp, #16]
 801019a:	7823      	ldrb	r3, [r4, #0]
 801019c:	2b2e      	cmp	r3, #46	; 0x2e
 801019e:	d10c      	bne.n	80101ba <_vfiprintf_r+0x15a>
 80101a0:	7863      	ldrb	r3, [r4, #1]
 80101a2:	2b2a      	cmp	r3, #42	; 0x2a
 80101a4:	d134      	bne.n	8010210 <_vfiprintf_r+0x1b0>
 80101a6:	9b03      	ldr	r3, [sp, #12]
 80101a8:	1d1a      	adds	r2, r3, #4
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	9203      	str	r2, [sp, #12]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	bfb8      	it	lt
 80101b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80101b6:	3402      	adds	r4, #2
 80101b8:	9305      	str	r3, [sp, #20]
 80101ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010290 <_vfiprintf_r+0x230>
 80101be:	7821      	ldrb	r1, [r4, #0]
 80101c0:	2203      	movs	r2, #3
 80101c2:	4650      	mov	r0, sl
 80101c4:	f7f0 f824 	bl	8000210 <memchr>
 80101c8:	b138      	cbz	r0, 80101da <_vfiprintf_r+0x17a>
 80101ca:	9b04      	ldr	r3, [sp, #16]
 80101cc:	eba0 000a 	sub.w	r0, r0, sl
 80101d0:	2240      	movs	r2, #64	; 0x40
 80101d2:	4082      	lsls	r2, r0
 80101d4:	4313      	orrs	r3, r2
 80101d6:	3401      	adds	r4, #1
 80101d8:	9304      	str	r3, [sp, #16]
 80101da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101de:	4829      	ldr	r0, [pc, #164]	; (8010284 <_vfiprintf_r+0x224>)
 80101e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101e4:	2206      	movs	r2, #6
 80101e6:	f7f0 f813 	bl	8000210 <memchr>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	d03f      	beq.n	801026e <_vfiprintf_r+0x20e>
 80101ee:	4b26      	ldr	r3, [pc, #152]	; (8010288 <_vfiprintf_r+0x228>)
 80101f0:	bb1b      	cbnz	r3, 801023a <_vfiprintf_r+0x1da>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	3307      	adds	r3, #7
 80101f6:	f023 0307 	bic.w	r3, r3, #7
 80101fa:	3308      	adds	r3, #8
 80101fc:	9303      	str	r3, [sp, #12]
 80101fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010200:	443b      	add	r3, r7
 8010202:	9309      	str	r3, [sp, #36]	; 0x24
 8010204:	e768      	b.n	80100d8 <_vfiprintf_r+0x78>
 8010206:	fb0c 3202 	mla	r2, ip, r2, r3
 801020a:	460c      	mov	r4, r1
 801020c:	2001      	movs	r0, #1
 801020e:	e7a6      	b.n	801015e <_vfiprintf_r+0xfe>
 8010210:	2300      	movs	r3, #0
 8010212:	3401      	adds	r4, #1
 8010214:	9305      	str	r3, [sp, #20]
 8010216:	4619      	mov	r1, r3
 8010218:	f04f 0c0a 	mov.w	ip, #10
 801021c:	4620      	mov	r0, r4
 801021e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010222:	3a30      	subs	r2, #48	; 0x30
 8010224:	2a09      	cmp	r2, #9
 8010226:	d903      	bls.n	8010230 <_vfiprintf_r+0x1d0>
 8010228:	2b00      	cmp	r3, #0
 801022a:	d0c6      	beq.n	80101ba <_vfiprintf_r+0x15a>
 801022c:	9105      	str	r1, [sp, #20]
 801022e:	e7c4      	b.n	80101ba <_vfiprintf_r+0x15a>
 8010230:	fb0c 2101 	mla	r1, ip, r1, r2
 8010234:	4604      	mov	r4, r0
 8010236:	2301      	movs	r3, #1
 8010238:	e7f0      	b.n	801021c <_vfiprintf_r+0x1bc>
 801023a:	ab03      	add	r3, sp, #12
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	462a      	mov	r2, r5
 8010240:	4b12      	ldr	r3, [pc, #72]	; (801028c <_vfiprintf_r+0x22c>)
 8010242:	a904      	add	r1, sp, #16
 8010244:	4630      	mov	r0, r6
 8010246:	f7fc fec3 	bl	800cfd0 <_printf_float>
 801024a:	4607      	mov	r7, r0
 801024c:	1c78      	adds	r0, r7, #1
 801024e:	d1d6      	bne.n	80101fe <_vfiprintf_r+0x19e>
 8010250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010252:	07d9      	lsls	r1, r3, #31
 8010254:	d405      	bmi.n	8010262 <_vfiprintf_r+0x202>
 8010256:	89ab      	ldrh	r3, [r5, #12]
 8010258:	059a      	lsls	r2, r3, #22
 801025a:	d402      	bmi.n	8010262 <_vfiprintf_r+0x202>
 801025c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801025e:	f7fd fc6b 	bl	800db38 <__retarget_lock_release_recursive>
 8010262:	89ab      	ldrh	r3, [r5, #12]
 8010264:	065b      	lsls	r3, r3, #25
 8010266:	f53f af1d 	bmi.w	80100a4 <_vfiprintf_r+0x44>
 801026a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801026c:	e71c      	b.n	80100a8 <_vfiprintf_r+0x48>
 801026e:	ab03      	add	r3, sp, #12
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	462a      	mov	r2, r5
 8010274:	4b05      	ldr	r3, [pc, #20]	; (801028c <_vfiprintf_r+0x22c>)
 8010276:	a904      	add	r1, sp, #16
 8010278:	4630      	mov	r0, r6
 801027a:	f7fd f94d 	bl	800d518 <_printf_i>
 801027e:	e7e4      	b.n	801024a <_vfiprintf_r+0x1ea>
 8010280:	08010f94 	.word	0x08010f94
 8010284:	08010f9e 	.word	0x08010f9e
 8010288:	0800cfd1 	.word	0x0800cfd1
 801028c:	0801003d 	.word	0x0801003d
 8010290:	08010f9a 	.word	0x08010f9a

08010294 <__swbuf_r>:
 8010294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010296:	460e      	mov	r6, r1
 8010298:	4614      	mov	r4, r2
 801029a:	4605      	mov	r5, r0
 801029c:	b118      	cbz	r0, 80102a6 <__swbuf_r+0x12>
 801029e:	6a03      	ldr	r3, [r0, #32]
 80102a0:	b90b      	cbnz	r3, 80102a6 <__swbuf_r+0x12>
 80102a2:	f7fd fae7 	bl	800d874 <__sinit>
 80102a6:	69a3      	ldr	r3, [r4, #24]
 80102a8:	60a3      	str	r3, [r4, #8]
 80102aa:	89a3      	ldrh	r3, [r4, #12]
 80102ac:	071a      	lsls	r2, r3, #28
 80102ae:	d525      	bpl.n	80102fc <__swbuf_r+0x68>
 80102b0:	6923      	ldr	r3, [r4, #16]
 80102b2:	b31b      	cbz	r3, 80102fc <__swbuf_r+0x68>
 80102b4:	6823      	ldr	r3, [r4, #0]
 80102b6:	6922      	ldr	r2, [r4, #16]
 80102b8:	1a98      	subs	r0, r3, r2
 80102ba:	6963      	ldr	r3, [r4, #20]
 80102bc:	b2f6      	uxtb	r6, r6
 80102be:	4283      	cmp	r3, r0
 80102c0:	4637      	mov	r7, r6
 80102c2:	dc04      	bgt.n	80102ce <__swbuf_r+0x3a>
 80102c4:	4621      	mov	r1, r4
 80102c6:	4628      	mov	r0, r5
 80102c8:	f7ff fdca 	bl	800fe60 <_fflush_r>
 80102cc:	b9e0      	cbnz	r0, 8010308 <__swbuf_r+0x74>
 80102ce:	68a3      	ldr	r3, [r4, #8]
 80102d0:	3b01      	subs	r3, #1
 80102d2:	60a3      	str	r3, [r4, #8]
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	1c5a      	adds	r2, r3, #1
 80102d8:	6022      	str	r2, [r4, #0]
 80102da:	701e      	strb	r6, [r3, #0]
 80102dc:	6962      	ldr	r2, [r4, #20]
 80102de:	1c43      	adds	r3, r0, #1
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d004      	beq.n	80102ee <__swbuf_r+0x5a>
 80102e4:	89a3      	ldrh	r3, [r4, #12]
 80102e6:	07db      	lsls	r3, r3, #31
 80102e8:	d506      	bpl.n	80102f8 <__swbuf_r+0x64>
 80102ea:	2e0a      	cmp	r6, #10
 80102ec:	d104      	bne.n	80102f8 <__swbuf_r+0x64>
 80102ee:	4621      	mov	r1, r4
 80102f0:	4628      	mov	r0, r5
 80102f2:	f7ff fdb5 	bl	800fe60 <_fflush_r>
 80102f6:	b938      	cbnz	r0, 8010308 <__swbuf_r+0x74>
 80102f8:	4638      	mov	r0, r7
 80102fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102fc:	4621      	mov	r1, r4
 80102fe:	4628      	mov	r0, r5
 8010300:	f000 f806 	bl	8010310 <__swsetup_r>
 8010304:	2800      	cmp	r0, #0
 8010306:	d0d5      	beq.n	80102b4 <__swbuf_r+0x20>
 8010308:	f04f 37ff 	mov.w	r7, #4294967295
 801030c:	e7f4      	b.n	80102f8 <__swbuf_r+0x64>
	...

08010310 <__swsetup_r>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	4b2a      	ldr	r3, [pc, #168]	; (80103bc <__swsetup_r+0xac>)
 8010314:	4605      	mov	r5, r0
 8010316:	6818      	ldr	r0, [r3, #0]
 8010318:	460c      	mov	r4, r1
 801031a:	b118      	cbz	r0, 8010324 <__swsetup_r+0x14>
 801031c:	6a03      	ldr	r3, [r0, #32]
 801031e:	b90b      	cbnz	r3, 8010324 <__swsetup_r+0x14>
 8010320:	f7fd faa8 	bl	800d874 <__sinit>
 8010324:	89a3      	ldrh	r3, [r4, #12]
 8010326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801032a:	0718      	lsls	r0, r3, #28
 801032c:	d422      	bmi.n	8010374 <__swsetup_r+0x64>
 801032e:	06d9      	lsls	r1, r3, #27
 8010330:	d407      	bmi.n	8010342 <__swsetup_r+0x32>
 8010332:	2309      	movs	r3, #9
 8010334:	602b      	str	r3, [r5, #0]
 8010336:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801033a:	81a3      	strh	r3, [r4, #12]
 801033c:	f04f 30ff 	mov.w	r0, #4294967295
 8010340:	e034      	b.n	80103ac <__swsetup_r+0x9c>
 8010342:	0758      	lsls	r0, r3, #29
 8010344:	d512      	bpl.n	801036c <__swsetup_r+0x5c>
 8010346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010348:	b141      	cbz	r1, 801035c <__swsetup_r+0x4c>
 801034a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801034e:	4299      	cmp	r1, r3
 8010350:	d002      	beq.n	8010358 <__swsetup_r+0x48>
 8010352:	4628      	mov	r0, r5
 8010354:	f7fe fa82 	bl	800e85c <_free_r>
 8010358:	2300      	movs	r3, #0
 801035a:	6363      	str	r3, [r4, #52]	; 0x34
 801035c:	89a3      	ldrh	r3, [r4, #12]
 801035e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010362:	81a3      	strh	r3, [r4, #12]
 8010364:	2300      	movs	r3, #0
 8010366:	6063      	str	r3, [r4, #4]
 8010368:	6923      	ldr	r3, [r4, #16]
 801036a:	6023      	str	r3, [r4, #0]
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	f043 0308 	orr.w	r3, r3, #8
 8010372:	81a3      	strh	r3, [r4, #12]
 8010374:	6923      	ldr	r3, [r4, #16]
 8010376:	b94b      	cbnz	r3, 801038c <__swsetup_r+0x7c>
 8010378:	89a3      	ldrh	r3, [r4, #12]
 801037a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801037e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010382:	d003      	beq.n	801038c <__swsetup_r+0x7c>
 8010384:	4621      	mov	r1, r4
 8010386:	4628      	mov	r0, r5
 8010388:	f000 f884 	bl	8010494 <__smakebuf_r>
 801038c:	89a0      	ldrh	r0, [r4, #12]
 801038e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010392:	f010 0301 	ands.w	r3, r0, #1
 8010396:	d00a      	beq.n	80103ae <__swsetup_r+0x9e>
 8010398:	2300      	movs	r3, #0
 801039a:	60a3      	str	r3, [r4, #8]
 801039c:	6963      	ldr	r3, [r4, #20]
 801039e:	425b      	negs	r3, r3
 80103a0:	61a3      	str	r3, [r4, #24]
 80103a2:	6923      	ldr	r3, [r4, #16]
 80103a4:	b943      	cbnz	r3, 80103b8 <__swsetup_r+0xa8>
 80103a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80103aa:	d1c4      	bne.n	8010336 <__swsetup_r+0x26>
 80103ac:	bd38      	pop	{r3, r4, r5, pc}
 80103ae:	0781      	lsls	r1, r0, #30
 80103b0:	bf58      	it	pl
 80103b2:	6963      	ldrpl	r3, [r4, #20]
 80103b4:	60a3      	str	r3, [r4, #8]
 80103b6:	e7f4      	b.n	80103a2 <__swsetup_r+0x92>
 80103b8:	2000      	movs	r0, #0
 80103ba:	e7f7      	b.n	80103ac <__swsetup_r+0x9c>
 80103bc:	2000023c 	.word	0x2000023c

080103c0 <_raise_r>:
 80103c0:	291f      	cmp	r1, #31
 80103c2:	b538      	push	{r3, r4, r5, lr}
 80103c4:	4604      	mov	r4, r0
 80103c6:	460d      	mov	r5, r1
 80103c8:	d904      	bls.n	80103d4 <_raise_r+0x14>
 80103ca:	2316      	movs	r3, #22
 80103cc:	6003      	str	r3, [r0, #0]
 80103ce:	f04f 30ff 	mov.w	r0, #4294967295
 80103d2:	bd38      	pop	{r3, r4, r5, pc}
 80103d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80103d6:	b112      	cbz	r2, 80103de <_raise_r+0x1e>
 80103d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103dc:	b94b      	cbnz	r3, 80103f2 <_raise_r+0x32>
 80103de:	4620      	mov	r0, r4
 80103e0:	f000 f830 	bl	8010444 <_getpid_r>
 80103e4:	462a      	mov	r2, r5
 80103e6:	4601      	mov	r1, r0
 80103e8:	4620      	mov	r0, r4
 80103ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103ee:	f000 b817 	b.w	8010420 <_kill_r>
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d00a      	beq.n	801040c <_raise_r+0x4c>
 80103f6:	1c59      	adds	r1, r3, #1
 80103f8:	d103      	bne.n	8010402 <_raise_r+0x42>
 80103fa:	2316      	movs	r3, #22
 80103fc:	6003      	str	r3, [r0, #0]
 80103fe:	2001      	movs	r0, #1
 8010400:	e7e7      	b.n	80103d2 <_raise_r+0x12>
 8010402:	2400      	movs	r4, #0
 8010404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010408:	4628      	mov	r0, r5
 801040a:	4798      	blx	r3
 801040c:	2000      	movs	r0, #0
 801040e:	e7e0      	b.n	80103d2 <_raise_r+0x12>

08010410 <raise>:
 8010410:	4b02      	ldr	r3, [pc, #8]	; (801041c <raise+0xc>)
 8010412:	4601      	mov	r1, r0
 8010414:	6818      	ldr	r0, [r3, #0]
 8010416:	f7ff bfd3 	b.w	80103c0 <_raise_r>
 801041a:	bf00      	nop
 801041c:	2000023c 	.word	0x2000023c

08010420 <_kill_r>:
 8010420:	b538      	push	{r3, r4, r5, lr}
 8010422:	4d07      	ldr	r5, [pc, #28]	; (8010440 <_kill_r+0x20>)
 8010424:	2300      	movs	r3, #0
 8010426:	4604      	mov	r4, r0
 8010428:	4608      	mov	r0, r1
 801042a:	4611      	mov	r1, r2
 801042c:	602b      	str	r3, [r5, #0]
 801042e:	f7f2 ffff 	bl	8003430 <_kill>
 8010432:	1c43      	adds	r3, r0, #1
 8010434:	d102      	bne.n	801043c <_kill_r+0x1c>
 8010436:	682b      	ldr	r3, [r5, #0]
 8010438:	b103      	cbz	r3, 801043c <_kill_r+0x1c>
 801043a:	6023      	str	r3, [r4, #0]
 801043c:	bd38      	pop	{r3, r4, r5, pc}
 801043e:	bf00      	nop
 8010440:	20002e14 	.word	0x20002e14

08010444 <_getpid_r>:
 8010444:	f7f2 bfec 	b.w	8003420 <_getpid>

08010448 <__swhatbuf_r>:
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	460c      	mov	r4, r1
 801044c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010450:	2900      	cmp	r1, #0
 8010452:	b096      	sub	sp, #88	; 0x58
 8010454:	4615      	mov	r5, r2
 8010456:	461e      	mov	r6, r3
 8010458:	da0d      	bge.n	8010476 <__swhatbuf_r+0x2e>
 801045a:	89a3      	ldrh	r3, [r4, #12]
 801045c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010460:	f04f 0100 	mov.w	r1, #0
 8010464:	bf0c      	ite	eq
 8010466:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801046a:	2340      	movne	r3, #64	; 0x40
 801046c:	2000      	movs	r0, #0
 801046e:	6031      	str	r1, [r6, #0]
 8010470:	602b      	str	r3, [r5, #0]
 8010472:	b016      	add	sp, #88	; 0x58
 8010474:	bd70      	pop	{r4, r5, r6, pc}
 8010476:	466a      	mov	r2, sp
 8010478:	f000 f848 	bl	801050c <_fstat_r>
 801047c:	2800      	cmp	r0, #0
 801047e:	dbec      	blt.n	801045a <__swhatbuf_r+0x12>
 8010480:	9901      	ldr	r1, [sp, #4]
 8010482:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010486:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801048a:	4259      	negs	r1, r3
 801048c:	4159      	adcs	r1, r3
 801048e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010492:	e7eb      	b.n	801046c <__swhatbuf_r+0x24>

08010494 <__smakebuf_r>:
 8010494:	898b      	ldrh	r3, [r1, #12]
 8010496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010498:	079d      	lsls	r5, r3, #30
 801049a:	4606      	mov	r6, r0
 801049c:	460c      	mov	r4, r1
 801049e:	d507      	bpl.n	80104b0 <__smakebuf_r+0x1c>
 80104a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80104a4:	6023      	str	r3, [r4, #0]
 80104a6:	6123      	str	r3, [r4, #16]
 80104a8:	2301      	movs	r3, #1
 80104aa:	6163      	str	r3, [r4, #20]
 80104ac:	b002      	add	sp, #8
 80104ae:	bd70      	pop	{r4, r5, r6, pc}
 80104b0:	ab01      	add	r3, sp, #4
 80104b2:	466a      	mov	r2, sp
 80104b4:	f7ff ffc8 	bl	8010448 <__swhatbuf_r>
 80104b8:	9900      	ldr	r1, [sp, #0]
 80104ba:	4605      	mov	r5, r0
 80104bc:	4630      	mov	r0, r6
 80104be:	f7fe fd99 	bl	800eff4 <_malloc_r>
 80104c2:	b948      	cbnz	r0, 80104d8 <__smakebuf_r+0x44>
 80104c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104c8:	059a      	lsls	r2, r3, #22
 80104ca:	d4ef      	bmi.n	80104ac <__smakebuf_r+0x18>
 80104cc:	f023 0303 	bic.w	r3, r3, #3
 80104d0:	f043 0302 	orr.w	r3, r3, #2
 80104d4:	81a3      	strh	r3, [r4, #12]
 80104d6:	e7e3      	b.n	80104a0 <__smakebuf_r+0xc>
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	6020      	str	r0, [r4, #0]
 80104dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104e0:	81a3      	strh	r3, [r4, #12]
 80104e2:	9b00      	ldr	r3, [sp, #0]
 80104e4:	6163      	str	r3, [r4, #20]
 80104e6:	9b01      	ldr	r3, [sp, #4]
 80104e8:	6120      	str	r0, [r4, #16]
 80104ea:	b15b      	cbz	r3, 8010504 <__smakebuf_r+0x70>
 80104ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104f0:	4630      	mov	r0, r6
 80104f2:	f000 f81d 	bl	8010530 <_isatty_r>
 80104f6:	b128      	cbz	r0, 8010504 <__smakebuf_r+0x70>
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	f023 0303 	bic.w	r3, r3, #3
 80104fe:	f043 0301 	orr.w	r3, r3, #1
 8010502:	81a3      	strh	r3, [r4, #12]
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	431d      	orrs	r5, r3
 8010508:	81a5      	strh	r5, [r4, #12]
 801050a:	e7cf      	b.n	80104ac <__smakebuf_r+0x18>

0801050c <_fstat_r>:
 801050c:	b538      	push	{r3, r4, r5, lr}
 801050e:	4d07      	ldr	r5, [pc, #28]	; (801052c <_fstat_r+0x20>)
 8010510:	2300      	movs	r3, #0
 8010512:	4604      	mov	r4, r0
 8010514:	4608      	mov	r0, r1
 8010516:	4611      	mov	r1, r2
 8010518:	602b      	str	r3, [r5, #0]
 801051a:	f7f2 ffe8 	bl	80034ee <_fstat>
 801051e:	1c43      	adds	r3, r0, #1
 8010520:	d102      	bne.n	8010528 <_fstat_r+0x1c>
 8010522:	682b      	ldr	r3, [r5, #0]
 8010524:	b103      	cbz	r3, 8010528 <_fstat_r+0x1c>
 8010526:	6023      	str	r3, [r4, #0]
 8010528:	bd38      	pop	{r3, r4, r5, pc}
 801052a:	bf00      	nop
 801052c:	20002e14 	.word	0x20002e14

08010530 <_isatty_r>:
 8010530:	b538      	push	{r3, r4, r5, lr}
 8010532:	4d06      	ldr	r5, [pc, #24]	; (801054c <_isatty_r+0x1c>)
 8010534:	2300      	movs	r3, #0
 8010536:	4604      	mov	r4, r0
 8010538:	4608      	mov	r0, r1
 801053a:	602b      	str	r3, [r5, #0]
 801053c:	f7f2 ffe7 	bl	800350e <_isatty>
 8010540:	1c43      	adds	r3, r0, #1
 8010542:	d102      	bne.n	801054a <_isatty_r+0x1a>
 8010544:	682b      	ldr	r3, [r5, #0]
 8010546:	b103      	cbz	r3, 801054a <_isatty_r+0x1a>
 8010548:	6023      	str	r3, [r4, #0]
 801054a:	bd38      	pop	{r3, r4, r5, pc}
 801054c:	20002e14 	.word	0x20002e14

08010550 <_init>:
 8010550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010552:	bf00      	nop
 8010554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010556:	bc08      	pop	{r3}
 8010558:	469e      	mov	lr, r3
 801055a:	4770      	bx	lr

0801055c <_fini>:
 801055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055e:	bf00      	nop
 8010560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010562:	bc08      	pop	{r3}
 8010564:	469e      	mov	lr, r3
 8010566:	4770      	bx	lr
