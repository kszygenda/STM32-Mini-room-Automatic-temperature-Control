
Mini_room_Automatic_temperature_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007998  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08007b68  08007b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d40  08007d40  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007d40  08007d40  00017d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d48  08007d48  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d4c  08007d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200000b0  08007e00  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08007e00  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ef5  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ea  00000000  00000000  00035018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd1  00000000  00000000  000392d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002847a  00000000  00000000  0003a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a36  00000000  00000000  00062523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f693a  00000000  00000000  00079f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005070  00000000  00000000  00170894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00175904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b50 	.word	0x08007b50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08007b50 	.word	0x08007b50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b970 	b.w	8000f44 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	460d      	mov	r5, r1
 8000c84:	4604      	mov	r4, r0
 8000c86:	460f      	mov	r7, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14a      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4694      	mov	ip, r2
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0xe2>
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	b143      	cbz	r3, 8000caa <__udivmoddi4+0x2e>
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ca0:	409f      	lsls	r7, r3
 8000ca2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	409c      	lsls	r4, r3
 8000caa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cae:	fa1f f58c 	uxth.w	r5, ip
 8000cb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb6:	0c22      	lsrs	r2, r4, #16
 8000cb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc0:	fb01 f005 	mul.w	r0, r1, r5
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x62>
 8000cc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ccc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd0:	f080 811c 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f240 8119 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cee:	fb00 f505 	mul.w	r5, r0, r5
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x90>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfe:	f080 8107 	bcs.w	8000f10 <__udivmoddi4+0x294>
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	f240 8104 	bls.w	8000f10 <__udivmoddi4+0x294>
 8000d08:	4464      	add	r4, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11e      	cbz	r6, 8000d1e <__udivmoddi4+0xa2>
 8000d16:	40dc      	lsrs	r4, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0xbc>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80ed 	beq.w	8000f06 <__udivmoddi4+0x28a>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d149      	bne.n	8000dd4 <__udivmoddi4+0x158>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xce>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2be>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	4617      	mov	r7, r2
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d0e2      	beq.n	8000d1e <__udivmoddi4+0xa2>
 8000d58:	e9c6 4700 	strd	r4, r7, [r6]
 8000d5c:	e7df      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xe6>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f382 	clz	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	2101      	movs	r1, #1
 8000d78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d80:	0c22      	lsrs	r2, r4, #16
 8000d82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d86:	fb0e f005 	mul.w	r0, lr, r5
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	f200 80cb 	bhi.w	8000f34 <__udivmoddi4+0x2b8>
 8000d9e:	4645      	mov	r5, r8
 8000da0:	1a12      	subs	r2, r2, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db0:	fb0e fe00 	mul.w	lr, lr, r0
 8000db4:	45a6      	cmp	lr, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x14e>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x14c>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f200 80bb 	bhi.w	8000f3e <__udivmoddi4+0x2c2>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd2:	e79f      	b.n	8000d14 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0720 	rsb	r7, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de2:	fa05 f401 	lsl.w	r4, r5, r1
 8000de6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dea:	40fd      	lsrs	r5, r7
 8000dec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e04:	fb08 f50e 	mul.w	r5, r8, lr
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e1c:	f080 8088 	bcs.w	8000f30 <__udivmoddi4+0x2b4>
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	f240 8085 	bls.w	8000f30 <__udivmoddi4+0x2b4>
 8000e26:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2a:	4464      	add	r4, ip
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	b29d      	uxth	r5, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e4c:	d26c      	bcs.n	8000f28 <__udivmoddi4+0x2ac>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	d96a      	bls.n	8000f28 <__udivmoddi4+0x2ac>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	42ac      	cmp	r4, r5
 8000e64:	46c8      	mov	r8, r9
 8000e66:	46ae      	mov	lr, r5
 8000e68:	d356      	bcc.n	8000f18 <__udivmoddi4+0x29c>
 8000e6a:	d053      	beq.n	8000f14 <__udivmoddi4+0x298>
 8000e6c:	b156      	cbz	r6, 8000e84 <__udivmoddi4+0x208>
 8000e6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e72:	eb64 040e 	sbc.w	r4, r4, lr
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	40ca      	lsrs	r2, r1
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	4317      	orrs	r7, r2
 8000e80:	e9c6 7400 	strd	r7, r4, [r6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	f1c3 0120 	rsb	r1, r3, #32
 8000e90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e94:	fa20 f201 	lsr.w	r2, r0, r1
 8000e98:	fa25 f101 	lsr.w	r1, r5, r1
 8000e9c:	409d      	lsls	r5, r3
 8000e9e:	432a      	orrs	r2, r5
 8000ea0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb0:	0c11      	lsrs	r1, r2, #16
 8000eb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eba:	428d      	cmp	r5, r1
 8000ebc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x258>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eca:	d22f      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d92d      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1b49      	subs	r1, r1, r5
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000edc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee8:	4291      	cmp	r1, r2
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x282>
 8000eec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef4:	d216      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	d914      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000efa:	3d02      	subs	r5, #2
 8000efc:	4462      	add	r2, ip
 8000efe:	1a52      	subs	r2, r2, r1
 8000f00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f04:	e738      	b.n	8000d78 <__udivmoddi4+0xfc>
 8000f06:	4631      	mov	r1, r6
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e708      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	e6e6      	b.n	8000cde <__udivmoddi4+0x62>
 8000f10:	4610      	mov	r0, r2
 8000f12:	e6fb      	b.n	8000d0c <__udivmoddi4+0x90>
 8000f14:	4548      	cmp	r0, r9
 8000f16:	d2a9      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f18:	ebb9 0802 	subs.w	r8, r9, r2
 8000f1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f20:	3b01      	subs	r3, #1
 8000f22:	e7a3      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f24:	4645      	mov	r5, r8
 8000f26:	e7ea      	b.n	8000efe <__udivmoddi4+0x282>
 8000f28:	462b      	mov	r3, r5
 8000f2a:	e794      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	e7d1      	b.n	8000ed4 <__udivmoddi4+0x258>
 8000f30:	46d0      	mov	r8, sl
 8000f32:	e77b      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f34:	3d02      	subs	r5, #2
 8000f36:	4462      	add	r2, ip
 8000f38:	e732      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xd8>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e742      	b.n	8000dca <__udivmoddi4+0x14e>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <software_delay>:
#include <stdint.h>
#include <ctype.h>
//#include "bmp280_defs.h"
//#include "bmp280.h"
static void software_delay(uint32_t tick)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	uint32_t delay;
	while(tick-->0)
 8000f50:	e00c      	b.n	8000f6c <software_delay+0x24>
	{
		for(delay=5; delay>0; delay--){
 8000f52:	2305      	movs	r3, #5
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e006      	b.n	8000f66 <software_delay+0x1e>
			asm("nop");
 8000f58:	bf00      	nop
			asm("nop");
 8000f5a:	bf00      	nop
			asm("nop");
 8000f5c:	bf00      	nop
			asm("nop");
 8000f5e:	bf00      	nop
		for(delay=5; delay>0; delay--){
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f5      	bne.n	8000f58 <software_delay+0x10>
	while(tick-->0)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	1e5a      	subs	r2, r3, #1
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1ed      	bne.n	8000f52 <software_delay+0xa>
		}
	}
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LCD_init>:

void LCD_init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
	software_delay(1000000);
 8000f8a:	4849      	ldr	r0, [pc, #292]	; (80010b0 <LCD_init+0x12c>)
 8000f8c:	f7ff ffdc 	bl	8000f48 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f89d 	bl	80010d4 <LCD_send_4bits>
 8000f9a:	4845      	ldr	r0, [pc, #276]	; (80010b0 <LCD_init+0x12c>)
 8000f9c:	f7ff ffd4 	bl	8000f48 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f895 	bl	80010d4 <LCD_send_4bits>
 8000faa:	4841      	ldr	r0, [pc, #260]	; (80010b0 <LCD_init+0x12c>)
 8000fac:	f7ff ffcc 	bl	8000f48 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(400000);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f88d 	bl	80010d4 <LCD_send_4bits>
 8000fba:	483e      	ldr	r0, [pc, #248]	; (80010b4 <LCD_init+0x130>)
 8000fbc:	f7ff ffc4 	bl	8000f48 <software_delay>
	//Set 4-bit
	LCD_send_4bits(0x02,0,0);	software_delay(400000);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 f885 	bl	80010d4 <LCD_send_4bits>
 8000fca:	483a      	ldr	r0, [pc, #232]	; (80010b4 <LCD_init+0x130>)
 8000fcc:	f7ff ffbc 	bl	8000f48 <software_delay>

	//Function SET
	LCD_write_command(LCD_FUNCTION_INSTRUCTION | LCD_FUNCTION_DL_4BIT | LCD_FUNCTION_LINE_NUMBER_2 | LCD_FUNCTION_FONT_5x8); software_delay(50000);
 8000fd0:	2028      	movs	r0, #40	; 0x28
 8000fd2:	f000 f914 	bl	80011fe <LCD_write_command>
 8000fd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fda:	f7ff ffb5 	bl	8000f48 <software_delay>
	//Display on
	LCD_write_command(LCD_DISPLAY_INSTRUCTION | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR_OFF | LCD_DISPLAY_BLINK_OFF);software_delay(100000);
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f000 f90d 	bl	80011fe <LCD_write_command>
 8000fe4:	4834      	ldr	r0, [pc, #208]	; (80010b8 <LCD_init+0x134>)
 8000fe6:	f7ff ffaf 	bl	8000f48 <software_delay>
	//Display clear
	LCD_write_command(LCD_CLEAR_INSTRUCTION);software_delay(100000);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f907 	bl	80011fe <LCD_write_command>
 8000ff0:	4831      	ldr	r0, [pc, #196]	; (80010b8 <LCD_init+0x134>)
 8000ff2:	f7ff ffa9 	bl	8000f48 <software_delay>

	//Entry mode
	LCD_write_command(LCD_ENTRY_MODE_INSTRUCTION | LCD_ENTRY_MODE_INCREMENT | LCD_ENTRY_MODE_SHIFT_DISPLAY_OFF);software_delay(100000);
 8000ff6:	2006      	movs	r0, #6
 8000ff8:	f000 f901 	bl	80011fe <LCD_write_command>
 8000ffc:	482e      	ldr	r0, [pc, #184]	; (80010b8 <LCD_init+0x134>)
 8000ffe:	f7ff ffa3 	bl	8000f48 <software_delay>
	//Init end

	//Return home
	LCD_write_command(LCD_HOME_INSTRUCTION);	software_delay(100000);
 8001002:	2002      	movs	r0, #2
 8001004:	f000 f8fb 	bl	80011fe <LCD_write_command>
 8001008:	482b      	ldr	r0, [pc, #172]	; (80010b8 <LCD_init+0x134>)
 800100a:	f7ff ff9d 	bl	8000f48 <software_delay>
	uint8_t custom_char1[] = LCD_CUSTOM_CHAR_ARROW_UP_PATERN;
 800100e:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <LCD_init+0x138>)
 8001010:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001018:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char1, 0);
 800101c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f98d 	bl	8001342 <LCD_create_custom_character>
	uint8_t custom_char2[] = LCD_CUSTOM_CHAR_ARROW_DOWN_PATERN;
 8001028:	4a25      	ldr	r2, [pc, #148]	; (80010c0 <LCD_init+0x13c>)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001032:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char2, 1);
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f980 	bl	8001342 <LCD_create_custom_character>
	uint8_t custom_char3[] = LCD_CUSTOM_CHAR_ARROW_OUT_PATERN;
 8001042:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <LCD_init+0x140>)
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104c:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char3, 2);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	2102      	movs	r1, #2
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f973 	bl	8001342 <LCD_create_custom_character>
	uint8_t custom_char4[] = LCD_CUSTOM_CHAR_ARROW_INTO_PATERN;
 800105c:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <LCD_init+0x144>)
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001066:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char4, 3);
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	2103      	movs	r1, #3
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f966 	bl	8001342 <LCD_create_custom_character>
	uint8_t custom_char5[] = LCD_CUSTOM_CHAR_ARROW_ENTER_PATERN;
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <LCD_init+0x148>)
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001080:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char5, 4);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	2104      	movs	r1, #4
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f959 	bl	8001342 <LCD_create_custom_character>
	uint8_t custom_char6[] = LCD_CUSTOM_CHAR_ARROW_PLUS_MINUS_PATERN;
 8001090:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <LCD_init+0x14c>)
 8001092:	463b      	mov	r3, r7
 8001094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001098:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char6, 5);
 800109c:	463b      	mov	r3, r7
 800109e:	2105      	movs	r1, #5
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f94e 	bl	8001342 <LCD_create_custom_character>



}
 80010a6:	bf00      	nop
 80010a8:	3730      	adds	r7, #48	; 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	000f4240 	.word	0x000f4240
 80010b4:	00061a80 	.word	0x00061a80
 80010b8:	000186a0 	.word	0x000186a0
 80010bc:	08007b68 	.word	0x08007b68
 80010c0:	08007b70 	.word	0x08007b70
 80010c4:	08007b78 	.word	0x08007b78
 80010c8:	08007b80 	.word	0x08007b80
 80010cc:	08007b88 	.word	0x08007b88
 80010d0:	08007b90 	.word	0x08007b90

080010d4 <LCD_send_4bits>:


void LCD_send_4bits(uint8_t data_to_send, char RS, char RW)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	460b      	mov	r3, r1
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	4613      	mov	r3, r2
 80010e4:	717b      	strb	r3, [r7, #5]
	LCD_GPIO_SET_VALUE(LCD_GPIO_RS_Pin, RS, LCD_GPIO_RS_Port);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <LCD_send_4bits+0x24>
 80010ec:	2200      	movs	r2, #0
 80010ee:	2104      	movs	r1, #4
 80010f0:	4834      	ldr	r0, [pc, #208]	; (80011c4 <LCD_send_4bits+0xf0>)
 80010f2:	f002 fb09 	bl	8003708 <HAL_GPIO_WritePin>
 80010f6:	e004      	b.n	8001102 <LCD_send_4bits+0x2e>
 80010f8:	2201      	movs	r2, #1
 80010fa:	2104      	movs	r1, #4
 80010fc:	4831      	ldr	r0, [pc, #196]	; (80011c4 <LCD_send_4bits+0xf0>)
 80010fe:	f002 fb03 	bl	8003708 <HAL_GPIO_WritePin>
	//set RW to LOW (GND) by hardware

	if(data_to_send&(0x01<<0)){LCD_DATABIT_ON(4);}else{LCD_DATABIT_OFF(4);}
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <LCD_send_4bits+0x44>
 800110c:	2201      	movs	r2, #1
 800110e:	2110      	movs	r1, #16
 8001110:	482c      	ldr	r0, [pc, #176]	; (80011c4 <LCD_send_4bits+0xf0>)
 8001112:	f002 faf9 	bl	8003708 <HAL_GPIO_WritePin>
 8001116:	e004      	b.n	8001122 <LCD_send_4bits+0x4e>
 8001118:	2200      	movs	r2, #0
 800111a:	2110      	movs	r1, #16
 800111c:	4829      	ldr	r0, [pc, #164]	; (80011c4 <LCD_send_4bits+0xf0>)
 800111e:	f002 faf3 	bl	8003708 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<1)){LCD_DATABIT_ON(5);}else{LCD_DATABIT_OFF(5);}
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <LCD_send_4bits+0x64>
 800112c:	2201      	movs	r2, #1
 800112e:	2120      	movs	r1, #32
 8001130:	4824      	ldr	r0, [pc, #144]	; (80011c4 <LCD_send_4bits+0xf0>)
 8001132:	f002 fae9 	bl	8003708 <HAL_GPIO_WritePin>
 8001136:	e004      	b.n	8001142 <LCD_send_4bits+0x6e>
 8001138:	2200      	movs	r2, #0
 800113a:	2120      	movs	r1, #32
 800113c:	4821      	ldr	r0, [pc, #132]	; (80011c4 <LCD_send_4bits+0xf0>)
 800113e:	f002 fae3 	bl	8003708 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<2)){LCD_DATABIT_ON(6);}else{LCD_DATABIT_OFF(6);}
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <LCD_send_4bits+0x84>
 800114c:	2201      	movs	r2, #1
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	481c      	ldr	r0, [pc, #112]	; (80011c4 <LCD_send_4bits+0xf0>)
 8001152:	f002 fad9 	bl	8003708 <HAL_GPIO_WritePin>
 8001156:	e004      	b.n	8001162 <LCD_send_4bits+0x8e>
 8001158:	2200      	movs	r2, #0
 800115a:	2140      	movs	r1, #64	; 0x40
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <LCD_send_4bits+0xf0>)
 800115e:	f002 fad3 	bl	8003708 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<3)){LCD_DATABIT_ON(7);}else{LCD_DATABIT_OFF(7);}
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <LCD_send_4bits+0xa4>
 800116c:	2201      	movs	r2, #1
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	4814      	ldr	r0, [pc, #80]	; (80011c4 <LCD_send_4bits+0xf0>)
 8001172:	f002 fac9 	bl	8003708 <HAL_GPIO_WritePin>
 8001176:	e004      	b.n	8001182 <LCD_send_4bits+0xae>
 8001178:	2200      	movs	r2, #0
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <LCD_send_4bits+0xf0>)
 800117e:	f002 fac3 	bl	8003708 <HAL_GPIO_WritePin>
	software_delay(100);
 8001182:	2064      	movs	r0, #100	; 0x64
 8001184:	f7ff fee0 	bl	8000f48 <software_delay>
	
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8001188:	2201      	movs	r2, #1
 800118a:	2108      	movs	r1, #8
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LCD_send_4bits+0xf0>)
 800118e:	f002 fabb 	bl	8003708 <HAL_GPIO_WritePin>
 8001192:	2064      	movs	r0, #100	; 0x64
 8001194:	f7ff fed8 	bl	8000f48 <software_delay>
	LCD_GPIO_OFF(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8001198:	2200      	movs	r2, #0
 800119a:	2108      	movs	r1, #8
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <LCD_send_4bits+0xf0>)
 800119e:	f002 fab3 	bl	8003708 <HAL_GPIO_WritePin>
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f7ff fed0 	bl	8000f48 <software_delay>
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(1000);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2108      	movs	r1, #8
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <LCD_send_4bits+0xf0>)
 80011ae:	f002 faab 	bl	8003708 <HAL_GPIO_WritePin>
 80011b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b6:	f7ff fec7 	bl	8000f48 <software_delay>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <LCD_send_8bits_twice_4bits>:

void LCD_send_8bits_twice_4bits(uint8_t data, char RS, char RW)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	460b      	mov	r3, r1
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	4613      	mov	r3, r2
 80011d8:	717b      	strb	r3, [r7, #5]
	LCD_send_4bits((data>>4), RS, RW);	//high part
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	797a      	ldrb	r2, [r7, #5]
 80011e2:	79b9      	ldrb	r1, [r7, #6]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff75 	bl	80010d4 <LCD_send_4bits>
	LCD_send_4bits(data, RS, RW);		//low part
 80011ea:	797a      	ldrb	r2, [r7, #5]
 80011ec:	79b9      	ldrb	r1, [r7, #6]
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff6f 	bl	80010d4 <LCD_send_4bits>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(command, 0, 0);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ffda 	bl	80011c8 <LCD_send_8bits_twice_4bits>
	software_delay(10000);
 8001214:	f242 7010 	movw	r0, #10000	; 0x2710
 8001218:	f7ff fe96 	bl	8000f48 <software_delay>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <LCD_write_data>:

void LCD_write_data(char byte_data)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(byte_data, 1, 0);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2200      	movs	r2, #0
 8001232:	2101      	movs	r1, #1
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffc7 	bl	80011c8 <LCD_send_8bits_twice_4bits>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <LCD_write_char>:

void LCD_write_char(char character)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	if(isprint(character))	LCD_write_data(character);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	3301      	adds	r3, #1
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <LCD_write_char+0x2c>)
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <LCD_write_char+0x24>
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffde 	bl	8001224 <LCD_write_data>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08007c0c 	.word	0x08007c0c

08001274 <LCD_write_text>:



void LCD_write_text(char* pText){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	while(*pText!='\0')
 800127c:	e007      	b.n	800128e <LCD_write_text+0x1a>
	{
		LCD_write_char(*pText);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ffde 	bl	8001244 <LCD_write_char>
		pText++;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
	while(*pText!='\0')
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f3      	bne.n	800127e <LCD_write_text+0xa>
	}
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LCD_goto_xy>:

void LCD_goto_xy(uint8_t line, uint8_t y)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	460a      	mov	r2, r1
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
	switch(line){
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <LCD_goto_xy+0x1c>
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d003      	beq.n	80012c2 <LCD_goto_xy+0x22>
 80012ba:	e005      	b.n	80012c8 <LCD_goto_xy+0x28>
		case 0: line=0x00; break;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e004      	b.n	80012cc <LCD_goto_xy+0x2c>
		case 1: line=0x40; break;
 80012c2:	2340      	movs	r3, #64	; 0x40
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e001      	b.n	80012cc <LCD_goto_xy+0x2c>
		default: line=0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	71fb      	strb	r3, [r7, #7]
	}
	LCD_write_command(LCD_DDRAM_ADDRESS | (line+y));
 80012cc:	79fa      	ldrb	r2, [r7, #7]
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	4413      	add	r3, r2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff8d 	bl	80011fe <LCD_write_command>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <LCD_goto_line>:

void LCD_goto_line(uint8_t line)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	LCD_goto_xy(line, 0);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffd0 	bl	80012a0 <LCD_goto_xy>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <LCD_printf>:
		LCD_write_text(text_buffer);
	}
}

uint8_t LCD_printf(const char * format, ... )
{
 8001308:	b40f      	push	{r0, r1, r2, r3}
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
	#define LCD_BUFFER_SIZE (LCD_MAXIMUM_LINE_LENGTH+1)
	char text_buffer[LCD_BUFFER_SIZE];
	uint8_t length=0;
 8001310:	2300      	movs	r3, #0
 8001312:	75fb      	strb	r3, [r7, #23]
	va_list args;
	va_start (args, format);
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	603b      	str	r3, [r7, #0]
	length=vsnprintf(text_buffer, LCD_BUFFER_SIZE, format, args);
 800131a:	1d38      	adds	r0, r7, #4
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	2111      	movs	r1, #17
 8001322:	f005 ff83 	bl	800722c <vsniprintf>
 8001326:	4603      	mov	r3, r0
 8001328:	75fb      	strb	r3, [r7, #23]
	LCD_write_text(text_buffer);
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ffa1 	bl	8001274 <LCD_write_text>
	va_end (args);
	return length;
 8001332:	7dfb      	ldrb	r3, [r7, #23]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800133e:	b004      	add	sp, #16
 8001340:	4770      	bx	lr

08001342 <LCD_create_custom_character>:


void LCD_create_custom_character(uint8_t* pPattern, uint8_t position)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
	LCD_write_command(LCD_CGRAM_ADDRESS | (position*8));
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	b25b      	sxtb	r3, r3
 8001356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135a:	b25b      	sxtb	r3, r3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff4d 	bl	80011fe <LCD_write_command>
	for (uint8_t i=0; i<8; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e009      	b.n	800137e <LCD_create_custom_character+0x3c>
		LCD_write_data(pPattern[i]);
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff56 	bl	8001224 <LCD_write_data>
	for (uint8_t i=0; i<8; i++)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	3301      	adds	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	2b07      	cmp	r3, #7
 8001382:	d9f2      	bls.n	800136a <LCD_create_custom_character+0x28>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fa48 	bl	800182c <null_ptr_check>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d117      	bne.n	80013d8 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	20d0      	movs	r0, #208	; 0xd0
 80013b0:	f000 f818 	bl	80013e4 <bmp2_get_regs>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10b      	bne.n	80013d8 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b58      	cmp	r3, #88	; 0x58
 80013c6:	d105      	bne.n	80013d4 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fa7a 	bl	80018c2 <get_calib_param>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e001      	b.n	80013d8 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 80013d4:	23fc      	movs	r3, #252	; 0xfc
 80013d6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f000 fa19 	bl	800182c <null_ptr_check>
 80013fa:	4603      	mov	r3, r0
 80013fc:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80013fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11e      	bne.n	8001444 <bmp2_get_regs+0x60>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01b      	beq.n	8001444 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800141a:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68dc      	ldr	r4, [r3, #12]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	7bf8      	ldrb	r0, [r7, #15]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	47a0      	blx	r4
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 800143e:	23fe      	movs	r3, #254	; 0xfe
 8001440:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001442:	e001      	b.n	8001448 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001444:	23ff      	movs	r3, #255	; 0xff
 8001446:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800144c:	4618      	mov	r0, r3
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd90      	pop	{r4, r7, pc}

08001454 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d901      	bls.n	800146c <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001468:	2304      	movs	r3, #4
 800146a:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f000 f9dd 	bl	800182c <null_ptr_check>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001478:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800147c:	2b00      	cmp	r3, #0
 800147e:	d150      	bne.n	8001522 <bmp2_set_regs+0xce>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d04d      	beq.n	8001522 <bmp2_set_regs+0xce>
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d04a      	beq.n	8001522 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d043      	beq.n	800151a <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d114      	bne.n	80014ca <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	77fb      	strb	r3, [r7, #31]
 80014a4:	e00d      	b.n	80014c2 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	7ffb      	ldrb	r3, [r7, #31]
 80014b0:	68f9      	ldr	r1, [r7, #12]
 80014b2:	440b      	add	r3, r1
 80014b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80014bc:	7ffb      	ldrb	r3, [r7, #31]
 80014be:	3301      	adds	r3, #1
 80014c0:	77fb      	strb	r3, [r7, #31]
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d8ed      	bhi.n	80014a6 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d90b      	bls.n	80014e8 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80014d0:	f107 0114 	add.w	r1, r7, #20
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f9c7 	bl	800186c <interleave_data>
                temp_len = ((len * 2) - 1);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	3b01      	subs	r3, #1
 80014e4:	623b      	str	r3, [r7, #32]
 80014e6:	e001      	b.n	80014ec <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691c      	ldr	r4, [r3, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	7818      	ldrb	r0, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f107 0114 	add.w	r1, r7, #20
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	47a0      	blx	r4
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001512:	23fe      	movs	r3, #254	; 0xfe
 8001514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001518:	e007      	b.n	800152a <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 800151a:	23fd      	movs	r3, #253	; 0xfd
 800151c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001520:	e003      	b.n	800152a <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001528:	e000      	b.n	800152c <bmp2_set_regs+0xd8>
        if (len > 0)
 800152a:	bf00      	nop
    }

    return rslt;
 800152c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001530:	4618      	mov	r0, r3
 8001532:	372c      	adds	r7, #44	; 0x2c
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}

08001538 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8001540:	23e0      	movs	r3, #224	; 0xe0
 8001542:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8001544:	23b6      	movs	r3, #182	; 0xb6
 8001546:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001548:	f107 010d 	add.w	r1, r7, #13
 800154c:	f107 000e 	add.w	r0, r7, #14
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f7ff ff7e 	bl	8001454 <bmp2_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001572:	2300      	movs	r3, #0
 8001574:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d02d      	beq.n	80015d8 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2202      	movs	r2, #2
 8001584:	20f4      	movs	r0, #244	; 0xf4
 8001586:	f7ff ff2d 	bl	80013e4 <bmp2_get_regs>
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d122      	bne.n	80015dc <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	b2da      	uxtb	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 80015a0:	7b3b      	ldrb	r3, [r7, #12]
 80015a2:	109b      	asrs	r3, r3, #2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80015ba:	7b7b      	ldrb	r3, [r7, #13]
 80015bc:	109b      	asrs	r3, r3, #2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80015ca:	7b7b      	ldrb	r3, [r7, #13]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	715a      	strb	r2, [r3, #5]
 80015d6:	e001      	b.n	80015dc <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80015d8:	23ff      	movs	r3, #255	; 0xff
 80015da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f9fe 	bl	80019f8 <conf_sensor>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01b      	beq.n	800164e <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001616:	f107 010e 	add.w	r1, r7, #14
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	20f3      	movs	r0, #243	; 0xf3
 8001620:	f7ff fee0 	bl	80013e4 <bmp2_get_regs>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d110      	bne.n	8001652 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	10db      	asrs	r3, r3, #3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	b2da      	uxtb	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	b2da      	uxtb	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	705a      	strb	r2, [r3, #1]
 800164c:	e001      	b.n	8001652 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800164e:	23ff      	movs	r3, #255	; 0xff
 8001650:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f9c0 	bl	80019f8 <conf_sensor>
 8001678:	4603      	mov	r3, r0
 800167a:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800167c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	2300      	movs	r3, #0
 8001698:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d024      	beq.n	80016f4 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80016aa:	f107 0110 	add.w	r1, r7, #16
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2206      	movs	r2, #6
 80016b2:	20f7      	movs	r0, #247	; 0xf7
 80016b4:	f7ff fe96 	bl	80013e4 <bmp2_get_regs>
 80016b8:	4603      	mov	r3, r0
 80016ba:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80016bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d119      	bne.n	80016f8 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80016c4:	f107 0208 	add.w	r2, r7, #8
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 faba 	bl	8001c48 <parse_sensor_data>
 80016d4:	4603      	mov	r3, r0
 80016d6:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80016d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10b      	bne.n	80016f8 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f80b 	bl	8001704 <bmp2_compensate_data>
 80016ee:	4603      	mov	r3, r0
 80016f0:	75fb      	strb	r3, [r7, #23]
 80016f2:	e001      	b.n	80016f8 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016f4:	23ff      	movs	r3, #255	; 0xff
 80016f6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f88b 	bl	800182c <null_ptr_check>
 8001716:	4603      	mov	r3, r0
 8001718:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 800171a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d129      	bne.n	8001776 <bmp2_compensate_data+0x72>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d026      	beq.n	8001776 <bmp2_compensate_data+0x72>
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d023      	beq.n	8001776 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3308      	adds	r3, #8
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68f9      	ldr	r1, [r7, #12]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fabc 	bl	8001cd0 <compensate_temperature>
 8001758:	4603      	mov	r3, r0
 800175a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800175c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10a      	bne.n	800177a <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fba8 	bl	8001ec0 <compensate_pressure>
 8001770:	4603      	mov	r3, r0
 8001772:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001774:	e001      	b.n	800177a <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001776:	23ff      	movs	r3, #255	; 0xff
 8001778:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800177a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b092      	sub	sp, #72	; 0x48
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <bmp2_compute_meas_time+0x9c>)
 8001796:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800179a:	461d      	mov	r5, r3
 800179c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <bmp2_compute_meas_time+0xa0>)
 80017a6:	f107 0410 	add.w	r4, r7, #16
 80017aa:	461d      	mov	r5, r3
 80017ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f837 	bl	800182c <null_ptr_check>
 80017be:	4603      	mov	r3, r0
 80017c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80017c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d122      	bne.n	8001812 <bmp2_compute_meas_time+0x8a>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d01f      	beq.n	8001812 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7e1b      	ldrb	r3, [r3, #24]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d111      	bne.n	80017fe <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	78db      	ldrb	r3, [r3, #3]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3348      	adds	r3, #72	; 0x48
 80017e2:	443b      	add	r3, r7
 80017e4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	789b      	ldrb	r3, [r3, #2]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	3348      	adds	r3, #72	; 0x48
 80017f0:	443b      	add	r3, r7
 80017f2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80017f6:	441a      	add	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80017fc:	e00c      	b.n	8001818 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	78db      	ldrb	r3, [r3, #3]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	3348      	adds	r3, #72	; 0x48
 8001806:	443b      	add	r3, r7
 8001808:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001810:	e002      	b.n	8001818 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001812:	23ff      	movs	r3, #255	; 0xff
 8001814:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001818:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800181c:	4618      	mov	r0, r3
 800181e:	3748      	adds	r7, #72	; 0x48
 8001820:	46bd      	mov	sp, r7
 8001822:	bdb0      	pop	{r4, r5, r7, pc}
 8001824:	08007b9c 	.word	0x08007b9c
 8001828:	08007bb0 	.word	0x08007bb0

0800182c <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <null_ptr_check+0x26>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <null_ptr_check+0x26>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <null_ptr_check+0x26>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 8001852:	23ff      	movs	r3, #255	; 0xff
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e001      	b.n	800185c <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800187a:	2301      	movs	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e015      	b.n	80018ac <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	441a      	add	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	440b      	add	r3, r1
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	441a      	add	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	440b      	add	r3, r1
 80018a2:	7812      	ldrb	r2, [r2, #0]
 80018a4:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3e5      	bcc.n	8001880 <interleave_data+0x14>
    }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b08a      	sub	sp, #40	; 0x28
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80018e0:	f107 010c 	add.w	r1, r7, #12
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2219      	movs	r2, #25
 80018e8:	2088      	movs	r0, #136	; 0x88
 80018ea:	f7ff fd7b 	bl	80013e4 <bmp2_get_regs>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80018f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d177      	bne.n	80019ec <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80018fc:	7b7b      	ldrb	r3, [r7, #13]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b21a      	sxth	r2, r3
 8001902:	7b3b      	ldrb	r3, [r7, #12]
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	b21b      	sxth	r3, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	b21a      	sxth	r2, r3
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	b21b      	sxth	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b21a      	sxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001922:	7c7b      	ldrb	r3, [r7, #17]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	7c3b      	ldrb	r3, [r7, #16]
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21a      	sxth	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001934:	7cfb      	ldrb	r3, [r7, #19]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	7cbb      	ldrb	r3, [r7, #18]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21b      	sxth	r3, r3
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001948:	7d7b      	ldrb	r3, [r7, #21]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b21a      	sxth	r2, r3
 800194e:	7d3b      	ldrb	r3, [r7, #20]
 8001950:	b21b      	sxth	r3, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	b21a      	sxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21a      	sxth	r2, r3
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b21b      	sxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b21a      	sxth	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 800196c:	7e7b      	ldrb	r3, [r7, #25]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	7e3b      	ldrb	r3, [r7, #24]
 8001974:	b21b      	sxth	r3, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	b21a      	sxth	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800197e:	7efb      	ldrb	r3, [r7, #27]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b21a      	sxth	r2, r3
 8001984:	7ebb      	ldrb	r3, [r7, #26]
 8001986:	b21b      	sxth	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b21a      	sxth	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001990:	7f7b      	ldrb	r3, [r7, #29]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b21a      	sxth	r2, r3
 8001996:	7f3b      	ldrb	r3, [r7, #28]
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b21a      	sxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	7fbb      	ldrb	r3, [r7, #30]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80019b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80019ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b21a      	sxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80019e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019e4:	b25a      	sxtb	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 80019ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001a06:	2300      	movs	r3, #0
 8001a08:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001a0a:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001a0e:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d074      	beq.n	8001b00 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001a16:	f107 0114 	add.w	r1, r7, #20
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	20f4      	movs	r0, #244	; 0xf4
 8001a20:	f7ff fce0 	bl	80013e4 <bmp2_get_regs>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d169      	bne.n	8001b04 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fd81 	bl	8001538 <bmp2_soft_reset>
 8001a36:	4603      	mov	r3, r0
 8001a38:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d160      	bne.n	8001b04 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f861 	bl	8001b10 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001a4e:	7d7b      	ldrb	r3, [r7, #21]
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	b25a      	sxtb	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	015b      	lsls	r3, r3, #5
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001a68:	7d7b      	ldrb	r3, [r7, #21]
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	f023 031c 	bic.w	r3, r3, #28
 8001a70:	b25a      	sxtb	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	791b      	ldrb	r3, [r3, #4]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	f003 031c 	and.w	r3, r3, #28
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001a88:	7d7b      	ldrb	r3, [r7, #21]
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	b25a      	sxtb	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	795b      	ldrb	r3, [r3, #5]
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001aa6:	f107 0114 	add.w	r1, r7, #20
 8001aaa:	f107 0010 	add.w	r0, r7, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f7ff fccf 	bl	8001454 <bmp2_set_regs>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d120      	bne.n	8001b04 <conf_sensor+0x10c>
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01d      	beq.n	8001b04 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001ace:	7d3b      	ldrb	r3, [r7, #20]
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	f023 0303 	bic.w	r3, r3, #3
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001aea:	f107 0114 	add.w	r1, r7, #20
 8001aee:	f107 0010 	add.w	r0, r7, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f7ff fcad 	bl	8001454 <bmp2_set_regs>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
 8001afe:	e001      	b.n	8001b04 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001b00:	23ff      	movs	r3, #255	; 0xff
 8001b02:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	78db      	ldrb	r3, [r3, #3]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	f200 808b 	bhi.w	8001c3a <set_os_mode+0x12a>
 8001b24:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <set_os_mode+0x1c>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b41 	.word	0x08001b41
 8001b30:	08001b73 	.word	0x08001b73
 8001b34:	08001ba5 	.word	0x08001ba5
 8001b38:	08001bd7 	.word	0x08001bd7
 8001b3c:	08001c09 	.word	0x08001c09
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	f043 0320 	orr.w	r3, r3, #32
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	f023 031c 	bic.w	r3, r3, #28
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	701a      	strb	r2, [r3, #0]
            break;
 8001b70:	e064      	b.n	8001c3c <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	f043 0320 	orr.w	r3, r3, #32
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	f023 031c 	bic.w	r3, r3, #28
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	701a      	strb	r2, [r3, #0]
            break;
 8001ba2:	e04b      	b.n	8001c3c <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	f043 0320 	orr.w	r3, r3, #32
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	f023 031c 	bic.w	r3, r3, #28
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	f043 030c 	orr.w	r3, r3, #12
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	701a      	strb	r2, [r3, #0]
            break;
 8001bd4:	e032      	b.n	8001c3c <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	f043 0320 	orr.w	r3, r3, #32
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	f023 031c 	bic.w	r3, r3, #28
 8001bf8:	b25b      	sxtb	r3, r3
 8001bfa:	f043 0310 	orr.w	r3, r3, #16
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	701a      	strb	r2, [r3, #0]
            break;
 8001c06:	e019      	b.n	8001c3c <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	f023 031c 	bic.w	r3, r3, #28
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	f043 0314 	orr.w	r3, r3, #20
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	701a      	strb	r2, [r3, #0]
            break;
 8001c38:	e000      	b.n	8001c3c <set_os_mode+0x12c>
        default:
            break;
 8001c3a:	bf00      	nop
    }
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	031b      	lsls	r3, r3, #12
 8001c58:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3302      	adds	r3, #2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3303      	adds	r3, #3
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	031b      	lsls	r3, r3, #12
 8001c86:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3305      	adds	r3, #5
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4610      	mov	r0, r2
 8001cba:	f000 fae5 	bl	8002288 <st_check_boundaries>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001cc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001cd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cd4:	b08c      	sub	sp, #48	; 0x30
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fc33 	bl	8000554 <__aeabi_i2d>
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <compensate_temperature+0x1d4>)
 8001cf4:	f7fe fdc2 	bl	800087c <__aeabi_ddiv>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	461d      	mov	r5, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	8b9b      	ldrh	r3, [r3, #28]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc15 	bl	8000534 <__aeabi_ui2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <compensate_temperature+0x1d8>)
 8001d10:	f7fe fdb4 	bl	800087c <__aeabi_ddiv>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4620      	mov	r0, r4
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	f7fe facc 	bl	80002b8 <__aeabi_dsub>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc10 	bl	8000554 <__aeabi_i2d>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fc74 	bl	8000628 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc01 	bl	8000554 <__aeabi_i2d>
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001d5a:	f7fe fd8f 	bl	800087c <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4614      	mov	r4, r2
 8001d64:	461d      	mov	r5, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8b9b      	ldrh	r3, [r3, #28]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbe2 	bl	8000534 <__aeabi_ui2d>
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b4d      	ldr	r3, [pc, #308]	; (8001eac <compensate_temperature+0x1dc>)
 8001d76:	f7fe fd81 	bl	800087c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4620      	mov	r0, r4
 8001d80:	4629      	mov	r1, r5
 8001d82:	f7fe fa99 	bl	80002b8 <__aeabi_dsub>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4614      	mov	r4, r2
 8001d8c:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbde 	bl	8000554 <__aeabi_i2d>
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001da0:	f7fe fd6c 	bl	800087c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4690      	mov	r8, r2
 8001daa:	4699      	mov	r9, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8b9b      	ldrh	r3, [r3, #28]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbbf 	bl	8000534 <__aeabi_ui2d>
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <compensate_temperature+0x1dc>)
 8001dbc:	f7fe fd5e 	bl	800087c <__aeabi_ddiv>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4640      	mov	r0, r8
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	f7fe fa76 	bl	80002b8 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	f7fe fc28 	bl	8000628 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4614      	mov	r4, r2
 8001dde:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fbb4 	bl	8000554 <__aeabi_i2d>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
    var2 =
 8001df0:	4620      	mov	r0, r4
 8001df2:	4629      	mov	r1, r5
 8001df4:	f7fe fc18 	bl	8000628 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001e00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e08:	f7fe fa58 	bl	80002bc <__adddf3>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fea2 	bl	8000b5c <__aeabi_d2iz>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001e1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e26:	f7fe fa49 	bl	80002bc <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <compensate_temperature+0x1e0>)
 8001e38:	f7fe fd20 	bl	800087c <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <compensate_temperature+0x1e4>)
 8001e4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e4e:	f7fe fe5d 	bl	8000b0c <__aeabi_dcmplt>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <compensate_temperature+0x1e4>)
 8001e5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <compensate_temperature+0x1e8>)
 8001e6e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e72:	f7fe fe69 	bl	8000b48 <__aeabi_dcmpgt>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <compensate_temperature+0x1e8>)
 8001e82:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e92:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001e96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3730      	adds	r7, #48	; 0x30
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ea4:	40d00000 	.word	0x40d00000
 8001ea8:	40900000 	.word	0x40900000
 8001eac:	40c00000 	.word	0x40c00000
 8001eb0:	40b40000 	.word	0x40b40000
 8001eb4:	c0440000 	.word	0xc0440000
 8001eb8:	40554000 	.word	0x40554000
 8001ebc:	00000000 	.word	0x00000000

08001ec0 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b08c      	sub	sp, #48	; 0x30
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb36 	bl	8000554 <__aeabi_i2d>
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ef0:	f7fe fcc4 	bl	800087c <__aeabi_ddiv>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	4bcb      	ldr	r3, [pc, #812]	; (8002230 <compensate_pressure+0x370>)
 8001f02:	f7fe f9d9 	bl	80002b8 <__aeabi_dsub>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f16:	f7fe fb87 	bl	8000628 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4614      	mov	r4, r2
 8001f20:	461d      	mov	r5, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb13 	bl	8000554 <__aeabi_i2d>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe fb77 	bl	8000628 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4bbb      	ldr	r3, [pc, #748]	; (8002234 <compensate_pressure+0x374>)
 8001f48:	f7fe fc98 	bl	800087c <__aeabi_ddiv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fafa 	bl	8000554 <__aeabi_i2d>
 8001f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f64:	f7fe fb60 	bl	8000628 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	f7fe f9a2 	bl	80002bc <__adddf3>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f80:	f7fe f99c 	bl	80002bc <__adddf3>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4ba9      	ldr	r3, [pc, #676]	; (8002238 <compensate_pressure+0x378>)
 8001f92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f96:	f7fe fc71 	bl	800087c <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	461d      	mov	r5, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fad3 	bl	8000554 <__aeabi_i2d>
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	4ba2      	ldr	r3, [pc, #648]	; (800223c <compensate_pressure+0x37c>)
 8001fb4:	f7fe fb38 	bl	8000628 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f7fe f97c 	bl	80002bc <__adddf3>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fabe 	bl	8000554 <__aeabi_i2d>
 8001fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fdc:	f7fe fb24 	bl	8000628 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fec:	f7fe fb1c 	bl	8000628 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	4b90      	ldr	r3, [pc, #576]	; (8002240 <compensate_pressure+0x380>)
 8001ffe:	f7fe fc3d 	bl	800087c <__aeabi_ddiv>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa9f 	bl	8000554 <__aeabi_i2d>
 8002016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800201a:	f7fe fb05 	bl	8000628 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe f949 	bl	80002bc <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <compensate_pressure+0x380>)
 8002038:	f7fe fc20 	bl	800087c <__aeabi_ddiv>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <compensate_pressure+0x374>)
 800204a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800204e:	f7fe fc15 	bl	800087c <__aeabi_ddiv>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	4b79      	ldr	r3, [pc, #484]	; (8002244 <compensate_pressure+0x384>)
 8002060:	f7fe f92c 	bl	80002bc <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4614      	mov	r4, r2
 800206a:	461d      	mov	r5, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa5f 	bl	8000534 <__aeabi_ui2d>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	f7fe fad3 	bl	8000628 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002096:	f7fe fd39 	bl	8000b0c <__aeabi_dcmplt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <compensate_pressure+0x1f8>
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ac:	f7fe fd4c 	bl	8000b48 <__aeabi_dcmpgt>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80de 	beq.w	8002274 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa39 	bl	8000534 <__aeabi_ui2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	495f      	ldr	r1, [pc, #380]	; (8002248 <compensate_pressure+0x388>)
 80020cc:	f7fe f8f4 	bl	80002b8 <__aeabi_dsub>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	4b5b      	ldr	r3, [pc, #364]	; (800224c <compensate_pressure+0x38c>)
 80020de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020e2:	f7fe fbcb 	bl	800087c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020ee:	f7fe f8e3 	bl	80002b8 <__aeabi_dsub>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	a347      	add	r3, pc, #284	; (adr r3, 8002218 <compensate_pressure+0x358>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f7fe fa92 	bl	8000628 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002110:	f7fe fbb4 	bl	800087c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa16 	bl	8000554 <__aeabi_i2d>
 8002128:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800212c:	f7fe fa7c 	bl	8000628 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800213c:	f7fe fa74 	bl	8000628 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <compensate_pressure+0x390>)
 800214e:	f7fe fb95 	bl	800087c <__aeabi_ddiv>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f9f7 	bl	8000554 <__aeabi_i2d>
 8002166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800216a:	f7fe fa5d 	bl	8000628 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <compensate_pressure+0x374>)
 800217c:	f7fe fb7e 	bl	800087c <__aeabi_ddiv>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002188:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800218c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002190:	f7fe f894 	bl	80002bc <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4614      	mov	r4, r2
 800219a:	461d      	mov	r5, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9d6 	bl	8000554 <__aeabi_i2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4620      	mov	r0, r4
 80021ae:	4629      	mov	r1, r5
 80021b0:	f7fe f884 	bl	80002bc <__adddf3>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <compensate_pressure+0x394>)
 80021c2:	f7fe fb5b 	bl	800087c <__aeabi_ddiv>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021ce:	f7fe f875 	bl	80002bc <__adddf3>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 80021da:	a311      	add	r3, pc, #68	; (adr r3, 8002220 <compensate_pressure+0x360>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021e4:	f7fe fc92 	bl	8000b0c <__aeabi_dcmplt>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 80021ee:	a30c      	add	r3, pc, #48	; (adr r3, 8002220 <compensate_pressure+0x360>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 80021f8:	2303      	movs	r3, #3
 80021fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 80021fe:	a30a      	add	r3, pc, #40	; (adr r3, 8002228 <compensate_pressure+0x368>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002208:	f7fe fc9e 	bl	8000b48 <__aeabi_dcmpgt>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	e022      	b.n	8002258 <compensate_pressure+0x398>
 8002212:	bf00      	nop
 8002214:	f3af 8000 	nop.w
 8002218:	00000000 	.word	0x00000000
 800221c:	40b86a00 	.word	0x40b86a00
 8002220:	00000000 	.word	0x00000000
 8002224:	40dd4c00 	.word	0x40dd4c00
 8002228:	00000000 	.word	0x00000000
 800222c:	40fadb00 	.word	0x40fadb00
 8002230:	40ef4000 	.word	0x40ef4000
 8002234:	40e00000 	.word	0x40e00000
 8002238:	40100000 	.word	0x40100000
 800223c:	40f00000 	.word	0x40f00000
 8002240:	41200000 	.word	0x41200000
 8002244:	3ff00000 	.word	0x3ff00000
 8002248:	41300000 	.word	0x41300000
 800224c:	40b00000 	.word	0x40b00000
 8002250:	41e00000 	.word	0x41e00000
 8002254:	40300000 	.word	0x40300000
 8002258:	d007      	beq.n	800226a <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 800225a:	a309      	add	r3, pc, #36	; (adr r3, 8002280 <compensate_pressure+0x3c0>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8002264:	2304      	movs	r3, #4
 8002266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 800226a:	68f9      	ldr	r1, [r7, #12]
 800226c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002270:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8002274:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002278:	4618      	mov	r0, r3
 800227a:	3730      	adds	r7, #48	; 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bdb0      	pop	{r4, r5, r7, pc}
 8002280:	00000000 	.word	0x00000000
 8002284:	40fadb00 	.word	0x40fadb00

08002288 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db03      	blt.n	80022a4 <st_check_boundaries+0x1c>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <st_check_boundaries+0x88>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	dd09      	ble.n	80022b8 <st_check_boundaries+0x30>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	db06      	blt.n	80022b8 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <st_check_boundaries+0x88>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	dc02      	bgt.n	80022b8 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 80022b2:	23fa      	movs	r3, #250	; 0xfa
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e023      	b.n	8002300 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db03      	blt.n	80022c6 <st_check_boundaries+0x3e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a13      	ldr	r2, [pc, #76]	; (8002310 <st_check_boundaries+0x88>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	dd09      	ble.n	80022da <st_check_boundaries+0x52>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db06      	blt.n	80022da <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <st_check_boundaries+0x88>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	dc02      	bgt.n	80022da <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 80022d4:	23fb      	movs	r3, #251	; 0xfb
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e012      	b.n	8002300 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db03      	blt.n	80022e8 <st_check_boundaries+0x60>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <st_check_boundaries+0x88>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	dd09      	ble.n	80022fc <st_check_boundaries+0x74>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db03      	blt.n	80022f6 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <st_check_boundaries+0x88>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	dd02      	ble.n	80022fc <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80022f6:	23f9      	movs	r3, #249	; 0xf9
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e001      	b.n	8002300 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	000ffff0 	.word	0x000ffff0

08002314 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff f836 	bl	800138e <bmp2_init>
 8002322:	4603      	mov	r3, r0
 8002324:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f91b 	bl	8001568 <bmp2_get_config>
 8002332:	4603      	mov	r3, r0
 8002334:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8002336:	2303      	movs	r3, #3
 8002338:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 800233a:	2300      	movs	r3, #0
 800233c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 800233e:	2303      	movs	r3, #3
 8002340:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f94d 	bl	80015e8 <bmp2_set_config>
 800234e:	4603      	mov	r3, r0
 8002350:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4619      	mov	r1, r3
 800235a:	2003      	movs	r0, #3
 800235c:	f7ff f97f 	bl	800165e <bmp2_set_power_mode>
 8002360:	4603      	mov	r3, r0
 8002362:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8002364:	f107 0108 	add.w	r1, r7, #8
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fa0a 	bl	8001788 <bmp2_compute_meas_time>
 8002374:	4603      	mov	r3, r0
 8002376:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4603      	mov	r3, r0
 8002392:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002398:	2300      	movs	r3, #0
 800239a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	6858      	ldr	r0, [r3, #4]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	891b      	ldrh	r3, [r3, #8]
 80023a8:	2200      	movs	r2, #0
 80023aa:	4619      	mov	r1, r3
 80023ac:	f001 f9ac 	bl	8003708 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	f107 010f 	add.w	r1, r7, #15
 80023b8:	2305      	movs	r3, #5
 80023ba:	2201      	movs	r2, #1
 80023bc:	f002 fba7 	bl	8004b0e <HAL_SPI_Transmit>
 80023c0:	4603      	mov	r3, r0
 80023c2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	2305      	movs	r3, #5
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	f002 fd0b 	bl	8004dea <HAL_SPI_Receive>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	7dbb      	ldrb	r3, [r7, #22]
 80023da:	4413      	add	r3, r2
 80023dc:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6858      	ldr	r0, [r3, #4]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	891b      	ldrh	r3, [r3, #8]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4619      	mov	r1, r3
 80023ea:	f001 f98d 	bl	8003708 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80023ee:	7dbb      	ldrb	r3, [r7, #22]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <bmp2_spi_read+0x74>
    iError = -1;
 80023f4:	23ff      	movs	r3, #255	; 0xff
 80023f6:	75fb      	strb	r3, [r7, #23]

  return iError;
 80023f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002418:	2300      	movs	r3, #0
 800241a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	6858      	ldr	r0, [r3, #4]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	891b      	ldrh	r3, [r3, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	4619      	mov	r1, r3
 800242c:	f001 f96c 	bl	8003708 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	f107 010f 	add.w	r1, r7, #15
 8002438:	2305      	movs	r3, #5
 800243a:	2201      	movs	r2, #1
 800243c:	f002 fb67 	bl	8004b0e <HAL_SPI_Transmit>
 8002440:	4603      	mov	r3, r0
 8002442:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	b29a      	uxth	r2, r3
 800244c:	2305      	movs	r3, #5
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	f002 fb5d 	bl	8004b0e <HAL_SPI_Transmit>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	7dbb      	ldrb	r3, [r7, #22]
 800245a:	4413      	add	r3, r2
 800245c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6858      	ldr	r0, [r3, #4]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	891b      	ldrh	r3, [r3, #8]
 8002466:	2201      	movs	r2, #1
 8002468:	4619      	mov	r1, r3
 800246a:	f001 f94d 	bl	8003708 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800246e:	7dbb      	ldrb	r3, [r7, #22]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <bmp2_spi_write+0x74>
    iError = -1;
 8002474:	23ff      	movs	r3, #255	; 0xff
 8002476:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002478:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <bmp2_delay_us+0x24>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fdc1 	bl	8003020 <HAL_Delay>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	10624dd3 	.word	0x10624dd3

080024ac <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b08d      	sub	sp, #52	; 0x34
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80024b4:	23ff      	movs	r3, #255	; 0xff
 80024b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <BMP2_ReadTemperature_degC+0x9c>)
 80024c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	899b      	ldrh	r3, [r3, #12]
 80024ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f896 	bl	8001606 <bmp2_get_status>
 80024da:	4603      	mov	r3, r0
 80024dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f8ce 	bl	8001688 <bmp2_get_sensor_data>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 80024f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 80024fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002508:	7f3b      	ldrb	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <BMP2_ReadTemperature_degC+0x6a>
 800250e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002512:	2b00      	cmp	r3, #0
 8002514:	dcdb      	bgt.n	80024ce <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685c      	ldr	r4, [r3, #4]
 800251a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800251e:	f7fe fb45 	bl	8000bac <__aeabi_d2f>
 8002522:	4603      	mov	r3, r0
 8002524:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800252e:	729a      	strb	r2, [r3, #10]

  return temp;
 8002530:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002534:	ec43 2b17 	vmov	d7, r2, r3
}
 8002538:	eeb0 0a47 	vmov.f32	s0, s14
 800253c:	eef0 0a67 	vmov.f32	s1, s15
 8002540:	3734      	adds	r7, #52	; 0x34
 8002542:	46bd      	mov	sp, r7
 8002544:	bd90      	pop	{r4, r7, pc}
 8002546:	bf00      	nop
 8002548:	7ff80000 	.word	0x7ff80000

0800254c <MX_GPIO_Init>:
     PG13   ------> ETH_TXD0
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002562:	4bad      	ldr	r3, [pc, #692]	; (8002818 <MX_GPIO_Init+0x2cc>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4aac      	ldr	r2, [pc, #688]	; (8002818 <MX_GPIO_Init+0x2cc>)
 8002568:	f043 0310 	orr.w	r3, r3, #16
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4baa      	ldr	r3, [pc, #680]	; (8002818 <MX_GPIO_Init+0x2cc>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	4ba7      	ldr	r3, [pc, #668]	; (8002818 <MX_GPIO_Init+0x2cc>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4aa6      	ldr	r2, [pc, #664]	; (8002818 <MX_GPIO_Init+0x2cc>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4ba4      	ldr	r3, [pc, #656]	; (8002818 <MX_GPIO_Init+0x2cc>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002592:	4ba1      	ldr	r3, [pc, #644]	; (8002818 <MX_GPIO_Init+0x2cc>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4aa0      	ldr	r2, [pc, #640]	; (8002818 <MX_GPIO_Init+0x2cc>)
 8002598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b9e      	ldr	r3, [pc, #632]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	4b9b      	ldr	r3, [pc, #620]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a9a      	ldr	r2, [pc, #616]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b98      	ldr	r3, [pc, #608]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b95      	ldr	r3, [pc, #596]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a94      	ldr	r2, [pc, #592]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b92      	ldr	r3, [pc, #584]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	4b8f      	ldr	r3, [pc, #572]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a8e      	ldr	r2, [pc, #568]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b8c      	ldr	r3, [pc, #560]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a88      	ldr	r2, [pc, #544]	; (8002818 <MX_GPIO_Init+0x2cc>)
 80025f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b86      	ldr	r3, [pc, #536]	; (8002818 <MX_GPIO_Init+0x2cc>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CS1_GPIO_Port, BMP2_CS1_Pin, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	2110      	movs	r1, #16
 800260e:	4883      	ldr	r0, [pc, #524]	; (800281c <MX_GPIO_Init+0x2d0>)
 8002610:	f001 f87a 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	f244 0181 	movw	r1, #16513	; 0x4081
 800261a:	4881      	ldr	r0, [pc, #516]	; (8002820 <MX_GPIO_Init+0x2d4>)
 800261c:	f001 f874 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8002620:	2200      	movs	r2, #0
 8002622:	21fc      	movs	r1, #252	; 0xfc
 8002624:	487f      	ldr	r0, [pc, #508]	; (8002824 <MX_GPIO_Init+0x2d8>)
 8002626:	f001 f86f 	bl	8003708 <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CS1_Pin;
 800262a:	2310      	movs	r3, #16
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BMP2_CS1_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	4876      	ldr	r0, [pc, #472]	; (800281c <MX_GPIO_Init+0x2d0>)
 8002642:	f000 feb5 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800264c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	4872      	ldr	r0, [pc, #456]	; (8002828 <MX_GPIO_Init+0x2dc>)
 800265e:	f000 fea7 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002662:	2332      	movs	r3, #50	; 0x32
 8002664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002672:	230b      	movs	r3, #11
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002676:	f107 031c 	add.w	r3, r7, #28
 800267a:	4619      	mov	r1, r3
 800267c:	486a      	ldr	r0, [pc, #424]	; (8002828 <MX_GPIO_Init+0x2dc>)
 800267e:	f000 fe97 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002682:	2386      	movs	r3, #134	; 0x86
 8002684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268e:	2303      	movs	r3, #3
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002692:	230b      	movs	r3, #11
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4863      	ldr	r0, [pc, #396]	; (800282c <MX_GPIO_Init+0x2e0>)
 800269e:	f000 fe87 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80026a2:	2308      	movs	r3, #8
 80026a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	4619      	mov	r1, r3
 80026bc:	485b      	ldr	r0, [pc, #364]	; (800282c <MX_GPIO_Init+0x2e0>)
 80026be:	f000 fe77 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d2:	2302      	movs	r3, #2
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	4619      	mov	r1, r3
 80026dc:	4853      	ldr	r0, [pc, #332]	; (800282c <MX_GPIO_Init+0x2e0>)
 80026de:	f000 fe67 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80026e2:	f244 0381 	movw	r3, #16513	; 0x4081
 80026e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	4619      	mov	r1, r3
 80026fa:	4849      	ldr	r0, [pc, #292]	; (8002820 <MX_GPIO_Init+0x2d4>)
 80026fc:	f000 fe58 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002712:	230b      	movs	r3, #11
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4619      	mov	r1, r3
 800271c:	4840      	ldr	r0, [pc, #256]	; (8002820 <MX_GPIO_Init+0x2d4>)
 800271e:	f000 fe47 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 8002722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002734:	2302      	movs	r3, #2
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	4619      	mov	r1, r3
 800273e:	4839      	ldr	r0, [pc, #228]	; (8002824 <MX_GPIO_Init+0x2d8>)
 8002740:	f000 fe36 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002754:	2302      	movs	r3, #2
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	4619      	mov	r1, r3
 800275e:	4832      	ldr	r0, [pc, #200]	; (8002828 <MX_GPIO_Init+0x2dc>)
 8002760:	f000 fe26 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002764:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002776:	230a      	movs	r3, #10
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	482a      	ldr	r0, [pc, #168]	; (800282c <MX_GPIO_Init+0x2e0>)
 8002782:	f000 fe15 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800278a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4619      	mov	r1, r3
 800279a:	4824      	ldr	r0, [pc, #144]	; (800282c <MX_GPIO_Init+0x2e0>)
 800279c:	f000 fe08 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 80027a0:	23fc      	movs	r3, #252	; 0xfc
 80027a2:	61fb      	str	r3, [r7, #28]
                          |LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	481b      	ldr	r0, [pc, #108]	; (8002824 <MX_GPIO_Init+0x2d8>)
 80027b8:	f000 fdfa 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80027bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80027c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027ce:	230b      	movs	r3, #11
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	4619      	mov	r1, r3
 80027d8:	4815      	ldr	r0, [pc, #84]	; (8002830 <MX_GPIO_Init+0x2e4>)
 80027da:	f000 fde9 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80027de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e4:	2312      	movs	r3, #18
 80027e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027f0:	2304      	movs	r3, #4
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	4619      	mov	r1, r3
 80027fa:	4809      	ldr	r0, [pc, #36]	; (8002820 <MX_GPIO_Init+0x2d4>)
 80027fc:	f000 fdd8 	bl	80033b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2100      	movs	r1, #0
 8002804:	2028      	movs	r0, #40	; 0x28
 8002806:	f000 fd0a 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800280a:	2028      	movs	r0, #40	; 0x28
 800280c:	f000 fd23 	bl	8003256 <HAL_NVIC_EnableIRQ>

}
 8002810:	bf00      	nop
 8002812:	3730      	adds	r7, #48	; 0x30
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	40021000 	.word	0x40021000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40020800 	.word	0x40020800
 800282c:	40020000 	.word	0x40020000
 8002830:	40021800 	.word	0x40021800

08002834 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if(htim == &htim2){
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d141      	bne.n	80028c8 <HAL_TIM_PeriodElapsedCallback+0x94>
	  temp_read = BMP2_ReadTemperature_degC(&bmp2dev_1);
 8002844:	4823      	ldr	r0, [pc, #140]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002846:	f7ff fe31 	bl	80024ac <BMP2_ReadTemperature_degC>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe f9ab 	bl	8000bac <__aeabi_d2f>
 8002856:	4603      	mov	r3, r0
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800285a:	6013      	str	r3, [r2, #0]
	  temp_read_int = (int)temp_read;
 800285c:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002866:	ee17 2a90 	vmov	r2, s15
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800286c:	601a      	str	r2, [r3, #0]
	  temp_fractional = (int)((temp_read - temp_read_int) * 1000);
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002870:	ed93 7a00 	vldr	s14, [r3]
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80028e0 <HAL_TIM_PeriodElapsedCallback+0xac>
 8002888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002890:	ee17 2a90 	vmov	r2, s15
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002896:	601a      	str	r2, [r3, #0]
	  LCD_goto_line(0);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe fd27 	bl	80012ec <LCD_goto_line>
	  LCD_printf("Actual=%d.%03d[C]", temp_read_int, temp_fractional);
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	480f      	ldr	r0, [pc, #60]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80028aa:	f7fe fd2d 	bl	8001308 <LCD_printf>
	  LCD_goto_line(1);
 80028ae:	2001      	movs	r0, #1
 80028b0:	f7fe fd1c 	bl	80012ec <LCD_goto_line>
	  LCD_printf("Zad.: %.2f [C]",temp_read);
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fe5d 	bl	8000578 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80028c4:	f7fe fd20 	bl	8001308 <LCD_printf>
  }
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000140 	.word	0x20000140
 80028d4:	20000018 	.word	0x20000018
 80028d8:	200000d4 	.word	0x200000d4
 80028dc:	200000cc 	.word	0x200000cc
 80028e0:	447a0000 	.word	0x447a0000
 80028e4:	200000d0 	.word	0x200000d0
 80028e8:	08007bd0 	.word	0x08007bd0
 80028ec:	08007be4 	.word	0x08007be4

080028f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f4:	f000 fb37 	bl	8002f66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f8:	f000 f816 	bl	8002928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028fc:	f7ff fe26 	bl	800254c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002900:	f000 fa70 	bl	8002de4 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002904:	f000 f884 	bl	8002a10 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002908:	f000 f9b6 	bl	8002c78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev_1);
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <main+0x30>)
 800290e:	f7ff fd01 	bl	8002314 <BMP2_Init>
  LCD_init();
 8002912:	f7fe fb37 	bl	8000f84 <LCD_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <main+0x34>)
 8002918:	f003 f806 	bl	8005928 <HAL_TIM_Base_Start_IT>
  while (1)
 800291c:	e7fe      	b.n	800291c <main+0x2c>
 800291e:	bf00      	nop
 8002920:	20000018 	.word	0x20000018
 8002924:	20000140 	.word	0x20000140

08002928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b094      	sub	sp, #80	; 0x50
 800292c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2230      	movs	r2, #48	; 0x30
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fc86 	bl	8007248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800294c:	f000 ff1a 	bl	8003784 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <SystemClock_Config+0xd4>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <SystemClock_Config+0xd4>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b27      	ldr	r3, [pc, #156]	; (80029fc <SystemClock_Config+0xd4>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <SystemClock_Config+0xd8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <SystemClock_Config+0xd8>)
 800296e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <SystemClock_Config+0xd8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002980:	2301      	movs	r3, #1
 8002982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002984:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800298a:	2302      	movs	r3, #2
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800298e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002994:	2304      	movs	r3, #4
 8002996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002998:	23d8      	movs	r3, #216	; 0xd8
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800299c:	2302      	movs	r3, #2
 800299e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80029a0:	2303      	movs	r3, #3
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a4:	f107 0320 	add.w	r3, r7, #32
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 ff4b 	bl	8003844 <HAL_RCC_OscConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80029b4:	f000 f826 	bl	8002a04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80029b8:	f000 fef4 	bl	80037a4 <HAL_PWREx_EnableOverDrive>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80029c2:	f000 f81f 	bl	8002a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c6:	230f      	movs	r3, #15
 80029c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ca:	2302      	movs	r3, #2
 80029cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80029d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	2107      	movs	r1, #7
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 f9d1 	bl	8003d8c <HAL_RCC_ClockConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80029f0:	f000 f808 	bl	8002a04 <Error_Handler>
  }
}
 80029f4:	bf00      	nop
 80029f6:	3750      	adds	r7, #80	; 0x50
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000

08002a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a08:	b672      	cpsid	i
}
 8002a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <Error_Handler+0x8>
	...

08002a10 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <MX_SPI4_Init+0x78>)
 8002a18:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a20:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a2e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a32:	2202      	movs	r2, #2
 8002a34:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a42:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a46:	2210      	movs	r2, #16
 8002a48:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a5e:	2207      	movs	r2, #7
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_SPI4_Init+0x74>)
 8002a70:	f001 ffa2 	bl	80049b8 <HAL_SPI_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002a7a:	f7ff ffc3 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200000d8 	.word	0x200000d8
 8002a88:	40013400 	.word	0x40013400

08002a8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <HAL_SPI_MspInit+0x7c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d127      	bne.n	8002afe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_SPI_MspInit+0x80>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a16      	ldr	r2, [pc, #88]	; (8002b0c <HAL_SPI_MspInit+0x80>)
 8002ab4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_SPI_MspInit+0x80>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_SPI_MspInit+0x80>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <HAL_SPI_MspInit+0x80>)
 8002acc:	f043 0310 	orr.w	r3, r3, #16
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_SPI_MspInit+0x80>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCL_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8002ade:	2364      	movs	r3, #100	; 0x64
 8002ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aea:	2303      	movs	r3, #3
 8002aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002aee:	2305      	movs	r3, #5
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <HAL_SPI_MspInit+0x84>)
 8002afa:	f000 fc59 	bl	80033b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40013400 	.word	0x40013400
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_MspInit+0x44>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_MspInit+0x44>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_MspInit+0x44>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_MspInit+0x44>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_MspInit+0x44>)
 8002b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_MspInit+0x44>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <NMI_Handler+0x4>

08002b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <MemManage_Handler+0x4>

08002b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <BusFault_Handler+0x4>

08002b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>

08002b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba8:	f000 fa1a 	bl	8002fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <TIM2_IRQHandler+0x10>)
 8002bb6:	f002 ff2f 	bl	8005a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000140 	.word	0x20000140

08002bc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <USART3_IRQHandler+0x10>)
 8002bca:	f003 fb6b 	bl	80062a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000018c 	.word	0x2000018c

08002bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002bdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002be0:	f000 fdac 	bl	800373c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <_sbrk+0x5c>)
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <_sbrk+0x60>)
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <_sbrk+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <_sbrk+0x64>)
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <_sbrk+0x68>)
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d207      	bcs.n	8002c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c18:	f004 fb1e 	bl	8007258 <__errno>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	220c      	movs	r2, #12
 8002c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	e009      	b.n	8002c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <_sbrk+0x64>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <_sbrk+0x64>)
 8002c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20050000 	.word	0x20050000
 8002c48:	00000400 	.word	0x00000400
 8002c4c:	2000013c 	.word	0x2000013c
 8002c50:	20000360 	.word	0x20000360

08002c54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <SystemInit+0x20>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <SystemInit+0x20>)
 8002c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c96:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8002c9e:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002ca0:	226b      	movs	r2, #107	; 0x6b
 8002ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cbe:	4814      	ldr	r0, [pc, #80]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002cc0:	f002 fdda 	bl	8005878 <HAL_TIM_Base_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002cca:	f7ff fe9b 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	4619      	mov	r1, r3
 8002cda:	480d      	ldr	r0, [pc, #52]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002cdc:	f002 ffbc 	bl	8005c58 <HAL_TIM_ConfigClockSource>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002ce6:	f7ff fe8d 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4806      	ldr	r0, [pc, #24]	; (8002d10 <MX_TIM2_Init+0x98>)
 8002cf8:	f003 f9da 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d02:	f7ff fe7f 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000140 	.word	0x20000140

08002d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d14c      	bne.n	8002dd0 <HAL_TIM_Base_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_R_Pin;
 8002d7e:	2320      	movs	r3, #32
 8002d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RGB_R_GPIO_Port, &GPIO_InitStruct);
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	4810      	ldr	r0, [pc, #64]	; (8002ddc <HAL_TIM_Base_MspInit+0xc8>)
 8002d9a:	f000 fb09 	bl	80033b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 8002d9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	4619      	mov	r1, r3
 8002dba:	4809      	ldr	r0, [pc, #36]	; (8002de0 <HAL_TIM_Base_MspInit+0xcc>)
 8002dbc:	f000 faf8 	bl	80033b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	201c      	movs	r0, #28
 8002dc6:	f000 fa2a 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002dca:	201c      	movs	r0, #28
 8002dcc:	f000 fa43 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400

08002de4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <MX_USART3_UART_Init+0x5c>)
 8002dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e26:	4805      	ldr	r0, [pc, #20]	; (8002e3c <MX_USART3_UART_Init+0x58>)
 8002e28:	f003 f9ee 	bl	8006208 <HAL_UART_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002e32:	f7ff fde7 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000018c 	.word	0x2000018c
 8002e40:	40004800 	.word	0x40004800

08002e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b0aa      	sub	sp, #168	; 0xa8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	2284      	movs	r2, #132	; 0x84
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 f9ef 	bl	8007248 <memset>
  if(uartHandle->Instance==USART3)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <HAL_UART_MspInit+0xc4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d144      	bne.n	8002efe <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f9a8 	bl	80041d8 <HAL_RCCEx_PeriphCLKConfig>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e8e:	f7ff fdb9 	bl	8002a04 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e92:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <HAL_UART_MspInit+0xc8>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_UART_MspInit+0xc8>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_UART_MspInit+0xc8>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_UART_MspInit+0xc8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_UART_MspInit+0xc8>)
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_UART_MspInit+0xc8>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002edc:	2307      	movs	r3, #7
 8002ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4809      	ldr	r0, [pc, #36]	; (8002f10 <HAL_UART_MspInit+0xcc>)
 8002eea:	f000 fa61 	bl	80033b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2027      	movs	r0, #39	; 0x27
 8002ef4:	f000 f993 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ef8:	2027      	movs	r0, #39	; 0x27
 8002efa:	f000 f9ac 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002efe:	bf00      	nop
 8002f00:	37a8      	adds	r7, #168	; 0xa8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40004800 	.word	0x40004800
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020c00 	.word	0x40020c00

08002f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f18:	480d      	ldr	r0, [pc, #52]	; (8002f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f1a:	490e      	ldr	r1, [pc, #56]	; (8002f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f20:	e002      	b.n	8002f28 <LoopCopyDataInit>

08002f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f26:	3304      	adds	r3, #4

08002f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f2c:	d3f9      	bcc.n	8002f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f30:	4c0b      	ldr	r4, [pc, #44]	; (8002f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f34:	e001      	b.n	8002f3a <LoopFillZerobss>

08002f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f38:	3204      	adds	r2, #4

08002f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f3c:	d3fb      	bcc.n	8002f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f3e:	f7ff fe89 	bl	8002c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f42:	f004 f98f 	bl	8007264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f46:	f7ff fcd3 	bl	80028f0 <main>
  bx  lr    
 8002f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f54:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002f58:	08007d50 	.word	0x08007d50
  ldr r2, =_sbss
 8002f5c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002f60:	20000360 	.word	0x20000360

08002f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC_IRQHandler>

08002f66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	f000 f94c 	bl	8003208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f000 f805 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f76:	f7ff fdcd 	bl	8002b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x54>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f967 	bl	8003272 <HAL_SYSTICK_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00e      	b.n	8002fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d80a      	bhi.n	8002fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f000 f92f 	bl	800321e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <HAL_InitTick+0x5c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000054 	.word	0x20000054
 8002fd8:	2000005c 	.word	0x2000005c
 8002fdc:	20000058 	.word	0x20000058

08002fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x20>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x24>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_IncTick+0x24>)
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	2000005c 	.word	0x2000005c
 8003004:	20000214 	.word	0x20000214

08003008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return uwTick;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_GetTick+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000214 	.word	0x20000214

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff ffee 	bl	8003008 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_Delay+0x44>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffde 	bl	8003008 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000005c 	.word	0x2000005c

08003068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <__NVIC_SetPriorityGrouping+0x40>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 8003092:	4313      	orrs	r3, r2
 8003094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003096:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <__NVIC_SetPriorityGrouping+0x40>)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	60d3      	str	r3, [r2, #12]
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00
 80030ac:	05fa0000 	.word	0x05fa0000

080030b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <__NVIC_GetPriorityGrouping+0x18>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0307 	and.w	r3, r3, #7
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4907      	ldr	r1, [pc, #28]	; (8003104 <__NVIC_EnableIRQ+0x38>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
         );
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d4:	d301      	bcc.n	80031da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00f      	b.n	80031fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <SysTick_Config+0x40>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e2:	210f      	movs	r1, #15
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f7ff ff8e 	bl	8003108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <SysTick_Config+0x40>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <SysTick_Config+0x40>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000e010 	.word	0xe000e010

08003208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff29 	bl	8003068 <__NVIC_SetPriorityGrouping>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	4603      	mov	r3, r0
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003230:	f7ff ff3e 	bl	80030b0 <__NVIC_GetPriorityGrouping>
 8003234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff8e 	bl	800315c <NVIC_EncodePriority>
 8003240:	4602      	mov	r2, r0
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff5d 	bl	8003108 <__NVIC_SetPriority>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff31 	bl	80030cc <__NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffa2 	bl	80031c4 <SysTick_Config>
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff feb6 	bl	8003008 <HAL_GetTick>
 800329c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d008      	beq.n	80032bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e052      	b.n	8003362 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0216 	bic.w	r2, r2, #22
 80032ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d103      	bne.n	80032ec <HAL_DMA_Abort+0x62>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0208 	bic.w	r2, r2, #8
 80032fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330c:	e013      	b.n	8003336 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330e:	f7ff fe7b 	bl	8003008 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b05      	cmp	r3, #5
 800331a:	d90c      	bls.n	8003336 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2203      	movs	r2, #3
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e015      	b.n	8003362 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e4      	bne.n	800330e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	223f      	movs	r2, #63	; 0x3f
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d004      	beq.n	8003388 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e00c      	b.n	80033a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2205      	movs	r2, #5
 800338c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e175      	b.n	80036bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 8164 	bne.w	80036b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d005      	beq.n	8003406 <HAL_GPIO_Init+0x56>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d130      	bne.n	8003468 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 0201 	and.w	r2, r3, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b03      	cmp	r3, #3
 8003472:	d017      	beq.n	80034a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d123      	bne.n	80034f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80be 	beq.w	80036b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_GPIO_Init+0x324>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a65      	ldr	r2, [pc, #404]	; (80036d4 <HAL_GPIO_Init+0x324>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_GPIO_Init+0x324>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003552:	4a61      	ldr	r2, [pc, #388]	; (80036d8 <HAL_GPIO_Init+0x328>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a58      	ldr	r2, [pc, #352]	; (80036dc <HAL_GPIO_Init+0x32c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d037      	beq.n	80035ee <HAL_GPIO_Init+0x23e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <HAL_GPIO_Init+0x330>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_GPIO_Init+0x23a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a56      	ldr	r2, [pc, #344]	; (80036e4 <HAL_GPIO_Init+0x334>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <HAL_GPIO_Init+0x236>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a55      	ldr	r2, [pc, #340]	; (80036e8 <HAL_GPIO_Init+0x338>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d025      	beq.n	80035e2 <HAL_GPIO_Init+0x232>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a54      	ldr	r2, [pc, #336]	; (80036ec <HAL_GPIO_Init+0x33c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <HAL_GPIO_Init+0x22e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a53      	ldr	r2, [pc, #332]	; (80036f0 <HAL_GPIO_Init+0x340>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x22a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a52      	ldr	r2, [pc, #328]	; (80036f4 <HAL_GPIO_Init+0x344>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x226>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a51      	ldr	r2, [pc, #324]	; (80036f8 <HAL_GPIO_Init+0x348>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x222>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a50      	ldr	r2, [pc, #320]	; (80036fc <HAL_GPIO_Init+0x34c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x21e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4f      	ldr	r2, [pc, #316]	; (8003700 <HAL_GPIO_Init+0x350>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x21a>
 80035c6:	2309      	movs	r3, #9
 80035c8:	e012      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035ca:	230a      	movs	r3, #10
 80035cc:	e010      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035ce:	2308      	movs	r3, #8
 80035d0:	e00e      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e00c      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035d6:	2306      	movs	r3, #6
 80035d8:	e00a      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035da:	2305      	movs	r3, #5
 80035dc:	e008      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035de:	2304      	movs	r3, #4
 80035e0:	e006      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035e2:	2303      	movs	r3, #3
 80035e4:	e004      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e002      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035ee:	2300      	movs	r3, #0
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f002 0203 	and.w	r2, r2, #3
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	4093      	lsls	r3, r2
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003600:	4935      	ldr	r1, [pc, #212]	; (80036d8 <HAL_GPIO_Init+0x328>)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	3302      	adds	r3, #2
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <HAL_GPIO_Init+0x354>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003632:	4a34      	ldr	r2, [pc, #208]	; (8003704 <HAL_GPIO_Init+0x354>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <HAL_GPIO_Init+0x354>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800365c:	4a29      	ldr	r2, [pc, #164]	; (8003704 <HAL_GPIO_Init+0x354>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003662:	4b28      	ldr	r3, [pc, #160]	; (8003704 <HAL_GPIO_Init+0x354>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003686:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_GPIO_Init+0x354>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_GPIO_Init+0x354>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <HAL_GPIO_Init+0x354>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3301      	adds	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	f67f ae86 	bls.w	80033d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3724      	adds	r7, #36	; 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40020400 	.word	0x40020400
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020c00 	.word	0x40020c00
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40021400 	.word	0x40021400
 80036f4:	40021800 	.word	0x40021800
 80036f8:	40021c00 	.word	0x40021c00
 80036fc:	40022000 	.word	0x40022000
 8003700:	40022400 	.word	0x40022400
 8003704:	40013c00 	.word	0x40013c00

08003708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
 8003714:	4613      	mov	r3, r2
 8003716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003718:	787b      	ldrb	r3, [r7, #1]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003724:	e003      	b.n	800372e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	041a      	lsls	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	619a      	str	r2, [r3, #24]
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d006      	beq.n	8003760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003752:	4a05      	ldr	r2, [pc, #20]	; (8003768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f806 	bl	800376c <HAL_GPIO_EXTI_Callback>
  }
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40013c00 	.word	0x40013c00

0800376c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40007000 	.word	0x40007000

080037a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <HAL_PWREx_EnableOverDrive+0x98>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_PWREx_EnableOverDrive+0x98>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_PWREx_EnableOverDrive+0x98>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d2:	f7ff fc19 	bl	8003008 <HAL_GetTick>
 80037d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037d8:	e009      	b.n	80037ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037da:	f7ff fc15 	bl	8003008 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e8:	d901      	bls.n	80037ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e022      	b.n	8003834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fa:	d1ee      	bne.n	80037da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0f      	ldr	r2, [pc, #60]	; (8003840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003806:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003808:	f7ff fbfe 	bl	8003008 <HAL_GetTick>
 800380c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800380e:	e009      	b.n	8003824 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003810:	f7ff fbfa 	bl	8003008 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800381e:	d901      	bls.n	8003824 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e007      	b.n	8003834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003830:	d1ee      	bne.n	8003810 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	40007000 	.word	0x40007000

08003844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800384c:	2300      	movs	r3, #0
 800384e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e291      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8087 	beq.w	8003976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003868:	4b96      	ldr	r3, [pc, #600]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b04      	cmp	r3, #4
 8003872:	d00c      	beq.n	800388e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003874:	4b93      	ldr	r3, [pc, #588]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d112      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62>
 8003880:	4b90      	ldr	r3, [pc, #576]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388c:	d10b      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388e:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d06c      	beq.n	8003974 <HAL_RCC_OscConfig+0x130>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d168      	bne.n	8003974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e26b      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ae:	d106      	bne.n	80038be <HAL_RCC_OscConfig+0x7a>
 80038b0:	4b84      	ldr	r3, [pc, #528]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a83      	ldr	r2, [pc, #524]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e02e      	b.n	800391c <HAL_RCC_OscConfig+0xd8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x9c>
 80038c6:	4b7f      	ldr	r3, [pc, #508]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7e      	ldr	r2, [pc, #504]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a7b      	ldr	r2, [pc, #492]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e01d      	b.n	800391c <HAL_RCC_OscConfig+0xd8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0xc0>
 80038ea:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a75      	ldr	r2, [pc, #468]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b73      	ldr	r3, [pc, #460]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a72      	ldr	r2, [pc, #456]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0xd8>
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 800390a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a6b      	ldr	r2, [pc, #428]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d013      	beq.n	800394c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7ff fb70 	bl	8003008 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7ff fb6c 	bl	8003008 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e21f      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393e:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0xe8>
 800394a:	e014      	b.n	8003976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7ff fb5c 	bl	8003008 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7ff fb58 	bl	8003008 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e20b      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003966:	4b57      	ldr	r3, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x110>
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d069      	beq.n	8003a56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003982:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398e:	4b4d      	ldr	r3, [pc, #308]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b08      	cmp	r3, #8
 8003998:	d11c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x190>
 800399a:	4b4a      	ldr	r3, [pc, #296]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d116      	bne.n	80039d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_RCC_OscConfig+0x17a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e1df      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039be:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	493d      	ldr	r1, [pc, #244]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d2:	e040      	b.n	8003a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d023      	beq.n	8003a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039dc:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7ff fb0e 	bl	8003008 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f0:	f7ff fb0a 	bl	8003008 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1bd      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4929      	ldr	r1, [pc, #164]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
 8003a22:	e018      	b.n	8003a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7ff faea 	bl	8003008 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a38:	f7ff fae6 	bl	8003008 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e199      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d038      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d019      	beq.n	8003a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7ff fac7 	bl	8003008 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7e:	f7ff fac3 	bl	8003008 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e176      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x23a>
 8003a9c:	e01a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aaa:	f7ff faad 	bl	8003008 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab2:	f7ff faa9 	bl	8003008 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d903      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e15c      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
 8003ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac8:	4b91      	ldr	r3, [pc, #580]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ee      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80a4 	beq.w	8003c2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae2:	4b8b      	ldr	r3, [pc, #556]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a87      	ldr	r2, [pc, #540]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b85      	ldr	r3, [pc, #532]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0a:	4b82      	ldr	r3, [pc, #520]	; (8003d14 <HAL_RCC_OscConfig+0x4d0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d118      	bne.n	8003b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b16:	4b7f      	ldr	r3, [pc, #508]	; (8003d14 <HAL_RCC_OscConfig+0x4d0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7e      	ldr	r2, [pc, #504]	; (8003d14 <HAL_RCC_OscConfig+0x4d0>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b22:	f7ff fa71 	bl	8003008 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7ff fa6d 	bl	8003008 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b64      	cmp	r3, #100	; 0x64
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e120      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3c:	4b75      	ldr	r3, [pc, #468]	; (8003d14 <HAL_RCC_OscConfig+0x4d0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x31a>
 8003b50:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a6e      	ldr	r2, [pc, #440]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5c:	e02d      	b.n	8003bba <HAL_RCC_OscConfig+0x376>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x33c>
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a66      	ldr	r2, [pc, #408]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7e:	e01c      	b.n	8003bba <HAL_RCC_OscConfig+0x376>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d10c      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x35e>
 8003b88:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a60      	ldr	r2, [pc, #384]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b8e:	f043 0304 	orr.w	r3, r3, #4
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
 8003b94:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a5d      	ldr	r2, [pc, #372]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba0:	e00b      	b.n	8003bba <HAL_RCC_OscConfig+0x376>
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a5a      	ldr	r2, [pc, #360]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	; 0x70
 8003bae:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a57      	ldr	r2, [pc, #348]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003bb4:	f023 0304 	bic.w	r3, r3, #4
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d015      	beq.n	8003bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc2:	f7ff fa21 	bl	8003008 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7ff fa1d 	bl	8003008 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0ce      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	4b4b      	ldr	r3, [pc, #300]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ee      	beq.n	8003bca <HAL_RCC_OscConfig+0x386>
 8003bec:	e014      	b.n	8003c18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7ff fa0b 	bl	8003008 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7ff fa07 	bl	8003008 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0b8      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0c:	4b40      	ldr	r3, [pc, #256]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ee      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d105      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1e:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	4a3b      	ldr	r2, [pc, #236]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80a4 	beq.w	8003d7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c34:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d06b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d149      	bne.n	8003cdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a30      	ldr	r2, [pc, #192]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7ff f9d8 	bl	8003008 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7ff f9d4 	bl	8003008 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e087      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6e:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	019b      	lsls	r3, r3, #6
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	3b01      	subs	r3, #1
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ca6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7ff f9a8 	bl	8003008 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7ff f9a4 	bl	8003008 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e057      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x478>
 8003cda:	e04f      	b.n	8003d7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7ff f98e 	bl	8003008 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7ff f98a 	bl	8003008 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e03d      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4ac>
 8003d0e:	e035      	b.n	8003d7c <HAL_RCC_OscConfig+0x538>
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_OscConfig+0x544>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d028      	beq.n	8003d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d121      	bne.n	8003d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d11a      	bne.n	8003d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d111      	bne.n	8003d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	3b01      	subs	r3, #1
 8003d62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d107      	bne.n	8003d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800

08003d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0d0      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da4:	4b6a      	ldr	r3, [pc, #424]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d910      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b67      	ldr	r3, [pc, #412]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 020f 	bic.w	r2, r3, #15
 8003dba:	4965      	ldr	r1, [pc, #404]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b63      	ldr	r3, [pc, #396]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0b8      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dec:	4b59      	ldr	r3, [pc, #356]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a58      	ldr	r2, [pc, #352]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e04:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a52      	ldr	r2, [pc, #328]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	494d      	ldr	r1, [pc, #308]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d040      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d115      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e07f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4e:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e073      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e06b      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e6e:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 0203 	bic.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4936      	ldr	r1, [pc, #216]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e80:	f7ff f8c2 	bl	8003008 <HAL_GetTick>
 8003e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e88:	f7ff f8be 	bl	8003008 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e053      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 020c 	and.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d1eb      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d210      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 020f 	bic.w	r2, r3, #15
 8003ec6:	4922      	ldr	r1, [pc, #136]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e032      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4916      	ldr	r1, [pc, #88]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	490e      	ldr	r1, [pc, #56]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f1e:	f000 f821 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	490a      	ldr	r1, [pc, #40]	; (8003f58 <HAL_RCC_ClockConfig+0x1cc>)
 8003f30:	5ccb      	ldrb	r3, [r1, r3]
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1d0>)
 8003f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1d4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff f81e 	bl	8002f80 <HAL_InitTick>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023c00 	.word	0x40023c00
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08007bf4 	.word	0x08007bf4
 8003f5c:	20000054 	.word	0x20000054
 8003f60:	20000058 	.word	0x20000058

08003f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f68:	b094      	sub	sp, #80	; 0x50
 8003f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f70:	2300      	movs	r3, #0
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f74:	2300      	movs	r3, #0
 8003f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f7c:	4b79      	ldr	r3, [pc, #484]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d00d      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	f200 80e1 	bhi.w	8004150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x34>
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d003      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f96:	e0db      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b73      	ldr	r3, [pc, #460]	; (8004168 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f9c:	e0db      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9e:	4b73      	ldr	r3, [pc, #460]	; (800416c <HAL_RCC_GetSysClockFreq+0x208>)
 8003fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fa2:	e0d8      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fae:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d063      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fba:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fce:	2300      	movs	r3, #0
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	462b      	mov	r3, r5
 8003fda:	f04f 0000 	mov.w	r0, #0
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	0159      	lsls	r1, r3, #5
 8003fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe8:	0150      	lsls	r0, r2, #5
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4621      	mov	r1, r4
 8003ff0:	1a51      	subs	r1, r2, r1
 8003ff2:	6139      	str	r1, [r7, #16]
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004008:	4659      	mov	r1, fp
 800400a:	018b      	lsls	r3, r1, #6
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004012:	4651      	mov	r1, sl
 8004014:	018a      	lsls	r2, r1, #6
 8004016:	4651      	mov	r1, sl
 8004018:	ebb2 0801 	subs.w	r8, r2, r1
 800401c:	4659      	mov	r1, fp
 800401e:	eb63 0901 	sbc.w	r9, r3, r1
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004036:	4690      	mov	r8, r2
 8004038:	4699      	mov	r9, r3
 800403a:	4623      	mov	r3, r4
 800403c:	eb18 0303 	adds.w	r3, r8, r3
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	462b      	mov	r3, r5
 8004044:	eb49 0303 	adc.w	r3, r9, r3
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004056:	4629      	mov	r1, r5
 8004058:	024b      	lsls	r3, r1, #9
 800405a:	4621      	mov	r1, r4
 800405c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004060:	4621      	mov	r1, r4
 8004062:	024a      	lsls	r2, r1, #9
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406a:	2200      	movs	r2, #0
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
 800406e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004074:	f7fc fdea 	bl	8000c4c <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004080:	e058      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	2200      	movs	r2, #0
 800408a:	4618      	mov	r0, r3
 800408c:	4611      	mov	r1, r2
 800408e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	2300      	movs	r3, #0
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
 8004098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	0159      	lsls	r1, r3, #5
 80040aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ae:	0150      	lsls	r0, r2, #5
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4641      	mov	r1, r8
 80040b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040ba:	4649      	mov	r1, r9
 80040bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040d4:	ebb2 040a 	subs.w	r4, r2, sl
 80040d8:	eb63 050b 	sbc.w	r5, r3, fp
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	00eb      	lsls	r3, r5, #3
 80040e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ea:	00e2      	lsls	r2, r4, #3
 80040ec:	4614      	mov	r4, r2
 80040ee:	461d      	mov	r5, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	18e3      	adds	r3, r4, r3
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	464b      	mov	r3, r9
 80040f8:	eb45 0303 	adc.w	r3, r5, r3
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800410a:	4629      	mov	r1, r5
 800410c:	028b      	lsls	r3, r1, #10
 800410e:	4621      	mov	r1, r4
 8004110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004114:	4621      	mov	r1, r4
 8004116:	028a      	lsls	r2, r1, #10
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411e:	2200      	movs	r2, #0
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	61fa      	str	r2, [r7, #28]
 8004124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004128:	f7fc fd90 	bl	8000c4c <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4613      	mov	r3, r2
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	3301      	adds	r3, #1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800414e:	e002      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetSysClockFreq+0x204>)
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004158:	4618      	mov	r0, r3
 800415a:	3750      	adds	r7, #80	; 0x50
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400
 800416c:	007a1200 	.word	0x007a1200

08004170 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_RCC_GetHCLKFreq+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000054 	.word	0x20000054

08004188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800418c:	f7ff fff0 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0a9b      	lsrs	r3, r3, #10
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4903      	ldr	r1, [pc, #12]	; (80041ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08007c04 	.word	0x08007c04

080041b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041b4:	f7ff ffdc 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0b5b      	lsrs	r3, r3, #13
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	; (80041d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08007c04 	.word	0x08007c04

080041d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d012      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004200:	4b69      	ldr	r3, [pc, #420]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a68      	ldr	r2, [pc, #416]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800420a:	6093      	str	r3, [r2, #8]
 800420c:	4b66      	ldr	r3, [pc, #408]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	4964      	ldr	r1, [pc, #400]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d017      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004232:	4b5d      	ldr	r3, [pc, #372]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004240:	4959      	ldr	r1, [pc, #356]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004250:	d101      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004252:	2301      	movs	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d017      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800426e:	4b4e      	ldr	r3, [pc, #312]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004274:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	494a      	ldr	r1, [pc, #296]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428c:	d101      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800428e:	2301      	movs	r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800429a:	2301      	movs	r3, #1
 800429c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 808b 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042bc:	4b3a      	ldr	r3, [pc, #232]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	4a39      	ldr	r2, [pc, #228]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6413      	str	r3, [r2, #64]	; 0x40
 80042c8:	4b37      	ldr	r3, [pc, #220]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042d4:	4b35      	ldr	r3, [pc, #212]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a34      	ldr	r2, [pc, #208]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e0:	f7fe fe92 	bl	8003008 <HAL_GetTick>
 80042e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fe fe8e 	bl	8003008 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e357      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042fa:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004306:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d035      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d02e      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a1d      	ldr	r2, [pc, #116]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004344:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004346:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d114      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fe fe56 	bl	8003008 <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	e00a      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fe fe52 	bl	8003008 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e319      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0ee      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800438e:	d111      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800439e:	400b      	ands	r3, r1
 80043a0:	4901      	ldr	r1, [pc, #4]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
 80043a6:	e00b      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40007000 	.word	0x40007000
 80043b0:	0ffffcff 	.word	0x0ffffcff
 80043b4:	4baa      	ldr	r3, [pc, #680]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4aa9      	ldr	r2, [pc, #676]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043be:	6093      	str	r3, [r2, #8]
 80043c0:	4ba7      	ldr	r3, [pc, #668]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	49a4      	ldr	r1, [pc, #656]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d010      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043de:	4ba0      	ldr	r3, [pc, #640]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e4:	4a9e      	ldr	r2, [pc, #632]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043ee:	4b9c      	ldr	r3, [pc, #624]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	4999      	ldr	r1, [pc, #612]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440c:	4b94      	ldr	r3, [pc, #592]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441a:	4991      	ldr	r1, [pc, #580]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800442e:	4b8c      	ldr	r3, [pc, #560]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800443c:	4988      	ldr	r1, [pc, #544]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004450:	4b83      	ldr	r3, [pc, #524]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	4980      	ldr	r1, [pc, #512]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004472:	4b7b      	ldr	r3, [pc, #492]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4977      	ldr	r1, [pc, #476]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004494:	4b72      	ldr	r3, [pc, #456]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	496f      	ldr	r1, [pc, #444]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f023 020c 	bic.w	r2, r3, #12
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	4966      	ldr	r1, [pc, #408]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	495e      	ldr	r1, [pc, #376]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044fa:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	4955      	ldr	r1, [pc, #340]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800451c:	4b50      	ldr	r3, [pc, #320]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	494d      	ldr	r1, [pc, #308]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800453e:	4b48      	ldr	r3, [pc, #288]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	4944      	ldr	r1, [pc, #272]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004560:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	493c      	ldr	r1, [pc, #240]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004582:	4b37      	ldr	r3, [pc, #220]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004590:	4933      	ldr	r1, [pc, #204]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045a4:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b2:	492b      	ldr	r1, [pc, #172]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d011      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d4:	4922      	ldr	r1, [pc, #136]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045e6:	2301      	movs	r3, #1
 80045e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004606:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004614:	4912      	ldr	r1, [pc, #72]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004638:	4909      	ldr	r1, [pc, #36]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d006      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80d9 	beq.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004654:	4b02      	ldr	r3, [pc, #8]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a01      	ldr	r2, [pc, #4]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800465e:	e001      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004660:	40023800 	.word	0x40023800
 8004664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004666:	f7fe fccf 	bl	8003008 <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800466e:	f7fe fccb 	bl	8003008 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b64      	cmp	r3, #100	; 0x64
 800467a:	d901      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e194      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004680:	4b6c      	ldr	r3, [pc, #432]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d021      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11d      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046a0:	4b64      	ldr	r3, [pc, #400]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a6:	0c1b      	lsrs	r3, r3, #16
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046ae:	4b61      	ldr	r3, [pc, #388]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	0e1b      	lsrs	r3, r3, #24
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	019a      	lsls	r2, r3, #6
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	431a      	orrs	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	061b      	lsls	r3, r3, #24
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	071b      	lsls	r3, r3, #28
 80046d4:	4957      	ldr	r1, [pc, #348]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d02e      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004706:	d129      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004708:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470e:	0c1b      	lsrs	r3, r3, #16
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004716:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471c:	0f1b      	lsrs	r3, r3, #28
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	019a      	lsls	r2, r3, #6
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	431a      	orrs	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	071b      	lsls	r3, r3, #28
 800473c:	493d      	ldr	r1, [pc, #244]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004744:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474a:	f023 021f 	bic.w	r2, r3, #31
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	3b01      	subs	r3, #1
 8004754:	4937      	ldr	r1, [pc, #220]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01d      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004768:	4b32      	ldr	r3, [pc, #200]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800476a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476e:	0e1b      	lsrs	r3, r3, #24
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477c:	0f1b      	lsrs	r3, r3, #28
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	019a      	lsls	r2, r3, #6
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	431a      	orrs	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	431a      	orrs	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	071b      	lsls	r3, r3, #28
 800479c:	4925      	ldr	r1, [pc, #148]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d011      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	019a      	lsls	r2, r3, #6
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	061b      	lsls	r3, r3, #24
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	071b      	lsls	r3, r3, #28
 80047cc:	4919      	ldr	r1, [pc, #100]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047d4:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a16      	ldr	r2, [pc, #88]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e0:	f7fe fc12 	bl	8003008 <HAL_GetTick>
 80047e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047e8:	f7fe fc0e 	bl	8003008 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0d7      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b01      	cmp	r3, #1
 800480a:	f040 80cd 	bne.w	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481a:	f7fe fbf5 	bl	8003008 <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004820:	e00a      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004822:	f7fe fbf1 	bl	8003008 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b64      	cmp	r3, #100	; 0x64
 800482e:	d903      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e0ba      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004834:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004838:	4b5e      	ldr	r3, [pc, #376]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004844:	d0ed      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02e      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d12a      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800486e:	4b51      	ldr	r3, [pc, #324]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800487c:	4b4d      	ldr	r3, [pc, #308]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	0f1b      	lsrs	r3, r3, #28
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	019a      	lsls	r2, r3, #6
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	061b      	lsls	r3, r3, #24
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	4944      	ldr	r1, [pc, #272]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048aa:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	3b01      	subs	r3, #1
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	493d      	ldr	r1, [pc, #244]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d022      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d8:	d11d      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048da:	4b36      	ldr	r3, [pc, #216]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	0e1b      	lsrs	r3, r3, #24
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048e8:	4b32      	ldr	r3, [pc, #200]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	0f1b      	lsrs	r3, r3, #28
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	019a      	lsls	r2, r3, #6
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	431a      	orrs	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	431a      	orrs	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	4929      	ldr	r1, [pc, #164]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d028      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	0e1b      	lsrs	r3, r3, #24
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004930:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	019a      	lsls	r2, r3, #6
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	431a      	orrs	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	061b      	lsls	r3, r3, #24
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	071b      	lsls	r3, r3, #28
 8004956:	4917      	ldr	r1, [pc, #92]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800495e:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	4911      	ldr	r1, [pc, #68]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004974:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0e      	ldr	r2, [pc, #56]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800497a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004980:	f7fe fb42 	bl	8003008 <HAL_GetTick>
 8004984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004988:	f7fe fb3e 	bl	8003008 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e007      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a6:	d1ef      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800

080049b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e09d      	b.n	8004b06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d108      	bne.n	80049e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049da:	d009      	beq.n	80049f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	61da      	str	r2, [r3, #28]
 80049e2:	e005      	b.n	80049f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fe f83e 	bl	8002a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a30:	d902      	bls.n	8004a38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e002      	b.n	8004a3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a46:	d007      	beq.n	8004a58 <HAL_SPI_Init+0xa0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a50:	d002      	beq.n	8004a58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9a:	ea42 0103 	orr.w	r1, r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	f003 0204 	and.w	r2, r3, #4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ad4:	ea42 0103 	orr.w	r1, r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b088      	sub	sp, #32
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_SPI_Transmit+0x22>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e158      	b.n	8004de2 <HAL_SPI_Transmit+0x2d4>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b38:	f7fe fa66 	bl	8003008 <HAL_GetTick>
 8004b3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d002      	beq.n	8004b54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b52:	e13d      	b.n	8004dd0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_SPI_Transmit+0x52>
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b64:	e134      	b.n	8004dd0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2203      	movs	r2, #3
 8004b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d007      	beq.n	8004bf0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf8:	d94b      	bls.n	8004c92 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Transmit+0xfa>
 8004c02:	8afb      	ldrh	r3, [r7, #22]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d13e      	bne.n	8004c86 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	881a      	ldrh	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	1c9a      	adds	r2, r3, #2
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c2c:	e02b      	b.n	8004c86 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d112      	bne.n	8004c62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	1c9a      	adds	r2, r3, #2
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c60:	e011      	b.n	8004c86 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c62:	f7fe f9d1 	bl	8003008 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d803      	bhi.n	8004c7a <HAL_SPI_Transmit+0x16c>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Transmit+0x172>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c84:	e0a4      	b.n	8004dd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ce      	bne.n	8004c2e <HAL_SPI_Transmit+0x120>
 8004c90:	e07c      	b.n	8004d8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Transmit+0x192>
 8004c9a:	8afb      	ldrh	r3, [r7, #22]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d170      	bne.n	8004d82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d912      	bls.n	8004cd0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	1c9a      	adds	r2, r3, #2
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b02      	subs	r3, #2
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cce:	e058      	b.n	8004d82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	7812      	ldrb	r2, [r2, #0]
 8004cdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004cf6:	e044      	b.n	8004d82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d12b      	bne.n	8004d5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d912      	bls.n	8004d36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	881a      	ldrh	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	1c9a      	adds	r2, r3, #2
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b02      	subs	r3, #2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d34:	e025      	b.n	8004d82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d5c:	e011      	b.n	8004d82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d5e:	f7fe f953 	bl	8003008 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d803      	bhi.n	8004d76 <HAL_SPI_Transmit+0x268>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d102      	bne.n	8004d7c <HAL_SPI_Transmit+0x26e>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d80:	e026      	b.n	8004dd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1b5      	bne.n	8004cf8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fd07 	bl	80057a4 <SPI_EndRxTxTransaction>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e000      	b.n	8004dd0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b088      	sub	sp, #32
 8004dee:	af02      	add	r7, sp, #8
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e06:	d112      	bne.n	8004e2e <HAL_SPI_Receive+0x44>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10e      	bne.n	8004e2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2204      	movs	r2, #4
 8004e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f910 	bl	800504a <HAL_SPI_TransmitReceive>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	e109      	b.n	8005042 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_SPI_Receive+0x52>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e102      	b.n	8005042 <HAL_SPI_Receive+0x258>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e44:	f7fe f8e0 	bl	8003008 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d002      	beq.n	8004e5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
 8004e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e5a:	e0e9      	b.n	8005030 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_Receive+0x7e>
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e6c:	e0e0      	b.n	8005030 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2204      	movs	r2, #4
 8004e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb8:	d908      	bls.n	8004ecc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	e007      	b.n	8004edc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eda:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee4:	d10f      	bne.n	8004f06 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d007      	beq.n	8004f24 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f2c:	d867      	bhi.n	8004ffe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f2e:	e030      	b.n	8004f92 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d117      	bne.n	8004f6e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f103 020c 	add.w	r2, r3, #12
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f6c:	e011      	b.n	8004f92 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6e:	f7fe f84b 	bl	8003008 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d803      	bhi.n	8004f86 <HAL_SPI_Receive+0x19c>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d102      	bne.n	8004f8c <HAL_SPI_Receive+0x1a2>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f90:	e04e      	b.n	8005030 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1c8      	bne.n	8004f30 <HAL_SPI_Receive+0x146>
 8004f9e:	e034      	b.n	800500a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d115      	bne.n	8004fda <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fd8:	e011      	b.n	8004ffe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fda:	f7fe f815 	bl	8003008 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d803      	bhi.n	8004ff2 <HAL_SPI_Receive+0x208>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d102      	bne.n	8004ff8 <HAL_SPI_Receive+0x20e>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ffc:	e018      	b.n	8005030 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1ca      	bne.n	8004fa0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fb4c 	bl	80056ac <SPI_EndRxTransaction>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
 800502c:	e000      	b.n	8005030 <HAL_SPI_Receive+0x246>
  }

error :
 800502e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b08a      	sub	sp, #40	; 0x28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005058:	2301      	movs	r3, #1
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x26>
 800506c:	2302      	movs	r3, #2
 800506e:	e1fb      	b.n	8005468 <HAL_SPI_TransmitReceive+0x41e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005078:	f7fd ffc6 	bl	8003008 <HAL_GetTick>
 800507c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005084:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005094:	7efb      	ldrb	r3, [r7, #27]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d00e      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x6e>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a0:	d106      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x66>
 80050aa:	7efb      	ldrb	r3, [r7, #27]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d003      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050b6:	e1cd      	b.n	8005454 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_SPI_TransmitReceive+0x80>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_SPI_TransmitReceive+0x80>
 80050c4:	887b      	ldrh	r3, [r7, #2]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050d0:	e1c0      	b.n	8005454 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d003      	beq.n	80050e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2205      	movs	r2, #5
 80050e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	887a      	ldrh	r2, [r7, #2]
 80050f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	887a      	ldrh	r2, [r7, #2]
 80050fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	887a      	ldrh	r2, [r7, #2]
 800510c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	887a      	ldrh	r2, [r7, #2]
 8005112:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005128:	d802      	bhi.n	8005130 <HAL_SPI_TransmitReceive+0xe6>
 800512a:	8a3b      	ldrh	r3, [r7, #16]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d908      	bls.n	8005142 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800513e:	605a      	str	r2, [r3, #4]
 8005140:	e007      	b.n	8005152 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005150:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d007      	beq.n	8005170 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005178:	d97c      	bls.n	8005274 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x13e>
 8005182:	8a7b      	ldrh	r3, [r7, #18]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d169      	bne.n	800525c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	1c9a      	adds	r2, r3, #2
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ac:	e056      	b.n	800525c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d11b      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x1aa>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d016      	beq.n	80051f4 <HAL_SPI_TransmitReceive+0x1aa>
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d113      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	1c9a      	adds	r2, r3, #2
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d11c      	bne.n	800523c <HAL_SPI_TransmitReceive+0x1f2>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	b292      	uxth	r2, r2
 800521a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005238:	2301      	movs	r3, #1
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800523c:	f7fd fee4 	bl	8003008 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005248:	429a      	cmp	r2, r3
 800524a:	d807      	bhi.n	800525c <HAL_SPI_TransmitReceive+0x212>
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d003      	beq.n	800525c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800525a:	e0fb      	b.n	8005454 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1a3      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x164>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d19d      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x164>
 8005272:	e0df      	b.n	8005434 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x23a>
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	2b01      	cmp	r3, #1
 8005280:	f040 80cb 	bne.w	800541a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d912      	bls.n	80052b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	881a      	ldrh	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	1c9a      	adds	r2, r3, #2
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b02      	subs	r3, #2
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052b2:	e0b2      	b.n	800541a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052da:	e09e      	b.n	800541a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d134      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x30a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d02f      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x30a>
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d12c      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d912      	bls.n	800532a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b02      	subs	r3, #2
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005328:	e012      	b.n	8005350 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	7812      	ldrb	r2, [r2, #0]
 8005336:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b01      	cmp	r3, #1
 8005360:	d148      	bne.n	80053f4 <HAL_SPI_TransmitReceive+0x3aa>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d042      	beq.n	80053f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d923      	bls.n	80053c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	b292      	uxth	r2, r2
 8005386:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	1c9a      	adds	r2, r3, #2
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b02      	subs	r3, #2
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d81f      	bhi.n	80053f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	e016      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f103 020c 	add.w	r2, r3, #12
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053f0:	2301      	movs	r3, #1
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053f4:	f7fd fe08 	bl	8003008 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005400:	429a      	cmp	r2, r3
 8005402:	d803      	bhi.n	800540c <HAL_SPI_TransmitReceive+0x3c2>
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d102      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x3c8>
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005418:	e01c      	b.n	8005454 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	f47f af5b 	bne.w	80052dc <HAL_SPI_TransmitReceive+0x292>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	f47f af54 	bne.w	80052dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f9b3 	bl	80057a4 <SPI_EndRxTxTransaction>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	661a      	str	r2, [r3, #96]	; 0x60
 8005450:	e000      	b.n	8005454 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005452:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005468:	4618      	mov	r0, r3
 800546a:	3728      	adds	r7, #40	; 0x28
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005480:	f7fd fdc2 	bl	8003008 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	4413      	add	r3, r2
 800548e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005490:	f7fd fdba 	bl	8003008 <HAL_GetTick>
 8005494:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005496:	4b39      	ldr	r3, [pc, #228]	; (800557c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	015b      	lsls	r3, r3, #5
 800549c:	0d1b      	lsrs	r3, r3, #20
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054a6:	e054      	b.n	8005552 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d050      	beq.n	8005552 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054b0:	f7fd fdaa 	bl	8003008 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d902      	bls.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d13d      	bne.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054de:	d111      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e8:	d004      	beq.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f2:	d107      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550c:	d10f      	bne.n	800552e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800552c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e017      	b.n	8005572 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3b01      	subs	r3, #1
 8005550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d19b      	bne.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000054 	.word	0x20000054

08005580 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005592:	f7fd fd39 	bl	8003008 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	4413      	add	r3, r2
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055a2:	f7fd fd31 	bl	8003008 <HAL_GetTick>
 80055a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055b0:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	00da      	lsls	r2, r3, #3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	0d1b      	lsrs	r3, r3, #20
 80055c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055c8:	e060      	b.n	800568c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055d0:	d107      	bne.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d050      	beq.n	800568c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055ea:	f7fd fd0d 	bl	8003008 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d902      	bls.n	8005600 <SPI_WaitFifoStateUntilTimeout+0x80>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d13d      	bne.n	800567c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800560e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005618:	d111      	bne.n	800563e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005622:	d004      	beq.n	800562e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562c:	d107      	bne.n	800563e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005646:	d10f      	bne.n	8005668 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005666:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e010      	b.n	800569e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	3b01      	subs	r3, #1
 800568a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d196      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000054 	.word	0x20000054

080056ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c0:	d111      	bne.n	80056e6 <SPI_EndRxTransaction+0x3a>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ca:	d004      	beq.n	80056d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d4:	d107      	bne.n	80056e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ee:	d112      	bne.n	8005716 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff feb8 	bl	8005470 <SPI_WaitFlagStateUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d021      	beq.n	800574a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e03d      	b.n	8005792 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005716:	4b21      	ldr	r3, [pc, #132]	; (800579c <SPI_EndRxTransaction+0xf0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <SPI_EndRxTransaction+0xf4>)
 800571c:	fba2 2303 	umull	r2, r3, r2, r3
 8005720:	0d5b      	lsrs	r3, r3, #21
 8005722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	3b01      	subs	r3, #1
 8005736:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d0f2      	beq.n	800572c <SPI_EndRxTransaction+0x80>
 8005746:	e000      	b.n	800574a <SPI_EndRxTransaction+0x9e>
        break;
 8005748:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005752:	d11d      	bne.n	8005790 <SPI_EndRxTransaction+0xe4>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575c:	d004      	beq.n	8005768 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005766:	d113      	bne.n	8005790 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff ff03 	bl	8005580 <SPI_WaitFifoStateUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e000      	b.n	8005792 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000054 	.word	0x20000054
 80057a0:	165e9f81 	.word	0x165e9f81

080057a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff fedf 	bl	8005580 <SPI_WaitFifoStateUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	f043 0220 	orr.w	r2, r3, #32
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e046      	b.n	8005866 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <SPI_EndRxTxTransaction+0xcc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a25      	ldr	r2, [pc, #148]	; (8005874 <SPI_EndRxTxTransaction+0xd0>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	0d5b      	lsrs	r3, r3, #21
 80057e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f6:	d112      	bne.n	800581e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fe34 	bl	8005470 <SPI_WaitFlagStateUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005812:	f043 0220 	orr.w	r2, r3, #32
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e023      	b.n	8005866 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	3b01      	subs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d0f2      	beq.n	800581e <SPI_EndRxTxTransaction+0x7a>
 8005838:	e000      	b.n	800583c <SPI_EndRxTxTransaction+0x98>
        break;
 800583a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2200      	movs	r2, #0
 8005844:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff fe99 	bl	8005580 <SPI_WaitFifoStateUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e000      	b.n	8005866 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000054 	.word	0x20000054
 8005874:	165e9f81 	.word	0x165e9f81

08005878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e049      	b.n	800591e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd fa38 	bl	8002d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f000 fac0 	bl	8005e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d001      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e054      	b.n	80059ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d01d      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a22      	ldr	r2, [pc, #136]	; (80059fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a21      	ldr	r2, [pc, #132]	; (8005a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <HAL_TIM_Base_Start_IT+0xdc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1e      	ldr	r2, [pc, #120]	; (8005a08 <HAL_TIM_Base_Start_IT+0xe0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1c      	ldr	r2, [pc, #112]	; (8005a0c <HAL_TIM_Base_Start_IT+0xe4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a1b      	ldr	r2, [pc, #108]	; (8005a10 <HAL_TIM_Base_Start_IT+0xe8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d115      	bne.n	80059d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_TIM_Base_Start_IT+0xec>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d015      	beq.n	80059e6 <HAL_TIM_Base_Start_IT+0xbe>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c0:	d011      	beq.n	80059e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0201 	orr.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d2:	e008      	b.n	80059e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e000      	b.n	80059e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40001800 	.word	0x40001800
 8005a14:	00010007 	.word	0x00010007

08005a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d122      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d11b      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0202 	mvn.w	r2, #2
 8005a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f9d0 	bl	8005e00 <HAL_TIM_IC_CaptureCallback>
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9c2 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f9d3 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d122      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0204 	mvn.w	r2, #4
 8005a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9a6 	bl	8005e00 <HAL_TIM_IC_CaptureCallback>
 8005ab4:	e005      	b.n	8005ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f998 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f9a9 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d122      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d11b      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0208 	mvn.w	r2, #8
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2204      	movs	r2, #4
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f97c 	bl	8005e00 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f96e 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f97f 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d122      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b10      	cmp	r3, #16
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0210 	mvn.w	r2, #16
 8005b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2208      	movs	r2, #8
 8005b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f952 	bl	8005e00 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f944 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f955 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d10e      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d107      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0201 	mvn.w	r2, #1
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fc fe4c 	bl	8002834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba6:	2b80      	cmp	r3, #128	; 0x80
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb4:	2b80      	cmp	r3, #128	; 0x80
 8005bb6:	d107      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fb0c 	bl	80061e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd6:	d10e      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d107      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 faff 	bl	80061f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d10e      	bne.n	8005c22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b40      	cmp	r3, #64	; 0x40
 8005c10:	d107      	bne.n	8005c22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f903 	bl	8005e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d10e      	bne.n	8005c4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d107      	bne.n	8005c4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f06f 0220 	mvn.w	r2, #32
 8005c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fabf 	bl	80061cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_TIM_ConfigClockSource+0x1c>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e0b4      	b.n	8005dde <HAL_TIM_ConfigClockSource+0x186>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	4b56      	ldr	r3, [pc, #344]	; (8005de8 <HAL_TIM_ConfigClockSource+0x190>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cac:	d03e      	beq.n	8005d2c <HAL_TIM_ConfigClockSource+0xd4>
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb2:	f200 8087 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cba:	f000 8086 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x172>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	d87f      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc4:	2b70      	cmp	r3, #112	; 0x70
 8005cc6:	d01a      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0xa6>
 8005cc8:	2b70      	cmp	r3, #112	; 0x70
 8005cca:	d87b      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b60      	cmp	r3, #96	; 0x60
 8005cce:	d050      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x11a>
 8005cd0:	2b60      	cmp	r3, #96	; 0x60
 8005cd2:	d877      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b50      	cmp	r3, #80	; 0x50
 8005cd6:	d03c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0xfa>
 8005cd8:	2b50      	cmp	r3, #80	; 0x50
 8005cda:	d873      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d058      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x13a>
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d86f      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b30      	cmp	r3, #48	; 0x30
 8005ce6:	d064      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d86b      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d060      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d867      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05c      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d05a      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cfc:	e062      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d0e:	f000 f9af 	bl	8006070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	609a      	str	r2, [r3, #8]
      break;
 8005d2a:	e04f      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d3c:	f000 f998 	bl	8006070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d4e:	609a      	str	r2, [r3, #8]
      break;
 8005d50:	e03c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 f90c 	bl	8005f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2150      	movs	r1, #80	; 0x50
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f965 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005d70:	e02c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 f92b 	bl	8005fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2160      	movs	r1, #96	; 0x60
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f955 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005d90:	e01c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 f8ec 	bl	8005f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2140      	movs	r1, #64	; 0x40
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f945 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005db0:	e00c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f000 f93c 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005dc2:	e003      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc8:	e000      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	fffeff88 	.word	0xfffeff88

08005dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a40      	ldr	r2, [pc, #256]	; (8005f50 <TIM_Base_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d013      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5a:	d00f      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a3d      	ldr	r2, [pc, #244]	; (8005f54 <TIM_Base_SetConfig+0x118>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a3c      	ldr	r2, [pc, #240]	; (8005f58 <TIM_Base_SetConfig+0x11c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a3b      	ldr	r2, [pc, #236]	; (8005f5c <TIM_Base_SetConfig+0x120>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a3a      	ldr	r2, [pc, #232]	; (8005f60 <TIM_Base_SetConfig+0x124>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d108      	bne.n	8005e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2f      	ldr	r2, [pc, #188]	; (8005f50 <TIM_Base_SetConfig+0x114>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d02b      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9c:	d027      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2c      	ldr	r2, [pc, #176]	; (8005f54 <TIM_Base_SetConfig+0x118>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d023      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2b      	ldr	r2, [pc, #172]	; (8005f58 <TIM_Base_SetConfig+0x11c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01f      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <TIM_Base_SetConfig+0x120>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01b      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a29      	ldr	r2, [pc, #164]	; (8005f60 <TIM_Base_SetConfig+0x124>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d017      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a28      	ldr	r2, [pc, #160]	; (8005f64 <TIM_Base_SetConfig+0x128>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a27      	ldr	r2, [pc, #156]	; (8005f68 <TIM_Base_SetConfig+0x12c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <TIM_Base_SetConfig+0x130>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <TIM_Base_SetConfig+0x134>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a24      	ldr	r2, [pc, #144]	; (8005f74 <TIM_Base_SetConfig+0x138>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a23      	ldr	r2, [pc, #140]	; (8005f78 <TIM_Base_SetConfig+0x13c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d108      	bne.n	8005f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <TIM_Base_SetConfig+0x114>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_Base_SetConfig+0xf8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a0c      	ldr	r2, [pc, #48]	; (8005f60 <TIM_Base_SetConfig+0x124>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d103      	bne.n	8005f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	615a      	str	r2, [r3, #20]
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	40010400 	.word	0x40010400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800
 8005f70:	40001800 	.word	0x40001800
 8005f74:	40001c00 	.word	0x40001c00
 8005f78:	40002000 	.word	0x40002000

08005f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 030a 	bic.w	r3, r3, #10
 8005fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b087      	sub	sp, #28
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0210 	bic.w	r2, r3, #16
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	031b      	lsls	r3, r3, #12
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	f043 0307 	orr.w	r3, r3, #7
 800605c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800608a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	021a      	lsls	r2, r3, #8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	431a      	orrs	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e06d      	b.n	80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a30      	ldr	r2, [pc, #192]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2f      	ldr	r2, [pc, #188]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006102:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a20      	ldr	r2, [pc, #128]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d022      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d01d      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1d      	ldr	r2, [pc, #116]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d018      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1a      	ldr	r2, [pc, #104]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10c      	bne.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40010400 	.word	0x40010400
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40001800 	.word	0x40001800

080061cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e040      	b.n	800629c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fc fe0a 	bl	8002e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	; 0x24
 8006234:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0201 	bic.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fb1e 	bl	8006888 <UART_SetConfig>
 800624c:	4603      	mov	r3, r0
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e022      	b.n	800629c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fd76 	bl	8006d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fdfd 	bl	8006e94 <UART_CheckIdleState>
 800629a:	4603      	mov	r3, r0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b0ba      	sub	sp, #232	; 0xe8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80062d2:	4013      	ands	r3, r2
 80062d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d115      	bne.n	800630c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8297 	beq.w	8006830 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
      }
      return;
 800630a:	e291      	b.n	8006830 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800630c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8117 	beq.w	8006544 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006322:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006326:	4b85      	ldr	r3, [pc, #532]	; (800653c <HAL_UART_IRQHandler+0x298>)
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 810a 	beq.w	8006544 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d011      	beq.n	8006360 <HAL_UART_IRQHandler+0xbc>
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006356:	f043 0201 	orr.w	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d011      	beq.n	8006390 <HAL_UART_IRQHandler+0xec>
 800636c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2202      	movs	r2, #2
 800637e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006386:	f043 0204 	orr.w	r2, r3, #4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d011      	beq.n	80063c0 <HAL_UART_IRQHandler+0x11c>
 800639c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2204      	movs	r2, #4
 80063ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b6:	f043 0202 	orr.w	r2, r3, #2
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d017      	beq.n	80063fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d105      	bne.n	80063e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2208      	movs	r2, #8
 80063ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f2:	f043 0208 	orr.w	r2, r3, #8
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006404:	2b00      	cmp	r3, #0
 8006406:	d012      	beq.n	800642e <HAL_UART_IRQHandler+0x18a>
 8006408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800640c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00c      	beq.n	800642e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800641c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006424:	f043 0220 	orr.w	r2, r3, #32
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 81fd 	beq.w	8006834 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800643a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00d      	beq.n	8006462 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006468:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d005      	beq.n	8006486 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800647a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800647e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006482:	2b00      	cmp	r3, #0
 8006484:	d04f      	beq.n	8006526 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fe01 	bl	800708e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d141      	bne.n	800651e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1d9      	bne.n	800649a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d013      	beq.n	8006516 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	4a13      	ldr	r2, [pc, #76]	; (8006540 <HAL_UART_IRQHandler+0x29c>)
 80064f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fc ff35 	bl	800336a <HAL_DMA_Abort_IT>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d017      	beq.n	8006536 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006510:	4610      	mov	r0, r2
 8006512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	e00f      	b.n	8006536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f9a0 	bl	800685c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651c:	e00b      	b.n	8006536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f99c 	bl	800685c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e007      	b.n	8006536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f998 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006534:	e17e      	b.n	8006834 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006536:	bf00      	nop
    return;
 8006538:	e17c      	b.n	8006834 <HAL_UART_IRQHandler+0x590>
 800653a:	bf00      	nop
 800653c:	04000120 	.word	0x04000120
 8006540:	08007157 	.word	0x08007157

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006548:	2b01      	cmp	r3, #1
 800654a:	f040 814c 	bne.w	80067e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 8145 	beq.w	80067e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800655c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 813e 	beq.w	80067e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2210      	movs	r2, #16
 8006570:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	f040 80b6 	bne.w	80066ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800658e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8150 	beq.w	8006838 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800659e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065a2:	429a      	cmp	r2, r3
 80065a4:	f080 8148 	bcs.w	8006838 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065bc:	f000 8086 	beq.w	80066cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1da      	bne.n	80065c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800661a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800662e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006632:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e1      	bne.n	800660a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3308      	adds	r3, #8
 800664c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800666a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800666c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006670:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e3      	bne.n	8006646 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2220      	movs	r2, #32
 8006682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800669a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669c:	f023 0310 	bic.w	r3, r3, #16
 80066a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80066b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e4      	bne.n	800668c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fc fddf 	bl	800328a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8c2 	bl	8006870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066ec:	e0a4      	b.n	8006838 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8096 	beq.w	800683c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8091 	beq.w	800683c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800673c:	647b      	str	r3, [r7, #68]	; 0x44
 800673e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800674a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e4      	bne.n	800671a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	623b      	str	r3, [r7, #32]
   return(result);
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006774:	633a      	str	r2, [r7, #48]	; 0x30
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e3      	bne.n	8006750 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f023 0310 	bic.w	r3, r3, #16
 80067b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	69b9      	ldr	r1, [r7, #24]
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	617b      	str	r3, [r7, #20]
   return(result);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e4      	bne.n	800679c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f846 	bl	8006870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067e4:	e02a      	b.n	800683c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00e      	beq.n	8006810 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d008      	beq.n	8006810 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d01c      	beq.n	8006840 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
    }
    return;
 800680e:	e017      	b.n	8006840 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d012      	beq.n	8006842 <HAL_UART_IRQHandler+0x59e>
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00c      	beq.n	8006842 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fcaa 	bl	8007182 <UART_EndTransmit_IT>
    return;
 800682e:	e008      	b.n	8006842 <HAL_UART_IRQHandler+0x59e>
      return;
 8006830:	bf00      	nop
 8006832:	e006      	b.n	8006842 <HAL_UART_IRQHandler+0x59e>
    return;
 8006834:	bf00      	nop
 8006836:	e004      	b.n	8006842 <HAL_UART_IRQHandler+0x59e>
      return;
 8006838:	bf00      	nop
 800683a:	e002      	b.n	8006842 <HAL_UART_IRQHandler+0x59e>
      return;
 800683c:	bf00      	nop
 800683e:	e000      	b.n	8006842 <HAL_UART_IRQHandler+0x59e>
    return;
 8006840:	bf00      	nop
  }

}
 8006842:	37e8      	adds	r7, #232	; 0xe8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4ba6      	ldr	r3, [pc, #664]	; (8006b4c <UART_SetConfig+0x2c4>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6812      	ldr	r2, [r2, #0]
 80068ba:	6979      	ldr	r1, [r7, #20]
 80068bc:	430b      	orrs	r3, r1
 80068be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a94      	ldr	r2, [pc, #592]	; (8006b50 <UART_SetConfig+0x2c8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d120      	bne.n	8006946 <UART_SetConfig+0xbe>
 8006904:	4b93      	ldr	r3, [pc, #588]	; (8006b54 <UART_SetConfig+0x2cc>)
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b03      	cmp	r3, #3
 8006910:	d816      	bhi.n	8006940 <UART_SetConfig+0xb8>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <UART_SetConfig+0x90>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	08006929 	.word	0x08006929
 800691c:	08006935 	.word	0x08006935
 8006920:	0800692f 	.word	0x0800692f
 8006924:	0800693b 	.word	0x0800693b
 8006928:	2301      	movs	r3, #1
 800692a:	77fb      	strb	r3, [r7, #31]
 800692c:	e150      	b.n	8006bd0 <UART_SetConfig+0x348>
 800692e:	2302      	movs	r3, #2
 8006930:	77fb      	strb	r3, [r7, #31]
 8006932:	e14d      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006934:	2304      	movs	r3, #4
 8006936:	77fb      	strb	r3, [r7, #31]
 8006938:	e14a      	b.n	8006bd0 <UART_SetConfig+0x348>
 800693a:	2308      	movs	r3, #8
 800693c:	77fb      	strb	r3, [r7, #31]
 800693e:	e147      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006940:	2310      	movs	r3, #16
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e144      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a83      	ldr	r2, [pc, #524]	; (8006b58 <UART_SetConfig+0x2d0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d132      	bne.n	80069b6 <UART_SetConfig+0x12e>
 8006950:	4b80      	ldr	r3, [pc, #512]	; (8006b54 <UART_SetConfig+0x2cc>)
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	2b0c      	cmp	r3, #12
 800695c:	d828      	bhi.n	80069b0 <UART_SetConfig+0x128>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <UART_SetConfig+0xdc>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006999 	.word	0x08006999
 8006968:	080069b1 	.word	0x080069b1
 800696c:	080069b1 	.word	0x080069b1
 8006970:	080069b1 	.word	0x080069b1
 8006974:	080069a5 	.word	0x080069a5
 8006978:	080069b1 	.word	0x080069b1
 800697c:	080069b1 	.word	0x080069b1
 8006980:	080069b1 	.word	0x080069b1
 8006984:	0800699f 	.word	0x0800699f
 8006988:	080069b1 	.word	0x080069b1
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069b1 	.word	0x080069b1
 8006994:	080069ab 	.word	0x080069ab
 8006998:	2300      	movs	r3, #0
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e118      	b.n	8006bd0 <UART_SetConfig+0x348>
 800699e:	2302      	movs	r3, #2
 80069a0:	77fb      	strb	r3, [r7, #31]
 80069a2:	e115      	b.n	8006bd0 <UART_SetConfig+0x348>
 80069a4:	2304      	movs	r3, #4
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e112      	b.n	8006bd0 <UART_SetConfig+0x348>
 80069aa:	2308      	movs	r3, #8
 80069ac:	77fb      	strb	r3, [r7, #31]
 80069ae:	e10f      	b.n	8006bd0 <UART_SetConfig+0x348>
 80069b0:	2310      	movs	r3, #16
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e10c      	b.n	8006bd0 <UART_SetConfig+0x348>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a68      	ldr	r2, [pc, #416]	; (8006b5c <UART_SetConfig+0x2d4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d120      	bne.n	8006a02 <UART_SetConfig+0x17a>
 80069c0:	4b64      	ldr	r3, [pc, #400]	; (8006b54 <UART_SetConfig+0x2cc>)
 80069c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069ca:	2b30      	cmp	r3, #48	; 0x30
 80069cc:	d013      	beq.n	80069f6 <UART_SetConfig+0x16e>
 80069ce:	2b30      	cmp	r3, #48	; 0x30
 80069d0:	d814      	bhi.n	80069fc <UART_SetConfig+0x174>
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d009      	beq.n	80069ea <UART_SetConfig+0x162>
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d810      	bhi.n	80069fc <UART_SetConfig+0x174>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <UART_SetConfig+0x15c>
 80069de:	2b10      	cmp	r3, #16
 80069e0:	d006      	beq.n	80069f0 <UART_SetConfig+0x168>
 80069e2:	e00b      	b.n	80069fc <UART_SetConfig+0x174>
 80069e4:	2300      	movs	r3, #0
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e0f2      	b.n	8006bd0 <UART_SetConfig+0x348>
 80069ea:	2302      	movs	r3, #2
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e0ef      	b.n	8006bd0 <UART_SetConfig+0x348>
 80069f0:	2304      	movs	r3, #4
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e0ec      	b.n	8006bd0 <UART_SetConfig+0x348>
 80069f6:	2308      	movs	r3, #8
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e0e9      	b.n	8006bd0 <UART_SetConfig+0x348>
 80069fc:	2310      	movs	r3, #16
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e0e6      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a56      	ldr	r2, [pc, #344]	; (8006b60 <UART_SetConfig+0x2d8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d120      	bne.n	8006a4e <UART_SetConfig+0x1c6>
 8006a0c:	4b51      	ldr	r3, [pc, #324]	; (8006b54 <UART_SetConfig+0x2cc>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a16:	2bc0      	cmp	r3, #192	; 0xc0
 8006a18:	d013      	beq.n	8006a42 <UART_SetConfig+0x1ba>
 8006a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a1c:	d814      	bhi.n	8006a48 <UART_SetConfig+0x1c0>
 8006a1e:	2b80      	cmp	r3, #128	; 0x80
 8006a20:	d009      	beq.n	8006a36 <UART_SetConfig+0x1ae>
 8006a22:	2b80      	cmp	r3, #128	; 0x80
 8006a24:	d810      	bhi.n	8006a48 <UART_SetConfig+0x1c0>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <UART_SetConfig+0x1a8>
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d006      	beq.n	8006a3c <UART_SetConfig+0x1b4>
 8006a2e:	e00b      	b.n	8006a48 <UART_SetConfig+0x1c0>
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e0cc      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a36:	2302      	movs	r3, #2
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e0c9      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e0c6      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a42:	2308      	movs	r3, #8
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e0c3      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e0c0      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a44      	ldr	r2, [pc, #272]	; (8006b64 <UART_SetConfig+0x2dc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d125      	bne.n	8006aa4 <UART_SetConfig+0x21c>
 8006a58:	4b3e      	ldr	r3, [pc, #248]	; (8006b54 <UART_SetConfig+0x2cc>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a66:	d017      	beq.n	8006a98 <UART_SetConfig+0x210>
 8006a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6c:	d817      	bhi.n	8006a9e <UART_SetConfig+0x216>
 8006a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a72:	d00b      	beq.n	8006a8c <UART_SetConfig+0x204>
 8006a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a78:	d811      	bhi.n	8006a9e <UART_SetConfig+0x216>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <UART_SetConfig+0x1fe>
 8006a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a82:	d006      	beq.n	8006a92 <UART_SetConfig+0x20a>
 8006a84:	e00b      	b.n	8006a9e <UART_SetConfig+0x216>
 8006a86:	2300      	movs	r3, #0
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e0a1      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	e09e      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a92:	2304      	movs	r3, #4
 8006a94:	77fb      	strb	r3, [r7, #31]
 8006a96:	e09b      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e098      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e095      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a2f      	ldr	r2, [pc, #188]	; (8006b68 <UART_SetConfig+0x2e0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d125      	bne.n	8006afa <UART_SetConfig+0x272>
 8006aae:	4b29      	ldr	r3, [pc, #164]	; (8006b54 <UART_SetConfig+0x2cc>)
 8006ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006abc:	d017      	beq.n	8006aee <UART_SetConfig+0x266>
 8006abe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ac2:	d817      	bhi.n	8006af4 <UART_SetConfig+0x26c>
 8006ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac8:	d00b      	beq.n	8006ae2 <UART_SetConfig+0x25a>
 8006aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ace:	d811      	bhi.n	8006af4 <UART_SetConfig+0x26c>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <UART_SetConfig+0x254>
 8006ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad8:	d006      	beq.n	8006ae8 <UART_SetConfig+0x260>
 8006ada:	e00b      	b.n	8006af4 <UART_SetConfig+0x26c>
 8006adc:	2301      	movs	r3, #1
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e076      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e073      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	77fb      	strb	r3, [r7, #31]
 8006aec:	e070      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006aee:	2308      	movs	r3, #8
 8006af0:	77fb      	strb	r3, [r7, #31]
 8006af2:	e06d      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006af4:	2310      	movs	r3, #16
 8006af6:	77fb      	strb	r3, [r7, #31]
 8006af8:	e06a      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <UART_SetConfig+0x2e4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d138      	bne.n	8006b76 <UART_SetConfig+0x2ee>
 8006b04:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <UART_SetConfig+0x2cc>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b12:	d017      	beq.n	8006b44 <UART_SetConfig+0x2bc>
 8006b14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b18:	d82a      	bhi.n	8006b70 <UART_SetConfig+0x2e8>
 8006b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b1e:	d00b      	beq.n	8006b38 <UART_SetConfig+0x2b0>
 8006b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b24:	d824      	bhi.n	8006b70 <UART_SetConfig+0x2e8>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <UART_SetConfig+0x2aa>
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2e:	d006      	beq.n	8006b3e <UART_SetConfig+0x2b6>
 8006b30:	e01e      	b.n	8006b70 <UART_SetConfig+0x2e8>
 8006b32:	2300      	movs	r3, #0
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e04b      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e048      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006b3e:	2304      	movs	r3, #4
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e045      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006b44:	2308      	movs	r3, #8
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e042      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006b4a:	bf00      	nop
 8006b4c:	efff69f3 	.word	0xefff69f3
 8006b50:	40011000 	.word	0x40011000
 8006b54:	40023800 	.word	0x40023800
 8006b58:	40004400 	.word	0x40004400
 8006b5c:	40004800 	.word	0x40004800
 8006b60:	40004c00 	.word	0x40004c00
 8006b64:	40005000 	.word	0x40005000
 8006b68:	40011400 	.word	0x40011400
 8006b6c:	40007800 	.word	0x40007800
 8006b70:	2310      	movs	r3, #16
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e02c      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a72      	ldr	r2, [pc, #456]	; (8006d44 <UART_SetConfig+0x4bc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d125      	bne.n	8006bcc <UART_SetConfig+0x344>
 8006b80:	4b71      	ldr	r3, [pc, #452]	; (8006d48 <UART_SetConfig+0x4c0>)
 8006b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b8e:	d017      	beq.n	8006bc0 <UART_SetConfig+0x338>
 8006b90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b94:	d817      	bhi.n	8006bc6 <UART_SetConfig+0x33e>
 8006b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b9a:	d00b      	beq.n	8006bb4 <UART_SetConfig+0x32c>
 8006b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba0:	d811      	bhi.n	8006bc6 <UART_SetConfig+0x33e>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <UART_SetConfig+0x326>
 8006ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006baa:	d006      	beq.n	8006bba <UART_SetConfig+0x332>
 8006bac:	e00b      	b.n	8006bc6 <UART_SetConfig+0x33e>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	e00d      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	77fb      	strb	r3, [r7, #31]
 8006bb8:	e00a      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006bba:	2304      	movs	r3, #4
 8006bbc:	77fb      	strb	r3, [r7, #31]
 8006bbe:	e007      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e004      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006bc6:	2310      	movs	r3, #16
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e001      	b.n	8006bd0 <UART_SetConfig+0x348>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd8:	d15b      	bne.n	8006c92 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006bda:	7ffb      	ldrb	r3, [r7, #31]
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d828      	bhi.n	8006c32 <UART_SetConfig+0x3aa>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0x360>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	08006c33 	.word	0x08006c33
 8006bf8:	08006c23 	.word	0x08006c23
 8006bfc:	08006c33 	.word	0x08006c33
 8006c00:	08006c33 	.word	0x08006c33
 8006c04:	08006c33 	.word	0x08006c33
 8006c08:	08006c2b 	.word	0x08006c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fd fabc 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8006c10:	61b8      	str	r0, [r7, #24]
        break;
 8006c12:	e013      	b.n	8006c3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c14:	f7fd facc 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 8006c18:	61b8      	str	r0, [r7, #24]
        break;
 8006c1a:	e00f      	b.n	8006c3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c1c:	4b4b      	ldr	r3, [pc, #300]	; (8006d4c <UART_SetConfig+0x4c4>)
 8006c1e:	61bb      	str	r3, [r7, #24]
        break;
 8006c20:	e00c      	b.n	8006c3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c22:	f7fd f99f 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8006c26:	61b8      	str	r0, [r7, #24]
        break;
 8006c28:	e008      	b.n	8006c3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2e:	61bb      	str	r3, [r7, #24]
        break;
 8006c30:	e004      	b.n	8006c3c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	77bb      	strb	r3, [r7, #30]
        break;
 8006c3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d074      	beq.n	8006d2c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	005a      	lsls	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	441a      	add	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b0f      	cmp	r3, #15
 8006c5c:	d916      	bls.n	8006c8c <UART_SetConfig+0x404>
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d212      	bcs.n	8006c8c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f023 030f 	bic.w	r3, r3, #15
 8006c6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	89fb      	ldrh	r3, [r7, #14]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	89fa      	ldrh	r2, [r7, #14]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	e04f      	b.n	8006d2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	77bb      	strb	r3, [r7, #30]
 8006c90:	e04c      	b.n	8006d2c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c92:	7ffb      	ldrb	r3, [r7, #31]
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d828      	bhi.n	8006cea <UART_SetConfig+0x462>
 8006c98:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x418>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cc5 	.word	0x08006cc5
 8006ca4:	08006ccd 	.word	0x08006ccd
 8006ca8:	08006cd5 	.word	0x08006cd5
 8006cac:	08006ceb 	.word	0x08006ceb
 8006cb0:	08006cdb 	.word	0x08006cdb
 8006cb4:	08006ceb 	.word	0x08006ceb
 8006cb8:	08006ceb 	.word	0x08006ceb
 8006cbc:	08006ceb 	.word	0x08006ceb
 8006cc0:	08006ce3 	.word	0x08006ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc4:	f7fd fa60 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8006cc8:	61b8      	str	r0, [r7, #24]
        break;
 8006cca:	e013      	b.n	8006cf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ccc:	f7fd fa70 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 8006cd0:	61b8      	str	r0, [r7, #24]
        break;
 8006cd2:	e00f      	b.n	8006cf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <UART_SetConfig+0x4c4>)
 8006cd6:	61bb      	str	r3, [r7, #24]
        break;
 8006cd8:	e00c      	b.n	8006cf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cda:	f7fd f943 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8006cde:	61b8      	str	r0, [r7, #24]
        break;
 8006ce0:	e008      	b.n	8006cf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce6:	61bb      	str	r3, [r7, #24]
        break;
 8006ce8:	e004      	b.n	8006cf4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cf2:	bf00      	nop
    }

    if (pclk != 0U)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d018      	beq.n	8006d2c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	085a      	lsrs	r2, r3, #1
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	441a      	add	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b0f      	cmp	r3, #15
 8006d12:	d909      	bls.n	8006d28 <UART_SetConfig+0x4a0>
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1a:	d205      	bcs.n	8006d28 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60da      	str	r2, [r3, #12]
 8006d26:	e001      	b.n	8006d2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d38:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3720      	adds	r7, #32
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40007c00 	.word	0x40007c00
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	00f42400 	.word	0x00f42400

08006d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01a      	beq.n	8006e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e4e:	d10a      	bne.n	8006e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ea4:	f7fc f8b0 	bl	8003008 <HAL_GetTick>
 8006ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d10e      	bne.n	8006ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f81b 	bl	8006f02 <UART_WaitOnFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e011      	b.n	8006efa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b09c      	sub	sp, #112	; 0x70
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f12:	e0a7      	b.n	8007064 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	f000 80a3 	beq.w	8007064 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1e:	f7fc f873 	bl	8003008 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d13f      	bne.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f48:	667b      	str	r3, [r7, #100]	; 0x64
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e6      	bne.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	f023 0301 	bic.w	r3, r3, #1
 8006f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f86:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e5      	bne.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e068      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d050      	beq.n	8007064 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd0:	d148      	bne.n	8007064 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	66bb      	str	r3, [r7, #104]	; 0x68
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800702e:	623a      	str	r2, [r7, #32]
 8007030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	69f9      	ldr	r1, [r7, #28]
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	61bb      	str	r3, [r7, #24]
   return(result);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e010      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69da      	ldr	r2, [r3, #28]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	4013      	ands	r3, r2
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	429a      	cmp	r2, r3
 8007072:	bf0c      	ite	eq
 8007074:	2301      	moveq	r3, #1
 8007076:	2300      	movne	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	429a      	cmp	r2, r3
 8007080:	f43f af48 	beq.w	8006f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3770      	adds	r7, #112	; 0x70
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800708e:	b480      	push	{r7}
 8007090:	b095      	sub	sp, #84	; 0x54
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b4:	643b      	str	r3, [r7, #64]	; 0x40
 80070b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e6      	bne.n	8007096 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3308      	adds	r3, #8
 80070ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	64bb      	str	r3, [r7, #72]	; 0x48
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007100:	2b01      	cmp	r3, #1
 8007102:	d118      	bne.n	8007136 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	60bb      	str	r3, [r7, #8]
   return(result);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f023 0310 	bic.w	r3, r3, #16
 8007118:	647b      	str	r3, [r7, #68]	; 0x44
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6979      	ldr	r1, [r7, #20]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	613b      	str	r3, [r7, #16]
   return(result);
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e6      	bne.n	8007104 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	669a      	str	r2, [r3, #104]	; 0x68
}
 800714a:	bf00      	nop
 800714c:	3754      	adds	r7, #84	; 0x54
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff fb71 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b088      	sub	sp, #32
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	60bb      	str	r3, [r7, #8]
   return(result);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6979      	ldr	r1, [r7, #20]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	613b      	str	r3, [r7, #16]
   return(result);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e6      	bne.n	800718a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff fb3d 	bl	8006848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ce:	bf00      	nop
 80071d0:	3720      	adds	r7, #32
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <_vsniprintf_r>:
 80071d6:	b530      	push	{r4, r5, lr}
 80071d8:	4614      	mov	r4, r2
 80071da:	2c00      	cmp	r4, #0
 80071dc:	b09b      	sub	sp, #108	; 0x6c
 80071de:	4605      	mov	r5, r0
 80071e0:	461a      	mov	r2, r3
 80071e2:	da05      	bge.n	80071f0 <_vsniprintf_r+0x1a>
 80071e4:	238b      	movs	r3, #139	; 0x8b
 80071e6:	6003      	str	r3, [r0, #0]
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	b01b      	add	sp, #108	; 0x6c
 80071ee:	bd30      	pop	{r4, r5, pc}
 80071f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80071f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80071f8:	bf14      	ite	ne
 80071fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80071fe:	4623      	moveq	r3, r4
 8007200:	9302      	str	r3, [sp, #8]
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007208:	9100      	str	r1, [sp, #0]
 800720a:	9104      	str	r1, [sp, #16]
 800720c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007210:	4669      	mov	r1, sp
 8007212:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007214:	f000 f99e 	bl	8007554 <_svfiprintf_r>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	bfbc      	itt	lt
 800721c:	238b      	movlt	r3, #139	; 0x8b
 800721e:	602b      	strlt	r3, [r5, #0]
 8007220:	2c00      	cmp	r4, #0
 8007222:	d0e3      	beq.n	80071ec <_vsniprintf_r+0x16>
 8007224:	9b00      	ldr	r3, [sp, #0]
 8007226:	2200      	movs	r2, #0
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	e7df      	b.n	80071ec <_vsniprintf_r+0x16>

0800722c <vsniprintf>:
 800722c:	b507      	push	{r0, r1, r2, lr}
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	4613      	mov	r3, r2
 8007232:	460a      	mov	r2, r1
 8007234:	4601      	mov	r1, r0
 8007236:	4803      	ldr	r0, [pc, #12]	; (8007244 <vsniprintf+0x18>)
 8007238:	6800      	ldr	r0, [r0, #0]
 800723a:	f7ff ffcc 	bl	80071d6 <_vsniprintf_r>
 800723e:	b003      	add	sp, #12
 8007240:	f85d fb04 	ldr.w	pc, [sp], #4
 8007244:	200000ac 	.word	0x200000ac

08007248 <memset>:
 8007248:	4402      	add	r2, r0
 800724a:	4603      	mov	r3, r0
 800724c:	4293      	cmp	r3, r2
 800724e:	d100      	bne.n	8007252 <memset+0xa>
 8007250:	4770      	bx	lr
 8007252:	f803 1b01 	strb.w	r1, [r3], #1
 8007256:	e7f9      	b.n	800724c <memset+0x4>

08007258 <__errno>:
 8007258:	4b01      	ldr	r3, [pc, #4]	; (8007260 <__errno+0x8>)
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	200000ac 	.word	0x200000ac

08007264 <__libc_init_array>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4d0d      	ldr	r5, [pc, #52]	; (800729c <__libc_init_array+0x38>)
 8007268:	4c0d      	ldr	r4, [pc, #52]	; (80072a0 <__libc_init_array+0x3c>)
 800726a:	1b64      	subs	r4, r4, r5
 800726c:	10a4      	asrs	r4, r4, #2
 800726e:	2600      	movs	r6, #0
 8007270:	42a6      	cmp	r6, r4
 8007272:	d109      	bne.n	8007288 <__libc_init_array+0x24>
 8007274:	4d0b      	ldr	r5, [pc, #44]	; (80072a4 <__libc_init_array+0x40>)
 8007276:	4c0c      	ldr	r4, [pc, #48]	; (80072a8 <__libc_init_array+0x44>)
 8007278:	f000 fc6a 	bl	8007b50 <_init>
 800727c:	1b64      	subs	r4, r4, r5
 800727e:	10a4      	asrs	r4, r4, #2
 8007280:	2600      	movs	r6, #0
 8007282:	42a6      	cmp	r6, r4
 8007284:	d105      	bne.n	8007292 <__libc_init_array+0x2e>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f855 3b04 	ldr.w	r3, [r5], #4
 800728c:	4798      	blx	r3
 800728e:	3601      	adds	r6, #1
 8007290:	e7ee      	b.n	8007270 <__libc_init_array+0xc>
 8007292:	f855 3b04 	ldr.w	r3, [r5], #4
 8007296:	4798      	blx	r3
 8007298:	3601      	adds	r6, #1
 800729a:	e7f2      	b.n	8007282 <__libc_init_array+0x1e>
 800729c:	08007d48 	.word	0x08007d48
 80072a0:	08007d48 	.word	0x08007d48
 80072a4:	08007d48 	.word	0x08007d48
 80072a8:	08007d4c 	.word	0x08007d4c

080072ac <__retarget_lock_acquire_recursive>:
 80072ac:	4770      	bx	lr

080072ae <__retarget_lock_release_recursive>:
 80072ae:	4770      	bx	lr

080072b0 <_free_r>:
 80072b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072b2:	2900      	cmp	r1, #0
 80072b4:	d044      	beq.n	8007340 <_free_r+0x90>
 80072b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ba:	9001      	str	r0, [sp, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f1a1 0404 	sub.w	r4, r1, #4
 80072c2:	bfb8      	it	lt
 80072c4:	18e4      	addlt	r4, r4, r3
 80072c6:	f000 f8df 	bl	8007488 <__malloc_lock>
 80072ca:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <_free_r+0x94>)
 80072cc:	9801      	ldr	r0, [sp, #4]
 80072ce:	6813      	ldr	r3, [r2, #0]
 80072d0:	b933      	cbnz	r3, 80072e0 <_free_r+0x30>
 80072d2:	6063      	str	r3, [r4, #4]
 80072d4:	6014      	str	r4, [r2, #0]
 80072d6:	b003      	add	sp, #12
 80072d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072dc:	f000 b8da 	b.w	8007494 <__malloc_unlock>
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d908      	bls.n	80072f6 <_free_r+0x46>
 80072e4:	6825      	ldr	r5, [r4, #0]
 80072e6:	1961      	adds	r1, r4, r5
 80072e8:	428b      	cmp	r3, r1
 80072ea:	bf01      	itttt	eq
 80072ec:	6819      	ldreq	r1, [r3, #0]
 80072ee:	685b      	ldreq	r3, [r3, #4]
 80072f0:	1949      	addeq	r1, r1, r5
 80072f2:	6021      	streq	r1, [r4, #0]
 80072f4:	e7ed      	b.n	80072d2 <_free_r+0x22>
 80072f6:	461a      	mov	r2, r3
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	b10b      	cbz	r3, 8007300 <_free_r+0x50>
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	d9fa      	bls.n	80072f6 <_free_r+0x46>
 8007300:	6811      	ldr	r1, [r2, #0]
 8007302:	1855      	adds	r5, r2, r1
 8007304:	42a5      	cmp	r5, r4
 8007306:	d10b      	bne.n	8007320 <_free_r+0x70>
 8007308:	6824      	ldr	r4, [r4, #0]
 800730a:	4421      	add	r1, r4
 800730c:	1854      	adds	r4, r2, r1
 800730e:	42a3      	cmp	r3, r4
 8007310:	6011      	str	r1, [r2, #0]
 8007312:	d1e0      	bne.n	80072d6 <_free_r+0x26>
 8007314:	681c      	ldr	r4, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	6053      	str	r3, [r2, #4]
 800731a:	440c      	add	r4, r1
 800731c:	6014      	str	r4, [r2, #0]
 800731e:	e7da      	b.n	80072d6 <_free_r+0x26>
 8007320:	d902      	bls.n	8007328 <_free_r+0x78>
 8007322:	230c      	movs	r3, #12
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	e7d6      	b.n	80072d6 <_free_r+0x26>
 8007328:	6825      	ldr	r5, [r4, #0]
 800732a:	1961      	adds	r1, r4, r5
 800732c:	428b      	cmp	r3, r1
 800732e:	bf04      	itt	eq
 8007330:	6819      	ldreq	r1, [r3, #0]
 8007332:	685b      	ldreq	r3, [r3, #4]
 8007334:	6063      	str	r3, [r4, #4]
 8007336:	bf04      	itt	eq
 8007338:	1949      	addeq	r1, r1, r5
 800733a:	6021      	streq	r1, [r4, #0]
 800733c:	6054      	str	r4, [r2, #4]
 800733e:	e7ca      	b.n	80072d6 <_free_r+0x26>
 8007340:	b003      	add	sp, #12
 8007342:	bd30      	pop	{r4, r5, pc}
 8007344:	20000358 	.word	0x20000358

08007348 <sbrk_aligned>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4e0e      	ldr	r6, [pc, #56]	; (8007384 <sbrk_aligned+0x3c>)
 800734c:	460c      	mov	r4, r1
 800734e:	6831      	ldr	r1, [r6, #0]
 8007350:	4605      	mov	r5, r0
 8007352:	b911      	cbnz	r1, 800735a <sbrk_aligned+0x12>
 8007354:	f000 fba6 	bl	8007aa4 <_sbrk_r>
 8007358:	6030      	str	r0, [r6, #0]
 800735a:	4621      	mov	r1, r4
 800735c:	4628      	mov	r0, r5
 800735e:	f000 fba1 	bl	8007aa4 <_sbrk_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	d00a      	beq.n	800737c <sbrk_aligned+0x34>
 8007366:	1cc4      	adds	r4, r0, #3
 8007368:	f024 0403 	bic.w	r4, r4, #3
 800736c:	42a0      	cmp	r0, r4
 800736e:	d007      	beq.n	8007380 <sbrk_aligned+0x38>
 8007370:	1a21      	subs	r1, r4, r0
 8007372:	4628      	mov	r0, r5
 8007374:	f000 fb96 	bl	8007aa4 <_sbrk_r>
 8007378:	3001      	adds	r0, #1
 800737a:	d101      	bne.n	8007380 <sbrk_aligned+0x38>
 800737c:	f04f 34ff 	mov.w	r4, #4294967295
 8007380:	4620      	mov	r0, r4
 8007382:	bd70      	pop	{r4, r5, r6, pc}
 8007384:	2000035c 	.word	0x2000035c

08007388 <_malloc_r>:
 8007388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800738c:	1ccd      	adds	r5, r1, #3
 800738e:	f025 0503 	bic.w	r5, r5, #3
 8007392:	3508      	adds	r5, #8
 8007394:	2d0c      	cmp	r5, #12
 8007396:	bf38      	it	cc
 8007398:	250c      	movcc	r5, #12
 800739a:	2d00      	cmp	r5, #0
 800739c:	4607      	mov	r7, r0
 800739e:	db01      	blt.n	80073a4 <_malloc_r+0x1c>
 80073a0:	42a9      	cmp	r1, r5
 80073a2:	d905      	bls.n	80073b0 <_malloc_r+0x28>
 80073a4:	230c      	movs	r3, #12
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	2600      	movs	r6, #0
 80073aa:	4630      	mov	r0, r6
 80073ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007484 <_malloc_r+0xfc>
 80073b4:	f000 f868 	bl	8007488 <__malloc_lock>
 80073b8:	f8d8 3000 	ldr.w	r3, [r8]
 80073bc:	461c      	mov	r4, r3
 80073be:	bb5c      	cbnz	r4, 8007418 <_malloc_r+0x90>
 80073c0:	4629      	mov	r1, r5
 80073c2:	4638      	mov	r0, r7
 80073c4:	f7ff ffc0 	bl	8007348 <sbrk_aligned>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	4604      	mov	r4, r0
 80073cc:	d155      	bne.n	800747a <_malloc_r+0xf2>
 80073ce:	f8d8 4000 	ldr.w	r4, [r8]
 80073d2:	4626      	mov	r6, r4
 80073d4:	2e00      	cmp	r6, #0
 80073d6:	d145      	bne.n	8007464 <_malloc_r+0xdc>
 80073d8:	2c00      	cmp	r4, #0
 80073da:	d048      	beq.n	800746e <_malloc_r+0xe6>
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	4631      	mov	r1, r6
 80073e0:	4638      	mov	r0, r7
 80073e2:	eb04 0903 	add.w	r9, r4, r3
 80073e6:	f000 fb5d 	bl	8007aa4 <_sbrk_r>
 80073ea:	4581      	cmp	r9, r0
 80073ec:	d13f      	bne.n	800746e <_malloc_r+0xe6>
 80073ee:	6821      	ldr	r1, [r4, #0]
 80073f0:	1a6d      	subs	r5, r5, r1
 80073f2:	4629      	mov	r1, r5
 80073f4:	4638      	mov	r0, r7
 80073f6:	f7ff ffa7 	bl	8007348 <sbrk_aligned>
 80073fa:	3001      	adds	r0, #1
 80073fc:	d037      	beq.n	800746e <_malloc_r+0xe6>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	442b      	add	r3, r5
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	f8d8 3000 	ldr.w	r3, [r8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d038      	beq.n	800747e <_malloc_r+0xf6>
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	42a2      	cmp	r2, r4
 8007410:	d12b      	bne.n	800746a <_malloc_r+0xe2>
 8007412:	2200      	movs	r2, #0
 8007414:	605a      	str	r2, [r3, #4]
 8007416:	e00f      	b.n	8007438 <_malloc_r+0xb0>
 8007418:	6822      	ldr	r2, [r4, #0]
 800741a:	1b52      	subs	r2, r2, r5
 800741c:	d41f      	bmi.n	800745e <_malloc_r+0xd6>
 800741e:	2a0b      	cmp	r2, #11
 8007420:	d917      	bls.n	8007452 <_malloc_r+0xca>
 8007422:	1961      	adds	r1, r4, r5
 8007424:	42a3      	cmp	r3, r4
 8007426:	6025      	str	r5, [r4, #0]
 8007428:	bf18      	it	ne
 800742a:	6059      	strne	r1, [r3, #4]
 800742c:	6863      	ldr	r3, [r4, #4]
 800742e:	bf08      	it	eq
 8007430:	f8c8 1000 	streq.w	r1, [r8]
 8007434:	5162      	str	r2, [r4, r5]
 8007436:	604b      	str	r3, [r1, #4]
 8007438:	4638      	mov	r0, r7
 800743a:	f104 060b 	add.w	r6, r4, #11
 800743e:	f000 f829 	bl	8007494 <__malloc_unlock>
 8007442:	f026 0607 	bic.w	r6, r6, #7
 8007446:	1d23      	adds	r3, r4, #4
 8007448:	1af2      	subs	r2, r6, r3
 800744a:	d0ae      	beq.n	80073aa <_malloc_r+0x22>
 800744c:	1b9b      	subs	r3, r3, r6
 800744e:	50a3      	str	r3, [r4, r2]
 8007450:	e7ab      	b.n	80073aa <_malloc_r+0x22>
 8007452:	42a3      	cmp	r3, r4
 8007454:	6862      	ldr	r2, [r4, #4]
 8007456:	d1dd      	bne.n	8007414 <_malloc_r+0x8c>
 8007458:	f8c8 2000 	str.w	r2, [r8]
 800745c:	e7ec      	b.n	8007438 <_malloc_r+0xb0>
 800745e:	4623      	mov	r3, r4
 8007460:	6864      	ldr	r4, [r4, #4]
 8007462:	e7ac      	b.n	80073be <_malloc_r+0x36>
 8007464:	4634      	mov	r4, r6
 8007466:	6876      	ldr	r6, [r6, #4]
 8007468:	e7b4      	b.n	80073d4 <_malloc_r+0x4c>
 800746a:	4613      	mov	r3, r2
 800746c:	e7cc      	b.n	8007408 <_malloc_r+0x80>
 800746e:	230c      	movs	r3, #12
 8007470:	603b      	str	r3, [r7, #0]
 8007472:	4638      	mov	r0, r7
 8007474:	f000 f80e 	bl	8007494 <__malloc_unlock>
 8007478:	e797      	b.n	80073aa <_malloc_r+0x22>
 800747a:	6025      	str	r5, [r4, #0]
 800747c:	e7dc      	b.n	8007438 <_malloc_r+0xb0>
 800747e:	605b      	str	r3, [r3, #4]
 8007480:	deff      	udf	#255	; 0xff
 8007482:	bf00      	nop
 8007484:	20000358 	.word	0x20000358

08007488 <__malloc_lock>:
 8007488:	4801      	ldr	r0, [pc, #4]	; (8007490 <__malloc_lock+0x8>)
 800748a:	f7ff bf0f 	b.w	80072ac <__retarget_lock_acquire_recursive>
 800748e:	bf00      	nop
 8007490:	20000354 	.word	0x20000354

08007494 <__malloc_unlock>:
 8007494:	4801      	ldr	r0, [pc, #4]	; (800749c <__malloc_unlock+0x8>)
 8007496:	f7ff bf0a 	b.w	80072ae <__retarget_lock_release_recursive>
 800749a:	bf00      	nop
 800749c:	20000354 	.word	0x20000354

080074a0 <__ssputs_r>:
 80074a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	688e      	ldr	r6, [r1, #8]
 80074a6:	461f      	mov	r7, r3
 80074a8:	42be      	cmp	r6, r7
 80074aa:	680b      	ldr	r3, [r1, #0]
 80074ac:	4682      	mov	sl, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	4690      	mov	r8, r2
 80074b2:	d82c      	bhi.n	800750e <__ssputs_r+0x6e>
 80074b4:	898a      	ldrh	r2, [r1, #12]
 80074b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074ba:	d026      	beq.n	800750a <__ssputs_r+0x6a>
 80074bc:	6965      	ldr	r5, [r4, #20]
 80074be:	6909      	ldr	r1, [r1, #16]
 80074c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074c4:	eba3 0901 	sub.w	r9, r3, r1
 80074c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074cc:	1c7b      	adds	r3, r7, #1
 80074ce:	444b      	add	r3, r9
 80074d0:	106d      	asrs	r5, r5, #1
 80074d2:	429d      	cmp	r5, r3
 80074d4:	bf38      	it	cc
 80074d6:	461d      	movcc	r5, r3
 80074d8:	0553      	lsls	r3, r2, #21
 80074da:	d527      	bpl.n	800752c <__ssputs_r+0x8c>
 80074dc:	4629      	mov	r1, r5
 80074de:	f7ff ff53 	bl	8007388 <_malloc_r>
 80074e2:	4606      	mov	r6, r0
 80074e4:	b360      	cbz	r0, 8007540 <__ssputs_r+0xa0>
 80074e6:	6921      	ldr	r1, [r4, #16]
 80074e8:	464a      	mov	r2, r9
 80074ea:	f000 faeb 	bl	8007ac4 <memcpy>
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	6126      	str	r6, [r4, #16]
 80074fc:	6165      	str	r5, [r4, #20]
 80074fe:	444e      	add	r6, r9
 8007500:	eba5 0509 	sub.w	r5, r5, r9
 8007504:	6026      	str	r6, [r4, #0]
 8007506:	60a5      	str	r5, [r4, #8]
 8007508:	463e      	mov	r6, r7
 800750a:	42be      	cmp	r6, r7
 800750c:	d900      	bls.n	8007510 <__ssputs_r+0x70>
 800750e:	463e      	mov	r6, r7
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	4632      	mov	r2, r6
 8007514:	4641      	mov	r1, r8
 8007516:	f000 faab 	bl	8007a70 <memmove>
 800751a:	68a3      	ldr	r3, [r4, #8]
 800751c:	1b9b      	subs	r3, r3, r6
 800751e:	60a3      	str	r3, [r4, #8]
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	4433      	add	r3, r6
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	2000      	movs	r0, #0
 8007528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752c:	462a      	mov	r2, r5
 800752e:	f000 fad7 	bl	8007ae0 <_realloc_r>
 8007532:	4606      	mov	r6, r0
 8007534:	2800      	cmp	r0, #0
 8007536:	d1e0      	bne.n	80074fa <__ssputs_r+0x5a>
 8007538:	6921      	ldr	r1, [r4, #16]
 800753a:	4650      	mov	r0, sl
 800753c:	f7ff feb8 	bl	80072b0 <_free_r>
 8007540:	230c      	movs	r3, #12
 8007542:	f8ca 3000 	str.w	r3, [sl]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	f04f 30ff 	mov.w	r0, #4294967295
 8007552:	e7e9      	b.n	8007528 <__ssputs_r+0x88>

08007554 <_svfiprintf_r>:
 8007554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007558:	4698      	mov	r8, r3
 800755a:	898b      	ldrh	r3, [r1, #12]
 800755c:	061b      	lsls	r3, r3, #24
 800755e:	b09d      	sub	sp, #116	; 0x74
 8007560:	4607      	mov	r7, r0
 8007562:	460d      	mov	r5, r1
 8007564:	4614      	mov	r4, r2
 8007566:	d50e      	bpl.n	8007586 <_svfiprintf_r+0x32>
 8007568:	690b      	ldr	r3, [r1, #16]
 800756a:	b963      	cbnz	r3, 8007586 <_svfiprintf_r+0x32>
 800756c:	2140      	movs	r1, #64	; 0x40
 800756e:	f7ff ff0b 	bl	8007388 <_malloc_r>
 8007572:	6028      	str	r0, [r5, #0]
 8007574:	6128      	str	r0, [r5, #16]
 8007576:	b920      	cbnz	r0, 8007582 <_svfiprintf_r+0x2e>
 8007578:	230c      	movs	r3, #12
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	e0d0      	b.n	8007724 <_svfiprintf_r+0x1d0>
 8007582:	2340      	movs	r3, #64	; 0x40
 8007584:	616b      	str	r3, [r5, #20]
 8007586:	2300      	movs	r3, #0
 8007588:	9309      	str	r3, [sp, #36]	; 0x24
 800758a:	2320      	movs	r3, #32
 800758c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007590:	f8cd 800c 	str.w	r8, [sp, #12]
 8007594:	2330      	movs	r3, #48	; 0x30
 8007596:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800773c <_svfiprintf_r+0x1e8>
 800759a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800759e:	f04f 0901 	mov.w	r9, #1
 80075a2:	4623      	mov	r3, r4
 80075a4:	469a      	mov	sl, r3
 80075a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075aa:	b10a      	cbz	r2, 80075b0 <_svfiprintf_r+0x5c>
 80075ac:	2a25      	cmp	r2, #37	; 0x25
 80075ae:	d1f9      	bne.n	80075a4 <_svfiprintf_r+0x50>
 80075b0:	ebba 0b04 	subs.w	fp, sl, r4
 80075b4:	d00b      	beq.n	80075ce <_svfiprintf_r+0x7a>
 80075b6:	465b      	mov	r3, fp
 80075b8:	4622      	mov	r2, r4
 80075ba:	4629      	mov	r1, r5
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff ff6f 	bl	80074a0 <__ssputs_r>
 80075c2:	3001      	adds	r0, #1
 80075c4:	f000 80a9 	beq.w	800771a <_svfiprintf_r+0x1c6>
 80075c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ca:	445a      	add	r2, fp
 80075cc:	9209      	str	r2, [sp, #36]	; 0x24
 80075ce:	f89a 3000 	ldrb.w	r3, [sl]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80a1 	beq.w	800771a <_svfiprintf_r+0x1c6>
 80075d8:	2300      	movs	r3, #0
 80075da:	f04f 32ff 	mov.w	r2, #4294967295
 80075de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e2:	f10a 0a01 	add.w	sl, sl, #1
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	9307      	str	r3, [sp, #28]
 80075ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ee:	931a      	str	r3, [sp, #104]	; 0x68
 80075f0:	4654      	mov	r4, sl
 80075f2:	2205      	movs	r2, #5
 80075f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f8:	4850      	ldr	r0, [pc, #320]	; (800773c <_svfiprintf_r+0x1e8>)
 80075fa:	f7f8 fe09 	bl	8000210 <memchr>
 80075fe:	9a04      	ldr	r2, [sp, #16]
 8007600:	b9d8      	cbnz	r0, 800763a <_svfiprintf_r+0xe6>
 8007602:	06d0      	lsls	r0, r2, #27
 8007604:	bf44      	itt	mi
 8007606:	2320      	movmi	r3, #32
 8007608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800760c:	0711      	lsls	r1, r2, #28
 800760e:	bf44      	itt	mi
 8007610:	232b      	movmi	r3, #43	; 0x2b
 8007612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007616:	f89a 3000 	ldrb.w	r3, [sl]
 800761a:	2b2a      	cmp	r3, #42	; 0x2a
 800761c:	d015      	beq.n	800764a <_svfiprintf_r+0xf6>
 800761e:	9a07      	ldr	r2, [sp, #28]
 8007620:	4654      	mov	r4, sl
 8007622:	2000      	movs	r0, #0
 8007624:	f04f 0c0a 	mov.w	ip, #10
 8007628:	4621      	mov	r1, r4
 800762a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800762e:	3b30      	subs	r3, #48	; 0x30
 8007630:	2b09      	cmp	r3, #9
 8007632:	d94d      	bls.n	80076d0 <_svfiprintf_r+0x17c>
 8007634:	b1b0      	cbz	r0, 8007664 <_svfiprintf_r+0x110>
 8007636:	9207      	str	r2, [sp, #28]
 8007638:	e014      	b.n	8007664 <_svfiprintf_r+0x110>
 800763a:	eba0 0308 	sub.w	r3, r0, r8
 800763e:	fa09 f303 	lsl.w	r3, r9, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	9304      	str	r3, [sp, #16]
 8007646:	46a2      	mov	sl, r4
 8007648:	e7d2      	b.n	80075f0 <_svfiprintf_r+0x9c>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	1d19      	adds	r1, r3, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	9103      	str	r1, [sp, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	bfbb      	ittet	lt
 8007656:	425b      	neglt	r3, r3
 8007658:	f042 0202 	orrlt.w	r2, r2, #2
 800765c:	9307      	strge	r3, [sp, #28]
 800765e:	9307      	strlt	r3, [sp, #28]
 8007660:	bfb8      	it	lt
 8007662:	9204      	strlt	r2, [sp, #16]
 8007664:	7823      	ldrb	r3, [r4, #0]
 8007666:	2b2e      	cmp	r3, #46	; 0x2e
 8007668:	d10c      	bne.n	8007684 <_svfiprintf_r+0x130>
 800766a:	7863      	ldrb	r3, [r4, #1]
 800766c:	2b2a      	cmp	r3, #42	; 0x2a
 800766e:	d134      	bne.n	80076da <_svfiprintf_r+0x186>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	9203      	str	r2, [sp, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	bfb8      	it	lt
 800767c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007680:	3402      	adds	r4, #2
 8007682:	9305      	str	r3, [sp, #20]
 8007684:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800774c <_svfiprintf_r+0x1f8>
 8007688:	7821      	ldrb	r1, [r4, #0]
 800768a:	2203      	movs	r2, #3
 800768c:	4650      	mov	r0, sl
 800768e:	f7f8 fdbf 	bl	8000210 <memchr>
 8007692:	b138      	cbz	r0, 80076a4 <_svfiprintf_r+0x150>
 8007694:	9b04      	ldr	r3, [sp, #16]
 8007696:	eba0 000a 	sub.w	r0, r0, sl
 800769a:	2240      	movs	r2, #64	; 0x40
 800769c:	4082      	lsls	r2, r0
 800769e:	4313      	orrs	r3, r2
 80076a0:	3401      	adds	r4, #1
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a8:	4825      	ldr	r0, [pc, #148]	; (8007740 <_svfiprintf_r+0x1ec>)
 80076aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ae:	2206      	movs	r2, #6
 80076b0:	f7f8 fdae 	bl	8000210 <memchr>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d038      	beq.n	800772a <_svfiprintf_r+0x1d6>
 80076b8:	4b22      	ldr	r3, [pc, #136]	; (8007744 <_svfiprintf_r+0x1f0>)
 80076ba:	bb1b      	cbnz	r3, 8007704 <_svfiprintf_r+0x1b0>
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	3307      	adds	r3, #7
 80076c0:	f023 0307 	bic.w	r3, r3, #7
 80076c4:	3308      	adds	r3, #8
 80076c6:	9303      	str	r3, [sp, #12]
 80076c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ca:	4433      	add	r3, r6
 80076cc:	9309      	str	r3, [sp, #36]	; 0x24
 80076ce:	e768      	b.n	80075a2 <_svfiprintf_r+0x4e>
 80076d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80076d4:	460c      	mov	r4, r1
 80076d6:	2001      	movs	r0, #1
 80076d8:	e7a6      	b.n	8007628 <_svfiprintf_r+0xd4>
 80076da:	2300      	movs	r3, #0
 80076dc:	3401      	adds	r4, #1
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	4619      	mov	r1, r3
 80076e2:	f04f 0c0a 	mov.w	ip, #10
 80076e6:	4620      	mov	r0, r4
 80076e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ec:	3a30      	subs	r2, #48	; 0x30
 80076ee:	2a09      	cmp	r2, #9
 80076f0:	d903      	bls.n	80076fa <_svfiprintf_r+0x1a6>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0c6      	beq.n	8007684 <_svfiprintf_r+0x130>
 80076f6:	9105      	str	r1, [sp, #20]
 80076f8:	e7c4      	b.n	8007684 <_svfiprintf_r+0x130>
 80076fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80076fe:	4604      	mov	r4, r0
 8007700:	2301      	movs	r3, #1
 8007702:	e7f0      	b.n	80076e6 <_svfiprintf_r+0x192>
 8007704:	ab03      	add	r3, sp, #12
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	462a      	mov	r2, r5
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <_svfiprintf_r+0x1f4>)
 800770c:	a904      	add	r1, sp, #16
 800770e:	4638      	mov	r0, r7
 8007710:	f3af 8000 	nop.w
 8007714:	1c42      	adds	r2, r0, #1
 8007716:	4606      	mov	r6, r0
 8007718:	d1d6      	bne.n	80076c8 <_svfiprintf_r+0x174>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	065b      	lsls	r3, r3, #25
 800771e:	f53f af2d 	bmi.w	800757c <_svfiprintf_r+0x28>
 8007722:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007724:	b01d      	add	sp, #116	; 0x74
 8007726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772a:	ab03      	add	r3, sp, #12
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	462a      	mov	r2, r5
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <_svfiprintf_r+0x1f4>)
 8007732:	a904      	add	r1, sp, #16
 8007734:	4638      	mov	r0, r7
 8007736:	f000 f879 	bl	800782c <_printf_i>
 800773a:	e7eb      	b.n	8007714 <_svfiprintf_r+0x1c0>
 800773c:	08007d0d 	.word	0x08007d0d
 8007740:	08007d17 	.word	0x08007d17
 8007744:	00000000 	.word	0x00000000
 8007748:	080074a1 	.word	0x080074a1
 800774c:	08007d13 	.word	0x08007d13

08007750 <_printf_common>:
 8007750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	4616      	mov	r6, r2
 8007756:	4699      	mov	r9, r3
 8007758:	688a      	ldr	r2, [r1, #8]
 800775a:	690b      	ldr	r3, [r1, #16]
 800775c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007760:	4293      	cmp	r3, r2
 8007762:	bfb8      	it	lt
 8007764:	4613      	movlt	r3, r2
 8007766:	6033      	str	r3, [r6, #0]
 8007768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800776c:	4607      	mov	r7, r0
 800776e:	460c      	mov	r4, r1
 8007770:	b10a      	cbz	r2, 8007776 <_printf_common+0x26>
 8007772:	3301      	adds	r3, #1
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	0699      	lsls	r1, r3, #26
 800777a:	bf42      	ittt	mi
 800777c:	6833      	ldrmi	r3, [r6, #0]
 800777e:	3302      	addmi	r3, #2
 8007780:	6033      	strmi	r3, [r6, #0]
 8007782:	6825      	ldr	r5, [r4, #0]
 8007784:	f015 0506 	ands.w	r5, r5, #6
 8007788:	d106      	bne.n	8007798 <_printf_common+0x48>
 800778a:	f104 0a19 	add.w	sl, r4, #25
 800778e:	68e3      	ldr	r3, [r4, #12]
 8007790:	6832      	ldr	r2, [r6, #0]
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	42ab      	cmp	r3, r5
 8007796:	dc26      	bgt.n	80077e6 <_printf_common+0x96>
 8007798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800779c:	1e13      	subs	r3, r2, #0
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	bf18      	it	ne
 80077a2:	2301      	movne	r3, #1
 80077a4:	0692      	lsls	r2, r2, #26
 80077a6:	d42b      	bmi.n	8007800 <_printf_common+0xb0>
 80077a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077ac:	4649      	mov	r1, r9
 80077ae:	4638      	mov	r0, r7
 80077b0:	47c0      	blx	r8
 80077b2:	3001      	adds	r0, #1
 80077b4:	d01e      	beq.n	80077f4 <_printf_common+0xa4>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	6922      	ldr	r2, [r4, #16]
 80077ba:	f003 0306 	and.w	r3, r3, #6
 80077be:	2b04      	cmp	r3, #4
 80077c0:	bf02      	ittt	eq
 80077c2:	68e5      	ldreq	r5, [r4, #12]
 80077c4:	6833      	ldreq	r3, [r6, #0]
 80077c6:	1aed      	subeq	r5, r5, r3
 80077c8:	68a3      	ldr	r3, [r4, #8]
 80077ca:	bf0c      	ite	eq
 80077cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d0:	2500      	movne	r5, #0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	bfc4      	itt	gt
 80077d6:	1a9b      	subgt	r3, r3, r2
 80077d8:	18ed      	addgt	r5, r5, r3
 80077da:	2600      	movs	r6, #0
 80077dc:	341a      	adds	r4, #26
 80077de:	42b5      	cmp	r5, r6
 80077e0:	d11a      	bne.n	8007818 <_printf_common+0xc8>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e008      	b.n	80077f8 <_printf_common+0xa8>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4652      	mov	r2, sl
 80077ea:	4649      	mov	r1, r9
 80077ec:	4638      	mov	r0, r7
 80077ee:	47c0      	blx	r8
 80077f0:	3001      	adds	r0, #1
 80077f2:	d103      	bne.n	80077fc <_printf_common+0xac>
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fc:	3501      	adds	r5, #1
 80077fe:	e7c6      	b.n	800778e <_printf_common+0x3e>
 8007800:	18e1      	adds	r1, r4, r3
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	2030      	movs	r0, #48	; 0x30
 8007806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800780a:	4422      	add	r2, r4
 800780c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007814:	3302      	adds	r3, #2
 8007816:	e7c7      	b.n	80077a8 <_printf_common+0x58>
 8007818:	2301      	movs	r3, #1
 800781a:	4622      	mov	r2, r4
 800781c:	4649      	mov	r1, r9
 800781e:	4638      	mov	r0, r7
 8007820:	47c0      	blx	r8
 8007822:	3001      	adds	r0, #1
 8007824:	d0e6      	beq.n	80077f4 <_printf_common+0xa4>
 8007826:	3601      	adds	r6, #1
 8007828:	e7d9      	b.n	80077de <_printf_common+0x8e>
	...

0800782c <_printf_i>:
 800782c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007830:	7e0f      	ldrb	r7, [r1, #24]
 8007832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007834:	2f78      	cmp	r7, #120	; 0x78
 8007836:	4691      	mov	r9, r2
 8007838:	4680      	mov	r8, r0
 800783a:	460c      	mov	r4, r1
 800783c:	469a      	mov	sl, r3
 800783e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007842:	d807      	bhi.n	8007854 <_printf_i+0x28>
 8007844:	2f62      	cmp	r7, #98	; 0x62
 8007846:	d80a      	bhi.n	800785e <_printf_i+0x32>
 8007848:	2f00      	cmp	r7, #0
 800784a:	f000 80d4 	beq.w	80079f6 <_printf_i+0x1ca>
 800784e:	2f58      	cmp	r7, #88	; 0x58
 8007850:	f000 80c0 	beq.w	80079d4 <_printf_i+0x1a8>
 8007854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800785c:	e03a      	b.n	80078d4 <_printf_i+0xa8>
 800785e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007862:	2b15      	cmp	r3, #21
 8007864:	d8f6      	bhi.n	8007854 <_printf_i+0x28>
 8007866:	a101      	add	r1, pc, #4	; (adr r1, 800786c <_printf_i+0x40>)
 8007868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800786c:	080078c5 	.word	0x080078c5
 8007870:	080078d9 	.word	0x080078d9
 8007874:	08007855 	.word	0x08007855
 8007878:	08007855 	.word	0x08007855
 800787c:	08007855 	.word	0x08007855
 8007880:	08007855 	.word	0x08007855
 8007884:	080078d9 	.word	0x080078d9
 8007888:	08007855 	.word	0x08007855
 800788c:	08007855 	.word	0x08007855
 8007890:	08007855 	.word	0x08007855
 8007894:	08007855 	.word	0x08007855
 8007898:	080079dd 	.word	0x080079dd
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007997 	.word	0x08007997
 80078a4:	08007855 	.word	0x08007855
 80078a8:	08007855 	.word	0x08007855
 80078ac:	080079ff 	.word	0x080079ff
 80078b0:	08007855 	.word	0x08007855
 80078b4:	08007905 	.word	0x08007905
 80078b8:	08007855 	.word	0x08007855
 80078bc:	08007855 	.word	0x08007855
 80078c0:	0800799f 	.word	0x0800799f
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	1d1a      	adds	r2, r3, #4
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	602a      	str	r2, [r5, #0]
 80078cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d4:	2301      	movs	r3, #1
 80078d6:	e09f      	b.n	8007a18 <_printf_i+0x1ec>
 80078d8:	6820      	ldr	r0, [r4, #0]
 80078da:	682b      	ldr	r3, [r5, #0]
 80078dc:	0607      	lsls	r7, r0, #24
 80078de:	f103 0104 	add.w	r1, r3, #4
 80078e2:	6029      	str	r1, [r5, #0]
 80078e4:	d501      	bpl.n	80078ea <_printf_i+0xbe>
 80078e6:	681e      	ldr	r6, [r3, #0]
 80078e8:	e003      	b.n	80078f2 <_printf_i+0xc6>
 80078ea:	0646      	lsls	r6, r0, #25
 80078ec:	d5fb      	bpl.n	80078e6 <_printf_i+0xba>
 80078ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	da03      	bge.n	80078fe <_printf_i+0xd2>
 80078f6:	232d      	movs	r3, #45	; 0x2d
 80078f8:	4276      	negs	r6, r6
 80078fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078fe:	485a      	ldr	r0, [pc, #360]	; (8007a68 <_printf_i+0x23c>)
 8007900:	230a      	movs	r3, #10
 8007902:	e012      	b.n	800792a <_printf_i+0xfe>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1d19      	adds	r1, r3, #4
 800790a:	6029      	str	r1, [r5, #0]
 800790c:	0605      	lsls	r5, r0, #24
 800790e:	d501      	bpl.n	8007914 <_printf_i+0xe8>
 8007910:	681e      	ldr	r6, [r3, #0]
 8007912:	e002      	b.n	800791a <_printf_i+0xee>
 8007914:	0641      	lsls	r1, r0, #25
 8007916:	d5fb      	bpl.n	8007910 <_printf_i+0xe4>
 8007918:	881e      	ldrh	r6, [r3, #0]
 800791a:	4853      	ldr	r0, [pc, #332]	; (8007a68 <_printf_i+0x23c>)
 800791c:	2f6f      	cmp	r7, #111	; 0x6f
 800791e:	bf0c      	ite	eq
 8007920:	2308      	moveq	r3, #8
 8007922:	230a      	movne	r3, #10
 8007924:	2100      	movs	r1, #0
 8007926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800792a:	6865      	ldr	r5, [r4, #4]
 800792c:	60a5      	str	r5, [r4, #8]
 800792e:	2d00      	cmp	r5, #0
 8007930:	bfa2      	ittt	ge
 8007932:	6821      	ldrge	r1, [r4, #0]
 8007934:	f021 0104 	bicge.w	r1, r1, #4
 8007938:	6021      	strge	r1, [r4, #0]
 800793a:	b90e      	cbnz	r6, 8007940 <_printf_i+0x114>
 800793c:	2d00      	cmp	r5, #0
 800793e:	d04b      	beq.n	80079d8 <_printf_i+0x1ac>
 8007940:	4615      	mov	r5, r2
 8007942:	fbb6 f1f3 	udiv	r1, r6, r3
 8007946:	fb03 6711 	mls	r7, r3, r1, r6
 800794a:	5dc7      	ldrb	r7, [r0, r7]
 800794c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007950:	4637      	mov	r7, r6
 8007952:	42bb      	cmp	r3, r7
 8007954:	460e      	mov	r6, r1
 8007956:	d9f4      	bls.n	8007942 <_printf_i+0x116>
 8007958:	2b08      	cmp	r3, #8
 800795a:	d10b      	bne.n	8007974 <_printf_i+0x148>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	07de      	lsls	r6, r3, #31
 8007960:	d508      	bpl.n	8007974 <_printf_i+0x148>
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	6861      	ldr	r1, [r4, #4]
 8007966:	4299      	cmp	r1, r3
 8007968:	bfde      	ittt	le
 800796a:	2330      	movle	r3, #48	; 0x30
 800796c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007970:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007974:	1b52      	subs	r2, r2, r5
 8007976:	6122      	str	r2, [r4, #16]
 8007978:	f8cd a000 	str.w	sl, [sp]
 800797c:	464b      	mov	r3, r9
 800797e:	aa03      	add	r2, sp, #12
 8007980:	4621      	mov	r1, r4
 8007982:	4640      	mov	r0, r8
 8007984:	f7ff fee4 	bl	8007750 <_printf_common>
 8007988:	3001      	adds	r0, #1
 800798a:	d14a      	bne.n	8007a22 <_printf_i+0x1f6>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b004      	add	sp, #16
 8007992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	f043 0320 	orr.w	r3, r3, #32
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	4833      	ldr	r0, [pc, #204]	; (8007a6c <_printf_i+0x240>)
 80079a0:	2778      	movs	r7, #120	; 0x78
 80079a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	6829      	ldr	r1, [r5, #0]
 80079aa:	061f      	lsls	r7, r3, #24
 80079ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80079b0:	d402      	bmi.n	80079b8 <_printf_i+0x18c>
 80079b2:	065f      	lsls	r7, r3, #25
 80079b4:	bf48      	it	mi
 80079b6:	b2b6      	uxthmi	r6, r6
 80079b8:	07df      	lsls	r7, r3, #31
 80079ba:	bf48      	it	mi
 80079bc:	f043 0320 	orrmi.w	r3, r3, #32
 80079c0:	6029      	str	r1, [r5, #0]
 80079c2:	bf48      	it	mi
 80079c4:	6023      	strmi	r3, [r4, #0]
 80079c6:	b91e      	cbnz	r6, 80079d0 <_printf_i+0x1a4>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	f023 0320 	bic.w	r3, r3, #32
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	2310      	movs	r3, #16
 80079d2:	e7a7      	b.n	8007924 <_printf_i+0xf8>
 80079d4:	4824      	ldr	r0, [pc, #144]	; (8007a68 <_printf_i+0x23c>)
 80079d6:	e7e4      	b.n	80079a2 <_printf_i+0x176>
 80079d8:	4615      	mov	r5, r2
 80079da:	e7bd      	b.n	8007958 <_printf_i+0x12c>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	6826      	ldr	r6, [r4, #0]
 80079e0:	6961      	ldr	r1, [r4, #20]
 80079e2:	1d18      	adds	r0, r3, #4
 80079e4:	6028      	str	r0, [r5, #0]
 80079e6:	0635      	lsls	r5, r6, #24
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0x1c4>
 80079ec:	6019      	str	r1, [r3, #0]
 80079ee:	e002      	b.n	80079f6 <_printf_i+0x1ca>
 80079f0:	0670      	lsls	r0, r6, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0x1c0>
 80079f4:	8019      	strh	r1, [r3, #0]
 80079f6:	2300      	movs	r3, #0
 80079f8:	6123      	str	r3, [r4, #16]
 80079fa:	4615      	mov	r5, r2
 80079fc:	e7bc      	b.n	8007978 <_printf_i+0x14c>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	602a      	str	r2, [r5, #0]
 8007a04:	681d      	ldr	r5, [r3, #0]
 8007a06:	6862      	ldr	r2, [r4, #4]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f7f8 fc00 	bl	8000210 <memchr>
 8007a10:	b108      	cbz	r0, 8007a16 <_printf_i+0x1ea>
 8007a12:	1b40      	subs	r0, r0, r5
 8007a14:	6060      	str	r0, [r4, #4]
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	6123      	str	r3, [r4, #16]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a20:	e7aa      	b.n	8007978 <_printf_i+0x14c>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	462a      	mov	r2, r5
 8007a26:	4649      	mov	r1, r9
 8007a28:	4640      	mov	r0, r8
 8007a2a:	47d0      	blx	sl
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d0ad      	beq.n	800798c <_printf_i+0x160>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	079b      	lsls	r3, r3, #30
 8007a34:	d413      	bmi.n	8007a5e <_printf_i+0x232>
 8007a36:	68e0      	ldr	r0, [r4, #12]
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	bfb8      	it	lt
 8007a3e:	4618      	movlt	r0, r3
 8007a40:	e7a6      	b.n	8007990 <_printf_i+0x164>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4632      	mov	r2, r6
 8007a46:	4649      	mov	r1, r9
 8007a48:	4640      	mov	r0, r8
 8007a4a:	47d0      	blx	sl
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d09d      	beq.n	800798c <_printf_i+0x160>
 8007a50:	3501      	adds	r5, #1
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	9903      	ldr	r1, [sp, #12]
 8007a56:	1a5b      	subs	r3, r3, r1
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dcf2      	bgt.n	8007a42 <_printf_i+0x216>
 8007a5c:	e7eb      	b.n	8007a36 <_printf_i+0x20a>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	f104 0619 	add.w	r6, r4, #25
 8007a64:	e7f5      	b.n	8007a52 <_printf_i+0x226>
 8007a66:	bf00      	nop
 8007a68:	08007d1e 	.word	0x08007d1e
 8007a6c:	08007d2f 	.word	0x08007d2f

08007a70 <memmove>:
 8007a70:	4288      	cmp	r0, r1
 8007a72:	b510      	push	{r4, lr}
 8007a74:	eb01 0402 	add.w	r4, r1, r2
 8007a78:	d902      	bls.n	8007a80 <memmove+0x10>
 8007a7a:	4284      	cmp	r4, r0
 8007a7c:	4623      	mov	r3, r4
 8007a7e:	d807      	bhi.n	8007a90 <memmove+0x20>
 8007a80:	1e43      	subs	r3, r0, #1
 8007a82:	42a1      	cmp	r1, r4
 8007a84:	d008      	beq.n	8007a98 <memmove+0x28>
 8007a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a8e:	e7f8      	b.n	8007a82 <memmove+0x12>
 8007a90:	4402      	add	r2, r0
 8007a92:	4601      	mov	r1, r0
 8007a94:	428a      	cmp	r2, r1
 8007a96:	d100      	bne.n	8007a9a <memmove+0x2a>
 8007a98:	bd10      	pop	{r4, pc}
 8007a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aa2:	e7f7      	b.n	8007a94 <memmove+0x24>

08007aa4 <_sbrk_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4d06      	ldr	r5, [pc, #24]	; (8007ac0 <_sbrk_r+0x1c>)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	4604      	mov	r4, r0
 8007aac:	4608      	mov	r0, r1
 8007aae:	602b      	str	r3, [r5, #0]
 8007ab0:	f7fb f89a 	bl	8002be8 <_sbrk>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_sbrk_r+0x1a>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_sbrk_r+0x1a>
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	20000350 	.word	0x20000350

08007ac4 <memcpy>:
 8007ac4:	440a      	add	r2, r1
 8007ac6:	4291      	cmp	r1, r2
 8007ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007acc:	d100      	bne.n	8007ad0 <memcpy+0xc>
 8007ace:	4770      	bx	lr
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ada:	4291      	cmp	r1, r2
 8007adc:	d1f9      	bne.n	8007ad2 <memcpy+0xe>
 8007ade:	bd10      	pop	{r4, pc}

08007ae0 <_realloc_r>:
 8007ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	4614      	mov	r4, r2
 8007ae8:	460e      	mov	r6, r1
 8007aea:	b921      	cbnz	r1, 8007af6 <_realloc_r+0x16>
 8007aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af0:	4611      	mov	r1, r2
 8007af2:	f7ff bc49 	b.w	8007388 <_malloc_r>
 8007af6:	b92a      	cbnz	r2, 8007b04 <_realloc_r+0x24>
 8007af8:	f7ff fbda 	bl	80072b0 <_free_r>
 8007afc:	4625      	mov	r5, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b04:	f000 f81b 	bl	8007b3e <_malloc_usable_size_r>
 8007b08:	4284      	cmp	r4, r0
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	d802      	bhi.n	8007b14 <_realloc_r+0x34>
 8007b0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b12:	d812      	bhi.n	8007b3a <_realloc_r+0x5a>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4640      	mov	r0, r8
 8007b18:	f7ff fc36 	bl	8007388 <_malloc_r>
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d0ed      	beq.n	8007afe <_realloc_r+0x1e>
 8007b22:	42bc      	cmp	r4, r7
 8007b24:	4622      	mov	r2, r4
 8007b26:	4631      	mov	r1, r6
 8007b28:	bf28      	it	cs
 8007b2a:	463a      	movcs	r2, r7
 8007b2c:	f7ff ffca 	bl	8007ac4 <memcpy>
 8007b30:	4631      	mov	r1, r6
 8007b32:	4640      	mov	r0, r8
 8007b34:	f7ff fbbc 	bl	80072b0 <_free_r>
 8007b38:	e7e1      	b.n	8007afe <_realloc_r+0x1e>
 8007b3a:	4635      	mov	r5, r6
 8007b3c:	e7df      	b.n	8007afe <_realloc_r+0x1e>

08007b3e <_malloc_usable_size_r>:
 8007b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b42:	1f18      	subs	r0, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bfbc      	itt	lt
 8007b48:	580b      	ldrlt	r3, [r1, r0]
 8007b4a:	18c0      	addlt	r0, r0, r3
 8007b4c:	4770      	bx	lr
	...

08007b50 <_init>:
 8007b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b52:	bf00      	nop
 8007b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b56:	bc08      	pop	{r3}
 8007b58:	469e      	mov	lr, r3
 8007b5a:	4770      	bx	lr

08007b5c <_fini>:
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	bf00      	nop
 8007b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b62:	bc08      	pop	{r3}
 8007b64:	469e      	mov	lr, r3
 8007b66:	4770      	bx	lr
